/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:20:30 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wju");
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'f';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('^');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CustomMapDeserializer");
      int int0 = 9;
      jSONScanner0.scanFloat(';');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 24);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'v';
      charArray0[2] = '6';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanDouble('v');
      jSONReaderScanner0.scanFloat('3');
      jSONReaderScanner0.next();
      jSONReaderScanner0.close();
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjv\"mpn:>", 200);
      jSONReaderScanner0.scanDouble('<');
      assertEquals(200, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[13];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0as");
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0as", 4127);
      jSONReaderScanner1.sp = (-2);
      jSONReaderScanner1.scanDouble('i');
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 61);
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.getCalendar();
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 61);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g<psE[jQRgs0VR,U");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(44, 1903);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(charArray1);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(0, (-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -14
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-1235);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1235));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1235), jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.setToken((-1235));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1235), jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1235), jSONScanner0.getFeatures());
      
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1235), jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1235), jSONScanner0.getFeatures());
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1235));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 24;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(1367);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(9, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(68);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lp^#{.uJ\"lE0 ", (-440));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-440), jSONReaderScanner0.getFeatures());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '\'');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-440), jSONReaderScanner0.getFeatures());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("3");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjU\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(2135);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '[';
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      int int0 = Calendar.SHORT_FORMAT;
      assertEquals(1, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("ZEbP(b}*", 1);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isEnabled((-3235));
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[15];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xSkM");
      assertFalse(boolean0);
      
      charArray0[4] = '%';
      JSONScanner jSONScanner0 = new JSONScanner("xSkM", 2072);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(2072, jSONScanner0.getFeatures());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. S
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neW", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1367);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j7fMbO", 12);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(92);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('7', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'W';
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {']', 'W'}, charArray0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      jSONScanner0.setLocale(locale0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(1367);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(9, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.subString(24, 37);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string0);
      
      char char0 = jSONReaderScanner0.charAt(51);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create instance error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(866);
      assertNotNull(symbolTable0);
      
      int int0 = Calendar.JUNE;
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(date0);
      assertArrayEquals(new char[] {'V', 'h', 'P', 'i'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray1);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("9jRvd&AS1(,,4", (-2789));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals((-2789), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals((-2789), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'Q', '\"', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals((-2789), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjU\"mpn:>", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      
      String string0 = jSONReaderScanner0.subString(2320, 100);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNotNull(string0);
      
      char char0 = jSONReaderScanner0.charAt(23);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E", 40);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      
      boolean boolean1 = jSONReaderScanner0.isEnabled((-2493), 40);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(40, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('}');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNull(bigDecimal0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2537, 2537);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2537, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2537, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      String string1 = jSONReaderScanner0.scanString('L');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2537, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(string1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", (-1367));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1367), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1367), jSONScanner0.getFeatures());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONScanner0.getCalendar();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1367), jSONScanner0.getFeatures());
      assertNull(calendar0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1367));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("zH");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(intArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("zH");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('z', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      Date date0 = jSONScanner0.scanDate(']');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(date0);
      
      UUID uUID0 = jSONScanner0.scanUUID('l');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(uUID0);
      
      boolean boolean1 = jSONScanner1.isBlankInput();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('z', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[15];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SM");
      assertFalse(boolean0);
      
      charArray0[4] = '%';
      JSONScanner jSONScanner0 = new JSONScanner("SM", 2079);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2079, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(8);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2079, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      
      boolean boolean1 = jSONScanner0.charArrayCompare(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(2079, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('s');
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Date date0 = jSONScanner0.scanDate('v');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : pos 0, json : , info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long1 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertTrue(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(1239, 61);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2154), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = (-638);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-638), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.DATE");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'h';
      int int0 = jSONReaderScanner0.scanInt('h');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(3037, (-2262));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.DATE", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      assertFalse(boolean0);
      
      long long1 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertFalse(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(" 6=.O1,U", 3891);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONScanner0.scanBoolean('Y');
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken(2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean3 = jSONScanner0.isEOF();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals('=', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("..", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('.', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!2+jgy+K");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(17, 44);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("..", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(25, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-254), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(date0);
      assertArrayEquals(new char[] {'V', 'h', 'P', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(17373, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = '}';
      charArray0[2] = '^';
      charArray0[3] = 's';
      charArray0[4] = 'b';
      charArray0[5] = '4';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 24);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(24, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'e', '}', '^', 's', 'b', '4'}, charArray0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(24, jSONScanner0.getFeatures());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'e', '}', '^', 's', 'b', '4'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3531);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int0 = jSONScanner0.scanType("I pL#)T8)S`Mz;Y_");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1350), 50900);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'h'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not support type ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : not support type ", string0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(3489);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, 'H');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(enum0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '!';
      JSONScanner jSONScanner0 = new JSONScanner("$VALUES");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {' ', '!', '\u0000'}, charArray0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      char char0 = jSONScanner0.next();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('V', char0);
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char char1 = jSONScanner0.getCurrent();
      assertTrue(char1 == char0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('V', char1);
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '.';
      charArray0[1] = '.';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("63K[}X", '.');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('.');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(63L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      
      char char0 = jSONReaderScanner0.charAt(13);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken(123);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(13);
      assertNotNull(symbolTable0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 26, 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = 106;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("epw+f<JX^3bC{heau_O", 106);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = 70;
      SymbolTable symbolTable0 = new SymbolTable(70);
      assertNotNull(symbolTable0);
      
      long long0 = jSONReaderScanner0.scanLong('y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(string0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-2524));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2524), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-2524), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-2524), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(22, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      int int0 = 68;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G*p<jq\"Di=", 83);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('G', jSONReaderScanner0.getCurrent());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '$';
      charArray0[2] = '&';
      charArray0[3] = 'U';
      charArray0[4] = '6';
      charArray0[5] = '9';
      charArray0[6] = 'N';
      charArray0[7] = 'G';
      charArray0[8] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 83, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A MH|=z+Z[+8-2");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Dn*Zu+i*", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('D', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('D', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner1.scanDouble('\u0088');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('D', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$G");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.indexOf('*', 2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      charArray0[8] = '*';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2454));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uzl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      assertNotNull(inputStreamReader0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Collection<String> collection0 = new ArrayList<String>(0);
      assertNotNull(collection0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(4195293, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('W');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((short)54, bigDecimal0.shortValue());
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = ')';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
      assertArrayEquals(new char[] {'6', ')'}, charArray0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1790);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1790, bigDecimal1.shortValue());
      assertEquals((byte) (-2), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('9');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(uUID0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigDecimal bigDecimal2 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(bigDecimal2);
      assertArrayEquals(new char[] {'6', ')'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[2] = 'Q';
      charArray0[3] = '+';
      charArray0[4] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14, 14);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(14, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {' ', '\u0000', 'Q', '+', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(14, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {' ', '\u0000', 'Q', '+', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new err");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner1.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {' ', '\u0000', 'Q', '+', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">F3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">F3");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-1436));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1436), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1436), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner(")ijB%h.n^=E");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(')', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'E';
      charArray0[2] = '[';
      UUID uUID0 = jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(uUID0);
      assertArrayEquals(new char[] {'6', 'E', '['}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner1 = new JSONScanner("undefined");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken((-46));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(23, jSONScanner1.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">KT|ULj.", (-46));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-46), jSONReaderScanner0.getFeatures());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONScanner1.stringVal();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("undefined", string0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(23, jSONScanner1.token());
      assertNotNull(string0);
      
      JSONScanner jSONScanner2 = new JSONScanner("undefined");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('u', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertNotNull(jSONScanner2);
      
      int int0 = jSONScanner2.scanType("undefined");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals((-2), int0);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('u', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      
      String string1 = jSONScanner0.stringVal();
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("", string1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('}');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(bigDecimal0);
      
      jSONScanner0.scanIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(23, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.scanString();
      jSONScanner0.numberString();
      jSONScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scan null error");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("Q:|/k%Qh");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('/');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, (SymbolTable) null, 'c');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(enum0);
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("Q", string0);
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(string0);
      
      int int0 = jSONScanner0.token();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(18, int0);
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int1 = jSONScanner0.matchStat();
      assertTrue(int1 == int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[4] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(87, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(charArray1);
      
      int int0 = (-438);
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(87);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(uUID0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjU\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('p');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b<CaH7.R*P");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("xSkM", (-688));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals((-688), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(192);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("xSkM", string0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-688), jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mHn:>", 47);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('k', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(50902);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("kwjv", string0);
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(string0);
      
      int int0 = jSONScanner0.token();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(18, int0);
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \"pos 4, json : kwjv\"mHn:>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('e', char0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Locale locale0 = new Locale("new", "Set");
      assertEquals("SET", locale0.getCountry());
      assertEquals("new", locale0.getLanguage());
      assertEquals("new", locale0.getISO3Language());
      assertEquals("new_SET", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null", (-1));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("SET", locale0.getCountry());
      assertEquals("new", locale0.getLanguage());
      assertEquals("new", locale0.getISO3Language());
      assertEquals("new_SET", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^H;(B[gX}7%<)$(");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2456));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2456), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S;a");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(24, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2456), (-2456));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2456
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I pL#)T8)S`Mz;Y_", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertNotNull(uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertNotNull(charsetDecoder0);
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.reset();
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, charsetDecoder0);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertNotNull(charsetDecoder1);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('J', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('[');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(uUID0);
      
      byte[] byteArray1 = jSONReaderScanner0.bytesValue();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      jSONReaderScanner1.close();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(byteArray0, byteArray1);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, charsetDecoder0);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('J', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((int) (byte)0, 73);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean0);
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "\\BGTgg?N$cvoKR'}";
      JSONScanner jSONScanner0 = new JSONScanner("BGTgg?N$cvoKR'}");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      Date date0 = jSONScanner0.scanDate('-');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(date0);
      
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('G', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      long long0 = jSONScanner0.scanLong('C');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('G', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'-', 'C', 'C'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('C');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'-', 'C', 'C'}, charArray0);
      
      int int0 = 3054;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 3054, 66);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 58);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(1367);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.subString(58, 37);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string0);
      
      char char0 = jSONReaderScanner0.charAt(59);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(VWib-[", (-638));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-638), jSONReaderScanner0.getFeatures());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals((-638), jSONReaderScanner0.getFeatures());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-638), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9#A3aRun $#NSCia5K");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = jSONScanner0.decimalValue(false);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(9.0, number0);
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNotNull(number0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 1, json : 9#A3aRun $#NSCia5K", string0);
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNotNull(string0);
      
      char char0 = 'C';
      char char1 = 'l';
      UUID uUID0 = jSONScanner0.scanUUID('l');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(uUID0);
      
      SymbolTable symbolTable0 = new SymbolTable(40);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("error", 2900, (-1), (-509));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5%0*tr#>I#c");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = jSONScanner0.decimalValue(true);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((byte)5, number0.byteValue());
      assertEquals((short)5, number0.shortValue());
      assertNotNull(number0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 1, json : 5%0*tr#>I#c", string0);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(string0);
      
      UUID uUID0 = jSONScanner0.scanUUID('C');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(uUID0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      int int0 = 40;
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = 'C';
      charArray1[2] = 'C';
      SymbolTable symbolTable0 = new SymbolTable(117);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("pos 1, json : 5%0*tr#>I#c", 83, 65, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(91);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(15, 91);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNotNull(charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 123, 108);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(108, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string0 = JSONLexerBase.readString(charArray0, 15);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertEquals((short)54, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 937);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(charArray1);
      
      int int1 = 12;
      long long0 = jSONReaderScanner0.scanFieldLong(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 12, 937);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(937, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      jSONReaderScanner1.locale = locale1;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(937, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", jSONReaderScanner1.locale.getISO3Language());
      assertEquals("fr", jSONReaderScanner1.locale.toString());
      assertEquals("", jSONReaderScanner1.locale.getCountry());
      assertEquals("fr", jSONReaderScanner1.locale.getLanguage());
      assertEquals("", jSONReaderScanner1.locale.getVariant());
      assertEquals("", jSONReaderScanner1.locale.getISO3Country());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[3];
      char char0 = '`';
      charArray0[0] = '`';
      charArray0[1] = 'i';
      char char1 = '6';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'`', 'i', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char2 = jSONReaderScanner0.next();
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('a', char2);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 24);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('`', jSONReaderScanner1.getCurrent());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'`', 'i', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("8aW`;TwFf]Xe");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('8', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('8', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'`', 'i', '\u0000'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(84);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable('i');
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("W", string0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('`', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNotNull(string0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "8aW`;TwFf]Xe";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('a', char0);
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8aW`;TwFf]Xe");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner("8aW`;TwFf]Xe");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('8', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('8', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("8aW`;TwFf]Xe");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('8', jSONReaderScanner2.getCurrent());
      assertNotNull(jSONReaderScanner2);
      
      jSONScanner0.nextToken(17);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("8aW`;TwFf]Xe", 0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals('8', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'`', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8aW`;TwFf]Xe");
      assertFalse(boolean0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('A');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9", (-1320));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1320), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1320), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      charArray0[1] = 'G';
      charArray0[2] = '$';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      assertFalse(boolean0);
      
      charArray0[3] = 'j';
      charArray0[4] = 'A';
      charArray0[5] = 'y';
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1320), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'K', 'G', '$', 'j', 'A', 'y'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('^');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5%0*tr#>I#c");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('5', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('R');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('5', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertNull(bigDecimal0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('5', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'V', 'V'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('%', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      
      BigDecimal bigDecimal1 = new BigDecimal((int) 'V');
      assertEquals((short)86, bigDecimal1.shortValue());
      assertEquals((byte)86, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      char char0 = jSONScanner0.next();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('0', char0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal2 = jSONScanner0.decimalValue();
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((short)5, bigDecimal2.shortValue());
      assertEquals((byte)5, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      jSONScanner0.scanIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '*';
      charArray0[2] = '*';
      JSONScanner jSONScanner0 = new JSONScanner("4@^K}`JOoj#Q1W", 3156);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(floatArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q5Ro1Y7#]H1", 3156);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3156, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3156, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanDouble('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3156, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable((byte)103);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3156, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(string0);
      
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4@^K}`JOoj#Q1W");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3156, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(uUID0);
      
      SymbolTable symbolTable1 = new SymbolTable((byte)103);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(4, int0);
      assertEquals('@', jSONScanner0.getCurrent());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('s');
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(',', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(',', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(16, jSONScanner0.token());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=CeyD~3+ZL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean2);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('C', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("xD3jbuUTc]HKOZm.", 454);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(454, jSONScanner1.getFeatures());
      assertEquals('x', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertNotNull(jSONScanner1);
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6!_S");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'a';
      charArray0[2] = 'F';
      charArray0[3] = 'G';
      charArray0[4] = 'o';
      charArray0[5] = 'j';
      charArray0[6] = 'v';
      charArray0[7] = '7';
      Class<InputStream> class0 = InputStream.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(collection0);
      assertArrayEquals(new char[] {'#', 'a', 'F', 'G', 'o', 'j', 'v', '7'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjU\"mpn:>", 106);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(106, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'V', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray1);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(calendar0);
      
      Date date0 = jSONReaderScanner0.scanDate(';');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zH");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zH", (-1367));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1367), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('z', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1367), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('z', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 11);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("n@,Kr:;KHd");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("n@,Kr:;KHd");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertNotNull(jSONReaderScanner2);
      
      JSONScanner jSONScanner1 = new JSONScanner("scan new error");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken((int) 'F');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("java.util.concurrent.atomic.DoubleAdder", 0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('j', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long0);
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(20, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double1 = jSONReaderScanner2.scanFieldDouble(charArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("_CbHA*Hv2'*u#'N=<u", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals('_', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.getFeatures());
      assertNotNull(jSONScanner2);
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - _, info : pos 0, json : _CbHA*Hv2'*u#'N=<u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "*S?&uP";
      JSONScanner jSONScanner0 = new JSONScanner("*S?&uP");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string1 = jSONScanner0.stringVal();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", string1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string1);
      
      char char0 = 'f';
      jSONScanner0.np = 320;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '5';
      charArray0[2] = '+';
      charArray0[4] = '+';
      charArray0[6] = '+';
      charArray0[7] = '\'';
      charArray0[8] = '5';
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '5', '+', '\u0000', '+', '\u0000', '+', '\'', '5'}, charArray0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jSONReaderScanner0.locale = locale0;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", jSONReaderScanner0.locale.getCountry());
      assertEquals("zh", jSONReaderScanner0.locale.getLanguage());
      assertEquals("zho", jSONReaderScanner0.locale.getISO3Language());
      assertEquals("CHN", jSONReaderScanner0.locale.getISO3Country());
      assertEquals("", jSONReaderScanner0.locale.getVariant());
      assertEquals("zh_CN", jSONReaderScanner0.locale.toString());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '5', '+', '\u0000', '+', '\u0000', '+', '\'', '5'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '5', '+', '\u0000', '+', '\u0000', '+', '\'', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "S;a";
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^H;(B[gXJ7%<)$(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2456));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2456), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2456), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '<';
      charArray2[1] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray2, 34);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('<', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      
      jSONReaderScanner0.nextTokenWithChar('<');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      
      JSONScanner jSONScanner1 = new JSONScanner("P!%Wjhr3L\t|J_&%");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('P', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      Date date0 = jSONScanner0.scanDate('J');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2456), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(date0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwju");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.scanInt('W');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.config(feature0, false);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.config(feature0, false);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = '5';
      charArray0[5] = 'I';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(39, 110);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('I');
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = 1233;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1508), 1233);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[15];
      char char0 = '-';
      charArray0[6] = '-';
      charArray0[2] = '-';
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('-');
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = (-2587);
      jSONScanner0.nextToken((-2587));
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        MockURI.URI("true", "true", "true", "null");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: true://truetrue#null
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("otnl");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'W';
      jSONScanner0.features = 69;
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      charArray0[2] = 'Q';
      charArray0[3] = '/';
      charArray0[4] = 'M';
      charArray0[5] = 'r';
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'4', 'W', 'Q', '/', 'M', 'r'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjU\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[1];
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('V');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigDecimal0);
      
      charArray0[0] = 'V';
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFloat('V');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder0);
      
      Charset charset0 = charsetDecoder0.charset();
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, charsetDecoder0);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjU\"mpn:>", 106);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.token = 95;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(95, jSONReaderScanner0.token());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(106, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 24;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nAtew", 24);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(24, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1367);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9v|>'w]e2P\"Tfv>n");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("9v|>'w]e2P\"Tfv>n");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('9', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      int int0 = jSONReaderScanner0.indexOf('m', 142);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("$hWEi8");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((short)54, bigDecimal0.shortValue());
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(0, 937);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1`qJ:#s]3%O.(");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(41);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("3");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.pos = 0;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      UUID uUID0 = jSONScanner0.scanUUID('T');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(uUID0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertTrue(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      Date date0 = jSONReaderScanner0.scanDate('[');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(date0);
      
      double double1 = jSONReaderScanner0.scanDouble('T');
      assertEquals(double1, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double1, 0.01);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      long long2 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long2);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.scanString('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(string0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', 'h', 'P', 'i'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(46, 110);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(charArray1);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray2);
      
      String string1 = jSONReaderScanner0.subString(42, 46);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNotNull(string1);
      
      Date date1 = jSONReaderScanner0.scanDate('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(date1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("3", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("3", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float0 = jSONScanner0.scanFloat('(');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(3.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner1.nextToken((-1));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(2, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("FA{mqZV", 33);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals(33, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[15];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = '*';
      charArray0[2] = '*';
      JSONScanner jSONScanner0 = new JSONScanner("4@^K}`JOoj#Q1W", 3156);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals('4', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertEquals('4', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(floatArray0);
      
      jSONScanner0.nextToken(3156);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3156, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3", 76);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(76, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(76, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanDouble(']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(76, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("i^", (-458));
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-458), jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("u'closed", (-344));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-344), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken(55309);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(18, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-344), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      SymbolTable symbolTable1 = new SymbolTable(55309);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      jSONScanner0.nextToken(55309);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-458), jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I pL#)T8)S`Mz;Y_", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e");
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      charArray0[1] = '^';
      charArray0[3] = '}';
      charArray0[4] = '}';
      jSONReaderScanner0.token = 0;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.stringDefaultValue = "I pL#)T8)S`Mz;Y_";
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("I pL#)T8)S`Mz;Y_", jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("I pL#)T8)S`Mz;Y_", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      charArray1[0] = '^';
      SymbolTable symbolTable0 = new SymbolTable('^');
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("I pL#)T8)S`Mz;Y_", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('I', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("I pL#)T8)S`Mz;Y_");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('I', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner1.scanSymbol(symbolTable0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("I", string0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(string0);
      
      Date date0 = jSONScanner0.scanDate('7');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(date0);
      
      long long1 = jSONScanner1.scanFieldLong(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(long1 == long0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertArrayEquals(new char[] {'<', '^', '\u0000', '}', '}'}, charArray0);
      
      jSONScanner1.nextIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('#', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("I pL#)T8)S`Mz;Y_", jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - #, info : pos 4, json : I pL#)T8)S`Mz;Y_
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 47);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      JSONScanner jSONScanner1 = new JSONScanner("not close json text, token : ");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean1);
      assertEquals(18, jSONScanner0.token());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean2 = jSONScanner0.isEOF();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean2);
      assertEquals(18, jSONScanner0.token());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mHn:>", 47);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = 50902;
      jSONScanner0.nextToken(50902);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('w', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("kwjv", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotNull(string0);
      
      int int1 = jSONScanner0.token();
      assertFalse(int1 == int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(18, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(47, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 61);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(1809, 61);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", 61);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(61, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('&');
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("U]`Mf~0$~X'W1gc\"cHt", 44);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('U', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken((-1652));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(']', jSONScanner1.getCurrent());
      
      jSONReaderScanner0.putChar(';');
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('a');
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(909);
      assertNotNull(symbolTable0);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(61, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = jSONScanner0.scanBoolean('V');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean2);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(61, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      Date date0 = jSONScanner1.scanDate('C');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(']', jSONScanner1.getCurrent());
      assertNull(date0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('Y');
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1944));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]:M]R&@gKxX `kr");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("]:M]R&@gKxX `kr", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(1905);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(15, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string0 = "WRITE_MAP_NULL_FEATURES";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.close();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNotNull(jSONReaderScanner2);
      
      JSONScanner jSONScanner1 = new JSONScanner("WRITE_MAP_NULL_FEATURES");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('W', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false", 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(2725);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '9');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2454));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|84");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner1 = new JSONScanner("S;a", (-2454));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('S', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2454), jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable((byte)103);
      assertNotNull(symbolTable0);
      
      boolean boolean2 = jSONScanner1.matchField(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertTrue(boolean2);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2454), jSONScanner1.getFeatures());
      assertEquals(';', jSONScanner1.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      System.setCurrentTimeMillis(673);
      Date date0 = jSONScanner1.scanFieldDate(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2454), jSONScanner1.getFeatures());
      assertEquals(';', jSONScanner1.getCurrent());
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I pL#)T8)S`Mz;Y_", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("^", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("I pL#)T8)S`Mz;Y_", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('I', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-M4yu8zksg_p");
      assertFalse(boolean0);
      
      float float0 = jSONScanner0.scanFloat('z');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertNotNull(uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder0);
      
      Charset charset0 = uTF8Decoder0.charset();
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch();
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertSame(charsetDecoder1, charsetDecoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "scan null error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      String string1 = "Set";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set", 12);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(21, jSONReaderScanner1.token());
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1239;
      String string0 = "float overflow : ";
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ", 61);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(61, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((short)54, bigDecimal0.shortValue());
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(0, 294);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('2');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(collection0);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[6];
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertEquals((short)54, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1790);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-2), bigDecimal1.byteValue());
      assertEquals((short)1790, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      double double0 = jSONReaderScanner0.scanDouble('R');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      float float0 = jSONReaderScanner0.scanFloat('B');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('u', char0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(string0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("zH");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("zH");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('z', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONScanner0.scanDate(']');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner1.info();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("pos 0, json : ", string0);
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(4127);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner1.np = (-3499);
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0as", 4127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(4127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4127, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int0);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertNotNull(uTF8Decoder0);
      
      int int1 = jSONReaderScanner0.scanInt('i');
      assertTrue(int1 == int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertEquals(4127, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = "xSkM";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = jSONReaderScanner0.tokenName();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(string1);
      
      int int0 = jSONReaderScanner0.scanInt('O');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b<CaH7.R*P");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("xSkM", (-688));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-688), jSONScanner0.getFeatures());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      int int1 = 7;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2454));
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[7];
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^H;(B[gXJ7%<)$(", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      assertEquals(0.0, double0, 0.01);
      
      SymbolTable symbolTable0 = new SymbolTable(673);
      assertNotNull(symbolTable0);
      
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^H;(B[gX}7%<)$(");
      assertFalse(boolean0);
      
      String string0 = "float overflow : ";
      int int0 = 96;
      JSONScanner jSONScanner0 = new JSONScanner("^H;(B[gX}7%<)$(", 96);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner(":8", 41);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(':', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(41, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken((-2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(41, jSONScanner1.getFeatures());
      assertEquals(17, jSONScanner1.token());
      assertEquals('8', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      int int1 = 909;
      SymbolTable symbolTable0 = new SymbolTable(956);
      assertNotNull(symbolTable0);
      
      int int2 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int2);
      assertEquals(96, jSONScanner0.getFeatures());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertEquals((short)54, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(0, 294);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 455, 60);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      Date date0 = jSONScanner0.scanDate('r');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(date0);
      
      long long1 = jSONScanner0.scanFieldLong(charArray0);
      assertTrue(long1 == long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long1);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      
      char char0 = jSONScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      
      jSONScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals('\u0000', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lp^#{.uJ\"lE0 ", (-440));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-440), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-440), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNull(collection0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-82), charArray0, 9, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A MH|=[+Z[+8-2");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = "qDnjBZ|+i*Z";
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.subString(3071, 3071);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      jSONReaderScanner0.locale = null;
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(46);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(56320);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      SymbolTable symbolTable2 = new SymbolTable(91);
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertNotNull(symbolTable2);
      
      String string0 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertFalse(symbolTable0.equals((Object)symbolTable2));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(symbolTable0, symbolTable1);
      assertNotSame(symbolTable0, symbolTable2);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "~:*$CulMyGF=";
      int int0 = (-268);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~:*$CulMyGF=", (-268));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-268), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Feature feature0 = Feature.SortFeidFastMatch;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '3';
      charArray0[2] = '*';
      charArray0[3] = 'Y';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-268), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'2', '3', '*', 'Y'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-268), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      String string1 = jSONReaderScanner0.scanString('l');
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-268), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string1);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-268));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not support type ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : not support type ", string0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = jSONScanner0.scanString('g');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((short)54, bigDecimal0.shortValue());
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.locale = null;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1`qJ:#s]3%O.(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONReaderScanner0.scanString('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((int) '6');
      assertEquals((byte)54, bigDecimal0.byteValue());
      assertEquals((short)54, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = ')';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
      assertArrayEquals(new char[] {'6', ')'}, charArray0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1790);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-2), bigDecimal1.byteValue());
      assertEquals((short)1790, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertNotNull(uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder1.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder1);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder1.onMalformedInput(codingErrorAction0);
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertFalse(charsetDecoder0.equals((Object)uTF8Decoder0));
      assertSame(uTF8Decoder1, charsetDecoder0);
      assertNotSame(uTF8Decoder1, uTF8Decoder0);
      assertNotSame(charsetDecoder0, uTF8Decoder0);
      assertSame(charsetDecoder0, uTF8Decoder1);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder1.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertNotNull(charsetDecoder0);
      
      Charset charset0 = uTF8Decoder0.charset();
      assertFalse(uTF8Decoder0.equals((Object)uTF8Decoder1));
      assertFalse(uTF8Decoder0.equals((Object)charsetDecoder0));
      assertNotSame(uTF8Decoder0, uTF8Decoder1);
      assertNotSame(uTF8Decoder0, charsetDecoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertFalse(uTF8Decoder0.equals((Object)uTF8Decoder1));
      assertFalse(uTF8Decoder0.equals((Object)charsetDecoder0));
      assertFalse(charsetDecoder1.equals((Object)charsetDecoder0));
      assertFalse(charsetDecoder1.equals((Object)uTF8Decoder1));
      assertNotSame(uTF8Decoder0, uTF8Decoder1);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertNotSame(uTF8Decoder0, charsetDecoder0);
      assertNotSame(charsetDecoder1, charsetDecoder0);
      assertNotSame(charsetDecoder1, uTF8Decoder1);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertNotNull(charsetDecoder1);
      
      CharsetDecoder charsetDecoder2 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertFalse(uTF8Decoder0.equals((Object)uTF8Decoder1));
      assertFalse(uTF8Decoder0.equals((Object)charsetDecoder0));
      assertFalse(charsetDecoder2.equals((Object)uTF8Decoder1));
      assertFalse(charsetDecoder2.equals((Object)charsetDecoder0));
      assertNotSame(uTF8Decoder0, uTF8Decoder1);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(uTF8Decoder0, charsetDecoder2);
      assertNotSame(uTF8Decoder0, charsetDecoder0);
      assertNotSame(charsetDecoder2, uTF8Decoder1);
      assertSame(charsetDecoder2, uTF8Decoder0);
      assertSame(charsetDecoder2, charsetDecoder1);
      assertNotSame(charsetDecoder2, charsetDecoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder2.averageCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder2.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder2.replacement());
      assertEquals(1.0F, charsetDecoder2.maxCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder2);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("syntax error");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Date date0 = jSONReaderScanner0.scanDate('%');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : new", string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(4127);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0as");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanDate('w');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(date0);
      
      String string1 = jSONScanner0.info();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 3, json : new", string1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONScanner jSONScanner0 = new JSONScanner(" 6=.O1,U", 3891);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json :  6=.O1,U", string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONScanner0.nextToken(13);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[7];
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = jSONReaderScanner0.info();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(string1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SymbolTable symbolTable0 = new SymbolTable(110);
      assertNotNull(symbolTable0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable1 = new SymbolTable(41);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable1, 'B');
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(symbolTable1, symbolTable0);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(enum0);
      
      boolean boolean3 = jSONScanner0.isBlankInput();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3891, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("UseISO8601DateFormat", (-2));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONReaderScanner0.subString(10, 127);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Feature feature0 = Feature.SortFeidFastMatch;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      
      Date date0 = jSONReaderScanner0.scanDate('o');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(date0);
      
      BigDecimal bigDecimal1 = jSONScanner0.scanDecimal('^');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertNull(bigDecimal1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 127);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONReaderScanner1.stringDefaultValue();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = jSONScanner0.scanInt('^');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("y\"g6mTT+-|KCT", (-146));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-146), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : y\"g6mTT+-|KCT", string0);
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-146), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(3891);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-146), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '3';
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertNotNull(uTF8Decoder0);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertNotNull(charsetDecoder0);
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-146), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'6', '3'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char char0 = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      char[] charArray0 = jSONReaderScanner1.sub_chars(0, 4);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      jSONScanner0.setToken((-2147483636));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-2147483636), jSONScanner0.token());
      
      jSONScanner0.nextToken(108);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      jSONReaderScanner0.nextIdent();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(8, jSONReaderScanner0.token());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      jSONReaderScanner1.scanStringArray(arrayList0, 'T');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">F3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">F3");
      assertFalse(boolean0);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      assertNotNull(set0);
      
      jSONReaderScanner0.scanStringArray(set0, 'b');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(set0.isEmpty());
      assertEquals(597, set0.size());
      
      char char0 = '7';
      Date date0 = jSONReaderScanner0.scanDate('7');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(date0);
      
      JSONScanner jSONScanner0 = new JSONScanner(">F3");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('>', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-710), 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "null";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(15, 91);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(4);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-3013));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      charArray0[1] = '9';
      char char0 = '|';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-34);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-48), (byte)31, (byte)82, (byte)40, (byte) (-34)}, byteArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 8 - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^H;(B[gXJ7%<)$(");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2454));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^H;(B[gXJ7%<)$(", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|84");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONScanner jSONScanner1 = new JSONScanner("true");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('t', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 37);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean3 = jSONScanner1.scanBoolean('x');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertTrue(boolean3);
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('t', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '*';
      charArray0[2] = '*';
      charArray0[4] = 'J';
      charArray0[4] = '*';
      charArray0[5] = '`';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 10);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Unknown", 'J');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(74, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(74, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      jSONScanner0.features = (int) '*';
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(10);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbol(symbolTable0, '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("\u0000", string1);
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(42, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(4, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '*';
      charArray0[2] = '*';
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xSkM");
      assertFalse(boolean0);
      
      charArray0[3] = 'h';
      charArray0[4] = '%';
      charArray0[5] = 'I';
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xSkM");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFloat('|');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(6, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(codingErrorAction0);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertNotNull(charsetDecoder0);
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      float float1 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(6, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      
      String string0 = codingErrorAction0.toString();
      assertEquals("REPLACE", string0);
      assertEquals("REPLACE", codingErrorAction0.toString());
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("REPLACE");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lp^#{.uJ\"lE0 ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = jSONReaderScanner0.sub_chars(93, 93);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNotNull(charArray1);
      
      JSONScanner jSONScanner0 = new JSONScanner("u'closed", (-344));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals((-344), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(55309);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals((-344), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable1 = new SymbolTable(55309);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((int) '#');
      assertEquals((byte)35, bigDecimal0.byteValue());
      assertEquals((short)35, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.locale = null;
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char char0 = 'B';
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(uUID0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.locale = null;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'y';
      charArray0[2] = 'Z';
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'A', 'y', 'Z'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(bigDecimal0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = jSONReaderScanner0.scanString('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(string0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', 'h', 'P', 'h'}, charArray0);
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " - ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner0 = new JSONScanner("A3");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.sp = (int) (byte) (-92);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', 'h', 'P', 'h'}, charArray0);
      
      jSONScanner0.nextToken(7);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (byte) (-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("3", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : 3", string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("pos 0, json : 3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("MC{TQ.", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('M', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("=CeGyD~3+ZL");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('=', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('=', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S;a", (-2454));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals((-2454), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S;a", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken((int) (byte)103);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(24, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S;a");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner1 = new JSONScanner("tr6e");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('t', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(1211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char char0 = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " - ");
      assertFalse(boolean0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(7, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal.char");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = (-2683);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.locale = null;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[0];
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(78, "QE", 78, 78, 1641, (-1), 120, 2781, 24, 46, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 78
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JSONScanner jSONScanner0 = new JSONScanner(":");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean3 = jSONScanner0.isRef();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean3);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(120);
      assertNotNull(symbolTable0);
      
      Class<Object> class0 = Object.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, '6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNull(enum0);
      
      boolean boolean4 = jSONScanner0.isBlankInput();
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean4);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = jSONScanner0.pos();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals("", string0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(':', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")ijB%h.n^=E");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(2095);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(11, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[6];
      charArray0[2] = '4';
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean2 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(11, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '4', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "tZq&`BR'wkI0+";
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(11, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.scanInt('W');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int1 = (-2262);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjv\"mpn:>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '>');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner(".", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('.', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(string0);
      
      jSONScanner1.putChar('z');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('.', jSONScanner1.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = '5';
      charArray0[5] = '5';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.eofPos = 86;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(39, 84);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      jSONReaderScanner0.nextToken();
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken(10);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(86, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.next();
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals('\u001A', char0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(86, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '5', '5', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 86, 86);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xe4[$a^;");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('x', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.scanLong('@');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('x', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xe4[$a^;", 3678080);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(intArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(560);
      assertNotNull(symbolTable0);
      
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1), 4);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      char char0 = '4';
      Date date0 = jSONScanner0.scanDate('4');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('x', jSONScanner0.getCurrent());
      assertNull(date0);
      
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertFalse(long1 == long0);
      assertEquals((-922337203685477580L), long1);
      
      jSONScanner0.nextIdent();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      jSONReaderScanner0.np = (-2995);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.matchStat = (int) ')';
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.matchStat());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1790);
      assertEquals((byte) (-2), bigDecimal0.byteValue());
      assertEquals((short)1790, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('9');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(uUID0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('u', char0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.putChar('|');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string1 = jSONReaderScanner0.stringDefaultValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed0strig : ");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONScanner0.matchField(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(':', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("sx");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      char char1 = jSONReaderScanner0.next();
      assertFalse(char1 == char0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('l', char1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9#A3aRun $#NSCia5K");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('9', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Number number0 = jSONScanner0.integerValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(9, number0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(number0);
      
      char char0 = 's';
      SymbolTable symbolTable0 = new SymbolTable(13);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9#A3aRun $#NSCia5K");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('9', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("[L$&M]g3OJ.h=", 271);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(271, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : [L$&M]g3OJ.h=", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(271, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONScanner0.nextToken(13);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(14, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(271, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('L', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")ijB%h.n^=E");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.isRef();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('$', char0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(14, jSONScanner0.token());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(271, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kwjv\"mpn:>", 539);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(539, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x4");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner1.nextToken(1049);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("kwjv\"mpn:>", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals('k', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertNotNull(jSONScanner2);
      
      jSONScanner2.scanString();
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(4, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('m', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      
      jSONScanner0.scanNumber();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(63);
      assertNotNull(symbolTable0);
      
      int int0 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(539, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable1 = new SymbolTable(678);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      SymbolTable symbolTable2 = new SymbolTable(13);
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      assertNotNull(symbolTable2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("/");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('/', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '*';
      charArray0[2] = '*';
      String string0 = "xSkM";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xSkM");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(bigDecimal0);
      
      double double0 = jSONReaderScanner0.scanDouble('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('r', char0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 60);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner("xSkM", 60);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(60, jSONScanner0.getFeatures());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertNotNull(jSONScanner1);
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertTrue(jSONScanner1.isEOF());
      assertNull(bigInteger0);
      
      jSONScanner1.nextIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertTrue(jSONScanner1.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. S
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("3", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('3', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : 3", string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('3', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONScanner0.nextToken(11);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean2 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONReaderScanner1.info();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", string1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNotNull(string1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(3L, long0);
      assertEquals(2, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("|MO?6YQ#");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals('|', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      char char0 = ';';
      int int0 = 18;
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 'Y');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '-';
      charArray0[2] = 'a';
      charArray0[3] = '6';
      charArray0[4] = 'Y';
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date0);
      assertArrayEquals(new char[] {'Y', '-', 'a', '6', 'Y'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(15, 91);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(charArray1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Feature feature0 = Feature.SortFeidFastMatch;
      JSONScanner jSONScanner0 = new JSONScanner("null", 91);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(91, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.config(feature0, false);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(91, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'Y', '-', 'a', '6', 'Y'}, charArray0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(collection0);
      
      Date date1 = jSONReaderScanner0.scanDate('Y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date1);
      
      JSONScanner jSONScanner1 = new JSONScanner("]cLn96)-EF");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(']', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(uUID0);
      assertArrayEquals(new char[] {'Y', '-', 'a', '6', 'Y'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'Y', '-', 'a', '6', 'Y'}, charArray0);
      
      jSONScanner1.nextToken(15);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(15, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('c', jSONScanner1.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 16384);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = jSONReaderScanner1.stringDefaultValue();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(charArray1, charArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(89, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(jSONReaderScanner1);
      
      char[] charArray0 = jSONReaderScanner1.sub_chars(0, 4);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("null");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      jSONScanner1.setToken((-2147483636));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2147483636), jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      
      jSONScanner1.nextToken(108);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(8, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      
      int int0 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertNotNull(uTF8Decoder0);
      
      int int1 = jSONReaderScanner1.scanInt('$');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(int1 == int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int1);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      assertFalse(uTF8Decoder1.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder1);
      
      Date date0 = jSONReaderScanner1.scanDate('$');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNull(date0);
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 'F');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(70, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = '-';
      charArray0[2] = 'a';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      MockDate mockDate0 = new MockDate('-', 'a', 'a', 91, 'F');
      assertEquals("Mon May 11 20:10:00 GMT 1953", mockDate0.toString());
      assertNotNull(mockDate0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(15, 91);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(70, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(charArray1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(70, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      Feature feature0 = Feature.SortFeidFastMatch;
      JSONScanner jSONScanner0 = new JSONScanner("null", 91);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(91, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.config(feature0, false);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(91, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = jSONReaderScanner0.scanInt('F');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(70, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("3", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "MC{TQ.";
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("MC{TQ.", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('M', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(jSONReaderScanner1);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("3");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNotNull(jSONScanner1);
      
      float[][] floatArray0 = jSONScanner1.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("3", 2152);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(2152, jSONReaderScanner2.getFeatures());
      assertEquals('3', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNotNull(jSONReaderScanner2);
      
      String string1 = jSONScanner0.tokenName();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("Unknown", string1);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string1);
      
      JSONScanner jSONScanner2 = new JSONScanner("B");
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('B', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertNotNull(jSONScanner2);
      
      jSONScanner2.scanNumber();
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(2, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      
      boolean boolean1 = jSONScanner1.matchField2(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(boolean1);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal(':');
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigDecimal0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BigInteger bigInteger1 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(bigInteger1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = jSONScanner1.scanString('q');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(string2);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner1.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "null";
      char char0 = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("faYPs-", 'T');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " - ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[a@urw0>\"\"xV4^");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("BrowserSecure", 138);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(138, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('B', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner1.nextToken((-642));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("BrowserSecure");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONReaderScanner0.isRef();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Date date0 = jSONReaderScanner1.scanDate('\u001A');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(date0);
      
      char char0 = jSONReaderScanner1.charAt(138);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', char0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      
      int int0 = 12;
      jSONReaderScanner0.nextToken(12);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(2041);
      assertNotNull(symbolTable0);
      
      UUID uUID0 = jSONScanner1.scanFieldUUID(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 62);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'H';
      charArray0[2] = '-';
      charArray0[3] = '*';
      charArray0[4] = 't';
      charArray0[5] = '=';
      jSONReaderScanner0.sbuf = charArray0;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(charArray1, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray1);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 3442);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = 107;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 570);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('u');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(3L, long0);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner1.isRef();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = "hvj:d:q\"gU}pS|";
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("hvj:d:q\"gU}pS|", 107);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(107, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('h', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertNotNull(jSONReaderScanner2);
      
      long long1 = jSONReaderScanner2.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(long1 == long0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0L, long1);
      assertEquals(107, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('h', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertFalse(boolean1);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = 'm';
      Date date0 = jSONReaderScanner0.scanDate('m');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(date0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("false", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('f', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.getFeatures());
      assertNotNull(jSONScanner2);
      
      JSONScanner jSONScanner3 = new JSONScanner("null", 0);
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner3.matchStat);
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.getFeatures());
      assertNull(jSONScanner3.stringDefaultValue());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.token());
      assertEquals('n', jSONScanner3.getCurrent());
      assertNotNull(jSONScanner3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      char char0 = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'x';
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'R', 'n', 'x'}, charArray0);
      
      jSONScanner2.nextIdent();
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(7, jSONScanner2.token());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner1.scanFieldDecimal(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'R', 'n', 'x'}, charArray0);
      
      double double0 = jSONReaderScanner1.scanDouble('n');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      
      String string0 = jSONScanner2.info();
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals("pos 5, json : false", string0);
      assertEquals(7, jSONScanner2.token());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.getFeatures());
      assertNotNull(string0);
      
      SymbolTable symbolTable0 = new SymbolTable(14);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner3.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oV{>%d#qKRH", 1816);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.stringVal();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", string0);
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(string0);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean1 = JSONScanner.checkDate('$', '\'', '~', '$', '$', '+', 1816, 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[2] = '$';
      charArray0[2] = '+';
      jSONScanner0.matchStat = (int) '$';
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(36, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = '~';
      float float0 = jSONScanner0.scanFloat('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      charArray0[8] = '$';
      jSONScanner0.nextToken(108);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '+', '\u0000', '\u0000', '+', '+', '~', '$'}, charArray0);
      
      int int1 = jSONReaderScanner0.intValue();
      assertTrue(int1 == int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '+', '\u0000', '\u0000', '+', '+', '~', '$'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '+', '\u0000', '\u0000', '+', '+', '~', '$'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 83);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '+', '\u0000', '\u0000', '+', '+', '~', '$'}, charArray0);
      
      PipedReader pipedReader0 = new PipedReader(1468);
      assertNotNull(pipedReader0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(1816, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      Feature feature0 = Feature.DisableASM;
      boolean boolean2 = jSONReaderScanner1.isEnabled(feature0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '+', '\u0000', '\u0000', '+', '+', '~', '$'}, charArray0);
      
      jSONReaderScanner1.features = 121;
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(121, jSONReaderScanner1.getFeatures());
      
      try { 
        pipedReader0.mark((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '*';
      charArray0[2] = '*';
      charArray0[4] = '*';
      charArray0[5] = '`';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-53);
      byteArray0[1] = (byte)120;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte)91;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('}');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(bigDecimal0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("kwjv\"mpn:>", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertEquals(47, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner0.info();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("pos 0, json : kwjv\"mpn:>", string0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float0 = jSONScanner0.scanFloat('(');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(47);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pos 0, json : kwjv\"mpn:>", 47);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('-');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      
      String string1 = jSONReaderScanner0.info();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertNotNull(string1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      
      long long1 = jSONScanner0.longValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(long1 == long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner2 = new JSONScanner("not close json text, token : ");
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertNotNull(jSONScanner2);
      
      BigDecimal bigDecimal0 = jSONScanner2.scanFieldDecimal(charArray0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDouble('(');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("3");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : 3", string0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(string0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("pos 0, json : 3");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('p', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNotNull(jSONScanner1);
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals('p', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONScanner1.isEnabled(58, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean0);
      assertEquals('p', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      PipedReader pipedReader0 = new PipedReader(102);
      assertNotNull(pipedReader0);
      
      long long1 = jSONScanner0.longValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(long1 == long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long1);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Feature feature0 = Feature.DisableASM;
      boolean boolean1 = jSONReaderScanner0.isEnabled(feature0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      try { 
        pipedReader0.mark(15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[21];
      char char0 = '\'';
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[4] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\'');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = "vFCv$#^|53T-m\\ES\"";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vFCv$#^|53T-mES\"");
      assertFalse(boolean0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertNotNull(uTF8Decoder0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vFCv$#^|53T-mES\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = jSONReaderScanner0.scanDouble('`');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("vFCv$#^|53T-mES\"", '%');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(37, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(jSONReaderScanner1);
      
      String string1 = jSONReaderScanner1.stringVal();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", string1);
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(37, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotNull(string1);
      
      jSONReaderScanner0.skipWhitespace();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner0 = new JSONScanner("vFCv$#^|53T-mES\"", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('v', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('K');
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('v', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanString();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(4, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      String string2 = jSONScanner0.info();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 17, json : vFCv$#^|53T-mES\"", string2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(4, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("null", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertNotNull(jSONScanner2);
      
      jSONScanner1.nextIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(8, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner2.matchField(charArray0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertTrue(boolean0);
      assertTrue(jSONScanner2.isEOF());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(8, jSONScanner2.token());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner3 = new JSONScanner("[4*wJ<v_L", (-2308));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.isEOF());
      assertEquals('[', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals((-2308), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertNotNull(jSONScanner3);
      
      JSONScanner jSONScanner4 = new JSONScanner(charArray0, 0, 107);
      assertFalse(jSONScanner4.equals((Object)jSONScanner3));
      assertFalse(jSONScanner4.equals((Object)jSONScanner0));
      assertFalse(jSONScanner4.equals((Object)jSONScanner1));
      assertFalse(jSONScanner4.equals((Object)jSONScanner2));
      assertEquals(0, jSONScanner4.matchStat);
      assertEquals('\u001A', jSONScanner4.getCurrent());
      assertEquals(0, jSONScanner4.matchStat());
      assertEquals(0, jSONScanner4.pos());
      assertNull(jSONScanner4.stringDefaultValue());
      assertEquals(0, jSONScanner4.token());
      assertEquals(107, jSONScanner4.getFeatures());
      assertTrue(jSONScanner4.isEOF());
      assertNotNull(jSONScanner4);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.scanString('D');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(string0);
      
      System.setCurrentTimeMillis(0);
      int int0 = jSONReaderScanner0.indexOf('v', 0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      Date date1 = jSONScanner0.scanDate('j');
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner4));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner4);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(date1);
      
      BigDecimal bigDecimal0 = jSONScanner4.scanDecimal('D');
      assertFalse(jSONScanner4.equals((Object)jSONScanner3));
      assertFalse(jSONScanner4.equals((Object)jSONScanner0));
      assertFalse(jSONScanner4.equals((Object)jSONScanner1));
      assertFalse(jSONScanner4.equals((Object)jSONScanner2));
      assertEquals((-1), jSONScanner4.matchStat);
      assertNotSame(jSONScanner4, jSONScanner3);
      assertNotSame(jSONScanner4, jSONScanner0);
      assertNotSame(jSONScanner4, jSONScanner1);
      assertNotSame(jSONScanner4, jSONScanner2);
      assertEquals('\u001A', jSONScanner4.getCurrent());
      assertEquals((-1), jSONScanner4.matchStat());
      assertEquals(0, jSONScanner4.pos());
      assertNull(jSONScanner4.stringDefaultValue());
      assertEquals(0, jSONScanner4.token());
      assertEquals(107, jSONScanner4.getFeatures());
      assertTrue(jSONScanner4.isEOF());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertFalse(int1 == int0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '+';
      charArray0[2] = '@';
      charArray0[3] = 'n';
      charArray0[4] = 'S';
      charArray0[5] = 'e';
      charArray0[6] = 'V';
      charArray0[7] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3314, (-770));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-770), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'[', '+', '@', 'n', 'S', 'e', 'V', '('}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(92, 829);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-770), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'[', '+', '@', 'n', 'S', 'e', 'V', '('}, charArray0);
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertTrue(boolean0);
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals((-770), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'[', '+', '@', 'n', 'S', 'e', 'V', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 4141);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(4141, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "true");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("true", 48);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(48, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(6, jSONScanner1.token());
      assertEquals(48, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(4141, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONScanner1.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(6, jSONScanner1.token());
      assertEquals(48, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xSkM", 4141);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4141, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('R');
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4141, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4141, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(75343, int0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(6, jSONScanner1.token());
      assertEquals(48, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      
      String string0 = "can not cast to JSONObject.";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("can not cast to JSONObject.", 68);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(68, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean2 = jSONReaderScanner1.matchField(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(boolean2);
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(68, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('\\');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4141, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      
      int int1 = 999999999;
      SymbolTable symbolTable0 = new SymbolTable(999999999);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("3", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("WRITE_MAP_NULL_FEATURES");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('W', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('W', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 78);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertNotNull(jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("Type: ");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('T', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotNull(jSONScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertNotNull(jSONScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('3', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner1.nextIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(':', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      
      jSONScanner0.nextToken(4);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner1.putChar('w');
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(':', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Enum<?> enum0 = jSONScanner2.scanEnum(class0, (SymbolTable) null, 't');
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertNull(enum0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONScanner2.scanSymbol((SymbolTable) null);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(20, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner0.token();
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(2, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner0.putChar('{');
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("033wu<nxY=0", 83);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(83, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("=", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals('=', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken(47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(47, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tnl");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      long long0 = jSONScanner1.longValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(47, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      JSONScanner jSONScanner2 = new JSONScanner("=");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('=', jSONScanner2.getCurrent());
      assertNotNull(jSONScanner2);
      
      int int0 = jSONScanner2.intValue();
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, int0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('=', jSONScanner2.getCurrent());
      
      BigDecimal bigDecimal0 = jSONScanner2.scanFieldDecimal(charArray0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('=', jSONScanner2.getCurrent());
      assertEquals((-1), jSONScanner2.matchStat());
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('t');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long1 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertTrue(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : =
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1364);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1364);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, ')');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(enum0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TvGW");
      assertFalse(boolean0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertNotNull(uTF8Decoder0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertTrue(long1 == long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("vFCv$#^|53T-mES\"", (-1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.skipWhitespace();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner0 = new JSONScanner("-66B ");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      
      boolean boolean3 = jSONReaderScanner0.isBlankInput();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(boolean3);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '(';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[2] = '(';
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uxSk2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("_", 93);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      
      jSONScanner0.nextIdent();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(floatArray0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(intArray0);
      
      float float1 = jSONScanner0.scanFloat('*');
      assertEquals(float1, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(115);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(93, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FA{mqZV", 26376);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(26376, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 110);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('(', jSONReaderScanner1.getCurrent());
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("kwjv\"mpn:>", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('k', jSONScanner1.getCurrent());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner0.info();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("pos 0, json : kwjv\"mpn:>", string0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken((-1108));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0as");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONScanner jSONScanner0 = new JSONScanner("equals");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("=", (-1792));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1792), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('=', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      jSONScanner0.nextToken(5);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('q', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("y");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.info();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      long long0 = jSONScanner1.longValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1792), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('=', jSONScanner1.getCurrent());
      
      JSONScanner jSONScanner2 = new JSONScanner("2\"2|iV0@eDfJGS[!!");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals('2', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertNotNull(jSONScanner2);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanFieldDecimal(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1792), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('=', jSONScanner1.getCurrent());
      assertNull(bigDecimal0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      double double0 = jSONReaderScanner0.scanDouble('t');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long1 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertTrue(long1 == long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0L, long1);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('y', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jSONScanner2.locale = locale0;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", jSONScanner2.locale.toString());
      assertEquals("zho", jSONScanner2.locale.getISO3Language());
      assertEquals("zh", jSONScanner2.locale.getLanguage());
      assertEquals("CN", jSONScanner2.locale.getCountry());
      assertEquals("", jSONScanner2.locale.getVariant());
      assertEquals("CHN", jSONScanner2.locale.getISO3Country());
      assertEquals('2', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextTokenWithColon(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 2, info : pos 0, json : 2\"2|iV0@eDfJGS[!!
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("pos 0, json : new", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(9, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0as");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      String string1 = jSONScanner0.tokenName();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("EOF", string1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match + - \u001A, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("kwjv\"mpn:>", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(47, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner0.info();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals("pos 0, json : kwjv\"mpn:>", string0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float0 = jSONScanner0.scanFloat('(');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals('k', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(47);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals('w', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pos 0, json : kwjv\"mpn:>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string1 = jSONReaderScanner0.info();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertNotNull(string1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      
      long long1 = jSONScanner0.longValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(long1 == long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals('w', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner2 = new JSONScanner("not close json text, token : ");
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertNotNull(jSONScanner2);
      
      UUID uUID0 = jSONScanner2.scanUUID('(');
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals((-1), jSONScanner2.matchStat());
      assertNull(uUID0);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("kwjv\"mpn:>", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(47, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken(0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(47, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONScanner1.putChar('?');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(47, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      boolean boolean1 = JSONLexerBase.isWhitespace('n');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner1.scanType("TODO : ");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(47, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 123, 14);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(14, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(14);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner2 = new JSONScanner("}|x`VX~Cg?");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.token());
      assertEquals('}', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertNotNull(jSONScanner2);
      
      jSONScanner2.putChar('n');
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.token());
      assertEquals('}', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      
      int int1 = jSONReaderScanner0.getFeatures();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, int1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = JSONLexerBase.isWhitespace('&');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = jSONReaderScanner1.scanDouble('');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(jSONScanner1);
      
      String string0 = jSONScanner1.info();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("pos 0, json : ", string0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      
      String string1 = jSONReaderScanner0.info();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNotNull(string1);
      
      jSONScanner1.nextToken(22);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      
      jSONScanner1.putChar('v');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(20, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      
      float float0 = jSONScanner0.scanFloat('`');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(22);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(9, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("pos 0, json : ", (-2356));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2356), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("033wu<nxY=0", 83);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(83, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char char0 = '[';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("033wu<nxY=0");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("033wu<nxY=0");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals('0', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals('0', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '[', '['}, charArray0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(83, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '[', '['}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null or new", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("033wu<nxY=0", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('0', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertNotNull(jSONScanner2);
      
      jSONScanner1.nextToken(0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(2, jSONScanner1.token());
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      
      byte[] byteArray0 = jSONScanner2.bytesValue();
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('0', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = jSONScanner1.scanBoolean('[');
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(boolean1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(2, jSONScanner1.token());
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('*');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kwjv\"mpn:>", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("kwjv\"mpn:>", 47);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('k', jSONScanner1.getCurrent());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken(0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(1, jSONScanner1.token());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(1, jSONScanner1.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(string0);
      
      jSONScanner1.putChar('w');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(1, jSONScanner1.token());
      
      char char0 = 'e';
      Class<String> class0 = String.class;
      Enum<?> enum0 = jSONScanner1.scanEnum(class0, (SymbolTable) null, 'e');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('w', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(1, jSONScanner1.token());
      assertNull(enum0);
      
      jSONScanner1.scanIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(47, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\"', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      
      Class<Object> class1 = Object.class;
      Enum<?> enum1 = jSONScanner0.scanEnum(class1, (SymbolTable) null, ';');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertNull(enum1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8aW`;TwFf]Xe", 62);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'G';
      charArray0[3] = '*';
      Date date0 = jSONReaderScanner0.scanDate('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertNull(date0);
      
      JSONScanner jSONScanner0 = new JSONScanner("7,Y", (-1624));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1624), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('7', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('6');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1624), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('7', jSONScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("8aW`;TwFf]Xe");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('8', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotNull(jSONScanner1);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('i');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(3, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('Y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(16, jSONScanner0.token());
      assertEquals(3, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1624), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((short)7, bigDecimal0.shortValue());
      assertEquals((byte)7, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      int int0 = 4041;
      SymbolTable symbolTable0 = new SymbolTable(4041);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
