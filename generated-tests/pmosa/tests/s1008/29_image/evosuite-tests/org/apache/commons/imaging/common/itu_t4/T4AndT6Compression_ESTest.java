/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:09:11 GMT 2018
 */

package org.apache.commons.imaging.common.itu_t4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.itu_t4.T4AndT6Compression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class T4AndT6Compression_ESTest extends T4AndT6Compression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, (-1200), (-1200));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = T4AndT6Compression.compressT4_1D(byteArray0, (-1200), (-2258), false);
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = T4AndT6Compression.decompressT4_1D(byteArray0, 453, (byte)0, true);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = 0;
      int int1 = (-127);
      T4AndT6Compression.decompressT4_2D(byteArray0, 0, (-127), false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      T4AndT6Compression.decompressT4_1D(byteArray1, (byte)0, (byte)0, false);
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, (byte)0, (-127), false);
      byte[] byteArray3 = T4AndT6Compression.compressModifiedHuffman(byteArray2, (-127), (byte)0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray3, (-127), (byte)0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      T4AndT6Compression.compressT4_1D(byteArray0, (byte)0, 0, false);
      try { 
        T4AndT6Compression.compressT4_1D(byteArray0, 2581, 64, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)18, (-1702), false);
      T4AndT6Compression.decompressModifiedHuffman(byteArray1, (-1702), (-1702));
      T4AndT6Compression.compressT6(byteArray1, (byte)18, (-1702));
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 12;
      try { 
        T4AndT6Compression.compressModifiedHuffman(byteArray0, 12, 12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-98);
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte) (-31), (byte) (-85), true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte) (-31);
      byte[] byteArray3 = T4AndT6Compression.decompressModifiedHuffman(byteArray2, (-351), (byte) (-31));
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byte byte1 = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = T4AndT6Compression.decompressT6(byteArray0, (byte)100, (byte) (-79));
      int int0 = (-1);
      boolean boolean0 = true;
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, 255, (-1), true);
      byte[] byteArray3 = T4AndT6Compression.compressT4_2D(byteArray2, (byte)0, (-1), true, (-4260));
      boolean boolean1 = true;
      T4AndT6Compression.compressT4_1D(byteArray3, 0, (byte) (-79), true);
      T4AndT6Compression.decompressModifiedHuffman(byteArray2, 1861, (-1));
      T4AndT6Compression.decompressT4_2D(byteArray1, (byte)0, 0, true);
      int int1 = 256;
      // Undeclared exception!
      try { 
        T4AndT6Compression.compressT4_2D(byteArray2, (byte) (-79), 1861, true, 256);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, 0, 0, false);
      T4AndT6Compression.decompressT6(byteArray1, 0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)92;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte) (-71), (byte)92, false);
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte) (-71), (byte)0, false);
      T4AndT6Compression.compressT6(byteArray0, 0, 0);
      try { 
        T4AndT6Compression.compressT4_2D(byteArray1, (byte)92, (byte)92, false, (byte) (-71));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, 21, (-33));
      byte[] byteArray2 = T4AndT6Compression.compressT6(byteArray1, 21, (-2));
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)1}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = 0;
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 0, 0);
      int int1 = 13;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 0, 13, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)8, (byte)0, (byte) (-128)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)2;
      int int0 = 256;
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)2, 256, true, (byte)2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 1, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (byte)50, (byte)50, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-128);
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      int int0 = 896;
      boolean boolean0 = false;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)0, 896, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        T4AndT6Compression.compressT6(byteArray0, 40, 4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = T4AndT6Compression.decompressT6(byteArray0, (byte)0, 1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byte[] byteArray1 = T4AndT6Compression.decompressT6(byteArray0, 811, (byte) (-24));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)106;
      T4AndT6Compression.decompressT4_2D(byteArray2, (byte)106, 0, false);
      T4AndT6Compression.compressT4_2D(byteArray0, (byte)106, (-2), false, 762);
      T4AndT6Compression.decompressT6(byteArray1, 0, 63);
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte)106, 0, false);
      T4AndT6Compression.decompressT6(byteArray2, 0, (byte)0);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte) (-24), 811, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, 3, (-217), true);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (-217), 3, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)19;
      int int0 = (-1);
      int int1 = 16;
      boolean boolean0 = true;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (-1), 16, true);
      byte[] byteArray2 = T4AndT6Compression.compressT4_1D(byteArray1, (byte)84, 0, true);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray2, 0, 34, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, 1, 1, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)28, (byte)0, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-93);
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)59;
      T4AndT6Compression.decompressT6(byteArray0, 1578, (byte) (-93));
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte)2, 198);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = 1;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, 1, 1, false);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 1, 1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      T4AndT6Compression.decompressT4_1D(byteArray0, (-1), (-1), false);
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, 2, (-1), false, 28);
      try { 
        T4AndT6Compression.decompressT6(byteArray1, 2, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unknown T.6 control code 000000000001
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-128);
      byteArray0[0] = (byte) (-128);
      byte byte1 = (byte)20;
      byteArray0[1] = (byte)20;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 6, 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)41;
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 9, (byte)41);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, 1, 1, true, 1);
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, 1, 1, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-114), (byte)0, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte)0, (byte)0);
      T4AndT6Compression.compressModifiedHuffman(byteArray1, (-868), (-868));
      // Undeclared exception!
      T4AndT6Compression.compressT4_2D(byteArray1, (byte)0, 1841, true, (byte)0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)63;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)64;
      try { 
        T4AndT6Compression.decompressT6(byteArray0, (byte)116, 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unknown T.6 control code 0000000000001
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-89);
      byte byte1 = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)15;
      byte byte2 = (byte)96;
      byteArray0[7] = (byte)96;
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray0, (byte)39, (byte)97);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (-1), (-1), false);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (-1), 2, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 27, 0);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, 0, 8, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 0, 0);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 0, 13, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-48);
      byteArray0[4] = (byte)40;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)21;
      try { 
        T4AndT6Compression.compressT6(byteArray0, 26, (byte)21);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = T4AndT6Compression.compressT6(byteArray0, 5762, 0);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (-257), 27, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-36);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray0, (byte) (-36), 22, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecoverable row length error in image row 0
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-23);
      int int0 = 256;
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)2, 256, true, (byte)2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)0;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)0, (byte)98, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-8);
      byte byte0 = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      try { 
        T4AndT6Compression.compressT4_2D(byteArray0, (byte)4, (byte)102, true, (byte)32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-23);
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte) (-23), 2, false);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 2, 2, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      int int0 = 19;
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)0, 19, false);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, 19, 19, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-113);
      byte byte0 = (byte)8;
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)8, 15, false, (byte) (-8));
      try { 
        T4AndT6Compression.decompressModifiedHuffman(byteArray1, 2746, 2746);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (byte)0, 19, false);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, 3187, 3187, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      byte[] byteArray1 = T4AndT6Compression.compressT4_1D(byteArray0, (-1), 5, false);
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, 63, 1, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)6;
      T4AndT6Compression.decompressT4_1D(byteArray0, (byte)0, (-3727), false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)119;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)6;
      try { 
        T4AndT6Compression.compressT6(byteArray1, (byte)6, (byte)60);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-23);
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)8, (byte)2, false, (-3));
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, (byte)8, (byte)2, false);
      // Undeclared exception!
      try { 
        T4AndT6Compression.compressT6(byteArray2, (byte) (-23), (byte)8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)67;
      byteArray0[14] = (byte) (-35);
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)8, (byte)2, true, (byte)0);
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, (byte)8, (byte)2, true);
      // Undeclared exception!
      try { 
        T4AndT6Compression.compressT4_2D(byteArray2, (byte) (-35), (-1838), true, (byte)67);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, 2, 2, false, 2);
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, 2, 2, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)27, (byte) (-128), (byte)10, (byte)0, (byte)32}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      T4AndT6Compression.compressModifiedHuffman(byteArray0, (byte)0, (byte)0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      try { 
        T4AndT6Compression.decompressT4_1D(byteArray1, (byte)0, (byte)3, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)2, (byte)2, true, 989);
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray1, (byte)2, 12, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decompression error
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = T4AndT6Compression.compressModifiedHuffman(byteArray0, 64, 1);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-88)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      try { 
        T4AndT6Compression.compressT4_1D(byteArray0, 64, 64, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      int int0 = 4;
      T4AndT6Compression.compressT6(byteArray0, 4, 4);
      int int1 = 133;
      int int2 = 123;
      try { 
        T4AndT6Compression.compressT4_1D(byteArray0, 133, 123, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)125;
      byte byte0 = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-82);
      byte byte1 = (byte) (-92);
      byteArray0[6] = (byte) (-92);
      byte byte2 = (byte) (-119);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)54;
      try { 
        T4AndT6Compression.compressT6(byteArray0, (byte)24, 547);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error reading image to compress
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-33);
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)8, (byte)8, false, (byte) (-33));
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, (byte)8, (byte)2, false);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-33)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = T4AndT6Compression.compressT4_2D(byteArray0, (byte)8, (byte)8, false, (byte)15);
      byte[] byteArray2 = T4AndT6Compression.decompressT4_2D(byteArray1, (byte)8, (byte)2, false);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)15}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byte byte1 = (byte)81;
      byteArray0[1] = (byte)81;
      byte byte2 = (byte)46;
      byteArray0[2] = (byte)46;
      byte byte3 = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        T4AndT6Compression.decompressT6(byteArray0, 1, (byte)46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-36);
      byteArray0[2] = (byte) (-36);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)98;
      byte byte1 = (byte)60;
      byteArray0[3] = (byte)60;
      byte byte2 = (byte)64;
      byteArray0[3] = (byte)64;
      boolean boolean0 = true;
      try { 
        T4AndT6Compression.decompressT4_2D(byteArray0, (byte)64, (byte)98, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected EOL not found
         //
         verifyException("org.apache.commons.imaging.common.itu_t4.T4AndT6Compression", e);
      }
  }
}
