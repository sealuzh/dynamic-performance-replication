/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:21:14 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      constantPoolGen0.adjustSize();
      int int0 = Pattern.MULTILINE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int1 = constantPoolGen0.lookupUtf8("<illegal opcode>");
      assertEquals((-1), int1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      constantPoolGen0.setConstant(8, constantUtf8_0);
      int int2 = constantPoolGen0.getSize();
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      constantPoolGen0.addNameAndType("Unexpected constant type: ", "Unexpected constant type: ");
      assertEquals(3, constantPoolGen0.getSize());
      
      int int0 = constantPoolGen0.size;
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 233);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(311, 311);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(311, 311);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(15, (-2070787801));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 311
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-796));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((-796));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool0.getLength());
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-102), (-2782));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1035.5383));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(650, (-2058005160));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1335, (-485));
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1335
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3143));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType1, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = -3143)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(256);
      constantPoolGen0.addUtf8("putstatic");
      int int0 = constantPoolGen0.addFloat(2);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPoolGen0.addConstant(constantLong1, constantPoolGen0);
      constantPoolGen0.addMethodref("this", "this", "this");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.lookupNameAndType("", (String) null);
      int int0 = constantPoolGen0.lookupInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3936, (-2099761787));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(121);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.MIN_EXPONENT;
      int int1 = Float.SIZE;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H2");
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.lookupFloat(0L);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      String string0 = constantPoolGen0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((-1291));
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantClass cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((-1291));
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ishr");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(3, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble((-2779.555));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(89);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.SIZE;
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      int int1 = Double.BYTES;
      int int2 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("b'qzGF");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.lookupInterfaceMethodref("b'qzGF", "b'qzGF", "Not allowed to create an array with more than 255 dimensions; actual: %, locals={");
      constantPoolGen0.addInteger((-887));
      int int0 = constantPoolGen0.addInteger(437);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5(hQ:i#Zj{eDMnJIhmw");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("5(hQ:i#Zj{eDMnJIhmw");
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(0, 0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.CASE_INSENSITIVE;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(6, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(15, (-2070787801));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2070787801
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble((-1269L));
      constantPoolGen0.addLong((-1269L));
      constantPoolGen0.toString();
      constantPoolGen0.lookupLong(3);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" = new ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("&KGM[c`C<", "&KGM[c`C<");
      constantPoolGen0.lookupString("&KGM[c`C<");
      constantPoolGen0.lookupMethodref("&KGM[c`C<", "&KGM[c`C<", "0$[,]01Qa:,@<CFh");
      constantPoolGen0.addLong((-1));
      constantPoolGen0.lookupUtf8("&KGM[c`C<");
      constantPoolGen0.addLong((-1L));
      constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.lookupNameAndType((String) null, "onE9AS");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref((String) null, "PQ4=H`K%", (String) null);
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-4160), (-2013265918));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4160
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("MC6P,A`q^j5JL^@IW");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantUtf8_1, constantPoolGen1);
      byte byte0 = (byte) (-97);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5(hQ:iZj{eMnJIhmw");
      constantArray0[0] = (Constant) constantUtf8_0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M.!i [g uD0");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      MethodGen.getComparator();
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("M.!i [g uD0", "5(hQ:iZj{eMnJIhmw");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5(hQ:iZj{eMnJIhmw
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("Invalid StackMap frame_type: ");
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.lookupDouble(3);
      int int0 = Float.SIZE;
      int int1 = constantPoolGen0.addLong(3);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-2256.9665042225556));
      String string0 = "a*n'[-Kia";
      constantPoolGen0.lookupInterfaceMethodref("a*n'[-Kia", "a*n'[-Kia", "a*n'[-Kia");
      int int0 = Float.SIZE;
      int int1 = Member.PUBLIC;
      constantPoolGen0.lookupFloat(2255.38F);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(8192, (-5376));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8192
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(745);
      ConstantFloat constantFloat0 = new ConstantFloat(745);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(745, (-6241));
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1252), 745);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2193), (-2193));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "dup2_x2";
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(0);
      ConstantFloat constantFloat0 = new ConstantFloat((-807.91F));
      constantFloat0.setBytes(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-2174);
      constantPoolGen0.lookupNameAndType("vr@'%.lK n6_Ap@~@+", "v]g+UF(O^\"%uov?");
      String string0 = "(x+\"!d\\R@hx=0m";
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass("vr@'%.lK n6_Ap@~@+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble((-2255.154087854));
      constantPoolGen0.lookupInterfaceMethodref("a*n'[MKia", "a*n'[MKia", "a*n'[MKia");
      constantPoolGen0.addFloat((-1));
      int int0 = Long.BYTES;
      constantPoolGen0.lookupFloat(2255.38F);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(19, (-1));
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.addString("a*n'[MKia");
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      constantPoolGen3.adjustSize();
      constantPoolGen2.addString("a*n'[MKia");
      constantPoolGen1.addInteger((-1));
      int int1 = Float.MAX_EXPONENT;
      constantPoolGen3.addMethodref("a*n'[MKia", "a*n'[MKia", "gp:\"kk%2K+tgXl");
      constantPoolGen2.lookupString(":");
      int int2 = constantPoolGen0.addConstant(constantArray0[0], constantPoolGen2);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPool0.copy();
      ConstantClass constantClass0 = new ConstantClass((-2028178999));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2028178999
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(745);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(745, 745);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantLong constantLong0 = new ConstantLong(1124L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      int int0 = Member.DECLARED;
      constantPoolGen0.lookupFieldref("Referenced class '", "]4f}RXuH=yQ)", "#");
      constantPoolGen1.toString();
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-230), (-2064888121));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -230
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(416L);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(24, (-3605));
      constantMethodHandle0.copy();
      Constant.setComparator((BCELComparator) null);
      ConstantInteger constantInteger0 = new ConstantInteger(24);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4379, 4379);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4379
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MAX_RADIX;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = "s";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("s");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(0, 0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[4] = (Constant) constantString0;
      ConstantLong constantLong1 = new ConstantLong((-1795L));
      Method.getComparator();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, 0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T{ aUaCLGK{&yhb)%V");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-24), (-24));
      ConstantClass constantClass0 = new ConstantClass((-24));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-24), (-24));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.clone();
      Constant constant0 = constantNameAndType1.copy();
      constantArray0[2] = constant0;
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      constantNameAndType0.accept(descendingVisitor0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-24));
      constantPoolGen0.addInteger((-24));
      int int0 = Float.MAX_EXPONENT;
      constantPoolGen0.lookupString("T{ aUaCLGK{&yhb)%V");
      constantPoolGen0.addInteger((-24));
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("|*+]R7edHy>)d+X", 2487);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 2487
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5(hQ:i#Zj{eDMnJIhmw");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("5(hQ:i#Zj{eDMnJIhmw");
      MethodGen.getComparator();
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(0, 0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.CASE_INSENSITIVE;
      int int1 = constantPoolGen0.addString("5(hQ:i#Zj{eDMnJIhmw");
      assertEquals(2, int1);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = "";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(0, 0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFieldref("Unknown constant type ", "", "");
      constantPoolGen0.getConstant(8);
      // Undeclared exception!
      try { 
        constantNameAndType0.getSignature((ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-2758.0938F));
      int int0 = Long.BYTES;
      constantPoolGen0.lookupFieldref("?G[aK+ny_/GG", "?G[aK+ny_/GG", "4KP");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.SIZE;
      constantPoolGen0.addInterfaceMethodref("Local VYariabls:", "Local VYariabls:", "Local VYariabls:");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Constant constant0 = constantPoolGen0.getConstant(4);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(16);
      ClassPath classPath0 = new ClassPath("Local VYariabls:");
      ClassPath classPath1 = new ClassPath(classPath0, "CS");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      classPathRepository0.findClass("CS");
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      constantMethodType0.accept(descendingVisitor0);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      int int2 = Float.MAX_EXPONENT;
      int int3 = Character.MIN_CODE_POINT;
      int int4 = Member.DECLARED;
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-1982292596));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1982292596
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s-27%]w<YP4a");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("]eAA2>,tm", "]eAA2>,tm", "]eAA2>,tm");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      Boolean boolean0 = new Boolean("{");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      Constant constant0 = constantPoolGen0.getConstant(4);
      String string0 = Constants.ILLEGAL_TYPE;
      constantPoolGen0.addConstant(constant0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "s-27%]w<YP4a", "G~ii}w{K_=;v-&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      byte[] byteArray0 = new byte[16];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-38);
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      byteArray0[1] = (byte) (-38);
      constantPoolGen0.addFieldref("", "Lo+av Variabls:", "um'Pn");
      Constant constant0 = constantPoolGen0.getConstant(6);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      int int0 = Byte.SIZE;
      int int1 = Pattern.UNIX_LINES;
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-38), 142);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -38
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      String string0 = "&";
      int int0 = Character.MAX_CODE_POINT;
      String string1 = "<n'\")8oF.e?*ps@5";
      constantPoolGen0.addFieldref("&", "<n'\")8oF.e?*ps@5", "&");
      int int1 = Byte.SIZE;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int2 = Float.SIZE;
      ConstantLong constantLong0 = new ConstantLong((-1337L));
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPool0.copy();
      constantPoolGen0.addInteger(1114111);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
