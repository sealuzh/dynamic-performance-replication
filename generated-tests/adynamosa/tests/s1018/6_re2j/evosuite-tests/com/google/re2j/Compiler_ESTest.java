/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 03:32:39 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Compiler;
import com.google.re2j.Prog;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1234;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp_Op1.isPseudo();
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op3);
      regexp3.subs = regexpArray0;
      Regexp.Op regexp_Op4 = Regexp.Op.CONCAT;
      regexp3.op = regexp_Op4;
      Regexp regexp4 = new Regexp(regexp3);
      Compiler.compileRegexp(regexp4);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1234;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp_Op1.isPseudo();
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[21];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.ALTERNATE;
      regexp0.cap = 925;
      Regexp regexp3 = new Regexp(regexp_Op3);
      regexp3.runes = intArray0;
      regexp1.subs = regexpArray0;
      regexp3.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp3);
      Compiler.compileRegexp(regexp1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1234;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp_Op1.isPseudo();
      Regexp regexp1 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp1);
      Compiler.compileRegexp(regexp3);
      regexp1.toString();
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      Regexp.Op regexp_Op3 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp4 = new Regexp(regexp_Op3);
      Regexp regexp5 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op4 = Regexp.Op.LITERAL;
      Regexp regexp6 = new Regexp(regexp_Op4);
      regexp6.runes = intArray0;
      regexp6.flags = 9;
      Compiler.compileRegexp(regexp6);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Regexp regexp7 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[1] = (-1828);
      intArray0[1] = 925;
      intArray0[2] = 1245;
      intArray0[3] = 4296;
      regexp1.runes = intArray0;
      Compiler.compileRegexp(regexp1);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.flags = 932;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp0.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp3 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1234;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp_Op1.isPseudo();
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.ALTERNATE;
      Regexp regexp3 = new Regexp(regexp_Op3);
      regexp3.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp3);
      Prog prog0 = Compiler.compileRegexp(regexp4);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp0.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.min = 80;
      Compiler.compileRegexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp2;
      regexp1.subs = regexpArray0;
      regexp0.min = 80;
      regexp_Op0.isPseudo();
      int[] intArray0 = new int[4];
      intArray0[0] = 80;
      intArray0[1] = 80;
      intArray0[2] = 80;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op2);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp3);
      Prog prog0 = Compiler.compileRegexp(regexp3);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.op = regexp_Op1;
      regexp1.flags = 230;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp1);
      Regexp regexp3 = new Regexp(regexp0.op);
      Compiler.compileRegexp(regexp3);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 1234;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp_Op1.isPseudo();
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp1.subs = regexpArray0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp0.op = regexp_Op1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1828);
      intArray0[1] = 925;
      intArray0[2] = 1234;
      intArray0[3] = 4296;
      regexp1.runes = intArray0;
      Compiler.compileRegexp(regexp1);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      regexp0.min = 1281;
      regexp0.cap = 10;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      int[] intArray0 = new int[6];
      intArray0[0] = (-786);
      intArray0[1] = 147;
      intArray0[2] = 11;
      intArray0[3] = 4;
      intArray0[4] = (-1893);
      intArray0[5] = 1088;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      regexp0.name = "";
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      regexp0.reinit();
      regexpArray0[1] = regexp0;
      Object object0 = new Object();
      regexp2.equals(object0);
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.max = 706;
      regexp0.reinit();
      Compiler.compileRegexp(regexp1);
      Regexp regexp3 = null;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.op.isPseudo();
      regexp0.max = 2258;
      Compiler.compileRegexp(regexp0);
      regexp0.max = 0;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.equals(regexp0);
      regexp0.flags = 43015;
      regexp0.reinit();
      regexp0.toString();
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      regexp0.name = "))*.U?#=";
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 0;
      regexp0.cap = 1718;
      regexp0.toString();
      regexp0.max = 651;
      regexp0.reinit();
      regexp0.max = 0;
      regexp0.runes = null;
      regexp0.runes = null;
      regexp0.flags = (-511);
      regexp0.max = 814;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      regexp1.runes = null;
      regexp1.op = regexp_Op2;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 4008;
      regexp0.max = (-1923);
      regexp0.cap = 2395;
      regexp0.op = regexp_Op0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1923);
      intArray0[1] = 2395;
      intArray0[2] = 4008;
      intArray0[3] = 4008;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3052;
      intArray0[1] = 1107;
      intArray0[2] = 14;
      intArray0[3] = (-1722);
      intArray0[4] = 0;
      intArray0[5] = 3085;
      regexp1.runes = intArray0;
      regexp1.min = 0;
      regexp1.name = "hrb?-0pPh&(?vi?sB|";
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      regexp0.max = 0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp1.op = regexp_Op1;
      Compiler.compileRegexp(regexp0);
      regexp1.toString();
      regexp0.equals(prog0);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      Regexp regexp3 = new Regexp(regexp2);
      Compiler.compileRegexp(regexp3);
      Regexp regexp4 = new Regexp(regexp1);
      Compiler.compileRegexp(regexp4);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp3);
      Prog prog2 = Compiler.compileRegexp(regexp4);
      assertNotSame(prog2, prog1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.cap = 0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[0];
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.subs = regexpArray0;
      regexp0.equals((Object) null);
      regexp0.max = 0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.subs = regexp0.subs;
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.cap = 0;
      regexp2.min = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.toString();
      Compiler.compileRegexp(regexp3);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp3);
      Prog prog1 = Compiler.compileRegexp(regexp3);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "";
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.max = (-862);
      regexp1.flags = (-2338);
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.min = 12;
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp2);
      int[] intArray0 = new int[3];
      intArray0[0] = (-862);
      intArray0[1] = (-862);
      intArray0[2] = (-862);
      regexp2.runes = intArray0;
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp2);
      Prog prog1 = Compiler.compileRegexp(regexp2);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-559);
      regexp0.flags = 43015;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1822;
      intArray0[1] = 1766;
      regexp0.flags = 1822;
      intArray0[2] = (-2552);
      intArray0[3] = 0;
      intArray0[4] = (-5913);
      intArray0[5] = (-3057);
      intArray0[6] = 476;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp0.flags = 15;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.reinit();
      regexp2.cap = 1766;
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      regexp2.op = regexp_Op2;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 3568;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp1.subs = null;
      regexp0.min = 3499;
      regexp0.min = 1802;
      regexp1.flags = 766;
      regexp0.min = 342;
      regexp0.subs = null;
      regexp1.name = "R";
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      int[] intArray0 = new int[3];
      intArray0[0] = 3499;
      intArray0[1] = 342;
      regexp0.toString();
      regexp0.subs = null;
      intArray0[2] = 342;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.max = 11;
      regexp2.toString();
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertNotSame(prog1, prog0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 11744;
      regexp0.max = 11744;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }
}
