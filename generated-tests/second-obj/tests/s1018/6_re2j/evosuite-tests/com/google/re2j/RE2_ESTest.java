/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:27:39 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("q");
      String[] stringArray0 = rE2_0.findSubmatch("q");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("{=");
      int[] intArray0 = rE2_0.findSubmatchIndex("{=");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllSubmatch("", (-2132));
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("%,c^A`7\">");
      List<String[]> list0 = rE2_0.findAllSubmatch("%,c^A`7\">", 8);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("l-`&");
      String string0 = rE2_0.replaceFirst("l-`&", "l-`&");
      assertEquals("l-`&", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("7");
      String string0 = rE2_0.replaceAll("", "7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("i,9");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 16);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      byte[] byteArray0 = new byte[0];
      rE2_0.numberOfCapturingGroups();
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String> list0 = rE2_0.findAll("", (-987));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      List<String> list0 = rE2_0.findAll("can't happen", (-195));
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2.quoteMeta("");
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-739));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllIndex("", 913);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 913);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)1);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte)0, (byte) (-94), (byte)0}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = RE2.match("Fk>la\"l4n", "Fk>la\"l4n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(stringArray0);
      
      String string0 = rE2_0.toString();
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertEquals("com.google.re2j.RE2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Terminal_Punctuation");
      assertEquals("Terminal_Punctuation", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("Terminal_Punctuation", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-3097));
      assertEquals("Terminal_Punctuation", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("can't happen", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      rE2_0.reset();
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertEquals("can't happen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte) (-16));
      assertEquals("can't happen", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("N");
      assertEquals("N", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)1);
      assertEquals("N", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("[^x00-x{10FFFF}]");
      assertEquals("[^x00-x{10FFFF}]", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("[^x00-x{10FFFF}]");
      assertEquals("[^x00-x{10FFFF}]", rE2_0.toString());
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match("", 3, 3, 3, intArray0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("&");
      assertEquals("&", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = rE2_0.prefixUTF8;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)38}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      rE2_0.reset();
      assertEquals("&", rE2_0.toString());
      
      byteArray0[1] = (byte)114;
      byte[][] byteArray2 = rE2_0.findUTF8Submatch(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("&", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("zW4]Qe");
      assertEquals("zW4]Qe", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("zW4]Qe", "zW4]Qe");
      assertEquals("zW4]Qe", rE2_0.toString());
      assertEquals("zW4]Qe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Q9F'sh+3");
      assertEquals("Q9F'sh+3", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("Q9F'sh+3");
      assertEquals("Q9F'sh+3", rE2_0.toString());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("]{;ooT*5qF");
      assertEquals("]{;ooT*5qF", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("]{;ooT*5qF", 1166);
      assertEquals("]{;ooT*5qF", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("m?7\"}ImKlmm{M&/6w");
      assertEquals("m?7\"}ImKlmm{M&/6w", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("m?7\"}ImKlmm{M&/6w");
      assertEquals("m?7\"}ImKlmm{M&/6w", rE2_0.toString());
      assertArrayEquals(new int[] {2, 17}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("z]ZPQTk9]~N");
      assertEquals("z]ZPQTk9]~N", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("z]ZPQTk9]~N", 2);
      assertEquals("z]ZPQTk9]~N", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-1);
      RE2 rE2_0 = RE2.compileImpl("&[D=&AUP<VUv,", (byte) (-1), true);
      assertEquals("&[D=&AUP<VUv,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.prefixUTF8;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)38, (byte)91}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("&[D=&AUP<VUv,", rE2_0.toString());
      assertNull(intArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertEquals("UTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.longest = false;
      assertEquals("UTF-8", rE2_0.toString());
      
      int[] intArray0 = new int[9];
      boolean boolean0 = rE2_0.match("UTF-8", 3, 3, 3, intArray0, 3);
      assertEquals("UTF-8", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("qT|");
      assertEquals("qT|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("qT|", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("l-`&");
      assertEquals("l-`&", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("l-`&");
      assertEquals("l-`&", rE2_0.toString());
      assertEquals("l-`&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)105;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-99));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-99), (byte)105}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("uT=Ag@Vn%tPZ9'HZ_T");
      assertEquals("uT=Ag@Vn%tPZ9'HZ_T", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("uT=Ag@Vn%tPZ9'HZ_T", 3737, 12, 3737, (int[]) null, 3737);
      assertEquals("uT=Ag@Vn%tPZ9'HZ_T", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst(">Km+n", "F[4oT`T+_RZc");
      assertEquals("", rE2_0.toString());
      assertEquals("F[4oT`T+_RZc>Km+n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-3), false);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-3));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-18)}, byteArray0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = rE2_0.prefixUTF8;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      byteArray0[1] = (byte)119;
      byte[][] byteArray2 = rE2_0.findUTF8Submatch(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)119, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("H", "");
      assertEquals("", rE2_0.toString());
      assertEquals("H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)119;
      byte[] byteArray1 = rE2_0.prefixUTF8;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = RE2.quoteMeta("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 1247;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = 762;
      intArray0[2] = (int) (byte)119;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 762, intArray0, 762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = new RE2("_t");
      assertEquals("_t", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findIndex("_t");
      assertEquals("_t", rE2_0.toString());
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertNotNull(intArray0);
      
      RE2 rE2_1 = RE2.compile("");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      
      boolean boolean0 = rE2_0.match("DXo}zZ");
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("_t", rE2_0.toString());
      assertFalse(boolean0);
      assertNotSame(rE2_0, rE2_1);
      
      int[] intArray1 = rE2_0.findSubmatchIndex("can't hapen");
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("_t", rE2_0.toString());
      assertNull(intArray1);
      assertNotSame(rE2_0, rE2_1);
      
      String string0 = rE2_1.replaceAll("vS,akEN\">c\"l80", "_t");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertEquals("_tv_tS_t,_ta_tk_tE_tN_t\"_t>_tc_t\"_tl_t8_t0_t", string0);
      assertNotNull(string0);
      assertNotSame(rE2_1, rE2_0);
      
      int int0 = rE2_1.numberOfCapturingGroups();
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertEquals(0, int0);
      assertNotSame(rE2_1, rE2_0);
      
      int int1 = 11;
      boolean boolean1 = rE2_1.match("DXo}zZ", 0, 11, 11, (int[]) null, 11);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(boolean1 == boolean0);
      assertEquals("", rE2_1.toString());
      assertTrue(boolean1);
      assertNotSame(rE2_1, rE2_0);
      
      // Undeclared exception!
      try { 
        MachineInput.fromUTF8(byteArray0, 2118, 2118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // end is greater than length: 2118 > 0
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|.%,%5!8->J6");
      assertEquals("|.%,%5!8->J6", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("|.%,%5!8->J6", 1796);
      assertEquals("|.%,%5!8->J6", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8((byte[]) null, 1796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = new RE2(">'qa/|");
      assertEquals(">'qa/|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals(">'qa/|", rE2_0.toString());
      
      String string0 = RE2.quoteMeta(">'qa/|");
      assertEquals(">'qa/\\|", string0);
      assertNotNull(string0);
      
      RE2 rE2_1 = RE2.compilePOSIX("NO_WORD_BOUNDARY");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("NO_WORD_BOUNDARY", rE2_1.toString());
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = rE2_1.findUTF8(byteArray0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("NO_WORD_BOUNDARY", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-3), (byte)0, (byte)42, (byte)0, (byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertNull(byteArray1);
      assertNotSame(rE2_1, rE2_0);
      
      String string1 = rE2_0.replaceAll(">'qa/|", "NO_WORD_BOUNDARY");
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(">'qa/|", rE2_0.toString());
      assertEquals("NO_WORD_BOUNDARY|NO_WORD_BOUNDARY", string1);
      assertNotNull(string1);
      assertNotSame(rE2_0, rE2_1);
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }
}
