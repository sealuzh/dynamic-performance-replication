/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:58:40 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("~t@#70YH{k", "~t@#70YH{k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mL@{R");
      String string0 = rE2_0.replaceAll("mL@{R", "mL@{R");
      assertEquals("mL@{R", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("pQ*GS");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("pQ*GS", 1658);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("n%.sL BO$Kv");
      List<String[]> list0 = rE2_0.findAllSubmatch("n%.sL BO$Kv", 1107);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?s:.)");
      String string0 = rE2_0.replaceAll("(?s:.)", "(?s:.)");
      assertEquals("(?s:.)(?s:.)(?s:.)(?s:.)(?s:.)(?s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 3);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-2506));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("Pe");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("Pe", 670);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?s:.)");
      List<String[]> list0 = rE2_0.findAllSubmatch("(?s:.)", (-2506));
      assertNotNull(list0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = RE2.match("co{.google.re2j.Inst$Op", "co{.google.re2j.Inst$Op");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.Inst$Op");
      int[] intArray0 = rE2_0.findSubmatchIndex("com.google.re2j.Inst$Op");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(" ");
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-855));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 309);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("m/Q\u0000:i]B}SA#p+2Ft");
      assertNotNull(rE2_0);
      assertEquals("m/Q\u0000:i]B}SA#p+2Ft", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("m/Q\u0000:i]B}SA#p+2Ft", 32);
      assertNull(list0);
      assertEquals("m/Q\u0000:i]B}SA#p+2Ft", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("o");
      assertNotNull(rE2_0);
      assertEquals("o", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("o", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("m/|\u0000:i]B}SA#p+2Ft");
      assertNotNull(rE2_0);
      assertEquals("m/|\u0000:i]B}SA#p+2Ft", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("m/|\u0000:i]B}SA#p+2Ft", 32);
      assertNotNull(list0);
      assertEquals("m/|\u0000:i]B}SA#p+2Ft", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("4=osUU$?DaC}zZ");
      assertNotNull(rE2_0);
      assertEquals("4=osUU$?DaC}zZ", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-1245));
      assertNull(list0);
      assertEquals("4=osUU$?DaC}zZ", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UT$$U':<q2;D");
      assertNotNull(rE2_0);
      assertEquals("UT$$U':<q2;D", rE2_0.toString());
      
      String string0 = rE2_0.find("UT$$U':<q2;D");
      assertNotNull(string0);
      assertEquals("UT$$U':<q2;D", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("Po");
      assertNotNull(rE2_0);
      assertEquals("Po", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("Po", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("cRP~Q{9VycP'xss? ");
      assertNotNull(rE2_0);
      assertEquals("cRP~Q{9VycP'xss? ", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("cRP~Q{9VycP'xss? ", 3);
      assertNull(list0);
      assertEquals("cRP~Q{9VycP'xss? ", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.Inst$Op");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("com.google.re2j.Inst$Op");
      assertNull(intArray0);
      assertEquals("com.google.re2j.Inst$Op", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("5CIdm=G9#Yn@YHAU");
      assertNotNull(rE2_0);
      assertEquals("5CIdm=G9#Yn@YHAU", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("5CIdm=G9#Yn@YHAU", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", (-1337));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("^");
      assertNotNull(rE2_0);
      assertEquals("^", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("^", (-5100));
      assertNotNull(list0);
      assertEquals("^", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match("can't happen", 2206, 2206, 2206, (int[]) null, 2206);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("j");
      assertNotNull(rE2_0);
      assertEquals("j", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("j", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-1751));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("{;/");
      assertNotNull(rE2_0);
      assertEquals("{;/", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 876);
      assertNull(list0);
      assertEquals("{;/", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("=iUAB/pQ", 5, false);
      assertNotNull(rE2_0);
      assertEquals("=iUAB/pQ", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("=iUAB/pQ", 5, 5, 5, intArray0, 5);
      assertEquals("=iUAB/pQ", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mL@{R");
      assertNotNull(rE2_0);
      assertEquals("mL@{R", rE2_0.toString());
      
      String string0 = rE2_0.find("mL@{R");
      assertNotNull(string0);
      assertEquals("mL@{R", rE2_0.toString());
      assertEquals("mL@{R", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RE2.quoteMeta("-^PL&aQXe");
      assertNotNull(string0);
      assertEquals("-\\^PL&aQXe", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)9);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = new RE2("1E!4n+\"3s");
      assertNotNull(rE2_0);
      assertEquals("1E!4n+\"3s", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("1E!4n+\"3s", 745, (-670), (-670), intArray0, 745);
      assertEquals("1E!4n+\"3s", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("4=osUU$?DaC}zZ");
      assertNotNull(rE2_0);
      assertEquals("4=osUU$?DaC}zZ", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertEquals("4=osUU$?DaC}zZ", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("!");
      assertNotNull(rE2_0);
      assertEquals("!", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("!", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("@^ _*");
      assertNotNull(rE2_0);
      assertEquals("@^ _*", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("@^ _*");
      assertNull(stringArray0);
      assertEquals("@^ _*", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|");
      assertNotNull(rE2_0);
      assertEquals("|", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("|", "|");
      assertNotNull(string0);
      assertEquals("|", rE2_0.toString());
      assertEquals("|||", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 861);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("$");
      assertNotNull(rE2_0);
      assertEquals("$", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("$", "$");
      assertNotNull(string0);
      assertEquals("$", rE2_0.toString());
      assertEquals("$$", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("DhI");
      assertNotNull(string0);
      assertEquals("DhI", string0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
      
      boolean boolean0 = rE2_0.match("DhI", 0, 649, 0, (int[]) null, 0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("DhI", 649);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      boolean boolean0 = rE2_0.match("", (byte)0, (byte)0, (byte)0, intArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("-*");
      assertNotNull(rE2_0);
      assertEquals("-*", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("-*", 777);
      assertNotNull(list0);
      assertEquals("-*", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }
}
