/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:38:42 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix.identity(0);
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      
      Vector vector0 = basic1DMatrix0.getRow(1049);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      long long0 = 1L;
      mockRandom0.doubles(1L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(2, mockRandom0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.sliceBottomRight(2, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2..2][4..2].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 0;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(0, 8, Double.NEGATIVE_INFINITY);
      int int1 = 7;
      int int2 = (-569);
      SparseVector sparseVector0 = SparseVector.zero(7, (-569));
      Vector vector0 = sparseVector0.multiply(1030.9796254098453);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic1DMatrix0.mkString((NumberFormat) decimalFormat0, "Can not decode Basic1DMatrix from the given byte array.", "Can not decode Basic1DMatrix from the given byte array.");
      vector0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        basic1DMatrix1.insertColumn(8, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 904);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(16, 1, 904);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      DenseMatrix.diagonal(0, 0);
      basic1DMatrix0.insert((Matrix) basic1DMatrix1);
      basic1DMatrix0.mkString("", "");
      basic1DMatrix0.setAll((-2.96347139978));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparseMatrix.zero(1, 1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(387, 387, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.shuffle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 591;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(591, 591);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1, mockRandom0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.swapRows(1550, 1550);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 9, doubleArray0);
      basic1DMatrix0.swapRows(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)8;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("          ");
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1, 798);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(798);
      basic1DMatrix1.blankOfShape(5, 0);
      basic1DMatrix0.getRow(0);
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 798;
      doubleArray0[1] = (double) 413;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-2107.336414543562);
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.from1DArray(26, 0, doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, basic1DMatrix1, basic1DMatrix3, basic1DMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(418);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.transformColumn((byte)4, vectorFunction0);
      basic1DMatrix0.blankOfRows((-1));
      int int0 = 0;
      int int1 = (-1266);
      int int2 = 391;
      basic1DMatrix0.copyOfShape(int1, int2);
      int int3 = 8;
      Basic1DMatrix.identity(int3);
      int int4 = (-17);
      basic1DMatrix0.blankOfShape(int0, int4);
      basic1DMatrix0.getRow(int0);
      String string0 = "CI?<3I)w0xWx%DZp0";
      Basic1DMatrix.fromCSV(string0);
      Basic1DMatrix.fromCSV(string0);
      String string1 = "Sides of blocks are incompatible!";
      Basic1DMatrix.fromCSV(string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      basic1DMatrix0.mkString(numberFormat0);
      basic1DMatrix0.setRow(1729, 0.0);
      Basic1DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity((-353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -353x-353
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(30, 30);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(603, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18090
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix.from1DArray(0, 0, (double[]) null);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapRows(0, (-2319));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((byte)120, (-2319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 9, doubleArray0);
      basic1DMatrix0.swapRows(0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Matrix.unit(1465, 748);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)120;
      basic1DMatrix0.setAll((byte)120);
      basic1DMatrix0.toArray();
      assertArrayEquals(new double[] {120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0}, doubleArray0, 0.01);
      assertEquals(9, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(542, 542);
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 97;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(97, 0.0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '98' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(9, 9);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 61;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(9, 61, doubleArray0);
      basic1DMatrix1.swapColumns(105, 105);
      assertEquals(61, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(377, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 377
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(9, 9);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(9, matrix0.rows());
      assertEquals(9, matrix0.columns());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 61;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(34, 0, doubleArray0);
      assertEquals(0, basic1DMatrix1.columns());
      
      basic1DMatrix0.swapColumns(67, 34);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(6, 1004);
      basic1DMatrix0.toBinary();
      assertEquals(1004, basic1DMatrix0.columns());
      assertEquals(6, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("#kLGyg9$50%2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 97;
      double double0 = 19.55389270984475;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(97, 97);
      Matrix matrix0 = basic1DMatrix0.sliceBottomRight(97, 89);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix1.rows());
      assertEquals(2, basic1DMatrix1.columns());
      
      DenseMatrix.diagonal(97, 0.0);
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.identity(53);
      assertEquals(53, basic1DMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(11, 11);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(30, 11);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix1, basic1DMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 1);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(1, 1);
      sparseMatrix1.removeLastRow();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix1, sparseMatrix1, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(19, 19);
      SparseMatrix sparseMatrix1 = SparseMatrix.zero(19, 0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix1, sparseMatrix0, sparseMatrix1, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '20' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
