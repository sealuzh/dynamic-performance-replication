/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:50:24 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Integer integer0 = new Integer((-1591));
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, HashMap<String, String>> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, HashMap<String, String>>(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = doubleKeyMap2.put(integer0, (Object) doubleKeyMap1, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>((Map<Integer, Map<String, Object>>) null);
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<Object, Object>, Map<Object, HashMap<Integer, Integer>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, HashMap<Integer, Integer>>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, HashMap<Integer, Integer>>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Integer, Integer> hashMap2 = doubleKeyMap1.get(hashMap1, (Object) doubleKeyMap0);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<Map<Object, HashMap<Integer, Object>>, String>> hashMap0 = new HashMap<Object, Map<Map<Object, HashMap<Integer, Object>>, String>>();
      DoubleKeyMap<Object, Map<Object, HashMap<Integer, Object>>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, HashMap<Integer, Object>>, String>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<Object, HashMap<Integer, Object>>) null, "5E?s<`?#sZ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<Object, Map<Object, HashMap<Integer, Object>>>> hashMap0 = new HashMap<Integer, Map<Object, Map<Object, HashMap<Integer, Object>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Object, HashMap<Integer, Object>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, HashMap<Integer, Object>>>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Object) integer0, (Map<Object, HashMap<Integer, Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.get(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<HashMap<String, Integer>, Object>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<HashMap<String, Integer>, Object> hashMap2 = new HashMap<HashMap<String, Integer>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Integer, Integer>, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, HashMap<String, Integer>, Object>(hashMap0);
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      doubleKeyMap0.remove(hashMap1, hashMap3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Object object0 = doubleKeyMap0.remove((Object) null, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>((Map<Integer, Map<String, Object>>) null);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "pc,a]zt\"R?AVnG}r", (Object) "pc,a]zt\"R?AVnG}r");
      Object object0 = doubleKeyMap0.remove(integer0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<Integer, String>>();
      DoubleKeyMap<HashMap<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Integer, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(hashMap1, hashMap1);
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(hashMap1, integer0, "");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put("&|wh :c+w`n8r~}&W:", "&|wh :c+w`n8r~}&W:", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<String, String>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put(hashMap0, hashMap1, (Object) hashMap0);
      Object object0 = doubleKeyMap0.get(hashMap0, (HashMap<String, String>) null);
      assertNull(object0);
  }
}
