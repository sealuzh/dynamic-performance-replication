/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:52:37 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(2812, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(2812, timeUnit0);
      cacheControl_Builder4.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String string0 = "no-store, ";
      // Undeclared exception!
      try { 
        headers_Builder0.add("no-store, ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: no-store, 
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_CACHE.toString();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder3.minFresh(31, timeUnit0);
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      cacheControl_Builder3.noStore();
      boolean boolean0 = cacheControl0.noCache();
      assertTrue(boolean0);
      
      cacheControl0.noStore();
      cacheControl0.isPublic();
      assertTrue(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      int int0 = (-1012);
      cacheControl0.FORCE_NETWORK.headerValue = "x.Qtz:s\"";
      cacheControl_Builder0.noStore();
      cacheControl0.toString();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl0.FORCE_CACHE.headerValue = "x.Qtz:s\"";
      cacheControl0.FORCE_NETWORK.headerValue = "";
      cacheControl0.FORCE_CACHE.headerValue = "";
      cacheControl0.FORCE_NETWORK.toString();
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1012), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1012
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      cacheControl_Builder2.maxStale(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-2), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -2
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "s-maxage";
      stringArray0[1] = "VEREMJhOupj_Nil!&";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.headerValue = "public";
      cacheControl0.isPublic();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(3323, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noCache();
      // Undeclared exception!
      try { 
        cacheControl_Builder5.minFresh((-543), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -543
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("nyT9a^S|mCKKB", "[size=");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder1.minFresh(1, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.noStore();
      cacheControl_Builder0.noCache();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_CACHE.headerValue = null;
      cacheControl0.isPrivate();
      cacheControl0.onlyIfCached();
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      cacheControl_Builder3.maxStale(3184, timeUnit2);
      cacheControl0.sMaxAgeSeconds();
      cacheControl0.isPublic();
      cacheControl_Builder1.noTransform();
      cacheControl0.toString();
      cacheControl0.mustRevalidate();
      cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder3.onlyIfCached();
      cacheControl0.onlyIfCached();
      TimeUnit timeUnit3 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-1), timeUnit3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      int int0 = Integer.MAX_VALUE;
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      cacheControl0.FORCE_NETWORK.toString();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(Integer.MAX_VALUE, timeUnit1);
      cacheControl_Builder3.maxAge(Integer.MAX_VALUE, timeUnit0);
      cacheControl0.isPublic();
      cacheControl0.maxStaleSeconds();
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      cacheControl_Builder2.minFresh(Integer.MAX_VALUE, timeUnit2);
      CacheControl cacheControl1 = cacheControl_Builder4.build();
      cacheControl1.FORCE_CACHE.toString();
      cacheControl0.onlyIfCached();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "max-stale=2147483647, only-if-cached";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      stringArray0[4] = "max-stale=2147483647, only-if-cached";
      stringArray0[5] = "";
      stringArray0[6] = "max-stale=2147483647, only-if-cached";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(59, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(Integer.MAX_VALUE, timeUnit1);
      CacheControl cacheControl0 = cacheControl_Builder4.build();
      boolean boolean0 = cacheControl0.noTransform();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals(2147483, cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.onlyIfCached());
      assertTrue(boolean0);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "nhOz/^SmKKB");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.noCache());
      assertFalse(cacheControl2.onlyIfCached());
      assertFalse(cacheControl2.mustRevalidate());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertFalse(cacheControl2.isPublic());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertFalse(cacheControl2.noStore());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(10, timeUnit0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl_Builder2.onlyIfCached();
      cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(Integer.MAX_VALUE, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder1.noTransform();
      cacheControl_Builder0.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("pragma");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("pragma", "beginIndex < 0: ");
      Headers headers0 = headers_Builder2.build();
      CacheControl.parse(headers0);
      boolean boolean0 = cacheControl_Builder5.noCache;
      cacheControl_Builder4.build();
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder4.noCache();
      assertSame(cacheControl_Builder1, cacheControl_Builder6);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(10, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=600", string0);
      assertNotNull(string0);
      
      cacheControl_Builder0.onlyIfCached();
      cacheControl_Builder1.noTransform();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("max-stale=600");
      headers_Builder1.addLenient("pragma", "max-stale=600");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertFalse(cacheControl2.isPublic());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertFalse(cacheControl2.noStore());
      assertEquals(600, cacheControl2.maxStaleSeconds());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      
      int int0 = cacheControl0.minFreshSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(10, timeUnit0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder2.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      cacheControl_Builder2.maxStale(19, timeUnit1);
      cacheControl_Builder2.noTransform();
      CacheControl cacheControl1 = cacheControl_Builder4.build();
      assertFalse(cacheControl1.isPrivate());
      assertEquals(0, cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("max-stale=2147483647, only-if-cached");
      headers_Builder1.addLenient("pragma", "max-stale=2147483647, only-if-cached");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder3.minFresh(19, timeUnit0);
      cacheControl_Builder5.onlyIfCached();
      cacheControl_Builder5.maxAge(15, timeUnit0);
      int int0 = cacheControl2.maxAgeSeconds();
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertTrue(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.noTransform());
      assertFalse(cacheControl2.isPublic());
      assertFalse(cacheControl2.mustRevalidate());
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, cacheControl2.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("[size=", "[size=");
      Headers.Builder headers_Builder2 = new Headers.Builder();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(1, timeUnit1);
      cacheControl_Builder3.noTransform();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder3 = new Headers.Builder();
      Headers headers0 = headers_Builder3.build();
      CacheControl.parse(headers0);
      Headers.Builder headers_Builder4 = new Headers.Builder();
      headers_Builder1.removeAll("pragma");
      Headers.Builder headers_Builder5 = headers_Builder4.addLenient("pragma", "[size=");
      Headers headers1 = new Headers(headers_Builder5);
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      int int0 = cacheControl1.minFreshSeconds();
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), int0);
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("Cache-Control", "Unexpected hex string: ");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.onlyIfCached());
      assertFalse(cacheControl2.mustRevalidate());
      assertFalse(cacheControl2.noCache());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
  }
}
