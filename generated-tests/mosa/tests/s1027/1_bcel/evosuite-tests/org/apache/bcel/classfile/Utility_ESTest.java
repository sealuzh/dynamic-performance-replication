/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:24:41 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.net.URI;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("?O={z[?@k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?O={z[?@k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L7Z'4aN~_d;V");
      assertEquals("7Z'4aN~_d", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(";'v=%kAszK&<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;'v=%kAszK&<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode(";");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.compactClassName("<illegal type>", "<illegal type>", false);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ilegal*y nestSd brake^d:", "Ilegal*y nestSd brake^d:", "Ilegal*y nestSd brake^d:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ilegal*y nestSd brake^d:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = Constants.ITEM_Bogus;
      String string0 = Utility.format(533, 533, true, 'q');
      assertEquals("533qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.format((-1233), (-1233), false, '&');
      assertEquals("-1233", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.format(71, 2525, false, 'E');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Ilegally nested brake^d:");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "int";
      String string1 = Utility.printArray(objectArray0, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)45;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-118), false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-99), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.getSignature("\n     MetodArguments:");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("LMetodArguments:;", stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=C!";
      Utility.methodTypeToSignature("=C!", stringArray0);
      Utility.compactClassName("=C!");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-89);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "void");
      Utility.isJavaIdentifierPart('C');
      Utility.equals(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.replace("Ilegally nested bracke^d:", "+}Sn+$", "+}Sn+$");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+:a!)OoR1[F \"rv]-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :a!)OoR1[F \"rv]-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.clearBit((-611), 171);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.accessToString(1103);
      Utility.isSet((-1231), 1103);
      Utility.isSet(1103, 637);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.replace("4dA1,s!KP", "4dA1,s!KP", "4dA1,s!KP");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.searchOpcode("ZA");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.getSignature(":<2]{RiUs~");
      Utility.convertString("L:<2]{RiUs~;");
      Utility.searchOpcode("nop");
      Utility.accessToString((int) (short)0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<clinit>");
      mockPrintStream0.println((-1790L));
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      Utility.compactClassName("?O{z[?@k", "<clinit>", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.convertString("y[w9:kiiVyb(d4A(H");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "<illegal opcode>";
      Utility.compactClassName("<illegal opcode>", false);
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-71);
      Utility.accessToString((int) (byte) (-71), true);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      // Undeclared exception!
      try { 
        Utility.getSignature("+:a!)OoR1[F \"rv-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[F \"rv-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      Utility.methodSignatureReturnType("V2~4790");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.getSignature("[x_(Kiue_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [x_(Kiue_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), (int) (byte) (-97), false);
      Utility.compactClassName("0:    if_icmpeq\t\t#-24832\n");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.methodTypeToSignature("ZVJ&H4yy", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-57);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte) (-57), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "$mt@wQ!9$B&$to";
      byte byte0 = Constants.CONSTANT_Integer;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-82), false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(63, 89);
      try { 
        Utility.typeOfSignature("K}x!A/I-xW,j\"@&Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K}x!A/I-xW,j\"@&Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.accessToString(159);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("public private protected static final transient", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      Utility.methodSignatureToString("()Lpublic;", "public private protected static final transient", ")");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.typeOfSignature("Illegal type for StackMapType: ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.compactClassName("java.lang.");
      try { 
        Utility.typeOfSignature("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("[[g#Xb#S8$b&@b8H%f", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.encode(byteArray0, false);
      Utility.decode("$A$A$A$A$A$A$A$A$A", false);
      byte byte0 = Constants.ATTR_PMG;
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      Utility.accessToString((int) 'Y');
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVarilable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVarilable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("N-R|yoP<e f,{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N-R|yoP<e f,{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[11];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)78, (int) (byte)51, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-71);
      Utility.accessToString((int) (byte) (-71), true);
      Utility.clearBit((byte) (-71), 2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.methodTypeToSignature("byte", (String[]) null);
      try { 
        Utility.typeOfSignature("()B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Types");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      Utility.accessToString(159);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("public private protected static final transient", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Utility.methodTypeToSignature("public private protected static final transient", stringArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Utility.encode(byteArray1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}aA7A^L(~@V,-Dp", "iload_2", "public private protected static final transient", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }aA7A^L(~@V,-Dp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("+:a!)OoR1[F \"rv]-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OoR1[F \"rv]-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.methodSignatureReturnType("Ilegally nested bracke^d:");
      Utility.classOrInterface(1806);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      try { 
        Utility.typeOfSignature("1r!kC?`iW%9l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1r!kC?`iW%9l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",Ej*|6>#rU'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Ej*|6>#rU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)72;
      Utility.codeToString(byteArray0, constantPool0, (-2545), 172, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.typeOfSignature("LlD4p,iY{");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte)89;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 600, true);
      try { 
        Utility.typeOfSignature("0:    lstore_2\n1:    nop\n2:    dup\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lstore_2
         // 1:    nop
         // 2:    dup
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.clearBit((byte)0, (byte)0);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)88;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "invokespecial";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "invokespecial";
      stringArray0[5] = "invokespecial";
      Utility.methodTypeToSignature("invokespecial", stringArray0);
      try { 
        Utility.typeOfSignature("2LTHq(]/@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2LTHq(]/@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Utility.methodSignatureReturnType("JP,otq|[?e");
      Utility.typeOfSignature("SourceFile: ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Emg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Emg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.accessToString(114, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (-1643), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(18, 29);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("multia@ewarray");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-1885), (int) (byte)119);
      Utility.classOrInterface((byte)119);
      Utility.isJavaIdentifierPart('y');
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.convertString("LPq2ivq]%\"yNb,!;V");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("HCE>pp9z~/NAc_Qy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HCE>pp9z~/NAc_Qy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 826, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.typeOfSignature("ZVJ&H4yy");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "char";
      stringArray0[1] = " 8V^]Ub wT^";
      stringArray0[2] = "RuntimeVisibleParameterAnnotations";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "RuntimeVisibleParameterAnnotations";
      Utility.methodTypeToSignature(" 8V^]Ub wT^", stringArray0);
      try { 
        Utility.typeOfSignature("@dU3bOcsO:5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @dU3bOcsO:5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.accessToString(41);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public static synchronized";
      objectArray0[5] = (Object) "public static synchronized";
      objectArray0[6] = (Object) "public static synchronized";
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@754c05c0\", \"public static synchronized\", null, null, null, \"public static synchronized\", \"public static synchronized\", null, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@754c05c0\", \"public static synchronized\", null, null, null, \"public static synchronized\", \"public static synchronized\", null, null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 6017, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O$D,;3Vc2P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O$D,;3Vc2P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Class ");
      Utility.compactClassName("Class ");
      byte byte0 = Constants.CONSTANT_Integer;
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("Gb*c;JSzM<_z#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gb*c;JSzM<_z#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-94), false);
      Utility.getSignature(".MeEf ^3R2i71");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.methodSignatureReturnType("SF;!gDpl");
      Utility.clearBit(78, 78);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.getSignature("+:a!)OoR1[F \"rv]-");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Fieldref;
      Utility.convertString("',d`");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.methodSignatureReturnType("ZVJ&H4yy");
      byte byte0 = Constants.CONSTANT_Integer;
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Emg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Emg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.convertString("\n     MethodArguments:");
      Utility.typeOfSignature("D%,B4|");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.convertString("\n     MetodArguments:");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.typeOfSignature("J4NH4~r.");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.getSignature(")S");
      try { 
        Utility.typeOfSignature(")S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.accessToString(44);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      try { 
        Utility.typeOfSignature("$foI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $foI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.typeOfSignature("V");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("@A90k@\"l}1uJ1VY", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)87, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      try { 
        Utility.typeOfSignature("U<RFWV-eJ$$/t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U<RFWV-eJ$$/t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid";
      stringArray0[1] = "Invalid";
      stringArray0[2] = "Invalid";
      stringArray0[3] = "Invalid";
      stringArray0[4] = "Invalid";
      Utility.methodTypeToSignature("Invalid", stringArray0);
      Utility.methodTypeToSignature("I", stringArray0);
      Utility.methodSignatureArgumentTypes("(LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;)LInvalid;");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)35;
      Utility.accessToString(93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("java.lang.java.lang.");
      try { 
        Utility.typeOfSignature("java.lang.java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.clearBit(49, 49);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (-954), false);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      try { 
        Utility.typeOfSignature("#xmBb8l'l<p&XuEGT5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #xmBb8l'l<p&XuEGT5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "char";
      stringArray0[1] = " 8V^]b wT^";
      stringArray0[2] = "RuntimeVisibleParameterAnnotations";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "RuntimeVisibleParameterAnnotations";
      Utility.methodTypeToSignature(" 8V^]b wT^", stringArray0);
      Utility.typeOfSignature("!Cf .`U]]D9;#b}B");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.clearBit((byte)0, (byte)0);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 225, false);
      try { 
        Utility.typeOfSignature("!G]k!$j:}n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G]k!$j:}n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.typeOfSignature("B");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U(y'u@ ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U(y'u@ '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4>O,bas7T8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4>O,bas7T8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 295, 103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-85), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (-277), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:");
      Utility.accessToString(41);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)18;
      try { 
        Utility.typeOfSignature("PExQN,OU0tLC6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PExQN,OU0tLC6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3), 54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W7b/(^$$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W7b/(^$$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.accessToString(948);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Illegally nested brackets:";
      stringArray0[1] = "protected final synchronized transient native interface";
      stringArray0[2] = "Illegally nested brackets:";
      stringArray0[3] = "Illegally nested brackets:";
      stringArray0[4] = "Illegally nested brackets:";
      stringArray0[5] = "protected final synchronized transient native interface";
      stringArray0[6] = "Illegally nested brackets:";
      stringArray0[7] = "void";
      stringArray0[8] = "java.lang.Character";
      try { 
        Utility.methodTypeToSignature("java.lang.Character", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("FxCp:1;?&x%yHr!g,'8");
      Utility.clearBit(64, 64);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-573), (int) (byte)92, true);
      Utility.toHexString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7Z'4aN~_d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Z'4aN~_d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=/wipCvZ%G} ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =/wipCvZ%G} 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[4] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2102, true);
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      try { 
        Utility.typeOfSignature("0:    lshl\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lshl
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), (int) (byte) (-32), false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.methodSignatureReturnType("D%,B4|");
      MockURI.URI("double", "double", "double");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)90;
      byteArray0[5] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-116), (-3146));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-74), (int) (byte) (-116), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    f2l
         // 2:    <illegal opcode>
         // 3:    dup_x1
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)106;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte)106, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (-987), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("MBwzLjM", false);
      Utility.typeOfSignature("[[g#Xb#S8$b&@b8H%f");
      // Undeclared exception!
      try { 
        Utility.signatureToString("=F gM<K:_P( ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=F gM<K:_P( '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.clearBit(50, 50);
      try { 
        Utility.typeOfSignature(".J^-i_^;hV#tJ&Rg4 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .J^-i_^;hV#tJ&Rg4 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-73);
      byteArray0[3] = (byte) (-89);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-89), false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%5t[umsy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %5t[umsy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.clearBit(181, 181);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)87;
      String string0 = "Qu'B";
      try { 
        Utility.typeOfSignature("Qu'B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qu'B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("*?0 76kFy:]v?')X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, (int) (byte)88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4712, 4712, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      try { 
        Utility.typeOfSignature("',;d=`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ',;d=`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Amg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Amg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte)39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-1386));
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (-1386));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-111);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-111), true);
      byte byte0 = Constants.ATTR_ANNOTATION_DEFAULT;
      Utility.accessToString((int) (byte) (-111));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, 3414, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("irem");
      Utility.compactClassName("irem", "irem", true);
      try { 
        Utility.typeOfSignature("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.clearBit(2204, 2204);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2107), (int) (byte)112, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    irem
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte) (-45), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)39;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)39, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = Utility.decode("rG?4G", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (-694), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-782), (int) (byte)97, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&WJ|*(J7<qFz'sNm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &WJ|*(J7<qFz'sNm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/8b:0C>(qtob,baG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /8b:0C>(qtob,baG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, 154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 93, false);
      try { 
        Utility.typeOfMethodSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-79);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-56));
      byteSequence0.skip(1L);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), 751, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "ZVJ&H4yy";
      byte byte0 = (byte)53;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      int int0 = 160;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 160, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-3999));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (-3999), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[11];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)51, (int) (byte)51, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-121);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-39));
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)72;
      byteArray1[6] = (byte)77;
      byteArray1[7] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 59, 647, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 1419, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.accessToString((-1386));
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 1901, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)59;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("$87HH$3b$rX$ra$3b", false);
      Utility.codeToString(byteArray0, constantPool0, (-767), 205, false);
      // Undeclared exception!
      try { 
        Signature.translate("Invalid type: ,~6saOB{jJJjlgta:u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: Invalid type: ,~6saOB{jJJjlgta:u read I
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(1024);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte)126, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.methodSignatureReturnType("S75^:fX<3uW{&/HKO");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 348, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "ZVJ&H4yy";
      Utility.convertString("ZVJ&H4yy");
      try { 
        Utility.typeOfSignature("Y)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "Mm";
      try { 
        Utility.typeOfSignature("Mm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(95, 201);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (-3868), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("S+B:hY6", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, (-2674), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, 1136, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-100);
      byteArray1[5] = (byte) (-118);
      byteArray1[6] = (byte) (-118);
      byteArray1[7] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 20, (int) (byte) (-118), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.signatureToString("ZVJ&H4yy", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("4>O,bas7T8", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 153, (int) (byte)35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.clearBit(4, (-1357));
      Utility.accessToString(4);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 327, (int) (byte)115, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2428, 2603, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*n)+}BY/z2bA9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n)+}BY/z2bA9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 70, true);
      try { 
        Utility.typeOfMethodSignature("dgF^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dgF^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = (byte)48;
      byte[] byteArray0 = new byte[10];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)48;
      try { 
        Utility.typeOfSignature("9l23@Ed 2;#u.Y{V0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9l23@Ed 2;#u.Y{V0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte)101, false);
      Utility.getSignature("fconst_1");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.signatureToString("ZVJ&H4yy", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The wildcard list must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard list must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\n     MethodArguments:");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 796, 934, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1985, 1985, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)123;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 470, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)32;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, 201, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.clearBit(2205, 2205);
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("char", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 9970, 5313, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~GkB_*SVrUp]i~wQ}%");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      try { 
        Utility.methodSignatureReturnType("Qw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)79;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1725), (int) (byte)84, false);
      String string0 = "KInz/$";
      try { 
        Utility.methodSignatureReturnType("KInz/$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KInz/$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 846, 2751, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)103;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("int", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 116, 8192, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-81);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)48, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), (int) (byte)48, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte) (-30);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.typeOfSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte) (-98), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(95, 95);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)81;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte)109, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.methodSignatureReturnType("Couldn't find: ");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)42;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), 1423, false);
      Utility.getSignature("W7b/(^$$");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)76;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte) (-45), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.accessToString(95);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("Sensitive", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2370, 223, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.accessToString(667);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-90);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte)126;
      byteArray1[4] = (byte) (-90);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-90), 6, true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1299, (-222), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)122, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-325), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)22;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-92), (int) (byte)22, true);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-77), false);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(1024);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte)126, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (-1708), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[2] = (byte)119;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("*vP`Oi_F", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (-816), false);
      Utility.toHexString(byteArray1);
      Utility.compactClassName("V", "V", false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1410, 17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("int", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-63), (-2537), false);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-69);
      byteArray0[2] = (byte)92;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-120);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 200, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    dload_2\n1:    lload\t\t%92\n3:    nop\n4:    arraylength\n5:    l2i\n", "0:    dload_2\n1:    lload\t\t%92\n3:    nop\n4:    arraylength\n5:    l2i\n", "0:    dload_2\n1:    lload\t\t%92\n3:    nop\n4:    arraylength\n5:    l2i\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dload_2
         // 1:    lload\t\t%92
         // 3:    nop
         // 4:    arraylength
         // 5:    l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)32;
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)32, false);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (int) (byte)117, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)100;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte)6, true);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.clearBit(4, 4);
      Utility.accessToString(4);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("protected", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, 4, (-2537), false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)106;
      byteArray0[4] = (byte)79;
      byteArray0[7] = (byte)106;
      byteArray0[6] = (byte)87;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[8] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2066), (int) (byte)18, false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte) (-71), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 800, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-86);
      Utility.encode(byteArray0, false);
      Utility.decode("Ilegally nested brake^d:", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)79, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8*i:v-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8*i:v-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.methodSignatureReturnType("`_)BzLv'F4?l");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (-776), true);
      Utility.printArray((Object[]) null, true);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(70);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-95);
      byteArray0[6] = (byte)26;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)26, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte) (-118), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-26);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 392, false);
      Utility.convertString("B%#P4]#Lo");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, (int) (byte)127, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-71);
      Utility.setBit((byte)24, (byte)24);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)6;
      Utility.toHexString(byteArray1);
      String string0 = "(name_index = ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(name_index = ", "(name_index = ", "fZ,{BJ7&R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `name_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = Member.PUBLIC;
      Utility.accessToString(4);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 195, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-113), true);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.methodSignatureReturnType("Ilegally nested brake^d:");
      try { 
        Utility.typeOfSignature("XN@'2Y0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XN@'2Y0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 36, 2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)96;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-982), 59, true);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)71;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-62);
      byteArray0[3] = (byte) (-76);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-419), (-544), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_0
         // 1:    monitorenter
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.clearBit(4, (-1357));
      Utility.accessToString(4);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-17);
      byteArray0[5] = (byte)23;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)63;
      try { 
        Utility.methodSignatureReturnType("MXs5#dc[exZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MXs5#dc[exZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-116);
      byte byte0 = (byte)29;
      byteArray0[5] = (byte)29;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.getSignature("C[Fm4bMWT:p[y%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Fm4bMWT:p[y%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)19, 4);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (-2680), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-88);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-59);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-88), false);
      byte byte0 = Constants.ATTR_ANNOTATION_DEFAULT;
      try { 
        Utility.typeOfMethodSignature("Invalid signature: `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), 1699, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    baload
         // 1:    <illegal opcode>
         // 2:    if_icmpne\t\t#15811
         // 5:    lload_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-36);
      byteArray0[4] = (byte) (-37);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)120;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-37), 161, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishl
         // 1:    <illegal opcode>
         // 2:    nop
         // 3:    nop
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-122);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-104), (int) (byte) (-122), false);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 158, (int) (byte)84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3f^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3f^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-128), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, (int) (byte) (-76), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte) (-4), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte)25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte) (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2484, (int) (byte)47, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-86);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)82;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-101);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-144), 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dastore
         // 1:    iconst_m1
         // 2:    iconst_m1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)36;
      byteArray0[5] = (byte) (-75);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, 123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(1024);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (int) (byte) (-107), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 59, (int) (byte) (-101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-127);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), 164, false);
      Utility.accessToString((int) (byte) (-83));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      Utility.encode(byteArray0, true);
      int int0 = 470;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, 470, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(255, (byte)19);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(4, 3264);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, (-518), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4919. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      try { 
        Utility.methodSignatureReturnType("LkwIAaqZWn/j#{4<~}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LkwIAaqZWn/j#{4<~}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
