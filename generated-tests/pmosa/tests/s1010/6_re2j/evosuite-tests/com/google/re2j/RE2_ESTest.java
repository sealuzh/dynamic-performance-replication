/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:26:43 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("WKyI]{");
      String string0 = rE2_0.replaceFirst("WKyI]{", "");
      assertEquals("", string0);
      
      String string1 = RE2.quoteMeta("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2.quoteMeta("q.N");
      byte[] byteArray0 = new byte[0];
      rE2_0.findAllUTF8Index(byteArray0, 14);
      rE2_0.match("");
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("r");
      rE2_0.replaceFirst("r", "r");
      RE2.quoteMeta("r");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("MPTY_MATH");
      List<String[]> list0 = rE2_0.findAllSubmatch("MPTY_MATH", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("WK+5yI]{");
      List<String[]> list0 = rE2_0.findAllSubmatch("WK+5yI]{", 11077);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Submatch(byteArray0);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 2, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-64);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte) (-69));
      assertNotNull(list0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Ic");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 2176);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-83));
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compileImpl("", 2584, false);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      rE2_0.findAllIndex("", 2584);
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byte byte2 = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      rE2_0.findUTF8(byteArray0);
      rE2_0.findAll("l[y7.)=8F", 2584);
      rE2_0.replaceFirst("tt #|]k<R)0s$jy", "");
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      rE2_0.match("l[y7.)=8F", 1684, 878, (byte)0, intArray0, 128);
      try { 
        RE2.match("tt #|]k<R)0s$jy", "tt #|]k<R)0s$jy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllIndex("", (-1441));
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String> list0 = rE2_0.findAll("", 65382);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("2");
      byte[] byteArray0 = new byte[0];
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-6));
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("NO_MATCH", 0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      List<int[]> list0 = rE2_0.findAllIndex("NO_MATCH", 530);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("r");
      rE2_0.find("r");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.Regexp$Op", 1414, false);
      rE2_0.match("com.google.re2j.Regexp$Op");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)123;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)60);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, 304);
      RE2 rE2_1 = RE2.compilePOSIX("{2");
      rE2_1.match("com.google.re2j.Regexp$Op");
      rE2_0.findSubmatch("{2");
      RE2.compileImpl("2z<*2Ex@y!FQ$o", (byte)60, true);
      String string0 = rE2_1.toString();
      assertEquals("{2", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("WKyI]{");
      boolean boolean0 = rE2_0.prefixComplete;
      String[] stringArray0 = rE2_0.findSubmatch("WKyI]{");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      RE2 rE2_0 = RE2.compileImpl("-d56tqM8HXcEq&Gm", 6, false);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("w");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)34;
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllSubmatch("can't happen", 4556);
      // Undeclared exception!
      try { 
        rE2_0.matchUTF8((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("WKyI]{");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(".+*?()|[]{}^$", 1064);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "\\A";
      RE2 rE2_0 = RE2.compile("A");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1006;
      intArray0[2] = 1006;
      String string1 = "0i6=OSv~Sn'Hoo)9";
      rE2_0.findSubmatchIndex("0i6=OSv~Sn'Hoo)9");
      intArray0[3] = (-1);
      intArray0[4] = 1006;
      rE2_0.findAll("A", (-3476));
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      rE2_0.findAllSubmatchIndex("", 0);
      intArray0[7] = 1006;
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        rE2_0.match("A", (-1), 1006, 1006, intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      byteArray0[1] = (byte)0;
      String string1 = "";
      RE2.compilePOSIX("");
      byteArray0[2] = (byte)51;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      rE2_0.matchUTF8(byteArray1);
      rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      rE2_0.findUTF8Submatch(byteArray1);
      RE2.compilePOSIX("");
      // Undeclared exception!
      try { 
        rE2_0.match("", (-1112), 0, (-251), intArray0, (-843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("NO_MATCH");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("can't happen", (-1813), true);
      rE2_0.get();
      byte[] byteArray0 = new byte[3];
      rE2_0.findSubmatch("");
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-1813));
      assertNull(list0);
      
      rE2_0.reset();
      RE2 rE2_1 = RE2.compileImpl("", 1870, true);
      List<int[]> list1 = rE2_1.findAllUTF8SubmatchIndex(byteArray0, (-17));
      assertEquals(3, list1.size());
      assertNotNull(list1);
      
      RE2.quoteMeta("");
      rE2_1.findAllUTF8Index(byteArray0, 15);
      RE2 rE2_2 = new RE2("");
      boolean boolean0 = rE2_2.match("");
      assertTrue(boolean0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("NO_MATCH");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      rE2_0.findAllUTF8Submatch(byteArray0, 48);
      rE2_0.findAllUTF8(byteArray0, (-1273));
      RE2 rE2_1 = RE2.compilePOSIX("{2");
      rE2_1.longest = false;
      rE2_0.match("NO_MATCH");
      rE2_1.findSubmatch("{2");
      // Undeclared exception!
      try { 
        RE2.compileImpl((String) null, (byte) (-108), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      byteArray0[1] = (byte)0;
      rE2_0.findAll("", (byte)0);
      rE2_0.match("", (byte)0, (byte)0, (-2570), (int[]) null, (byte)0);
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-12));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.numberOfCapturingGroups();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 3445, intArray0, 290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("A");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1006;
      intArray0[2] = 1006;
      rE2_0.findSubmatchIndex("0i6=OSv~Sn'Hoo)9");
      intArray0[3] = (-1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      int[] intArray1 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(".~CR&gR]-ulNs3k^]}&");
      int[] intArray0 = rE2_0.findIndex("K#L0KV60g&V%i");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("EMPTY_MATCH");
      boolean boolean0 = rE2_0.match("EMPTY_MATCH", 0, 0, 0, (int[]) null, 0);
      assertFalse(boolean0);
      
      int[] intArray0 = rE2_0.findIndex("EMPTY_MATCH");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 11}, intArray0);
      
      String string0 = rE2_0.replaceAll("EMPTY_MATCH", "");
      assertEquals("", string0);
      
      int[] intArray1 = rE2_0.findSubmatchIndex("EMPTY_MATCH");
      assertArrayEquals(new int[] {0, 11}, intArray1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("WKyI]{");
      rE2_0.findAllSubmatchIndex("WKyI]{", (-222));
      List<String[]> list0 = rE2_0.findAllSubmatch("WKyI]{", (-1394));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[4];
      rE2_0.replaceAll("", "l<;JbB{");
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)12;
      rE2_0.prefix = "";
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-558));
      assertNotNull(list0);
      
      byteArray0[2] = (byte)0;
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)33);
      assertEquals(5, list1.size());
      assertNotNull(list1);
      
      byteArray0[3] = (byte)0;
      rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      rE2_0.replaceAll("", "");
      RE2 rE2_1 = RE2.compilePOSIX("UTF-8");
      rE2_1.findUTF8SubmatchIndex(byteArray0);
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertNull(list2);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      rE2_1.findSubmatchIndex("3a");
      StringBuilder stringBuilder0 = new StringBuilder(":l?RU");
      String string0 = rE2_0.replaceAll("fLF/-K*dZ", "l<;JbB{");
      assertEquals("l<;JbB{fl<;JbB{Ll<;JbB{Fl<;JbB{/l<;JbB{l<;JbB{-l<;JbB{Kl<;JbB{*l<;JbB{dl<;JbB{Zl<;JbB{", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("NO_MATCH");
      rE2_0.prefixRune = 8676;
      RE2 rE2_1 = RE2.compilePOSIX("-O|$");
      List<String[]> list0 = rE2_1.findAllSubmatch("^U{Ye_.qB^", 2908);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("fXB'poze%Ea,Mk|1*");
      String string0 = rE2_0.replaceAll("^x00-x{1FFFF}", "^x00-x{1FFFF}");
      assertEquals("^x00-x{1FFFF}^^x00-x{1FFFF}x^x00-x{1FFFF}0^x00-x{1FFFF}0^x00-x{1FFFF}-^x00-x{1FFFF}x^x00-x{1FFFF}{^x00-x{1FFFF}F^x00-x{1FFFF}F^x00-x{1FFFF}F^x00-x{1FFFF}F^x00-x{1FFFF}}^x00-x{1FFFF}", string0);
  }
}
