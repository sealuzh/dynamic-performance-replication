/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:51:00 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1377, 1377);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1377, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals("2,147,483,647", string0);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0L);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-669), 1590);
      String string0 = rationalNumber0.toString();
      assertEquals("-669/1590 (-0.421)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(634.5);
      assertEquals(1269, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.15000000000000568);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(3, rationalNumber0.numerator);
      assertEquals(0.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(248.75);
      float float0 = rationalNumber0.floatValue();
      assertEquals(248.75F, float0, 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("248.75", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-671.0));
      long long0 = rationalNumber0.longValue();
      assertEquals((-671.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-671L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.3702058317430783E-6);
      assertEquals(3.370203358070626E-6, rationalNumber0.doubleValue(), 0.01);
      assertEquals(296718, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-4249L), 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(954.0036297072869);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-954), rationalNumber1.numerator);
      
      String string0 = rationalNumber0.toString();
      assertEquals("954", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      assertEquals(0, rationalNumber2.numerator);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1420L, 723L);
      assertEquals(1.9640387275242046, rationalNumber3.doubleValue(), 0.01);
      assertEquals(723, rationalNumber3.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836426234105E9));
      long long0 = rationalNumber0.longValue();
      assertEquals((-2147483643L), long0);
      assertEquals((-2.147483643E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483657L, 2147483657L);
      String string0 = rationalNumber0.toString();
      String string1 = rationalNumber0.toDisplayString();
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483657L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber2.floatValue();
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals((short) (-1), rationalNumber2.shortValue());
      
      int int0 = rationalNumber1.intValue();
      assertEquals((-4.656613E-10F), rationalNumber1.floatValue(), 0.01F);
      assertEquals((-2147483639), rationalNumber1.divisor);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483674L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483674, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483708L), (-2147483708L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-2147483748L));
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0, double0, 0.01);
  }
}
