/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:23:44 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueLobDb;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "drop table=";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.conn.TempTableInfo", defaultDBTable0, (-231535573), "drop table=");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = "select into";
      boolean boolean0 = false;
      SQLUtil.normalize("select into", false);
      SQLUtil.mutatesDataOrStructure("alter index");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.removeComments("j,");
      SQLUtil.isDML("j,");
      SQLUtil.isDDL("");
      SQLUtil.isDML("j,");
      SQLUtil.isProcedureCall("j,");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBDataType0.isNumber();
      defaultDBColumn0.toString();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderValue(dBColumnArray0[0]);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("truncatedrop materialized view");
      String string0 = "/*";
      SQLUtil.normalize("/*", false);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("LONG RAW");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("TtO0d", false, "TtO0d", "TtO0d");
      dBCheckConstraint0.setDoc("TtO0d");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.isDML("LONG RAW");
      SQLUtil.mutatesDataOrStructure("&+$$VW,:)Q;Ewr|g");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "wR52pka0RjwnJ0", nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Connection encoding (using JVM's nomenclature): ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"using JVM's nomenclature\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isProcedureCall("select intoselect into");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter index";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "alter index";
      stringArray0[4] = "select intoselect into";
      stringArray0[5] = "alter index";
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter index", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, stringArray0[6], true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-647L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "//";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "//";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = "//";
      stringArray1[4] = "//";
      stringArray1[5] = null;
      stringArray1[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, stringArray0[2], false, stringArray1);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("h2.scriptDirectory");
      DBSchema dBSchema0 = new DBSchema("ALTER TABLE ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wUt/m/E|w", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "B ";
      stringArray0[1] = "B ";
      stringArray0[2] = "wUt/m/E|w";
      dBCatalog0.getComponents();
      stringArray0[3] = "B ";
      stringArray0[4] = "wUt/m/E|w";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("B ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("FOREIGN KEY (B , B , wUt/m/E|w, B , wUt/m/E|w) REFERENCES wUt/m/E|w(B , B , wUt/m/E|w, B , wUt/m/E|w)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~LiG_sz1oxJXRJL";
      stringArray0[1] = "~LiG_sz1oxJXRJL";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~LiG_sz1oxJXRJL";
      stringArray0[5] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("~LiG_sz1oxJXRJL", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "5]U.FuHI#Se3(|(e?";
      stringArray1[2] = "'";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "'G=Oq!L";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("~LiG_sz1oxJXRJL", true, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("8z/+!eZw'~N]j;4?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]K/", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8z/+!eZw'~N]j;4?";
      stringArray0[1] = "]K/";
      stringArray0[2] = "]K/";
      stringArray0[3] = "]K/";
      stringArray0[4] = "8z/+!eZw'~N]j;4?";
      stringArray0[5] = "alter materialized viewgtp%vpj,voik2?";
      stringArray0[6] = "8z/+!eZw'~N]j;4?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewgtp%vpj,voik2?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8z/+!eZw'~N]j;4?");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"alter materialized viewgtp%vpj,voik2?\" ", stringBuilder0.toString());
      
      SQLUtil.removeComments("]K/");
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (8z/+!eZw'~N]j;4?, ]K/, ]K/, ]K/, 8z/+!eZw'~N]j;4?, alter materialized viewgtp%vpj,voik2?, 8z/+!eZw'~N]j;4?)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[1] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[2] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[3] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[4] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[5] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      stringArray0[7] = "execute!'dp2(4sd`qe.sdhn";
      stringArray0[8] = "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer";
      SQLUtil.leftJoin("org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer", stringArray0, "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer", "execute!'dp2(4sd`qe.sdhn", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unexpected code path", defaultDBTable0, (-157567845), "Unexpected code path");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.removeComments("alter session");
      SQLUtil.mutatesDataOrStructure("alter session");
      String string0 = "alter indexdrop indextoken 133";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-190618714));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("*FqM`,r}?", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)18;
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-1943), byteArray0, (byte)37);
      valueLobDb0.getReader();
      // Undeclared exception!
      try { 
        valueLobDb0.getInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data conversion error converting \"969386250912\" [90021-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L";
      stringArray0[1] = "into";
      stringArray0[2] = "'9.(";
      stringArray0[3] = "D007";
      stringArray0[4] = "m-|\"xu";
      stringArray0[5] = "m-|\"";
      stringArray0[6] = "Ey%+6r";
      stringArray0[7] = "UVSHD%g6@";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(L, into, '9.(, D007, m-|\"xu, m-|\", Ey%+6r, UVSHD%g6@)", string0);
      
      SQLUtil.typeAndName((DBObject) null);
      String string1 = SQLUtil.normalize("m-|\"", false);
      assertEquals("m - | \"\"", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("select into");
      dBSchema0.getTriggers();
      dBSchema0.getTables();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@V", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, 192, " as ");
      defaultDBColumn0.getNotNullConstraint();
      dBSchema0.equals((Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@V";
      stringArray0[1] = "!'dp2(4sd`qe.sdhn";
      stringArray0[2] = "@V";
      stringArray0[3] = "@V";
      stringArray0[4] = "execute";
      stringArray0[5] = "!'dp2(4sd`qe.sdhn";
      stringArray0[6] = "@V";
      stringArray0[7] = "execute";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      dBUniqueConstraint0.setDoc("execute");
      dBUniqueConstraint0.addColumnName("@V");
      String string0 = SQLUtil.substituteMarkers("select into", "!'dp2(4sd`qe.sdhn", dBUniqueConstraint0);
      assertEquals("select into", string0);
      
      SQLUtil.removeComments("@V");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnListWithTableName("different", stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("J)q7{%{KM_K=k3#f=^Z", stringArray0);
      assertEquals("J)q7{%{KM_K=k3#f=^Z.@V, J)q7{%{KM_K=k3#f=^Z.!'dp2(4sd`qe.sdhn, J)q7{%{KM_K=k3#f=^Z.@V, J)q7{%{KM_K=k3#f=^Z.@V, J)q7{%{KM_K=k3#f=^Z.execute, J)q7{%{KM_K=k3#f=^Z.!'dp2(4sd`qe.sdhn, J)q7{%{KM_K=k3#f=^Z.@V, J)q7{%{KM_K=k3#f=^Z.execute", string1);
      
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.removeComments("different.@V, different.!'dp2(4sd`qe.sdhn, different.@V, different.@V, different.execute, different.!'dp2(4sd`qe.sdhn, different.@V, different.execute");
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT execute ", string2);
      
      SQLUtil.renderValue(defaultDBTable0);
      String string3 = SQLUtil.normalize("CONSTRAINT execute ", false);
      assertEquals("CONSTRAINT execute", string3);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string4 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (@V, !'dp2(4sd`qe.sdhn, @V, @V, execute, !'dp2(4sd`qe.sdhn, @V, execute)", string4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-1718899525), "drop table");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", (DBTable) null, dBDataType0, integer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop table");
      DBDataType.getInstance((-1718899525), "drop table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop table";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "drop table";
      stringArray0[2] = "DROP TABLE(0)";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("drop table = 'drop table' AND drop table = 'drop table' AND DROP TABLE(0) = 'DROP TABLE(0)'", string0);
      
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.substituteMarkers("drop table", "into", (Object) null);
      assertEquals("drop table", string1);
      
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop table DROP TABLE(0) NULL", string2);
      
      String string3 = SQLUtil.normalize("drop table DROP TABLE(0) NULL", false);
      assertEquals("drop table DROP TABLE (0) NULL", string3);
      
      String string4 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(drop table, drop table, DROP TABLE(0))", string4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.removeComments("org.apache.");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.");
      DBDataType dBDataType0 = DBDataType.getInstance((-637032030), "+Dy<g[#:>&3:?:M");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G~*`L", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create materialized vieworg.apache.derby.iapi.store.replication.master.masterfactory");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("OT{%4W-S01;8l", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("yU[p%JuJ%t`'wM=", defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("org.apache.", defaultDBTable0, (-718), "+Dy<g[#:>&3:?:M");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("G~*`L, OT{%4W-S01;8l, yU[p%JuJ%t`'wM=, org.apache.", string0);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G~*`L";
      stringArray0[1] = "+DY<G[#:>&3:?:M";
      stringArray0[2] = "yU[p%JuJ%t`'wM=";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "G~*`L";
      objectArray0[1] = (Object) "+DY<G[#:>&3:?:M";
      objectArray0[2] = (Object) dBColumnArray0[1];
      objectArray0[3] = (Object) "+DY<G[#:>&3:?:M";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "+DY<G[#:>&3:?:M";
      String string1 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("G~*`L = 'G~*`L' AND +DY<G[#:>&3:?:M = '+DY<G[#:>&3:?:M' AND yU[p%JuJ%t`'wM= = OT{%4W-S01;8l : +DY<G[#:>&3:?:M", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.normalize("hK~/[$", true);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema("create unique index]_.^?>]nmxu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index]_.^?>]nmxu", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("hK ~ / [ $", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "create unique index]_.^?>]nmxu";
      stringArray1[1] = "create unique index]_.^?>]nmxu";
      stringArray1[2] = "";
      stringArray1[3] = null;
      String string1 = "[BxUanQab0\\u9b_O";
      stringArray1[4] = string1;
      stringArray1[5] = "create unique index]_.^?>]nmxu";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Database name to connect to; may be specified directly in the JDBC URL.", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string2);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-6593), (Object) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -6593
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "g9Z,+u{";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "g9Z,+u{";
      stringArray0[2] = "g9Z,+u{";
      String string1 = "create tablereferences";
      SQLUtil.join("", "g9Z,+u{", stringArray0, "create tablereferences", " join ", stringArray0);
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable(" join ");
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-609), "@C24&e y-.dw,22/DG");
      Integer integer0 = new Integer((-609));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT NULL", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals(" NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("M-|\"XuPfPi95");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("M-|\"XuPfPi95", defaultDBTable0, 32767, "alter indexselect into");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ALTER INDEXSELECT INTO";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "M-|\"XuPfPi95", false, stringArray0);
      defaultDBColumn0.setVersionColumn(false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string0 = "alter sessionselect into";
      SQLUtil.removeComments("alter sessionselect into");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 's';
      charArray0[2] = '?';
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "ALTER INDEXSELECT INTO");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      SQLUtil.isQuery(")^~wi7!q/");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("oYOc dw02Ey1");
      assertFalse(boolean0);
      
      Character character0 = new Character(' ');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("' '", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "4";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "4";
      stringArray0[3] = "4";
      stringArray0[4] = "\"St!}*iKTJ:7\",";
      stringArray0[5] = "4";
      SQLUtil.join("4", "4", stringArray0, "drop table", "4", stringArray0);
      SQLUtil.normalize("XRJA'", true);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "o1VK";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("o1VK", stringBuilder1);
      int int0 = 122;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(122, (double) 122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 122
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "gM1$]-,@P=V{]l-3l}";
      SQLUtil.normalize("gM1$]-,@P=V{]l-3l}", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.product.external.name");
      int int0 = 90048;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(90048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-1718899525), "drop table");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", (DBTable) null, dBDataType0, integer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop table");
      DBDataType.getInstance((-1718899525), "drop table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop table";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[1] = "drop table";
      stringArray0[2] = "DROP TABLE(0)";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("drop table = 'drop table' AND drop table = 'drop table' AND DROP TABLE(0) = 'DROP TABLE(0)'", string0);
      
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.substituteMarkers("drop table", "into", (Object) null);
      assertEquals("drop table", string1);
      
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop table DROP TABLE(0) NULL", string2);
      
      SQLUtil.removeComments("drop table");
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(drop table, drop table, DROP TABLE(0))", string3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      System.setCurrentTimeMillis(32768L);
      System.setCurrentTimeMillis(0L);
      SQLUtil.parseColumnTypeAndSize("Md)); u");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-9);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(5, byteArray0, 0L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("insertu01*&n", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(10, (double) 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter materialized viewprimary key";
      stringArray0[1] = "\"~Q_i[BtjM*I,OX:";
      stringArray0[2] = "alter materialized viewprimary key";
      stringArray0[3] = "alter table";
      String string0 = SQLUtil.leftJoin("alter materialized viewprimary key", stringArray0, "drop materialized viewcallcg=", "n5p1.", stringArray0);
      assertEquals("left join drop materialized viewcallcg= as n5p1. on alter materialized viewprimary key.alter materialized viewprimary key = n5p1..alter materialized viewprimary key and alter materialized viewprimary key.\"~Q_i[BtjM*I,OX: = n5p1..\"~Q_i[BtjM*I,OX: and alter materialized viewprimary key.alter materialized viewprimary key = n5p1..alter materialized viewprimary key and alter materialized viewprimary key.alter table = n5p1..alter table and alter materialized viewprimary key.null = n5p1..null and alter materialized viewprimary key.null = n5p1..null and alter materialized viewprimary key.null = n5p1..null and alter materialized viewprimary key.null = n5p1..null and alter materialized viewprimary key.null = n5p1..null", string0);
      
      TableContainer tableContainer0 = new TableContainer("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
      
      String string2 = SQLUtil.normalize("alter table", false);
      assertEquals("alter table", string2);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "_7", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string3 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (alter materialized viewprimary key, \"~Q_i[BtjM*I,OX:, alter materialized viewprimary key, alter table, , , , , )", string3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "%>[H4l~@Zpu^P.b{";
      SQLUtil.mutatesStructure("%>[H4l~@Zpu^P.b{");
      SQLUtil.isQuery("%>[H4l~@Zpu^P.b{");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("xZ;b_UJ_D=9BxMNFn");
      SQLUtil.normalize("%>[H4l~@Zpu^P.b{", false);
      TableContainer tableContainer0 = new TableContainer("");
      String string1 = "javac";
      tableContainer0.getTable("javac");
      String[] stringArray0 = new String[6];
      tableContainer0.getComponents();
      stringArray0[0] = "% > [ H4l ~ @ Zpu ^ P.b {";
      stringArray0[1] = "";
      stringArray0[2] = "%>[H4l~@Zpu^P.b{";
      stringArray0[3] = "javac";
      stringArray0[4] = "";
      stringArray0[5] = "% > [ H4l ~ @ Zpu ^ P.b {";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = "V0G8CY:L$3";
      SQLUtil.innerJoin((String) null, stringArray0, "V0G8CY:L$3", "ibj9{7[W] _", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select i");
      SQLUtil.mutatesDataOrStructure("gTP%vpj,VOik2?");
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("drop materialized viewselect into", true, defaultDBTable0, "gTP%vpj,VOik2?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isDDL("create tableku gdcc9!qnt");
      DBSchema dBSchema0 = new DBSchema("kN,Y:~Y0}i*<rMC");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kN,Y:~Y0}i*<rMC", dBSchema0);
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder(125);
      int int0 = 1877;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1877, "create tableku gdcc9!qnt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1877
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "h2.scrip";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter table";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "h2.scrip";
      stringArray0[3] = "h2.scrip";
      stringArray0[4] = "h2.scrip";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      int int0 = 39;
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "h2.scrip", 39, 39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 39, end 39, s.length() 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isDDL("`:v");
      SQLUtil.isProcedureCall("`:v");
      SQLUtil.normalize("[", false);
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "2 J5.mG83@iw@W";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("[", stringBuilder0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '!';
      charArray0[2] = '{';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(57, charArray0, 57, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Bad args: columnNames = ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, dBTable0, "select");
      String string0 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "L^OR(#F<";
      SQLUtil.removeComments("L^OR(#F<");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("L^OR(#F<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: L^OR(#F<
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter materialized viewprimary key";
      stringArray0[1] = "\"~Q_i[BtjM*I,OX:";
      stringArray0[2] = "alter materialized viewprimary key";
      stringArray0[3] = "alter table";
      SQLUtil.leftJoin("alter materialized viewprimary key", stringArray0, "drop materialized viewcallcg=", "n5p1.", stringArray0);
      TableContainer tableContainer0 = new TableContainer("alter table");
      tableContainer0.getTable("1X^");
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.mutatesDataOrStructure("7$5T");
      SQLUtil.normalize("alter table", false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "_7", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "ALTER TABLE ";
      SQLUtil.isQuery("ALTER TABLE ");
      String string1 = "create tablecallcg=";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create tablecallcg=";
      stringArray0[1] = "ALTER TABLE ";
      String string2 = "callcg=";
      stringArray0[2] = "callcg=";
      stringArray0[3] = "ALTER TABLE ";
      SQLUtil.join("ALTER TABLE ", "create tablecallcg=", stringArray0, "ALTER TABLE ", "callcg=", stringArray0);
      String string3 = "alter tableprimary key";
      SQLUtil.innerJoin("alter tableprimary key", stringArray0, "drop indexcg=", "drop indexcg=", stringArray0);
      SQLUtil.mutatesDataOrStructure("create tablecallcg=");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.isQuery("!JwbUV&oZ42}1");
      SQLUtil.isDDL("PRIMARY KEY ");
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!JwbUV&oZ42}1";
      stringArray0[1] = "!JwbUV&oZ42}1";
      stringArray0[2] = "PRIMARY KEY ";
      stringArray0[3] = "!JwbUV&oZ42}1";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("select into", true);
      System.setCurrentTimeMillis(5242880L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectselect into";
      stringArray0[1] = "select into";
      stringArray0[2] = "u4 f6aq6'w>+;exh|!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("selectselect into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'selectselect into' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(2019L);
      StringBuilder stringBuilder2 = stringBuilder1.append(2331.4863F);
      StringBuilder stringBuilder3 = stringBuilder2.append("");
      SQLUtil.addRequiredCondition("alter materialized viewselect into", stringBuilder3);
      assertEquals("20192331.4863 and alter materialized viewselect into", stringBuilder3.toString());
      assertEquals("20192331.4863 and alter materialized viewselect into", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("h2.scriptDirectory");
      DBSchema dBSchema0 = new DBSchema("ALTER TABLE ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wUt/m/E|w", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "B ";
      stringArray0[1] = "B ";
      stringArray0[2] = "wUt/m/E|w";
      stringArray0[3] = "B ";
      stringArray0[4] = "wUt/m/E|w";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("B ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (B , B , wUt/m/E|w, B , wUt/m/E|w) REFERENCES wUt/m/E|w(B , B , wUt/m/E|w, B , wUt/m/E|w)", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.getTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(6, "-Oq");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder("{Y!Wl)i B{$'9'?");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(6, false);
      StringBuilder stringBuilder3 = stringBuilder2.insert(6, "jOMQKwC9dT");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("{Y!Wl)jOMQKwC9dTfalsei B{$'9'? or -OQ(0,3)", stringBuilder3.toString());
      assertEquals("{Y!Wl)jOMQKwC9dTfalsei B{$'9'? or -OQ(0,3)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "zqA&rej}X";
      stringArray0[2] = "select";
      stringArray0[3] = "zqA&rej}X";
      stringArray0[4] = "zqA&rej}X";
      stringArray0[5] = "zqA&rej}X";
      stringArray0[6] = "zqA&rej}X";
      stringArray0[7] = "zqA&rej}X";
      SQLUtil.innerJoin("zqA&rej}X", stringArray0, "", "", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(8.0);
      SQLUtil.addOptionalCondition("zqA&rej}X", stringBuilder1);
      assertEquals("8.0 or zqA&rej}X", stringBuilder1.toString());
      assertEquals("8.0 or zqA&rej}X", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "uG3\\Ye";
      String string1 = ";?z+vy.ti\\E";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(";?z+vy.tiE", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.substituteMarkers("", "", (Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("insert&]1fj#b<", stringArray0, "insert&]1fj#b<", "insert&]1fj#b<", stringArray0);
      SQLUtil.leftJoin("^]$dkEg^slm2IQkAd", stringArray0, "/+~_MOc091^$GPwj", "insert&]1fj#b<", stringArray0);
      SQLUtil.renderColumnListWithTableName("/+~_MOc091^$GPwj", stringArray0);
      SQLUtil.isQuery("left join /+~_MOc091^$GPwj as insert&]1fj#b< on ");
      SQLUtil.isDML("B7<H*");
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("mm(#", false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "x67Bna", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(100L);
      SQLUtil.isDML("inner");
      System.setCurrentTimeMillis(100L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.equals("&#T($$`");
      File file0 = MockFile.createTempFile("&#T($$`", "inner");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("&#T($$`", false);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "org.databene.jdbacl.SQLUtil", false, " AND ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' AND ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("select into");
      dBSchema0.getTriggers();
      dBSchema0.getTables();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@V", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, 192, " as ");
      defaultDBColumn0.getNotNullConstraint();
      dBSchema0.equals((Object) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@V";
      stringArray0[1] = "!Sd~2(4-d`>e.sdhn";
      stringArray0[2] = "@V";
      stringArray0[3] = "@V";
      stringArray0[4] = "execute";
      stringArray0[5] = "!Sd~2(4-d`>e.sdhn";
      stringArray0[6] = "@V";
      stringArray0[7] = "execute";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      dBUniqueConstraint0.setDoc("execute");
      dBUniqueConstraint0.addColumnName("@V");
      SQLUtil.substituteMarkers("select into", "!Sd~2(4-d`>e.sdhn", dBUniqueConstraint0);
      SQLUtil.removeComments("@V");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnListWithTableName("eu4@c56pWi-nZ", stringArray0);
      SQLUtil.mutatesDataOrStructure("select into");
      SQLUtil.renderColumnListWithTableName("J)q7{%{KM_K=k3#f=^Z", stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.removeComments("eu4@c56pWi-nZ.@V, eu4@c56pWi-nZ.!Sd~2(4-d`>e.sdhn, eu4@c56pWi-nZ.@V, eu4@c56pWi-nZ.@V, eu4@c56pWi-nZ.execute, eu4@c56pWi-nZ.!Sd~2(4-d`>e.sdhn, eu4@c56pWi-nZ.@V, eu4@c56pWi-nZ.execute");
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderValue(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((String) null, (String) null, "@ffJ~F6jhu=SonA<:");
      // Undeclared exception!
      try { 
        jdbcConnectionPool0.getConnection(".~NuXHyW)M:O&~J", "oU6vV`|h,`&o}/d");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.jdbcx.JdbcConnectionPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callcg=");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "callcg=";
      stringArray0[1] = "callcg=";
      stringArray0[2] = "callcg=";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "callcg=";
      objectArray0[1] = (Object) "callcg=";
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) "callcg=";
      objectArray0[4] = (Object) boolean0;
      objectArray0[5] = (Object) "callcg=";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callcg=");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1%", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("callcg=", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(dBTable0, "callcg=", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=)", string1);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false";
      stringArray1[1] = "callcg=";
      stringArray1[2] = "CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=)";
      SQLUtil.join("drop table", "callcg=", stringArray1, " join ", " join ", stringArray1);
      String string2 = SQLUtil.normalize("DROP ALIAS READ_CLOB_DB;", false);
      assertEquals("DROP ALIAS READ_CLOB_DB ;", string2);
      
      String string3 = SQLUtil.join("callcg=", "CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=)", stringArray0, "org.databene.jdbacl.SQLUtil", "callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false", stringArray1);
      assertEquals("callcg= join org.databene.jdbacl.SQLUtil as callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false on CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=).callcg= = callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false.callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false and CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=).callcg= = callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false.callcg= and CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=).callcg= = callcg= = 'callcg=' AND callcg= = 'callcg=' AND callcg= = false.CONSTRAINT callcg= PRIMARY KEY (callcg=, callcg=, callcg=)", string3);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "drop tableleft";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop tableleft", (String[]) null, (String) null, "drop tableleft", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis((-710L));
      String string0 = "!cK";
      SQLUtil.isProcedureCall("!cK");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = "Ui&,D}),>[\\&ye_6.Y";
      String string2 = " = ";
      File file0 = MockFile.createTempFile("Ui&,D}),>[&ye_6.Y", " = ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\"');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
