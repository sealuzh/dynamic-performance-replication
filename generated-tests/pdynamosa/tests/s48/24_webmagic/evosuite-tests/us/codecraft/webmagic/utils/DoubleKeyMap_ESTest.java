/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:21:35 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(integer0, hashMap1);
      Map<Object, String> map0 = doubleKeyMap0.remove(integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      doubleKeyMap0.put((Object) hashMap0, "'.]", hashMap2);
      Map<Object, Object> map0 = doubleKeyMap0.newMap();
      Map<String, HashMap<Object, String>> map1 = doubleKeyMap0.remove((Object) map0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1525);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Object, Integer>, String>();
      Map<Map<Object, Integer>, String> map0 = doubleKeyMap0.remove((HashMap<Object, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = doubleKeyMap0.put((Object) null, "wrong proto type map ", (HashMap<Object, String>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, Map<Map<String, Integer>, Map<String, Integer>>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Map<String, Integer>, Map<String, Integer>>>();
      HashMap<Map<String, Integer>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Integer>, Map<String, Integer>>();
      Map<Map<String, Integer>, Map<String, Integer>> map0 = doubleKeyMap1.put("", (Object) doubleKeyMap0, (Map<Map<String, Integer>, Map<String, Integer>>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Map<String, Integer>, Object> hashMap0 = new HashMap<Map<String, Integer>, Object>();
      HashMap<String, Map<HashMap<Map<String, Integer>, Object>, Integer>> hashMap1 = new HashMap<String, Map<HashMap<Map<String, Integer>, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Map<String, Integer>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<String, Integer>, Object>, Integer>(hashMap1, class0);
      Integer integer0 = doubleKeyMap0.get((String) null, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<HashMap<Object, String>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, String>(hashMap0);
      Map<Integer, Map<HashMap<Object, String>, HashMap<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, HashMap<Object, String>, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Object, String>, HashMap<Integer, Object>>(map0, class0);
      Map<HashMap<Object, String>, HashMap<Integer, Object>> map1 = doubleKeyMap1.get((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<String, String>>();
      Object object0 = new Object();
      Map<String, HashMap<String, String>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      HashMap<Integer, Map<HashMap<String, Integer>, String>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Integer>, String>>();
      DoubleKeyMap<Integer, HashMap<String, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Integer>, String>(hashMap0);
      Map<Object, Map<HashMap<Integer, Object>, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Object>, String> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<Integer, Object>, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) doubleKeyMap0, (HashMap<Integer, Object>) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, String>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      doubleKeyMap0.put((Object) hashMap0, "'.]", hashMap2);
      HashMap<Object, String> hashMap3 = doubleKeyMap0.remove((Object) hashMap1, "'.]");
      assertSame(hashMap3, hashMap2);
      assertNotNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove(object0, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      HashMap<Map<String, Integer>, String> hashMap1 = new HashMap<Map<String, Integer>, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>(hashMap1);
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      Map<Object, Map<String, HashMap<Object, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, String>>(map0);
      doubleKeyMap1.put((Object) hashMap0, "i9U~9YHTiY", hashMap2);
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      HashMap<Object, String> hashMap4 = doubleKeyMap1.put((Object) hashMap3, "us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap2);
      assertNull(hashMap4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Integer>(hashMap0, class0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      doubleKeyMap1.put((Object) hashMap1, (Object) hashMap1, "");
      String string0 = doubleKeyMap1.get((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap0.put((String) null, "hf4n-cfyx^@'QGUu", object0);
      doubleKeyMap0.remove((String) null, (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }
}
