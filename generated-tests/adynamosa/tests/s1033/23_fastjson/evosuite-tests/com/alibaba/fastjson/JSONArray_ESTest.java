/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 05:59:24 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.sql.Date;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.getByteValue(3089);
      jSONArray0.isEmpty();
      jSONArray1.listIterator();
      jSONArray0.getFloat(989);
      jSONArray0.lastIndexOf((Object) null);
      jSONArray0.getFloat(3089);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONArray1.getJSONObject(4891);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      jSONArray1.retainAll(jSONArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      classLoader1.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getFloat(963);
      jSONArray2.remove(766);
      assertEquals(4896, jSONArray1.size());
      assertEquals(4896, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSON.setDefaultTypeKey("=*(D2b-^s!L&hC~AP(}");
      JSONArray jSONArray3 = new JSONArray(5385);
      jSONArray1.retainAll(jSONArray2);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(5385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5385, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2962, "@type");
      jSONArray1.getFloatValue(989);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.get(989);
      assertEquals(5926, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.clear();
      jSONArray0.set(3089, jSONArray1);
      JSONArray jSONArray2 = jSONArray0.getJSONArray(3089);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 2862;
      jSONArray2.getJSONArray(2862);
      JSON.setDefaultTypeKey("");
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray2.retainAll(jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ClassLoader classLoader2 = classLoader1.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader2);
      Class<JSONObject> class0 = JSONObject.class;
      String string0 = null;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(3089, 2862);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.clear();
      jSONArray0.set(3089, jSONArray1);
      jSONArray1.fluentClear();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      ClassLoader.getSystemClassLoader();
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.parse("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSONObject jSONObject1 = new JSONObject();
      jSONArray1.isEmpty();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray1.set(989, serializeConfig0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("@type", class0, 989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. @type
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.getFloatValue(199);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(7, (Collection<?>) linkedList0);
      jSONArray2.listIterator();
      jSONArray1.fluentRemoveAll(linkedList0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getDouble(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.getFloatValue(199);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(7, (Collection<?>) linkedList0);
      jSONArray2.listIterator();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      jSONArray1.getByteValue(28);
      jSONArray0.getBooleanValue(0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      jSONArray1.getByteValue(3089);
      jSONArray0.getBooleanValue(3089);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      jSONArray0.getFloat(461);
      jSONArray1.lastIndexOf(listIterator0);
      jSONArray0.getFloat(989);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONArray0.getJSONObject(382);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(4896);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      Class<JSONObject> class0 = JSONObject.class;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      jSONArray0.set(315, iterator0);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(315, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.getByteValue(3089);
      jSONArray1.getBooleanValue(989);
      jSONArray0.listIterator();
      jSONArray0.getFloat(989);
      jSONArray0.lastIndexOf((Object) null);
      jSONArray0.getFloat(3089);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      jSONArray1.getJSONObject(939);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";Ljava/lang/Object;I)Z");
      jSONArray0.getShortValue(4891);
      jSONArray0.getBooleanValue(775);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(4896);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.fluentSet(306, (Object) null);
      jSONArray0.stream();
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(3089, (Collection<?>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray3 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.getDouble(979);
      jSONArray3.add(989, (Object) null);
      jSONArray2.contains((Object) null);
      assertEquals(4898, jSONArray1.size());
      assertEquals(4898, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer((-281));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.fluentSet(989, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -281
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      int int0 = 315;
      jSONArray0.clear();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.set(315, iterator0);
      int int1 = 653;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(315);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.util.ArrayList$Itr@6c7461c9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.getByteValue(3089);
      jSONArray1.getBooleanValue(989);
      jSONArray0.listIterator();
      jSONArray0.fluentAddAll(3071, (Collection<?>) jSONArray1);
      jSONArray1.getFloat((byte)0);
      jSONArray1.getInteger(3089);
      jSONArray1.parallelStream();
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      jSONArray0.getString(1004);
      int int0 = 3073;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.getByteValue(3089);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<JavaBeanSerializer> class0 = JavaBeanSerializer.class;
      jSONArray0.getObject(1694, (Type) class0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getFloatValue(310);
      jSONArray2.getBooleanValue(1);
      jSONArray0.remove((Object) classLoader0);
      jSONArray1.listIterator();
      assertEquals(4897, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QLb4y3~*fd44_~");
      jSONArray0.getJSONArray(3089);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(4896);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.clear();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.set(362, iterator0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONArray", 0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(362);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.ArrayList$Itr@61a6e9d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray2 = jSONArray1.fluentSet(306, (Object) null);
      jSONArray2.stream();
      JSON.setDefaultTypeKey("yyyy-MM-dd HH:mm:ss");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(0, (Collection<?>) linkedList0);
      jSONArray3.getIntValue(957);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray0.getDouble(979);
      assertEquals(4897, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H*JSE");
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.parallelStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"'6Ce&0;-K!#\u0006M");
      Class<Annotation> class0 = Annotation.class;
      FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.getIntValue(0);
      jSONArray0.getShortValue(344);
      jSONArray0.getDoubleValue(192);
      jSONArray1.getDate(192);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-1283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H*JSE");
      jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.parallelStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(4896);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H*JSE");
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.parallelStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"'6Ce&0;-K!#\u0006M");
      Class<Annotation> class0 = Annotation.class;
      FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.getIntValue(0);
      jSONArray0.getShortValue(344);
      jSONArray0.addAll(71, (Collection<?>) jSONArray1);
      assertEquals(9794, jSONArray1.size());
      assertEquals(9794, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = jSONArray0.fluentSet(53, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer(165);
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) integer0, serializeConfig0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      jSONArray2.setComponentType(type0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(53);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4905, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      jSONArray1.getBigInteger(2);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray2);
      jSONArray1.getTimestamp(0);
      // Undeclared exception!
      try { 
        jSONArray4.toArray((Annotation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) iterator0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3076);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3076, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N*PhM|s");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QLb4y3~*fd44_~");
      jSONArray0.getJSONArray(0);
      jSONArray1.fluentAdd(4896, (Object) null);
      jSONArray1.getBoolean(53);
      jSONArray0.getShortValue(0);
      jSONArray0.getBooleanValue(4896);
      jSONArray1.getShort((short)0);
      assertEquals(4898, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONArray0.removeAll(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      jSONArray1.equals(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(16, (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedList0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer(4864);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      SerializeConfig serializeConfig0 = new SerializeConfig(50, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONBytes((Object) null, serializeConfig0, (SerializeFilter) null, serializerFeatureArray0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.removeAll(linkedList0);
      jSONArray0.equals(iterator0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(4181, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4181, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(53, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      LinkedHashSet<ParameterizedTypeImpl> linkedHashSet0 = new LinkedHashSet<ParameterizedTypeImpl>();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.addAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.add(jSONArray0);
      jSONArray0.containsAll(linkedList0);
      jSONArray0.getComponentType();
      Integer integer0 = new Integer((-414));
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet((byte)32, (Object) null);
      JSON.toJSON((Object) jSONArray1);
      jSONArray1.iterator();
      jSONArray0.size();
      JSON.DEFAULT_PARSER_FEATURE = (int) (byte)53;
      // Undeclared exception!
      try { 
        jSONArray0.subList(4894, 4891);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 4891
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-649), "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.fluentSet(4882, jSONArray1);
      jSONArray1.addAll(0, (Collection<?>) jSONArray0);
      jSONArray1.getShort(0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(4896);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-649), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig.getGlobalInstance();
      jSONArray0.toArray();
      jSONArray1.getString(4896);
      jSONArray0.getLongValue(684);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<InputStream> class0 = InputStream.class;
      parserConfig0.checkAutoType((String) null, class0, 4883);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-886));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      jSONArray0.getByteValue(0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<InputStream> class0 = InputStream.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      jSONArray0.indexOf(javaBeanSerializer0);
      int int0 = (-1580);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.addAll(1905, (Collection<?>) jSONArray0);
      jSONArray0.getShort(116);
      assertEquals(9794, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig.global = parserConfig0;
      Integer integer0 = new Integer(0);
      jSONArray0.add((Object) integer0);
      jSONArray0.isEmpty();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(4896, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.remove((Object) null);
      jSONArray0.add((Object) "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.fluentAdd((Object) linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      Integer integer0 = new Integer(4865);
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), integer0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(833);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 833, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4889);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONArray jSONArray0 = new JSONArray(4889);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4889, parameterizedTypeImpl0);
      Integer integer0 = new Integer(4855);
      // Undeclared exception!
      try { 
        jSONArray1.add((-649), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -649, Size: 4890
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      Integer integer0 = new Integer(566);
      jSONArray0.getBigInteger(13);
      jSONArray1.fluentClear();
      Annotation[] annotationArray0 = new Annotation[0];
      Annotation[] annotationArray1 = jSONArray1.toArray(annotationArray0);
      assertSame(annotationArray0, annotationArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-649), "@type");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-649), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      int int0 = 0;
      Class<Object> class1 = Object.class;
      jSONArray1.getObject(0, class1);
      jSONArray0.getTimestamp(421);
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      Integer integer0 = new Integer(3436);
      JSONArray jSONArray4 = jSONArray3.fluentSet(0, integer0);
      // Undeclared exception!
      try { 
        jSONArray4.getLongValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
      
      jSONArray0.add((Object) "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(0, class0);
      jSONArray0.remove((Object) "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig.global = parserConfig0;
      Class<Integer> class0 = Integer.class;
      parserConfig0.checkAutoType((String) null, class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(1657);
      jSONArray3.getShortValue(144);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4862, javaBeanSerializer0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) class0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.componentType = (Type) class0;
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray0.getLongValue(4875);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Integer integer0 = new Integer((-69));
      javaBeanSerializer0.writeAsArray(jSONSerializer0, list0, integer0, jSONArray3.componentType, (-649));
      JSON.toJSON((Object) pipedInputStream0);
      jSONArray4.fluentAdd(0, (Object) javaBeanSerializer0);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.serializer.JavaBeanSerializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.getLong(2949);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      jSONArray1.listIterator();
      jSONArray0.getFloat(4886);
      assertEquals(4897, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray1.getByteValue(0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4889);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.isEmpty();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1566), (Type) parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2962, "@type");
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QLb4y3~*fd44_~");
      jSONObject0.getJSONArray("(JLjavKa/lang/Long;");
      jSONArray0.getJSONArray(0);
      jSONArray1.fluentAdd(4896, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains((Object) null);
      jSONArray0.add((Object) "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Class<JSONObject> class0 = JSONObject.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      int int1 = 12;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(4896);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy-MM-dd HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains((Object) null);
      jSONArray0.add((Object) "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Class<Object> class0 = Object.class;
      int int0 = 0;
      Class<Object> class1 = Object.class;
      jSONArray1.getObject(0, class1);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, parameterizedTypeImpl0, (Field) null, 9958, (-1), 283);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4889);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      jSONArray0.add((Object) dataInputStream0);
      jSONArray0.isEmpty();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(104);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("(JLjavKa/lang/Long;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray1.getLong(0);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray1.getByteValue(0);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.String, fieldName : 4896, create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      int int0 = 4896;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("(JLjavKa/lang/Long;");
      jSONArray0.getJSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("(J)LjavKa/lang/Long;");
      jSONArray0.getJSONArray(0);
      assertEquals(4897, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2962, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(1);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 688;
      JSONArray jSONArray0 = new JSONArray(688);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.contains(iterator0);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-3553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-649));
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      jSONArray1.toArray();
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.DisableSpecialKeyDetect;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.NonStringKeyAsString;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.IgnoreAutoType;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseBigDecimal;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.NonStringKeyAsString;
      featureArray0[8] = feature8;
      Iterator<Object> iterator0 = jSONArray1.iterator();
      jSONArray0.add((Object) iterator0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1727));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      jSONArray0.setRelatedArray(integer0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(552);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) "(I)C");
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.remove(406);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 406, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>(163);
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(240);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 240, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("([C)Ljava/math/BigDecimal;", concurrentHashMap0);
      jSONArray0.setRelatedArray((Object) null);
      JSON.toJSON((Object) jSONArray0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(296, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      jSONArray0.setComponentType((Type) null);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.toString();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2985, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4896, "yyyy-MM-dd HH:mm:ss");
      jSONArray1.getByte(12);
      assertEquals(4897, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      assertTrue(jSONArray0.isEmpty());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1881);
      pipedInputStream0.markSupported();
      jSONArray0.add((Object) pipedInputStream0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[6] = "@type";
      String[] stringArray1 = jSONArray0.toArray(stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(1580);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1580, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(18);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) linkedList0);
      jSONArray2.getRelatedArray();
      boolean boolean0 = jSONArray2.remove((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1957));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2403));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-2111), (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 76;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(9974);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9974, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer((-257));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add(0, (Object) integer0);
      assertEquals((-649), JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-649));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -649
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".2F5H=1~yv-?M");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-3865));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      jSONArray0.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(3056);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3056, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, parameterizedTypeImpl0, (Field) null, 9958, (-1), 283);
      fieldInfo0.getAnnation(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      Date date0 = jSONArray1.getSqlDate(0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SupportNonPublicField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AutoCloseSource;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowISO8601DateFormat;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableFieldSmartMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SortFeidFastMatch;
      featureArray0[7] = feature7;
      JSON.parseObject((String) null, class0, featureArray0);
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "a^p1";
      stringArray0[2] = ".6";
      stringArray0[3] = "()Z";
      stringArray0[4] = "WwBM%+OTDW;Q";
      stringArray0[5] = "";
      stringArray0[6] = "WriteMapNullValue";
      stringArray0[7] = "p{\"7Li;S:1";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      JSONArray jSONArray0 = new JSONArray(list0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("d", hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1392510721, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1392510721, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(854);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 854, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(114);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer(114);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializeConfig0.clearSerializers();
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) integer0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      LinkedList<Annotation> linkedList1 = new LinkedList<Annotation>(linkedList0);
      jSONArray0.retainAll(linkedList1);
      jSONArray0.add((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      boolean boolean0 = jSONArray0.addAll(0, (Collection<?>) jSONArray1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1900);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1900, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1895);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1895, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-4025));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(309);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 309, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UnaryOperator.identity();
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.fluentAdd((Object) unaryOperator0);
      jSONArray0.toArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1855);
      jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1890);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1890, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator.identity();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.add((-649), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -649, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(5503);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5503, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.set(1901, unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UnaryOperator.identity();
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.get((-1950));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1892;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1892, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-303);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", (-32768));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(true);
      int int0 = jSONArray0.lastIndexOf(jSONObject0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator.identity();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(393216);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 393216, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) unaryOperator0);
      assertSame(jSONArray1, jSONArray0);
      
      jSONArray1.hashCode();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(5503, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5503, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      int int0 = 0;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer((-257));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(520, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 520, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.clone();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Integer integer0 = new Integer((-281));
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Class class1 = (Class)FieldInfo.getFieldType(class0, class0, class0);
      jSONArray0.setComponentType(class1);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray1);
      jSONArray3.fluentClear();
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qY'~zAj+g[k1M$KHeG6");
      Integer integer0 = new Integer((-275));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(0);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-649));
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getByte(1097);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1097, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(4, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Integer integer0 = new Integer((-272));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 1997;
      JSONArray jSONArray0 = new JSONArray(1997);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-649), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      Integer integer1 = new Integer(1160);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1130, integer0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      featureArray0[3] = feature1;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[4] = feature3;
      featureArray0[5] = feature1;
      Feature feature4 = Feature.SupportArrayToBean;
      featureArray0[6] = feature4;
      Feature feature5 = Feature.InitStringFieldAsEmpty;
      featureArray0[7] = feature5;
      Feature feature6 = Feature.OrderedField;
      featureArray0[8] = feature6;
      // Undeclared exception!
      try { 
        jSONArray1.set((-511), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(2952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2952, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1433);
      ParserConfig parserConfig0 = ParserConfig.global;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", parserConfig0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray1 = new JSONArray();
      boolean boolean0 = jSONArray1.add((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-380);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer((-272));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-188));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~%bC:lKRaIn-");
      Integer integer0 = new Integer((-272));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 209;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.size();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentRemove((Object) integer0);
      Object object0 = new Object();
      JSON.toJSON(object0);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer((-300));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray4.getFloat(137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      List<Integer> list0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = (-300);
      Integer integer0 = new Integer((-300));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-393217), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 142, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{x%DIfg| zH}IN5";
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(4758);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4758, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3252);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-3252));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(114);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer(0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) integer0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) "@type");
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 25;
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_PARSER_FEATURE = (-649);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(25, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-393217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 25;
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Feature[] featureArray0 = new Feature[6];
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-3567));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 114;
      JSONArray jSONArray0 = new JSONArray(114);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      List<Locale.LanguageRange> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(899);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(899, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 899, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Object> class1 = Object.class;
      parserConfig0.checkAutoType((String) null, class1, 368);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentSet(0, (Object) null);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) parserConfig0);
      JSONArray jSONArray5 = jSONArray4.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray5.getObject(111, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(114);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.subList(0, (-1720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1720)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 114;
      JSONArray jSONArray0 = new JSONArray(114);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-3112), class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(114);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      List<Locale.LanguageRange> list0 = jSONArray0.toJavaList(class0);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(114, (Collection<?>) list1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(135);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, 129);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 129
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3252);
      jSONArray0.getComponentType();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@type");
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.MapSortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SortField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.writeJSONString((Writer) mockPrintWriter0, (Object) jSONArray1, 692, serializerFeatureArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-3864));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer((-303));
      JSONArray jSONArray0 = new JSONArray(4326);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2226);
      int int0 = 0;
      jSONArray0.iterator();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      JSON.parseObject("", featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2226);
      jSONArray0.iterator();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      JSON.parseObject("", featureArray0);
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      jSONArray0.clear();
      jSONArray0.subList(0, 0);
      // Undeclared exception!
      try { 
        JSON.parseArray("w/O?5#b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 364, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2023), (Object) "@type");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2023, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2226);
      int int0 = 0;
      jSONArray0.iterator();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      JSON.parseObject("", featureArray0);
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(118);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(118, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3016);
      String string0 = "0";
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.parse("0", parserConfig0, 1);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      int int0 = 43;
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(43, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) "@type");
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getLong(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "yyyy-MM-dd HH:mm:ss");
      Integer integer0 = new Integer(989);
      jSONArray1.fluentAdd((Object) integer0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      parserConfig0.checkAutoType("]xB\"EWKg$(", class0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-60);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      jSONArray0.getComponentType();
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowSingleQuotes;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportNonPublicField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowUnQuotedFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportNonPublicField;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.UseObjectArray;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.AllowUnQuotedFieldNames;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableFieldSmartMatch;
      featureArray0[8] = feature8;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 66, (int)  (-31), charsetDecoder0, (Type) null, featureArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.toJSONString();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-1603));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1603, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(604);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(604);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 604, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-3252);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-3252));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 664;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(664);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 664, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.fluentRetainAll(set0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.writeJSONString((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(182);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-332), 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -332
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
