/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:56:40 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("can't parse double value '");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("can't parse double value '");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration("TK`iN0n-rU@Q=");
      dynamicSelectModel2.getComponent();
      dynamicSelectModel3.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression TK`iN0n-rU@Q=.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection(" and ");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration((String) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dynamicSelectModel1.empty(mockMinguoDate0);
      dynamicSelectModel1.reset();
      dynamicSelectModel1.collection("(position:");
      dynamicSelectModel1.validate();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression (position: to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "X09@qGx";
      ElExpression elExpression0 = new ElExpression("X09@qGx");
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, "X09@qGx");
      String string1 = "Colgroup component can be added only to a Table.";
      ElExpression elExpression1 = any0.el("Colgroup component can be added only to a Table.");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression1, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel1.setTopLevelComponent((StandaloneComponent) null);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty((Object) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getLabel((-1100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = null;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection((String) null);
      dynamicSelectModel1.setComponent((Component) null);
      dynamicSelectModel1.value((String) null);
      dynamicSelectModel0.getTopLevelComponent();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression null evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator((String) null);
      dynamicSelectModel1.collection("1");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression 1 evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel1.translator("[] from ");
      Collection collection0 = dynamicSelectModel0.getObjects();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel1.getOptionCount();
      dynamicSelectModel0.enumeration("[] from ");
      dynamicSelectModel0.getObjects();
      Object object0 = dynamicSelectModel0.translateValue(".values()");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      Object object0 = new Object();
      Object object1 = new Object();
      dynamicSelectModel1.empty(object1);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("yPTlvoIT*y");
      dynamicSelectModel2.value("[] from ");
      dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000031");
      int int0 = dynamicSelectModel0.getOptionCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.empty(object0);
      dynamicSelectModel2.translator("[] from ");
      dynamicSelectModel2.value("[] from ");
      dynamicSelectModel0.translateValue("[] from ");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      dynamicSelectModel0.empty(mockThaiBuddhistDate0);
      dynamicSelectModel0.translateValue("[] from ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel1.collection("ckB(~0BqL-Y?*d2!ban");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.translator("6G,");
      dynamicSelectModel4.getOptionCount();
      dynamicSelectModel4.validate();
      assertSame(dynamicSelectModel0, dynamicSelectModel4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("[] from ");
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      Object object0 = new Object();
      Object object1 = new Object();
      dynamicSelectModel1.empty(object1);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("yPTlvoIT*y");
      dynamicSelectModel2.value("[] from ");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000031");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression yPTlvoIT*y to translate value ' org.mvel.util.FastList@0000000031'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      Object object0 = new Object();
      Object object1 = new Object();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.empty(object1);
      dynamicSelectModel1.value("]T Mf7E");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label("[] from ");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.value("[] from ");
      dynamicSelectModel3.translateValue("org.mvel.util.FastList@0000000031");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel0.translator("onsubmit");
      dynamicSelectModel4.getOptionCount();
      dynamicSelectModel2.validate();
      dynamicSelectModel3.enumeration("yPTlvoIT*y");
      ErrorPage errorPage0 = new ErrorPage();
      dynamicSelectModel5.setTopLevelComponent(errorPage0);
      dynamicSelectModel5.translator((String) null);
      DynamicSelectModel dynamicSelectModel6 = dynamicSelectModel4.enumeration((String) null);
      assertSame(dynamicSelectModel6, dynamicSelectModel4);
  }
}
