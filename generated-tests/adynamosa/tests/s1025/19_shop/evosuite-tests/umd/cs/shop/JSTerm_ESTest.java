/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:31:31 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SystemInUtil.addInputLine(" ");
      StringReader stringReader0 = new StringReader("d{c(<R}:1");
      stringReader0.markSupported();
      char[] charArray0 = new char[7];
      charArray0[6] = 'd';
      charArray0[2] = '\u0000';
      charArray0[1] = '\u0000';
      charArray0[5] = 'F';
      char[] charArray1 = new char[1];
      stringReader0.read(charArray1);
      charArray0[6] = 'd';
      stringReader0.ready();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      charBuffer0.position(2);
      charBuffer0.flip();
      charBuffer0.rewind();
      charBuffer0.codePoints();
      CharBuffer.allocate('\u0000');
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("np2)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      stringReader0.reset();
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals("[., [np2], [nil]]", jSTerm2.toString());
      
      jSTerm2.print();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm3);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
      assertEquals("[., [np2], [nil]]", jSTerm3.toString());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d{c(<R}:1");
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = ' ';
      charArray0[1] = 'a';
      charArray0[4] = '\\';
      charArray0[5] = 'W';
      char[] charArray1 = new char[1];
      stringReader0.read(charArray1);
      charArray0[6] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(AKKb{z]+wBd_uy\"Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-3);
      JSJshopVars.minus = (-3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.remove((Object) jSTerm0);
      jSTerm0.parallelStream();
      jSTerm1.makeEval(true);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("@eYP^\f\"=vSpW5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(259);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      assertTrue(jSTerm4.isEval());
      
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm3.print();
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEval());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*[xY>FG,cCK");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(AKKb{z]+w(Md)uy\"Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-2771);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.parallelStream();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(AKKb{z]+w(B d_uy\"Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-2);
      jSTerm0.add((Object) streamTokenizer0);
      Object object0 = new Object();
      jSTerm0.toArray();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-2), 42);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.toArray();
      streamTokenizer0.ordinaryChars(47, 45);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.clear();
      jSTerm1.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      Object object0 = new Object();
      jSTerm1.toArray();
      streamTokenizer0.ordinaryChars((-663), (-663));
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.close();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.isGround();
      streamTokenizer0.whitespaceChars(59, 59);
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm1.print();
      streamTokenizer0.ordinaryChar(59);
      jSTerm2.makeEval(true);
      jSTerm0.isFunction();
      jSTerm2.call();
      jSTerm3.equals(jSTerm0);
      jSTerm0.equals(jSTerm1);
      jSTerm4.matches(jSTerm2);
      jSTerm1.applySubstitutionT(jSSubstitution4);
      jSTerm2.matches(jSTerm1);
      System.setCurrentTimeMillis((-719L));
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) stringReader0;
      jSTerm0.toArray(objectArray0);
      streamTokenizer0.ordinaryChars((-1650), (-1));
      jSTerm2.print();
      jSTerm0.makeEval(true);
      jSTerm0.isFunction();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.equals(jSTerm1);
      jSTerm0.matches(jSTerm3);
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.listIterator((-1650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1650
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = 41;
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) stringReader0;
      jSTerm2.toArray(objectArray0);
      int int0 = 1;
      streamTokenizer0.ordinaryChars(1, 41);
      jSTerm1.print();
      jSTerm2.makeEval(true);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      stringReader0.close();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.isGround();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm2.standarizerPredicateForm();
      streamTokenizer0.whitespaceChars(17, 17);
      JSJshopVars.rightBrac = (-1802);
      jSSubstitution2.stream();
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution2);
      jSSubstitution3.add((Object) "list");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm4.matches(jSTerm1, jSSubstitution2);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      stringReader0.close();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm4.isGround();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      int int0 = 17;
      JSJshopVars.minus = 40;
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm2.standarizerPredicateForm();
      streamTokenizer0.whitespaceChars(17, 17);
      JSJshopVars.rightBrac = (-1802);
      jSSubstitution2.stream();
      jSTerm1.isFunction();
      JSTerm jSTerm5 = jSTerm1.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm0);
      jSTerm5.isGround();
      jSTerm4.applySubstitutionT(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm5.listIterator(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, (-1));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "e");
      stringReader0.read(charBuffer0);
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.leftPar = 815;
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove((Object) jSTerm1);
      jSTerm2.makeEval(true);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSJshopVars.backquote = (-4906);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm3.isEval());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Q>yrGC}Czmh[q{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("ap?J?qhcu7TZG4");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm5.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7O3Wm=!Nuz8qsA0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.clonePF();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove((Object) jSTerm1);
      jSTerm2.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      jSTerm0.add((Object) jSTerm2);
      jSTerm2.isConstant();
      Object object1 = new Object();
      jSTerm1.toArray(objectArray0);
      int int0 = 15;
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "expecting";
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      jSTerm2.makeEval(true);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm2.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm2.isEval();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove((Object) jSTerm1);
      jSTerm2.makeEval(true);
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) "expecting";
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(15, 15);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isVariable();
      jSTerm0.print();
      jSTerm2.isFunction();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qb5f7\"\"&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      jSTerm0.isConstant();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(5250, 24);
      jSTerm0.isVariable();
      jSTerm0.print();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      jSTerm1.isFunction();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, (-1));
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.toStr();
      jSTerm2.matches(jSTerm3);
      assertTrue(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(AKKbt{z]+w4(_uy\"Ji");
      StringReader stringReader1 = new StringReader("(AKKbt{z]+w4(_uy\"Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C%%");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0);
      assertTrue(jSSubstitution2.fail());
      
      jSTerm0.isEval();
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals("[%C]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qb5f7\"\"&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      Object[] objectArray0 = new Object[7];
      streamTokenizer0.parseNumbers();
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) "Qb5f7\"\"&";
      objectArray0[3] = (Object) stringReader0;
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      jSTerm2.isFunction();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm0.isConstant();
      Object object0 = new Object();
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution1.add((Object) jSTerm3);
      JSTerm jSTerm4 = jSTerm2.call();
      jSTerm4.equals(jSTerm2);
      jSTerm4.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.isFunction();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("expecting");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove((Object) jSTerm1);
      jSTerm2.makeEval(true);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm3.addElement(jSTerm4);
      assertEquals("[expecting, [expecting]]", jSTerm3.toString());
      
      jSTerm4.call();
      jSTerm4.equals(jSTerm2);
      System.setCurrentTimeMillis((-1));
      jSTerm4.matches(jSTerm0);
      jSTerm2.print();
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qb5f7\"\"&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm1.addElement(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.print();
      jSTerm3.equals(jSTerm2);
      System.setCurrentTimeMillis(757L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      stringReader0.close();
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm2.cloneT();
      jSTerm1.add((Object) jSTerm3);
      jSTerm2.isFunction();
      jSTerm2.isGround();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      boolean boolean0 = jSTerm4.equals(jSTerm5);
      assertEquals(2, jSTerm1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      Object object0 = new Object();
      jSTerm0.isVariable();
      jSTerm2.print();
      jSTerm2.removeAllElements();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm3.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm3);
      jSTerm1.isFunction();
      jSTerm2.isGround();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm3.standardizerTerm();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertTrue(jSTerm4.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.trimToSize();
      Stream stream0 = jSSubstitution1.stream();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringReader0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) stream0;
      jSTerm0.toArray(objectArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(3667, 0);
      jSTerm0.isVariable();
      jSTerm0.print();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      jSTerm0.removeAllElements();
      assertEquals(10, jSTerm0.capacity());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isEval();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSSubstitution3, jSSubstitution2);
      
      boolean boolean1 = jSTerm3.equals(jSTerm2);
      assertFalse(jSTerm2.isFunction());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm0.isConstant();
      Object object0 = new Object();
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.cloneT();
      assertFalse(jSTerm5.isFunction());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(AKKbt{z]+w4(_uy\"Ji");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      jSTerm1.firstElement();
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      boolean boolean0 = jSTerm3.equals(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("+rR):I#u-4(]5h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.add((Object) null);
      jSTerm0.isConstant();
      Object object0 = new Object();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm0.isEval();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clear();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.addElement(stream0);
      JSTerm jSTerm6 = jSTerm4.call();
      jSTerm5.print();
      boolean boolean0 = jSTerm6.equals(jSTerm2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      jSSubstitution0.stream();
      jSTerm0.isConstant();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = object0;
      jSTerm0.toArray(objectArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(2189, (-3911));
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.equals(jSTerm1);
      jSTerm2.removeAllElements();
      jSTerm1.matches(jSTerm0);
      jSTerm2.isFunction();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSSubstitution0.add((Object) null);
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.add((Object) stringReader0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isConstant();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      Object object1 = jSTerm3.lastElement();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "e";
      objectArray0[4] = (Object) stream0;
      objectArray0[5] = (Object) jSTerm0;
      jSTerm3.toArray(objectArray0);
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSTerm0.print();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertEquals("[%%%, [%%%]]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution1);
      jSTerm0.isConstant();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = object0;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm2.isVariable();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qb5f7\"\"&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.equalT = (-1);
      jSTerm1.addElement("Qb5f7\"\"&");
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.print();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("+rR):I#u-4(]5h");
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      jSTerm1.stream();
      jSTerm2.isEval();
      assertEquals("[%%%, [%%%]]", jSTerm2.toString());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      
      jSTerm2.matches(jSTerm1);
      jSTerm0.iterator();
      jSTerm0.isFunction();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.toStr();
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?`m1F-ZB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?Zz-$TzjAc45arD1d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSJshopVars.interrogation = (-2065);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+rR):I#u-4(]5h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("eZ[e)n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      jSTerm1.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("+rR):I#u-4(]5h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 2;
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'o&CIvY5rYE");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm2.isEval();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.semicolon = 39;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(15, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertEquals("[%%%, [%%%]]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isEval();
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(")CfvwEQ/ CC:/ \"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertFalse(jSTerm3.isVariable());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      assertEquals("[nil]", jSTerm3.toString());
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("m@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(0, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm2.isVariable();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      System.setCurrentTimeMillis(1518L);
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      jSTerm0.isVariable();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(";yk");
      jSTerm0.retainAll(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.slash = 0;
      jSSubstitution0.add((Object) jSTerm1);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("3;yk");
      jSTerm0.retainAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual(objectArray0[2]);
      Predicate<JSSubstitution> predicate1 = predicate0.negate();
      Predicate<JSSubstitution> predicate2 = predicate1.and(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      predicate3.or(predicate0);
      predicate0.and(predicate3);
      predicate3.negate();
      jSTerm1.removeIf(predicate1);
      jSTerm0.isEval();
      jSTerm1.matches(jSTerm2);
      jSTerm1.isFunction();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      jSSubstitution0.standarizerSubs();
      objectArray0[0] = (Object) jSTerm2;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(0, 0);
      jSTerm0.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSJshopVars.rightPar = 67;
      StringReader stringReader0 = new StringReader("d;sb?{<-]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standardizerTerm();
      JSJshopVars.minus = 119;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.rightBrac = 119;
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      jSTerm1.toStr();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-2);
      jSTerm2.add((Object) jSTerm1);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray();
      streamTokenizer0.ordinaryChars(10, (-2));
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm1.clear();
      jSTerm1.spliterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.matches(jSTerm3, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      int int0 = 4183;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("3;yk");
      jSTerm0.retainAll(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      jSTerm2.print();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSJshopVars.slash = 0;
      jSSubstitution1.add((Object) jSTerm2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution2.subList((-2000), (-426));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2000
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?`m1F-ZB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      jSTerm0.isEmpty();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSSubstitution1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm1.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer0.whitespaceChars(2, 2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      assertTrue(jSTerm4.equals((Object)jSTerm3));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?`m1F-ZB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution1.size());
      
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-2065);
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("2Dk$m[0m1");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      JSJshopVars.semicolon = (-2092);
      jSTerm0.toArray(objectArray0);
      jSTerm0.isGround();
      JSJshopVars.leftBrac = 2179;
      JSJshopVars.coma = 0;
      JSJshopVars.VarCounter = 93;
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cLO5^4U| %'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("60&?)n;7l=kP7LaT8sw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      StringReader stringReader0 = new StringReader("opH]|wL_Z&u8!rT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int1 = 1;
      streamTokenizer0.wordChars(0, 1);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.skip(1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSJshopVars.flagLevel = 0;
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'B';
      charArray0[2] = '?';
      charArray0[3] = 'L';
      charArray0[4] = '^';
      charArray0[5] = '0';
      charArray0[6] = 'A';
      charArray0[7] = 'W';
      charArray0[8] = '\'';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-195), (-195));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightPar = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      
      Stream stream0 = jSSubstitution0.stream();
      jSSubstitution0.add((Object) stream0);
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.dot = (-1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.isConstant();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm2.toArray(objectArray0);
      streamTokenizer0.ordinaryChars(0, 0);
      jSTerm0.isVariable();
      jSTerm1.print();
      jSTerm1.isFunction();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1);
      jSTerm3.isFunction();
      jSTerm2.isVariable();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm4.equals((Object)jSTerm3));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" HW}!");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      charArray0[4] = 'x';
      charArray0[5] = '+';
      charArray0[6] = '/';
      charArray0[7] = '&';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.removeAllElements();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      int int0 = 4183;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(";yk");
      jSTerm0.retainAll(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("F{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.minus = (-1);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.set((-476), jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -476
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = (-2684);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.coma = 3405;
      jSTerm0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4Bj*N]'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'f';
      charArray0[2] = 'h';
      streamTokenizer0.nval = (-1.0);
      charArray0[3] = 'h';
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 46, (-456));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 43;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.nval = (-1.0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
