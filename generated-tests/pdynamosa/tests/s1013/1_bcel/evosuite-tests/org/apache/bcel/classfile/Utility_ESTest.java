/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:13:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)21;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$VA$V", string0);
      
      String string1 = Utility.accessToString((-606));
      assertEquals("private synchronized transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.replace("(type=", "(type=", "(type=");
      assertEquals("(type=", string0);
      
      String string1 = Utility.replace(" entries\n", "(type=", "invokeinterface");
      assertEquals(" entries\n", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      String string2 = Utility.accessToString(1690, false);
      assertEquals("private static final transient interface abstract", string2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.isSet(4, 4);
      byte[] byteArray0 = new byte[7];
      Utility.decode("fyX$R~", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      LocalVariable[] localVariableArray0 = new LocalVariable[4];
      LocalVariable localVariable0 = new LocalVariable(1199, 0, 109, 4, 4, constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(4, 1199, byteSequence0, constantPool0);
      localVariableTypeTable0.getLocalVariable((-3069));
      localVariableArray0[1] = null;
      localVariableTypeTable0.getLocalVariable(4);
      localVariableArray0[2] = null;
      LocalVariable localVariable1 = new LocalVariable(1199, 4, 109, 102, 102, constantPool0);
      localVariableArray0[3] = localVariable1;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(4, 4, localVariableArray0, constantPool0);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("nop", "char", "nop", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-114);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L&z4q]Z'l,;TDS(");
      assertEquals((byte)14, byte0);
      
      Utility.compactClassName("L&z4q]Z'l,;TDS(");
      try { 
        Utility.methodSignatureArgumentTypes("$;fv", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $;fv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<<C8+X", false);
      assertEquals(11, byteArray0.length);
      
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)48;
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte)48;
      byteArray2[3] = (byte)48;
      byteArray2[4] = (byte)18;
      byteArray2[5] = (byte)48;
      boolean boolean0 = Utility.equals(byteArray2, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.convertString("8#yT3>3]@7");
      assertEquals("8#yT3>3]@7", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInteger constantInteger0 = new ConstantInteger(130);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((-5.247144));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantInvokeDynamic0.setClassIndex((byte) (-126));
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.methodTypeToSignature("ixor", (String[]) null);
      assertEquals("()Lixor;", string1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$|,F$0tk-B";
      String string0 = Utility.methodTypeToSignature("$|,F$0tk-B", stringArray0);
      assertEquals("(L$|,F$0tk-B;)L$|,F$0tk-B;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L$|,F$0tk-B;)L$|,F$0tk-B;");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.isSet(4, 4);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[,QgyUEdXv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,QgyUEdXv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)123;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)123;
      byte[] byteArray2 = Utility.decode("K[pJp$& 17 3QN", false);
      assertEquals(14, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (-2009), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)72, (byte) (-78));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.setBit(170, (-1796));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("irem", "irem", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: irem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-120);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NQeshq UASM-'_tQj", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NQeshq UASM-'_tQj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.clearBit(803, 173);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.fillup("X~sf);*}@>p9+<[", 803, false, 'i');
      Utility.compactClassName("20", "{)6", true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-231), (-231));
      Utility.classOrInterface(803);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)70;
      byteArray1[7] = (byte)70;
      byteArray1[8] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.compactClassName("Illegal type: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("monitorexit");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "monitorexit";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "monitorexit";
      objectArray0[3] = (Object) "monitorexit";
      objectArray0[4] = (Object) "Illegal type: ";
      objectArray0[5] = (Object) "monitorexit";
      objectArray0[6] = (Object) "monitorexit";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("goto_w\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.fillup("8Sq#%du2fKQ$bwJ&)i", (byte)0, false, 'y');
      assertEquals("8Sq#%du2fKQ$bwJ&)i", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8Sq#%du2fKQ$bwJ&)i";
      String string1 = Utility.methodTypeToSignature("B&UYo", stringArray0);
      assertEquals("(L8Sq#%du2fKQ$bwJ&)i;)LB&UYo;", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.signatureToString("Jype");
      Utility.replace("Z-0>MK,w@r12S3", "Z-0>MK,w@r12S3", "Signature");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-19);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(80);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.convertString("jsr_w");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)115;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("+rvNT| b'!l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +rvNT| b'!l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "*kx";
      Utility.compactClassName("*kx", true);
      Utility.clearBit(0, 0);
      Utility.isSet(0, (-2588));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("*kx", "*kx");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // *kx
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.classOrInterface(82);
      String string0 = Utility.methodSignatureReturnType("Fsf@", false);
      Utility.classOrInterface(82);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-86);
      Utility.classOrInterface((byte)116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)34);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1052), 512);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      Utility.codeToString(byteArray0, constantPool0, 3, 69);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "KAE%&[Z:t#~";
      stringArray0[1] = "KAE%&[Z:t#~";
      stringArray0[2] = "KAE%&[Z:t#~";
      stringArray0[3] = "3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[4] = "3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[5] = "3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      stringArray0[6] = "3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("KAE%&[Z:t#~", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Z:t#~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("j$kJB$yfN$=.maNk^", "j$kJB$yfN$=.maNk^", false);
      Utility.format(596, 596, false, '?');
      byte[] byteArray0 = Utility.decode("j$kJB$yfN$=.maNk^", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j$kJB$yfN$=.maNk^";
      stringArray0[1] = "ifnull";
      stringArray0[2] = "j$kJB$yfN$=.maNk^";
      String string0 = Utility.methodTypeToSignature("j$kJB$yfN$=.maNk^", stringArray0);
      assertEquals("(Lj$kJB$yfN$=/maNk^;Lifnull;Lj$kJB$yfN$=/maNk^;)Lj$kJB$yfN$=/maNk^;", string0);
      
      Utility.searchOpcode("E");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), 180, true);
      assertEquals("0:    fmul\n1:    lload_0\n2:    dstore_3\n3:    lstore_3\n4:    aload_2\n5:    fsub\n6:    astore_3\n7:    nop\n8:    iaload\n9:    land\n10:   ldiv\n11:   ladd\n12:   astore_3\n13:   dmul\n14:   dup2_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("D?Dy|ce<`fr");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R7[u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R7[u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("putField", false);
      short short0 = Utility.searchOpcode("putField");
      assertEquals((short)181, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(1525);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.typeOfSignature("!Tf{A+}X3S-:@(");
      try { 
        Utility.methodSignatureReturnType("a(5uRL;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a(5uRL;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.isSet(4, 4);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)123;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Type of ConstValue invalid: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Type of ConstValue invalid: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.compactClassName("b~");
      assertEquals("b~", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H[=Kjrdi?pMvS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[=Kjrdi?pMvS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.convertString("{&ty:()AK\"px6");
      assertEquals("{&ty:()AK\\\"px6", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[6] = (byte)35;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface((-1386));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "interface", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), (int) (byte) (-1), true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray1, constantPool1, (-4050), (int) (byte) (-1));
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    impdep2\n3:    impdep2\n4:    impdep2\n5:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#26708", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(";$_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;$_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      Utility.methodSignatureArgumentTypes("()Lmonitorenter;");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-75);
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.decode("putField", false);
      Utility.searchOpcode("putField");
      Object object0 = new Object();
      ConstantUtf8.getCachedInstance("(start_pc = ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(179, 1900, false, 'p');
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 168);
      String string0 = "YT:}@";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YT:}@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YT:}@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-95);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)55;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
      
      String string1 = Utility.accessToString(26, true);
      assertEquals("private static final", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hcv^2XU=k8!1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hcv^2XU=k8!1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("isub", false);
      short short0 = Utility.searchOpcode("isub");
      assertEquals((short)100, short0);
      
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
      
      Utility.getSignature("long");
      String string1 = Utility.getSignature("MWUa!)N");
      assertEquals("LMWUa!)N;", string1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte)0;
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)96);
      assertEquals("0:    iaload\n1:    iadd\n2:    lload_1\n3:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstantUtf8.getCachedInstance(")Jx> /J");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.format(253, (byte)100, true, 'A');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 204, (-3498));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)55;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1392), 130, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload\t\t%161
         // 2:    iushr
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.compactClassName("elzhZz6QvL.D", true);
      assertEquals("elzhZz6QvL.D", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byte[] byteArray1 = Utility.decode("elzhZz6QvL.D", false);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readDouble();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fneg", string1);
      
      int int0 = Utility.setBit((byte)30, 2862);
      assertEquals(16414, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "8#yT3>3]@7";
      Utility.convertString("8#yT3>3]@7");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInteger constantInteger0 = new ConstantInteger(130);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((-5.247144));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantInvokeDynamic0.setClassIndex((byte) (-126));
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("$-] PdT=jP'o^xx#i,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $-] PdT=jP'o^xx#i,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.convertString("'4E p_CV_");
      assertEquals("\\'4E p_CV_", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.convertString("W");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 29, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-68));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantUtf8.getCachedInstance("*6F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.fillup("char", 146, true, '4');
      assertEquals("char4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string0);
      
      String string1 = Utility.getSignature("H");
      assertEquals("LH;", string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "7$A{$n64^bP";
      try { 
        Utility.typeOfSignature("6p*BoQln-u2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6p*BoQln-u2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature(")V`f.EKV]auO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )V`f.EKV]auO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("VZU:8bMF/KrV");
      assertEquals("void", string0);
      
      String string1 = Utility.methodTypeToSignature("invokeinterface", (String[]) null);
      assertEquals("()Linvokeinterface;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L@_iP.1w|((FSI(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L@_iP.1w|((FSI(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.format(173, (-1792), false, 'B');
      Utility.convertString("173");
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FbmRSI9");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)48;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$m$a00", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1330;
      Utility.isSet(1330, (-911));
      try { 
        Utility.methodSignatureReturnType("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K?@6J>x^O+eUr9pk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K?@6J>x^O+eUr9pk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "&#<YbGs-gED:EVu~*/i";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (int) (byte)126, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LEQ`f`{mI^QQLnGs`;V");
      assertEquals("EQ`f`{mI^QQLnGs`", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-65), 182);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"{=a^crJ7$[S5>~Z[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\"{=a^crJ7$[S5>~Z[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[S5>~Z[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.signatureToString("S;P<hrr)Y");
      assertEquals("short", string0);
      
      Utility.accessToString(1564);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UK#+,=Pj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UK#+,=Pj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[2] = (byte)36;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-84);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.isJavaIdentifierPart('p');
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("(ZR)r7>vg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r7>vg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.replace("The offset cannot be negative", "The offset cannot be negative", "The offset cannot be negative");
      // Undeclared exception!
      try { 
        Utility.signatureToString("QG<XBL(+Q NhhkcL<7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QG<XBL(+Q NhhkcL<7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = "<f{3fy4Z7E";
      Utility.convertString("<f{3fy4Z7E");
      int int0 = 191;
      Utility.clearBit(171, 191);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("ifnull\t\t#1199");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull\t\t#1199
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.convertString("int");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-65);
      byteArray0[6] = (byte)35;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isJavaIdentifierPart('Z');
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 243, false, 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.decode("M/(", false);
      String string0 = Utility.compactClassName("fstore_2", "java.lang.", false);
      assertEquals("fstore_2", string0);
      
      byte[] byteArray0 = Utility.decode("_B1G", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("P?", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("M/(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("M/(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M/(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)64;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.isSet((byte)44, 1812);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.signatureToString("JkA;AIl", true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.convertString("LFbmRSI9;V");
      assertEquals("LFbmRSI9;V", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.compactClassName("l>6e6T#_E4\"ly'#", "8Sq#%du2fKQ$bwJ&)i", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l>6e6T#_E4\"ly'#";
      stringArray0[1] = "l>6e6T#_E4\"ly'#";
      stringArray0[2] = "8Sq#%du2fKQ$bwJ&)i";
      stringArray0[3] = "getstatic";
      stringArray0[4] = "l>6e6T#_E4\"ly'#";
      stringArray0[5] = "8Sq#%du2fKQ$bwJ&)i";
      stringArray0[6] = "l>6e6T#_E4\"ly'#";
      stringArray0[7] = "l>6e6T#_E4\"ly'#";
      stringArray0[8] = "l>6e6T#_E4\"ly'#";
      String string0 = Utility.methodTypeToSignature("8Sq#%du2fKQ$bwJ&)i", stringArray0);
      assertEquals("(Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;L8Sq#%du2fKQ$bwJ&)i;Lgetstatic;Ll>6e6T#_E4\"ly'#;L8Sq#%du2fKQ$bwJ&)i;Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;)L8Sq#%du2fKQ$bwJ&)i;", string0);
      
      String string1 = Utility.methodSignatureToString("(Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;L8Sq#%du2fKQ$bwJ&)i;Lgetstatic;Ll>6e6T#_E4\"ly'#;L8Sq#%du2fKQ$bwJ&)i;Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;Ll>6e6T#_E4\"ly'#;)L8Sq#%du2fKQ$bwJ&)i;", "e%TH`o@{Bx]R3d0.}{7", "iconst_3");
      assertEquals("iconst_3 8Sq#%du2fKQ$bwJ&)i e%TH`o@{Bx]R3d0.}{7(l>6e6T#_E4\"ly'# arg1, l>6e6T#_E4\"ly'# arg2, 8Sq#%du2fKQ$bwJ&)i arg3, getstatic arg4, l>6e6T#_E4\"ly'# arg5, 8Sq#%du2fKQ$bwJ&)i arg6, l>6e6T#_E4\"ly'# arg7, l>6e6T#_E4\"ly'# arg8, l>6e6T#_E4\"ly'# arg9)", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1525, 975, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantMethodref");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.format(4444, (byte)0, true, 'p');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 67, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("faload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `faload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isSet(389, 44);
      ConstantLong constantLong0 = new ConstantLong(44);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)91, (byte)91);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantLong0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3223), 389);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-408), 175);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Os)!m,ur]Rgo.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Os)!m,ur]Rgo.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      Utility.decode("float", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null}", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4]rll}z:odHXdN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4]rll}z:odHXdN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "8#yT3>3]@7";
      Utility.convertString("8#yT3>3]@7");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.isSet(4, 4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((-214));
      byteSequence1.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.searchOpcode("dastore");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "";
      Utility.convertString("");
      String string1 = "StackMapTable";
      Utility.typeOfSignature("StackMapTable");
      String string2 = "A4S?ysL<U']DX gc7U";
      String string3 = "Nh)ZEhp";
      boolean boolean0 = true;
      int int0 = (-1081);
      int int1 = 1595;
      LocalVariable[] localVariableArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((-5345), (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.compactClassName("l>6e6T#_E4\"ly'#", "8Sq#%du2fKQ$bwJ&)i", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l>6e6T#_E4\"ly'#";
      stringArray0[1] = "l>6e6T#_E4\"ly'#";
      stringArray0[2] = "8Sq#%du2fKQ$bwJ&)i";
      stringArray0[3] = "getstatic";
      stringArray0[4] = "l>6e6T#_E4\"ly'#";
      stringArray0[5] = "8Sq#%du2fKQ$bwJ&)i";
      stringArray0[6] = "l>6e6T#_E4\"ly'#";
      stringArray0[7] = "l>6e6T#_E4\"ly'#";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)55;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.convertString("fload\t\t%124");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-15);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)85, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-78);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$b2", string0);
      
      String string1 = Utility.getSignature("LE_Gld7;V");
      assertEquals("LLE_Gld7;V;", string1);
      
      short short0 = Utility.searchOpcode("LLE_Gld7;V;");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.compactClassName("*kx", false);
      Utility.clearBit(0, 0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte) (-108);
      Utility.equals(byteArray0, byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<<C8+X", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("s$7dO$40$3a$A$3cC8$xX", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("drem", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)22;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload\t\t%167", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      String string0 = ",j_<20?LBA";
      String string1 = "iinc";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",j_<20?LBA", "iinc", ",j_<20?LBA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,j_<20?LBA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)71;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)44, true);
      assertEquals("0:    impdep2\n1:    d2l\n2:    <illegal opcode>\n3:    astore_0\n4:    aload_2\n5:    dstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.compactClassName("*%5{AHV*txw=L~K", "*%5{AHV*txw=L~K", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Utility.getSignature("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "wy%lpf6h(t!";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/LHx]v4IpttwF5)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /LHx]v4IpttwF5)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.format(94, 94, true, 'B');
      String string1 = Utility.convertString("94BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.compactClassName("I`xQIk.)?GN,");
      Utility.typeOfSignature("I`xQIk.)?GN,");
      try { 
        Utility.methodSignatureReturnType("I`xQIk.)?GN,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?GN,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "(type=";
      try { 
        Utility.typeOfMethodSignature("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (type=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = Utility.signatureToString("Z49 T9xTz3");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('k');
      Utility.printArray((Object[]) null, true);
      String string0 = "-F-En=;{+yUO";
      try { 
        Utility.decode("-F-En=;{+yUO", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-80);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)13;
      objectArray0[4] = (Object) null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = Utility.clearBit(171, 191);
      assertEquals(171, int0);
      
      String string0 = Utility.accessToString(191, false);
      assertEquals("public private protected static final synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.isSet(3, 3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.classOrInterface((-1));
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[8];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("anewarray", true);
      String string0 = "Pattern is missing";
      try { 
        Utility.typeOfSignature("Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pattern is missing
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Integer");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.isSet(175, 175);
      Utility.isJavaIdentifierPart('.');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<<C8+X", false);
      Utility.getSignature("s}O@:$<<C8+X");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("drem", "", "Ls}O@:$<<C8+X;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: drem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-87);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.fillup("*|h9s Fmf:a?[", (byte) (-10), false, '/');
      assertEquals("*|h9s Fmf:a?[", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("\"9Y*+", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.isSet(4, 4);
      Utility.searchOpcode("8NcKOlB=/]");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(1750, 4, true, '9');
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1690), 1698);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aKn\"p'h^;>&a ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aKn\"p'h^;>&a '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.getSignature("+}cX9");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+}cX9";
      stringArray0[1] = "L+}cX9;";
      stringArray0[2] = "L+}cX9;";
      stringArray0[3] = "+}cX9";
      stringArray0[4] = "org.apache";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "+}cX9";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(596, 596, false, '?');
      assertEqualsstring0);
      
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(60, 90);
      constantArray0[1] = (Constant) constantMethodref0;
      String string1 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{null, CONSTANT_Methodref[10](class_index = 60, name_and_type_index = 90), null, null, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.compactClassName("-Tih`o<.`5.2~rJ");
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      
      String string1 = Utility.compactClassName("daload");
      assertEquals("daload", string1);
      
      Utility.replace("baload", "daload", "vrX}lh?$z@d&V");
      short short0 = Utility.searchOpcode("-Tih`o<.`5.2~rJ");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.accessToString(225);
      assertEquals("public synchronized volatile transient", string2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte) (-96), (byte) (-96));
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("1,:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("S0ed|", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "_$SuiZ%B.Ws&YD!";
      // Undeclared exception!
      try { 
        Utility.signatureToString("_$SuiZ%B.Ws&YD!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_$SuiZ%B.Ws&YD!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.compactClassName("Dpu=5@m];c]3yr", "", true);
      Utility.isJavaIdentifierPart(';');
      try { 
        Utility.methodSignatureArgumentTypes("Itnew", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Itnew
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)124;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("public");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.format(292, 292, false, 'A');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 292, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte) (-38);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3192, (-1283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)111;
      Utility.searchOpcode("getfield");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      Utility.typeOfSignature("T_1mM{jf^))O`9gw?Q");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.methodSignatureReturnType("instanceof", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-64);
      byteArray1[6] = (byte) (-64);
      byteArray1[7] = (byte) (-85);
      byteArray1[8] = (byte)20;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("l>6e6T#_E4\"ly'#", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ConstantUtf8.getCachedInstance("*6F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("*6F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*6F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.accessToString((-1584), false);
      Utility.convertString("final volatile transient native strictfp synthetic annotation enum");
      try { 
        Utility.methodSignatureArgumentTypes(">\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dc?DPyxce<`fr");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.classOrInterface(173);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte)56;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)115, 77);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, (int) (byte)46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.compactClassName("if_icmpeq", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<<C8+X", false);
      String string0 = Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-77);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-77);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(165);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      Constant constant0 = constantArray0[2].copy();
      constantArray0[3] = constant0;
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 250, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45640. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", "", true);
      String string0 = "lbG+H_|{GB;eG9|H";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("oSOmT8zni", "lbG+H_|{GB;eG9|H", ";e|f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oSOmT8zni
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.methodSignatureReturnType("LFbmRSI9;V");
      Utility.typeOfSignature("FbmRSI9");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      ConstantInteger constantInteger0 = new ConstantInteger((-3109));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[21];
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)6;
      byteArray1[7] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)26, 201, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47642. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte) (-45), (byte) (-45));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.decode("M/(", false);
      Utility.searchOpcode("M/(");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object3;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object6 = new Object();
      objectArray0[4] = object6;
      Object object7 = new Object();
      objectArray0[5] = object7;
      Object object8 = new Object();
      objectArray0[6] = object8;
      String string0 = Utility.printArray(objectArray0, true, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\t\t";
      stringArray0[1] = "M/(";
      stringArray0[2] = "M/(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "{java.lang.Object@269cc9e7, java.lang.Object@38ba9083, java.lang.Object@38ba9083, java.lang.Object@1cb932c7, java.lang.Object@24e59c1b, java.lang.Object@64f6ba91, java.lang.Object@8a41004}";
      stringArray0[6] = "M/(";
      stringArray0[7] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-84);
      Utility.signatureToString("Byte code error: ");
      Utility.getSignature("\t\t");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Byte code error: ");
      Utility.replace("Byte code error: ", "\fo", "Insensitive");
      try { 
        Utility.methodSignatureArgumentTypes("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LFbmRSI9;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.format(32, 32, true, 'N');
      assertEquals("32NNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-59);
      byteArray0[0] = (byte) (-98);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-922));
      assertEquals("0:    ifle\t\t#-24891\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-59));
      assertEquals("public protected volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.classOrInterface((byte) (-59));
      assertEquals("interface", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifle\t\t#-24891", string3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)57, (byte)57);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore\t\t%61", string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)22;
      try { 
        Utility.typeOfSignature("X}N$zC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X}N$zC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<WC8+X", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7_zdD");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.decode("fstore\t\t%43", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ann>`<`z:'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ann>`<`z:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.isSet((byte)44, 1812);
      byte[] byteArray0 = Utility.decode("K[pJp$& 1Ik7 3QN", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1812, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.isSet(4, 4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("ZC&e6*.IO~UO", true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("chop ", "ntyfSz", true);
      assertEquals("chop ", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.isSet((-2146), (-911));
      try { 
        Utility.typeOfMethodSignature(" RNMl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  RNMl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.methodSignatureReturnType("LFbmRSI9;V");
      Utility.typeOfSignature("FbmRSI9");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("FbmRSI9", "KU1byAu[V", "KU1byAu[V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FbmRSI9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.accessToString((-66));
      assertEquals("private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum\", \"private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum\", \"private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum\", \"private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum\", \"private protected static final synchronized transient native interface abstract strictfp synthetic annotation enum\"", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-71);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("M/OdAf&oQW2V!UZ");
      try { 
        Utility.typeOfSignature("G19A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G19A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\">7FGio");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \">7FGio
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iinc\t\t%233\t32", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isSet(4, 4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)70;
      Utility.compactClassName("if_icmpeq", "dreturn", false);
      String string0 = Utility.getSignature(")#!8i)4>f3|}p5");
      assertEquals("L)#!8i)4>f3|}p5;", string0);
      
      String string1 = Utility.signatureToString("L)#!8i)4>f3|}p5;", false);
      assertEquals(")#!8i)4>f3|}p5", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "ireturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ireturn");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleParameterAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("Byte code error: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-89);
      byteArray0[4] = (byte)0;
      byte byte0 = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H)A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H)A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantUtf8.getCachedInstance("*6F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-64), (int) (byte) (-120));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-522));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("0:    l2i\n1:    bastore\n2:    astore_1\n3:    nop\n4:    nop\n5:    nop\n", "wmbI&^t>Y'OppT!", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.accessToString(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YK?@6J>x^O+eUr9pk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YK?@6J>x^O+eUr9pk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-81));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.clearBit(71, 71);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("xI8v&2GojB.c1(6 W", (String) null, "`?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xI8v&2GojB.c1(6 W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isSet(5, 389);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, 175);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String string0 = "s):`C/-x`";
      try { 
        MockFile.createTempFile("", "s):`C/-x`");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-126), 198, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("\"8+0.o:]\u0003Wb\"sN= ", "\"8+0.o:]\u0003Wb\"sN= ", "ixor", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"8+0.o:]\u0003Wb\"sN= 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "VMM:,U/gkl";
      Utility.signatureToString("VMM:,U/gkl", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.signatureToString("I`PQIk.)KGN,");
      assertEquals("int", string0);
      
      byte byte0 = Utility.typeOfSignature("CafmU7AaR`");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("M/(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.convertString("8#yT3>3]@7");
      Utility.setBit((-1228), (-1228));
      try { 
        Utility.methodSignatureToString("8#yT3>3]@7", "8#yT3>3]@7", "8#yT3>3]@7", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8#yT3>3]@7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gu9";
      stringArray0[1] = "gu9";
      stringArray0[2] = "gu9";
      stringArray0[3] = "gu9";
      stringArray0[4] = "gu9";
      stringArray0[5] = "gu9";
      stringArray0[6] = "gu9";
      stringArray0[7] = "gu9";
      stringArray0[8] = "invokestat";
      Utility.methodTypeToSignature("gu9", stringArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'4E p_CV_", "'4E p_CV_", "'4E p_CV_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '4E p_CV_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-1), (byte) (-93));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(1988);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2037, (byte)55);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[7] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#-25788", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<<C8+X", false);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      int int0 = (-1514);
      byte[] byteArray2 = new byte[18];
      byteArray2[0] = (byte)53;
      byteArray2[1] = (byte)53;
      byteArray2[2] = (byte)53;
      byteArray2[3] = (byte)16;
      byteArray2[4] = (byte)90;
      byteArray2[5] = (byte)53;
      byteArray2[6] = (byte)53;
      byteArray2[7] = (byte)53;
      byteArray2[8] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)90, 86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      Utility.compactClassName("+:Rin@q#p=(R'mpvq_.");
      // Undeclared exception!
      try { 
        Utility.getSignature("[c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.signatureToString("VMM:,U/gkl", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString(200);
      try { 
        Utility.methodSignatureReturnType("dload_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-26);
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2gh'bi^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2gh'bi^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)88;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)30, (byte)30);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.signatureToString("LEQ`f`{mI^QQLnGs`;V");
      boolean boolean0 = Utility.isSet((-1598), 1375);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-40);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.compactClassName("EQ`f`{mI^QQLnGs`", false);
      String string2 = Utility.fillup("EQ`f`{mI^QQLnGs`", (byte)8, true, 'D');
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.accessToString(36);
      assertEquals("protected synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.format((-217), (-217), false, '0');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-57);
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(998, false);
      Utility.convertString("private protected synchronized volatile transient native interface");
      try { 
        Utility.methodSignatureArgumentTypes("$s&UK0j/lF'[VW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $s&UK0j/lF'[VW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.decode("([`4W>1{Y)>OP$", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("@*t&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@*t&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-59), (-3215));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40606. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.getSignature("'4E 0ZpCV_");
      String string1 = Utility.accessToString(3331, true);
      assertEquals("public private native abstract strictfp", string1);
      
      String string2 = Utility.replace("L'4E;", "f2d", "public private native abstract strictfp");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      boolean boolean0 = false;
      Utility.compactClassName("NMAN|`ZII{YK%1K", "Exception while looking for class ", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-85);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-64);
      byteArray1[3] = (byte) (-56);
      byteArray1[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ret\t\t%42", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("{\"java.lang.Object@12a12c4\", \"java.lang.Object@50508ab\", \"java.lang.Object@147b198\", \"java.lang.Object@5dc15569\", \"java.lang.Object@cacd027\", \"java.lang.Object@2141d149\", \"java.lang.Object@1db66f88\", \"java.lang.Object@4a8b1b4a\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@12a12c4\", \"java.lang.Object@50508ab\", \"java.lang.Object@147b198\", \"java.lang.Object@5dc15569\", \"java.lang.Object@cacd027\", \"java.lang.Object@2141d149\", \"java.lang.Object@1db66f88\", \"java.lang.Object@4a8b1b4a\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.compactClassName("(~A#", true);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1977, (-2863));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4075, (-1320), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-28);
      byte byte0 = Utility.typeOfSignature("Bq(~'k~KT?<U#");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload\t\t%25", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("l>6e6T#_E4\"ly'#", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LFbmRSI9;V");
      assertEquals("FbmRSI9", string0);
      
      byte byte0 = Utility.typeOfSignature("FbmRSI9");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      String string1 = Utility.signatureToString("FbmRSI9", true);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)57;
      Utility.toHexString(byteArray0);
      int int0 = 74;
      Utility.setBit(17, 74);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("54 39", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54 39
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("a9MCN$XSr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `a9MCN$XSr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.bcel.classfile.ElementValue");
      assertEquals("Lorg/apache/bcel/classfile/ElementValue;", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.typeOfSignature("Invalid signature: ");
      Utility.accessToString(122, false);
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = Utility.decode("Invalid signature: ", false);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-37);
      byteArray0[2] = (byte) (-22);
      byteArray0[5] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "Eubwy!J\\Pj<O2Ow";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Eubwy!JPj<O2Ow", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Eubwy!JPj<O2Ow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)11;
      byteArray0[6] = (byte)35;
      String string0 = "MobWH$&$xzzM";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MobWH$&$xzzM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MobWH$&$xzzM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte) (-25);
      byteArray1[5] = (byte)50;
      byteArray1[6] = (byte) (-30);
      byteArray1[7] = (byte) (-35);
      byteArray1[8] = (byte)14;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-88), 22, false);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.SourceFile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.SourceFile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.compactClassName("elzhZz6QvL.D", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)88;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(155, 155);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2081), (int) (byte)88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence1, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      try { 
        Utility.typeOfSignature("c8m:t9\"Unf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c8m:t9\"Unf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#-30742", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      int int0 = Utility.setBit((-1275), 868);
      assertEquals((-1259), int0);
      
      String string0 = Utility.accessToString((-1275));
      assertEquals("public protected native interface strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "y%lpf6h(tn!";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("y%lpf6h(tn!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `y%lpf6h(tn!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("Coldn't find: ", false);
      Utility.searchOpcode(" methods:\n");
      Object object0 = new Object();
      ConstantUtf8.getCachedInstance(" methods:\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-3776), 394, false, 'p');
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3776), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Utility.decode("M/(", false);
      Utility.searchOpcode("M/(");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object3;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("M/(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M/(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.replace("", "fY&EVO", "(tlpHe=");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((byte)0);
      Utility.clearBit((byte)0, (byte)0);
      try { 
        Utility.methodSignatureArgumentTypes("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.classOrInterface(181);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.isSet(3, 3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      Utility.classOrInterface((byte) (-59));
      Utility.accessToString((int) (byte)0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.isSet(18, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      Utility.toHexString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "'(oz/V");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // '(oz/V
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K41b|a}J)Ic@2w8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K41b|a}J)Ic@2w8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-101);
      byte[] byteArray1 = Utility.decode("div", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)39;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-23);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)39;
      byteArray1[4] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)93;
      Utility.convertString(" fields:\n");
      try { 
        Utility.methodSignatureReturnType(" fields:\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` fields:
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("j$kJB$yfN$=.maNk^", "j$kJB$yfN$=.maNk^", false);
      assertEquals("j$kJB$yfN$=.maNk^", string0);
      
      String string1 = Utility.format(596, 596, false, '?');
      assertEqualsstring1);
      
      byte[] byteArray0 = Utility.decode("j$kJB$yfN$=.maNk^", false);
      short short0 = Utility.searchOpcode("E");
      assertEquals((short) (-1), short0);
      
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteArray0, constantPool0, (-6391), 596, false);
      ConstantPool constantPool2 = constantPool1.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool2, (-6391), (-1031), false);
      assertEquals("0:    fmul\n1:    lload_0\n2:    dstore_3\n3:    lstore_3\n4:    aload_2\n5:    fsub\n6:    astore_3\n7:    nop\n8:    iaload\n9:    land\n10:   ldiv\n11:   ladd\n12:   astore_3\n13:   dmul\n14:   dup2_x2\n", string2);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of names must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 163, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr_w\t\t#14479691
         // 5:    lstore\t\t%233
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "Invalid signature: `";
      Utility.signatureToString("Invalid signature: `", true);
      String string1 = "ifnull";
      try { 
        Utility.typeOfMethodSignature("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.methodSignatureReturnType("LEQ`f`{mI^QQLnGs`;V");
      Utility.fillup("", 87, true, 'v');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-3109));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 236, 16384, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          boolean boolean0 = true;
          String string0 = "The FilenameFilter must not be null";
          Utility.compactClassName("The FilenameFilter must not be null", "The FilenameFilter must not be null", true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor139.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 19, (-2082), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2161), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZHoHOsp(_!)");
      assertEquals((byte)4, byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ZHoHOsp(_!)";
      objectArray0[1] = (Object) "ZHoHOsp(_!)";
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{ZHoHOsp(_!), ZHoHOsp(_!)}", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z<;", false);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(39, 78);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(48, 78);
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      ConstantLong constantLong0 = new ConstantLong(57);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref2;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.searchOpcode("byte");
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("y=n(\"nwf92");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(69);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 54, (int) (byte) (-39), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.clearBit((-1262), 47);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byte[] byteArray1 = Utility.decode("fdiv", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UD)}/0)NYFqt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UD)}/0)NYFqt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "7$A{$n64^bP";
      try { 
        Utility.typeOfSignature("7$A{$n64^bP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7$A{$n64^bP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte) (-65);
      byteArray1[4] = (byte) (-65);
      byteArray1[6] = (byte)35;
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("getstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ol\"|cw-];I", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)89;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|");
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte) (-28);
      byteArray1[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readDouble();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals(9, byteSequence2.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-78), (byte) (-15));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("%P@ew\"ciY~<bUe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %P@ew\"ciY~<bUe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Utility.decode("K!L:j", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("K!L:j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K!L:j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ConstantUtf8.getCachedInstance("*6F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.methodSignatureToString(", npairs = ", ", npairs = ", "]S!-q@XN|L,{n(+TSKs", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(152);
      byte byte0 = Utility.typeOfSignature("JAE jFv ");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.compactClassName("*%5{AHV*txw=L~K", "*%5{AHV*txw=L~K", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("if_icmple");
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable(194, 194, localVariableArray0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmple", "if_icmple", (String) null, true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = Utility.isSet(175, 175);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)54, false);
      assertEquals("0:    pop\n1:    istore\t\t%223\n3:    lstore_2\n4:    iconst_m1\n5:    lshl\n6:    dstore_0\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".*,k7uW5mS)gO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .*,k7uW5mS)gO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = Utility.compactClassName("NMAN|`ZII{YK%1K", "Exception while looking for class ", false);
      assertEquals("NMAN|`ZII{YK%1K", string0);
      
      String string1 = Utility.classOrInterface((-3694));
      String string2 = Utility.replace("class", "NMAN|`ZII{YK%1K", "NMAN|`ZII{YK%1K");
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("65 00", string3);
      
      boolean boolean0 = Utility.isSet((-1247), (byte)101);
      assertTrue(boolean0);
      
      String string4 = Utility.accessToString((int) (byte)101, false);
      assertEquals("public protected synchronized volatile", string4);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(_^DMcf}Z,Pz", "(_^DMcf}Z,Pz", "T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_^DMcf}Z,Pz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "cs$i{AGE";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cs$i{AGE");
      Utility.isJavaIdentifierPart('W');
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.methodSignatureReturnType("FbmRSI9");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      String string0 = "NIW:P#tDL/M";
      boolean boolean0 = false;
      Utility.compactClassName("/~m!DkWv96ymd+", "NIW:P#tDL/M", false);
      // Undeclared exception!
      try { 
        Utility.getSignature("-W&XU$[C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-6);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1715), (-1), false);
      assertEquals("0:    if_icmpne\t\t#7300\n3:    laload\n4:    fstore_0\n5:    ifle\t\t#-12033\n", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ConstantUtf8.getInstance("*6F");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42992. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-77);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-77);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[6] = (byte)35;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte) (-45), 651);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("M/(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("M/(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M/(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*6F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RJ-$7>6Hv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RJ-$7>6Hv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "nHN'+g";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nHN'+g");
      // Undeclared exception!
      try { 
        Utility.compactClassName("nHN'+g", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto_w\t\t#1883977902", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.classOrInterface((byte)0);
      Utility.clearBit((byte)0, (byte)0);
      Constant[] constantArray0 = new Constant[4];
      int int0 = 95;
      ConstantClass constantClass0 = new ConstantClass(95);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, (byte)0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[2] = (Constant) constantMethodType0;
      int int1 = 5;
      try { 
        MockURI.URI("k2<J_}vr", "class", "OVf%F", "k2<J_}vr");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: k2<J_}vr://classOVf%25F#k2%3CJ_%7Dvr
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aaload", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("E{()J=,a", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      String string0 = Utility.compactClassName("nop", true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[3] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.Vcel.classfileUtility$1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[2] = (Object) "org.apache.Vcel.classfileUtility$1";
      objectArray0[3] = (Object) "org.apache.Vcel.classfileUtility$1";
      objectArray0[4] = (Object) byteSequence0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantFloat constantFloat0 = new ConstantFloat(823.8974F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass(57);
      constantArray0[3] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(57, 89);
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(">M=cIj)g#M");
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 240;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 89, 240);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("mN$i{'G9e=UR", "if_icmplt", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mN$i{'G9e=UR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      int int0 = (-543);
      Utility.fillup("{java.lang.Object@237d070d, java.lang.Object@3c6e5540, java.lang.Object@eeb4871, java.lang.Object@6aeefc39, java.lang.Object@2160db06, java.lang.Object@6f6a5e3f}", (-543), true, 'y');
      Utility.getSignature("S%");
      Utility.classOrInterface((-2451));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", "Expected class `", "S%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("j$kJB$yfN$=.maNk^", "j$kJB$yfN$=.maNk^", false);
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-127);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('6');
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), 47);
      Utility.toHexString(byteArray0);
      String string0 = "getfield";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getfield", "JYX)N5cj-i*MPL", "LSensitive;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$1");
      Object object0 = new Object();
      String string0 = "num|Xi0";
      ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.Utility$1");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.format(80, (byte)0, false, 'p');
      int int0 = 3304;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3304, 1379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#$@5N=AVf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)127, (byte)35, (byte)0, (byte)53, (byte)78, (byte)61, (byte)65, (byte)86, (byte)102}, byteArray0);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ConstantUtf8.getCachedInstance("FbmRSI9");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lshl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lshl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-118));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet(4431, 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = Utility.convertString("8#yT3>3]@7");
      assertEquals("8#yT3>3]@7", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode(">\t");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("'");
      assertEquals("'", string1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)92;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("arraylength", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\n", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$K", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, (-2252), false);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("$5cn");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.classOrInterface(48);
      Utility.getSignature("long");
      try { 
        Utility.typeOfSignature("3vK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3vK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("putField", false);
      short short0 = Utility.searchOpcode("putField");
      assertEquals((short)181, short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lneg", string0);
      
      String string1 = Utility.fillup("lneg", 112, true, '4');
      assertEquals("lneg444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string1);
      
      String string2 = Utility.getSignature("lneg");
      assertEquals("Llneg;", string2);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+i\"nNS/q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i\"nNS/q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.signatureToString("Deprecated");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("M/(", false);
      Utility.searchOpcode("M/(");
      Utility.setBit(2048, 2048);
      Utility.compactClassName("");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "M/(";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false);
      Utility.convertString("uo&0W%IeO");
      Utility.compactClassName("v\"}IvIcYzK+", "v\"}IvIcYzK+", false);
      Utility.compactClassName("qjbh1", false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)92);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("ixor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Utility.isSet(25, 389);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P>]IAawLm", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>]IAawLm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.classOrInterface(76);
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("Fsf@", false);
      try { 
        Utility.methodSignatureReturnType("zS11us9qJ3Bl`ru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `zS11us9qJ3Bl`ru'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("isub", false);
      Utility.searchOpcode("isub");
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((byte)0, (-2908), false, 'A');
      String string0 = "void";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "isub", "void", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = "\\HhJxKk)4=R3&w 7:";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.util.ClassPathRepository", "HhJxKk)4=R3&w 7:", "HhJxKk)4=R3&w 7:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.util.ClassPathRepository
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!%5{AHV*t~xw=L~K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %5{AHV*t~xw=L~K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = Utility.convertString("8#yT3>3]@7");
      assertEquals("8#yT3>3]@7", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload\t\t%93", string1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "dstore_0", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte)69, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YCr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YCr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("isub", false);
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      try { 
        Utility.typeOfSignature("UZ~sO0>GIB1Gjf:\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UZ~sO0>GIB1Gjf:\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = Utility.replace("}kZDu\"xWt7Sa_", "}kZDu\"xWt7Sa_", "}kZDu\"xWt7Sa_");
      assertEquals("}kZDu\"xWt7Sa_", string0);
      
      String string1 = Utility.fillup("}kZDu\"xWt7Sa_", 354, false, 'A');
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}kZDu\"xWt7Sa_", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.compactClassName("(~A#", true);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1977, (-2863));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-86);
      Utility.convertString("(~A#");
      Utility.codeToString(byteArray0, constantPool0, (-1084), 134, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(20, byteSequence0.getIndex());
      assertEquals("tableswitch\tdefault = 0, low = 0, high = 0(0)", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = Utility.signatureToString("[CEa'");
      assertEquals("char[]", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.setBit((-21), (-21));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      String string0 = Utility.fillup("", (byte) (-59), false, 'N');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = 183;
      Utility.classOrInterface(183);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("*%5{AHV*txw=L~K", "*%5{AHV*txw=L~K", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      Utility.getSignature("");
      Utility.signatureToString("L;", true);
      try { 
        Utility.typeOfMethodSignature("TrK_5_L$m08b7lKux");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: TrK_5_L$m08b7lKux
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N\t";
      String string0 = Utility.getSignature("N\t");
      assertEquals("LN;", string0);
      
      String string1 = Utility.compactClassName("jar:file:", "N\t", false);
      assertEquals("jar:file:", string1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, 444, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.replace("c8m:t9\"Unf", "c8m:t9\"Unf", "c8m:t9\"Unf");
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.signatureToString("LFbmRSI9;V");
      Utility.typeOfSignature("FbmRSI9");
      byte[] byteArray0 = new byte[13];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.accessToString(2080, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("synchronized strictfp", stringArray0);
      Utility.isJavaIdentifierPart('7');
      String string0 = "T-#3@:\\;m";
      Utility.compactClassName("T-#3@:;m");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "T-#3@:;m", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byte byte0 = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byte byte1 = (byte)84;
      byteArray0[2] = (byte)84;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "athrow";
      try { 
        Utility.typeOfSignature("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantMethodref");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
      
      String string1 = Utility.format((-1112), 253, true, 'A');
      assertEquals("-1112AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)87);
      assertEquals("0:    pop\n1:    dastore\n2:    ifnonnull\t\t#84\n5:    iload_0\n6:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte)44, 1812);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("K[pJp$& 17 3QN", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 9, 9, false);
      assertEquals("10:   baload\n11:   fastore\n12:   land\n13:   astore_3\n", string0);
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = "8#yT3>3]@7";
      try { 
        Utility.typeOfSignature("8#yT3>3]@7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8#yT3>3]@7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#-14393", string0);
      
      String string1 = Utility.compactClassName("org.apache.bcel.util.ClassPath$Dir", false);
      assertEquals("org.apache.bcel.util.ClassPath$Dir", string1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte)69, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "byte";
      try { 
        Utility.methodSignatureArgumentTypes("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#$@5N=AVf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)127, (byte)35, (byte)0, (byte)53, (byte)78, (byte)61, (byte)65, (byte)86, (byte)102}, byteArray0);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)72;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("O}jERCA>T9dzv,", (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.methodSignatureReturnType("LFbmRSI9;V");
      Utility.typeOfSignature("FbmRSI9");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      Utility.encode(byteArray0, false);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(234, (-2127), localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("TZ[SBXeEx^J(NAK|^7", "monitorenter", "LFbmRSI9;V", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: TZ[SBXeEx^J(NAK|^7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-118);
      String string0 = Utility.getSignature(" arg");
      assertEquals("Larg;", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-118);
      String string1 = Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte) (-118), (int) (byte)69, true);
      assertEquals("0:    l2d\n", string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.signatureToString("Vsterface");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.compactClassName("Dpu=5@m];c]3yr", "", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)84;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)120;
      byteArray0[5] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.compactClassName("a<,ng'0]&>eDP?fY*0", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.convertString("Nl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(57, 171, true, '4');
      assertEquals("574444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string0);
      
      String string1 = Utility.convertString("areturn");
      assertEquals("areturn", string1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)5;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$A$5b$feI$F", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("HpXj8A3j8F6:i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HpXj8A3j8F6:i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantMethodref");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantUtf8_0.clone();
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("org.apache.bcel.classfile.ConstantMethodref");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$'3}^]l*f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$'3}^]l*f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.replace("W7", "W7", "W7");
      assertEquals("W7", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = Utility.accessToString((-12), true);
      assertEquals("protected final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantMethodref");
      Utility.clearBit((-3219), (-1790031529));
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.ConstantMethodref");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ConstantMethodref'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-75);
      byteArray0[6] = (byte) (-31);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.isSet(25, 389);
      ConstantLong constantLong0 = new ConstantLong((byte)91);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(25, 175);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 26, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      char char0 = '-';
      Utility.format((-1407), (-1407), false, '-');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-1407");
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, false, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "YLm@:OS7=7\"tx?>8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LEQ`f`{mI^QQLnGs`;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("|m{oA*?p\"w7_}N21");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2601);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = Utility.replace("invokedynamic", "java.lang.0=y39C+1Bo,F9)o=-qE", "invokedynamic");
      assertEquals("invokedynamic", string0);
      
      String string1 = Utility.methodTypeToSignature("java.lang.0=y39C+1Bo,F9)o=-qE", (String[]) null);
      String string2 = Utility.fillup("()Ljava/lang/0=y39C+1Bo,F9)o=-qE;", (-387), true, '%');
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.convertString(", handler_pc = ");
      int int0 = 171;
      Utility.clearBit(171, 171);
      Utility.signatureToString("J");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Utility.methodSignatureReturnType("K41b|a}J)Ic@2w8");
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short1 = Utility.searchOpcode("nop");
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.setBit((-1626), (-1626));
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)8;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("08 e0 bb 08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 08 e0 bb 08
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-57);
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = "? extends ";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpge\t\t#-20459", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-23645", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)44;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-17);
      byte byte0 = (byte)46;
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, (-1514), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format((-217), (-217), false, '0');
      assertEquals("-217", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit((byte)65, (byte)65);
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.isSet(175, 175);
      String string0 = "(LW8DN";
      try { 
        Utility.methodSignatureArgumentTypes("(LW8DN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LW8DN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte)44, 1812);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("K[pJp$& 1Ik7 3QN", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_0", string0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#-23645", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("Nhxt$0k*U", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0k\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.isSet((byte)43, (byte)43);
      Utility.decode("K[pJp$& 17 3QN", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Utility.compactClassName("#J[JA|:#`;Ne0p;");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      try { 
        Utility.typeOfSignature("#J[JA|:#`;Ne0p;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #J[JA|:#`;Ne0p;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#$@5N=AVf", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("5T!K;BlE!/H6n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5T!K;BlE!/H6n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[7] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(4, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.getSignature("Xvp 6v\"r(NZr<NYXA'");
      String string0 = "l41)#elU";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("l41)#elU", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      Utility.searchOpcode(" skipped");
      try { 
        Utility.methodSignatureArgumentTypes("l41)#elU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l41)#elU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.signatureToString("LEQ`f`{mI^QQLnGs`;V");
      try { 
        Utility.methodSignatureReturnType("EQ`f`{mI^QQLnGs`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EQ`f`{mI^QQLnGs`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(type=", "(type=", "(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s}O@:$<WC8+X", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("s$7dO$40$3a$AWC8$xX", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.setBit((-1626), (-1626));
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("sipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.methodSignatureReturnType("LEQ`f`{mI^QQLnGs`;V");
      Utility.fillup("", 87, true, 'v');
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-3109));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantInteger0.clone();
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("EQ`f`{mI^QQLnGs`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EQ`f`{mI^QQLnGs`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.convertString("");
      Utility.clearBit(191, (-736));
      // Undeclared exception!
      try { 
        Utility.signatureToString("<f{3fy4Z7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<f{3fy4Z7E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      int int0 = 349;
      Utility.fillup("", 349, true, 'u');
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-15);
      byteArray0[0] = (byte) (-15);
      Constant[] constantArray0 = new Constant[8];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("-Y`eSczTTm9tpduOT", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(17, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.fillup("8Sq#%du2fKQ$bwJ&)i", (byte)0, false, 'y');
      assertEquals("8Sq#%du2fKQ$bwJ&)i", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8Sq#%du2fKQ$bwJ&)i";
      String string1 = Utility.methodTypeToSignature("B&UYo", stringArray0);
      assertEquals("(L8Sq#%du2fKQ$bwJ&)i;)LB&UYo;", string1);
      
      String string2 = Utility.methodSignatureToString("(L8Sq#%du2fKQ$bwJ&)i;)LB&UYo;", "(L8Sq#%du2fKQ$bwJ&)i;)LB&UYo;", "8Sq#%du2fKQ$bwJ&)i");
      assertEquals("8Sq#%du2fKQ$bwJ&)i B&UYo (L8Sq#%du2fKQ$bwJ&)i;)LB&UYo;(8Sq#%du2fKQ$bwJ&)i arg1)", string2);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ICF");
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dconst_0", string1);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[5] = (byte) (-63);
      byteArray0[7] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.clearBit((-4449), (-4449));
      assertEquals(2147479199, int0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&)S`$uiS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &)S`$uiS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.classOrInterface(80);
      assertEquals("class", string0);
      
      String string1 = Utility.replace("class", "class", (String) null);
      assertNotNull(string1);
      assertEquals("null", string1);
      
      int int0 = Utility.setBit(7, 7);
      assertEquals(135, int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.fillup("8)=", 2870, false, '6');
      try { 
        Utility.methodSignatureArgumentTypes(string0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      String string0 = "$l$8b$i$a$a$a$a$a$a$a";
      // Undeclared exception!
      try { 
        Utility.decode("$l$8b$i$a$a$a$a$a$a$a", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((-6456));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.convertString("");
      Utility.decode("", false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(194, 186);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.methodSignatureReturnType("LEQ`f`{mI^QQLnGs`;V");
      Utility.fillup("", 87, true, 'v');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-3109));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 236, 16384, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.clearBit(183, 183);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.format(125, 125, true, '>');
      try { 
        Utility.methodSignatureReturnType("125>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `125>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kl[S!:){5r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kl[S!:){5r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      int int0 = Utility.clearBit(1074, 1074);
      assertEquals(1074, int0);
      
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)9;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("d5 56 24 09", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">..8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >..8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = "1yX";
      try { 
        Utility.typeOfSignature("1yX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1yX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("j$kJB$yfN$=.maNk^", "j$kJB$yfN$=.maNk^", false);
      Utility.format(596, 596, false, '?');
      byte[] byteArray0 = Utility.decode("j$kJB$yfN$=.maNk^", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(60, 90);
      constantMethodref0.clone();
      constantArray0[1] = (Constant) constantMethodref0;
      try { 
        Utility.methodSignatureToString("j$kJB$yfN$=.maNk^", "j$kJB$yfN$=.maNk^", "Total of ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j$kJB$yfN$=.maNk^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.setBit(229, 229);
      Utility.searchOpcode("ifnonnull");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("D}TeHeF=b;", false);
      Utility.classOrInterface(3973);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "D}TeHeF=b;";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Qr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      boolean boolean0 = Utility.isSet(175, 175);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)71;
      Utility.signatureToString("VMM:,U/gkl", false);
      String string0 = Utility.convertString("~h1*");
      assertEquals("~h1*", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FbmSI9");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Utility.searchOpcode("");
      Object object0 = new Object();
      ConstantUtf8.getCachedInstance("Unrecognized attribute type tag parsed: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(155, (-259), false, 'S');
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1040));
      String string0 = "org.apache.bcel.classfile.Signature$MyByteArrayInputStream";
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Signature$MyByteArrayInputStream", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Signature$MyByteArrayInputStream'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@*;[V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @*;[V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("int");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "int";
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "invokedynamic", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-112);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("83 4f 59 5a 39 67 ac 7c 90", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("S0ed|");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24889. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.convertString("8#yT3>3]@7");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 342, 342, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("B_)Z,gJ2ZMU^", true);
      assertEquals("byte", string0);
      
      String string1 = Utility.convertString("iload_3");
      assertEquals("iload_3", string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",g)K_;{k%=bc,OY-=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,g)K_;{k%=bc,OY-=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("\nAttribute(s) = ");
      assertEquals("\nAttribute(s) = ", string0);
      
      String string1 = Utility.getSignature("\nAttribute(s) = ");
      assertEquals("LAttribute(s);", string1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.replace("putfield", "putfield", "putfield");
      try { 
        Utility.methodSignatureReturnType("G~Z&O8u ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G~Z&O8u '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("d2i");
      Utility.searchOpcode("d2i");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("Ld2i;", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V~}4q<Lclz/U");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-61);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmple\t\t#10691", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LFbmRSI9;V");
      assertEquals("FbmRSI9", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "wy%lpf6h(t!";
      Utility.compactClassName("wy%lpf6h(t!", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wy%lpf6h(t!";
      stringArray0[1] = "";
      stringArray0[2] = "wy%lpf6h(t!";
      stringArray0[3] = "";
      stringArray0[4] = "wy%lpf6h(t!";
      stringArray0[5] = "wy%lpf6h(t!";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "'");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 2, 245);
      assertEquals("2:    fload_3\n3:    lushr\n4:    astore_1\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(81);
      String string1 = Utility.convertString("ifeq");
      assertEquals("ifeq", string1);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@36c85148, java.lang.Object@38fdc31, java.lang.Object@5c5c61fd, java.lang.Object@658aede9, java.lang.Object@113cb201, java.lang.Object@6c2f9a43}", (-543), true, 'y');
      Utility.getSignature("S%");
      Utility.format('y', (-543), true, 'y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", "Expected class `", "S%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4, 4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "long";
      stringArray0[1] = "long";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.mark((byte)1);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aconst_null", string0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, 247, true);
      assertEquals("", string1);
      
      int int0 = Utility.setBit((byte) (-26), 218);
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.classOrInterface(82);
      Utility.methodSignatureReturnType("Fsf@", false);
      Utility.classOrInterface(82);
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Nl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "";
      String string1 = "|k";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "|k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = "Byte code error: ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z!K|[\"l:.G2JF&", "Byte code error: ", "getstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z!K|[\"l:.G2JF&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = "(type=";
      try { 
        Utility.typeOfSignature("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (type=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.compactClassName("*kx", false);
      Utility.clearBit(0, 0);
      try { 
        Utility.methodSignatureArgumentTypes("*kx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *kx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 2511, 197, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MwLp(R-rc]5d9eLN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MwLp(R-rc]5d9eLN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[~JAcB#R;N^0p;");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = Utility.compactClassName("(~A#", true);
      assertEquals("(~A#", string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1977, (-2863));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("pop2", string1);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)30;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("YY$a3G$f9$83$k", string0);
      
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-3);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("B_)Z,gJ2ZMU^", false);
      assertEquals("byte", string0);
      
      String string1 = Utility.convertString("void");
      assertEquals("void", string1);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = Utility.getSignature("long");
      assertEquals("J", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-97), false);
      assertEquals("0:    <illegal opcode>\n1:    if_icmpeq\t\t#-17011\n", string1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Utility.decode("putField", false);
      Utility.searchOpcode("putField");
      Object object0 = new Object();
      ConstantUtf8.getCachedInstance("(start_pc = ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 1900, false);
      Utility.encode(byteArray1, false);
      File file0 = MockFile.createTempFile("0:    irem\n1:    lneg\n2:    ineg\n3:    fstore_3\n4:    lmul\n5:    lsub\n6:    idiv\n7:    isub\n", "invokevirtual");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("?>...", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(8L, file0.length());
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Utility.signatureToString("VMM:,U/gkl", true);
      String string0 = Utility.convertString("multianewarray");
      assertEquals("multianewarray", string0);
      
      String string1 = Utility.format(0, 0, true, '{');
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+u!7", "+u!7", "+u!7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +u!7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)72, (byte)72);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)55;
      byteArray0[3] = (byte)52;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)32;
      String string0 = Utility.signatureToString("Couldn't find: ", false);
      assertEquals("char", string0);
      
      String string1 = Utility.convertString("2m({B");
      assertEquals("2m({B", string1);
  }
}
