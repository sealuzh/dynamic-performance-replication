/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:00:51 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.timedOut();
      assertSame(AsyncTimeout.head, asyncTimeout0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      asyncTimeout0.deadline(1000000000000L, timeUnit0);
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.source((Source) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.timeout(1933L, timeUnit0);
      asyncTimeout0.newTimeoutException((IOException) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      asyncTimeout0.deadline(1000000000000L, timeUnit0);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException("`D(EC\"/?");
      MockIOException mockIOException1 = new MockIOException("Okio Watchdog", mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      asyncTimeout0.exit((IOException) mockIOException1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.exit(true);
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1000000000L);
      asyncTimeout0.deadline(1000000000L, timeUnit0);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException("kl>UFy_D*l~-%v4zv");
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.deadline(205L, timeUnit0);
      MockIOException mockIOException0 = new MockIOException("b^&");
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(1000000000000L, timeUnit0);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException("`D(EC\"/?");
      MockIOException mockIOException1 = new MockIOException("Okio Watchdog", mockIOException0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout1.timeout(1000000000000L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.sink((Sink) null);
      asyncTimeout1.exit((IOException) interruptedIOException0);
  }
}
