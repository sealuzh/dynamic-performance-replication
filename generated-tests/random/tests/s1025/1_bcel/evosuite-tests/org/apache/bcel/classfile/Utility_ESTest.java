/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:02:03 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Utility.isSet(3019, 3019);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("org.apache.commons.io.filefilter.CanReadFileFilter", true);
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)47;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(81, (byte)8);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1444), 3019, true);
      assertEquals("0:    goto_w\t\t#1409829680\n5:    aload_0\n6:    lstore_2\n7:    dadd\n8:    laload\n", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)49;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2997, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-68);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.mark((byte) (-68));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      Utility.isJavaIdentifierPart('`');
      try { 
        Utility.typeOfSignature("G+fka[$=vN-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G+fka[$=vN-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.replace("EuK88FBpfpjx4pmbY", "EuK88FBpfpjx4pmbY", "az+3C|;bhOhz^z");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "az+3C|;bhOhz^z";
      objectArray0[1] = (Object) "EuK88FBpfpjx4pmbY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "az+3C|;bhOhz^z";
      objectArray0[5] = (Object) "az+3C|;bhOhz^z";
      objectArray0[7] = (Object) "az+3C|;bhOhz^z";
      objectArray0[8] = (Object) "az+3C|;bhOhz^z";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-29);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), (int) (byte) (-34));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3149, (-2684));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "@";
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.clearBit(65, 65);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-98));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, 81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 3843;
      Utility.setBit(3843, 3843);
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 189, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.accessToString(9959, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isSet((-347), 163);
      Utility.accessToString(181, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-74);
      byte byte0 = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-79);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.accessToString(43);
      Utility.classOrInterface(43);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(169, 43);
      Utility.compactClassName("class", true);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-114);
      byte byte1 = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-62);
      byte byte2 = (byte)7;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-82);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)114, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 121, true);
      assertEquals("0:    impdep2\n1:    impdep2\n2:    <illegal opcode>\n3:    wide\t(wide)\n4:    lsub\n5:    ifge\t\t#1084\n", string0);
      
      int int0 = Utility.clearBit((byte)4, 105);
      assertEquals(4, int0);
      
      String string1 = Utility.classOrInterface(203);
      assertEquals("class", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "0:    impdep2\n1:    impdep2\n2:    <illegal opcode>\n3:    wide\t(wide)\n4:    lsub\n5:    ifge\t\t#1084\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) null;
      String string2 = Utility.printArray(objectArray0, true, false);
      assertEquals("{0:    impdep2\n1:    impdep2\n2:    <illegal opcode>\n3:    wide\t(wide)\n4:    lsub\n5:    ifge\t\t#1084\n, null, -1, null}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.isSet(1178, 1178);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(20, byteSequence0.getIndex());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-86);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{-86, null}", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.replace("x5wTy#Yv=eN5W", "x5wTy#Yv=eN5W", ")\t");
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">npAEEiqz5N*7 I!Q<Z");
      String string0 = "2$";
      try { 
        Utility.decode("2$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("R88");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R88
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)55;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-78));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)88, 88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.compactClassName("new");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte) (-50);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte)26, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-8);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-103);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)24, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.compactClassName("invokedynamic", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 112, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)8;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-123), 2913);
      assertEquals("0:    dload_0\n1:    isub\n2:    iadd\n3:    dup_x1\n4:    ladd\n5:    i2l\n6:    f2d\n7:    <illegal opcode>\n8:    iconst_5\n", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.isJavaIdentifierPart('p');
      Utility.accessToString(2, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)58;
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, (byte)27);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(430, (byte) (-80));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)27, 3297);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)27);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("private");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.classOrInterface(172);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "class";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("EtaNF$ ");
      // Undeclared exception!
      try { 
        Utility.decode("A$9@=n\"q", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "aload_3";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "aload_3";
      stringArray0[1] = "aload_3";
      Utility.methodTypeToSignature("aload_3", stringArray0);
      Utility.methodTypeToSignature("(Laload_3;Laload_3;)Laload_3;", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true, true);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)86;
      Utility.methodSignatureToString("(Laload_3;Laload_3;)Laload_3;", "(Laload_3;Laload_3;)Laload_3;", "{\"aload_3\", \"aload_3\"}", true);
      try { 
        Utility.typeOfSignature("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, 838);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-34);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)23, (int) (byte) (-34));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49463. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "\"3qp}cf]vI`";
      try { 
        Utility.typeOfSignature("\"3qp}cf]vI`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"3qp}cf]vI`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-128), (byte)59);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "pop2";
      stringArray0[1] = "pop2";
      stringArray0[2] = "pop2";
      stringArray0[3] = ")\n";
      stringArray0[4] = "pop2";
      try { 
        constantPool0.getConstant((-1243), (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1243. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-4);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 9, (int) (byte) (-6), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4|P1Du(C\"6&B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4|P1Du(C\"6&B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.compactClassName("FeS;i1G~uPk_OK0sVZi");
      Utility.typeOfSignature("FeS;i1G~uPk_OK0sVZi");
      int int0 = 272;
      Utility.accessToString(272, false);
      Utility.classOrInterface(272);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("final native", "class", "boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: final native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.decode("GhUUFY%IUfs4K}7$7", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.compactClassName("invokedynamic", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 112, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)106;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, 188, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aload_2");
      Utility.isSet(1776, 1776);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-75), 361, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      String string0 = "tableswitch";
      try { 
        Utility.methodSignatureArgumentTypes("tableswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tableswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-103);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)23, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38199. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)27;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(239, (byte)84);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 761, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)20;
      Utility.equals(byteArray0, byteArray0);
      Utility.format((-957), (byte) (-101), false, 'Z');
      try { 
        Utility.typeOfSignature("-957");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -957
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)70;
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-1985));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-2373), (-2373));
      try { 
        Utility.typeOfMethodSignature("0:    saload\n1:    dstore_2\n2:    fstore_3\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    saload
         // 1:    dstore_2
         // 2:    fstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)101, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.fillup("Illegal type: ", 78, true, 'O');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Illegal type: ";
      Utility.methodTypeToSignature(".xbU%Rw|WBZbKtM4s_", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("ifnull");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)91;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte)89;
      byteArray1[7] = (byte)83;
      byteArray1[8] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dreturn");
      MockFile mockFile1 = new MockFile(mockFile0, "dreturn");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      mockFileOutputStream0.write(607);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      objectOutputStream0.writeShort(607);
      mockFile1.renameTo(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tg'y{=NH1D.");
      mockPrintStream0.append((CharSequence) "dreturn");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.clearBit(607, 4567);
      Utility.isSet(607, 607);
      Utility.isJavaIdentifierPart('m');
      try { 
        Utility.typeOfSignature("7a|ilY0QgG@b8{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7a|ilY0QgG@b8{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.convertString("V");
      Utility.compactClassName("V", "V", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 1701, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.convertString("public");
      Utility.accessToString(59);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-2105), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.typeOfSignature("L/class;V");
      Utility.typeOfSignature("[]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("AWB@R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AWB@R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "oA!R";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oA!R");
      Utility.setBit(68, 2574);
      Utility.clearBit(338, 2574);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 99);
      assertEquals("0:    nop\n1:    dup2_x1\n2:    dup\n3:    fdiv\n4:    iconst_2\n5:    nop\n6:    lor\n7:    ishl\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{}", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "0:    nop\n1:    dup2_x1\n2:    dup\n3:    fdiv\n4:    iconst_2\n5:    nop\n6:    lor\n7:    ishl\n";
      stringArray0[4] = "{}";
      String string2 = Utility.methodTypeToSignature("0:    nop\n1:    dup2_x1\n2:    dup\n3:    fdiv\n4:    iconst_2\n5:    nop\n6:    lor\n7:    ishl\n", stringArray0);
      assertEquals("(L{};L{};L{};L0:;L{};)L0:;", string2);
      
      boolean boolean0 = Utility.isSet((-1072), 60);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "(DoV9b]V<pBRuIR*r";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(DoV9b]V<pBRuIR*r", "(DoV9b]V<pBRuIR*r", "(DoV9b]V<pBRuIR*r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oV9b]V<pBRuIR*r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dont call getValueBoolean() on a non BOOLEAN ElementValue");
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)89;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("*sTvLAu4%%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sTvLAu4%%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), 121, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(":", (String[]) null);
      Utility.fillup("()L:;", (-1175), true, '&');
      Utility.methodTypeToSignature(":", (String[]) null);
      Utility.methodSignatureToString("()L:;", "()L:;", ")");
      // Undeclared exception!
      try { 
        Utility.signatureToString("()L:;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()L:;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)23;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, (-1881970474), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('f');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)37;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[8] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_2
         // 1:    dmul
         // 2:    lstore\t\t%231
         // 4:    aload_0
         // 5:    fadd
         // 6:    aload_0
         // 7:    fload_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 47, (int) (byte)91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.isJavaIdentifierPart('c');
      try { 
        Utility.typeOfSignature("Q a/w(xbL1Rd3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q a/w(xbL1Rd3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)102;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, 2637, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.accessToString(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)12;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 188, (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.convertString("freturn");
      int int0 = 182;
      Utility.classOrInterface(182);
      try { 
        Utility.typeOfSignature(";&:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;&:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)27;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(239, (byte)84);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 761, (int) (byte)3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 47);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, (int) (byte) (-107), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid class name ");
      String string0 = Utility.signatureToString("[Z:hh`\"1cH=X/%@PM7j");
      assertEquals("boolean[]", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PkeqgE(]nCZ");
      Utility.format(57, (-129), false, '-');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)118;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.convertString("z4ncaqH");
      Utility.convertString(" methods:\n");
      int int0 = (-905);
      Utility.classOrInterface((-905));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      Utility.compactClassName("z4ncaqH", "invokedynamic", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "invokedynamic";
      objectArray0[1] = (Object) " methods:\n";
      objectArray0[2] = (Object) "z4ncaqH";
      objectArray0[3] = (Object) "invokedynamic";
      objectArray0[4] = (Object) "z4ncaqH";
      objectArray0[5] = (Object) " methods:\n";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("^QVB#).9-n?d:wOo}]");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)24;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 53, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lookupswitch", false);
      short short0 = Utility.searchOpcode("lookupswitch");
      assertEquals((short)171, short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-140), (-1083), true);
      assertEquals("0:    idiv\n1:    ddiv\n2:    ddiv\n3:    dmul\n4:    lneg\n5:    irem\n6:    drem\n7:    dneg\n8:    lmul\n9:    ineg\n10:   dadd\n11:   imul\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lneg", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "&Z0G|0<~XOB3^";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&Z0G|0<~XOB3^";
      stringArray0[1] = "&Z0G|0<~XOB3^";
      Utility.methodTypeToSignature("&Z0G|0<~XOB3^", stringArray0);
      Utility.methodTypeToSignature("(L&Z0G|0<~XOB3^;L&Z0G|0<~XOB3^;)L&Z0G|0<~XOB3^;", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true, true);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L&Z0G|0<~XOB3^;L&Z0G|0<~XOB3^;)L&Z0G|0<~XOB3^;", "(L&Z0G|0<~XOB3^;L&Z0G|0<~XOB3^;)L&Z0G|0<~XOB3^;", "{\"&Z0G|0<~XOB3^\", \"&Z0G|0<~XOB3^\"}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L&Z0G|0<~XOB3^;L&Z0G|0<~XOB3^;)L&Z0G|0<~XOB3^;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string0 = "Illegal type: ";
      Utility.decode("Illegal type: ", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M,{-K=n2Y?}K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M,{-K=n2Y?}K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-51);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)65;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)76, 273);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("BootstrapMethods(");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantInvokeDynamic0.accept(descendingVisitor0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-2151), (-1468));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "0:    dup2\n1:    astore_1\n2:    <illegal opcode>\n3:    lstore_2\n", "0:    dup2\n1:    astore_1\n2:    <illegal opcode>\n3:    lstore_2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-1881970474), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)122, 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("double");
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "double", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      Utility.printArray(printWriter0, (Object[]) null);
      Utility.getSignature("<illegal opcode>");
      Utility.accessToString(190);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(184, 185);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1913));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-1180));
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantInteger constantInteger0 = new ConstantInteger((-115));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 24, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50944. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "impdep1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep1");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)71;
      Utility.toHexString(byteArray0);
      Utility.setBit((byte)6, (byte)42);
      String string1 = "vV+9_.,_5O4";
      byte[] byteArray1 = Utility.decode("vV+9_.,_5O4", false);
      boolean boolean0 = true;
      Utility.fillup("impdep1", (byte)6, true, 'P');
      Utility.clearBit(13, (byte)71);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)6, (int) (byte)71, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegally nested brackets:", "2a 06 47", "2a 06 47", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1");
      assertEquals("impdep1", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("istore_3", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byte byte0 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[2];
      byte byte1 = (byte)50;
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte) (-96);
      Utility.equals(byteArray1, byteArray0);
      String string0 = "P6RIytTH:8:";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("P6RIytTH:8:", "P6RIytTH:8:", "P6RIytTH:8:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P6RIytTH:8:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("%<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.replace("if_icmpeq", "<aSNVCB]f */v", "if_icmpeq");
      try { 
        Utility.typeOfSignature("/7x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /7x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "areturSn";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("areturSn", false);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int0 = 16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.accessToString((-7));
      String string0 = "N.5zo2";
      Utility.getSignature("N.5zo2");
      try { 
        Utility.typeOfSignature("N.5zo2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N.5zo2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, 207);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readByte();
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
      
      String string1 = Utility.classOrInterface(797);
      assertEquals("interface", string1);
      
      int int0 = Utility.setBit(542, 8);
      assertEquals(798, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "short";
      Utility.compactClassName("short", "short", true);
      Utility.compactClassName("", "short", true);
      Utility.setBit(46, 1600);
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 228, 65536);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) byteArrayOutputStream0;
      objectArray0[8] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "6~;";
      try { 
        Utility.typeOfSignature("6~;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6~;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.compactClassName("goto", true);
      Utility.setBit(799, 82);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0);
      Utility.searchOpcode("? super ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)112;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)100;
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 70);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("? super ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2048, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ".wE@fBaFK";
      try { 
        Utility.typeOfSignature(".wE@fBaFK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .wE@fBaFK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V";
      stringArray0[1] = "int";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      stringArray0[4] = "V";
      stringArray0[5] = "V";
      stringArray0[6] = "V";
      stringArray0[7] = "V";
      stringArray0[8] = "V";
      Utility.methodTypeToSignature("V", stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      Utility.compactClassName("interface", false);
      char char0 = 'u';
      Utility.isJavaIdentifierPart('u');
      Utility.printArray((Object[]) stringArray0, true);
      try { 
        Utility.typeOfSignature("K. #:C['Gwix{T9xG#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K. #:C['Gwix{T9xG#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.compactClassName("newarray", "newarray", true);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "newarray";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "newarray";
      objectArray0[5] = (Object) "newarray";
      objectArray0[6] = (Object) "newarray";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{newarray, , , , newarray, newarray, newarray, , }", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zN";
      stringArray0[1] = "\n\t\tthrows ";
      stringArray0[2] = "{newarray, , , , newarray, newarray, newarray, , }";
      stringArray0[3] = "ret";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "newarray";
      String string2 = Utility.methodTypeToSignature("newarray", stringArray0);
      assertEquals("(LzN;Lthrows;L{newarray,;Lret;L;L;Lnewarray;)Lnewarray;", string2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "MO";
      try { 
        Utility.typeOfSignature("MO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "D";
      String string1 = "org.apache.bcel.classfile.ConstantDouble";
      String string2 = "Gk.9v;SM`2";
      try { 
        Utility.typeOfSignature("U#O1ek>[tu|r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U#O1ek>[tu|r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(78);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) "{}";
      objectArray1[1] = (Object) "short";
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) byteArrayOutputStream0;
      objectArray1[4] = (Object) "short";
      objectArray1[5] = (Object) "{}";
      objectArray1[6] = (Object) "{}";
      PrintWriter printWriter0 = mockPrintWriter0.printf("short", objectArray1);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)68, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)47;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-360), (int) (byte)47);
      assertEquals("0:    i2d\n1:    dload_2\n2:    ishr\n3:    nop\n4:    fstore_0\n5:    laload\n", string0);
      
      Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK", false);
      Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK", true);
      String string1 = Utility.accessToString((int) (byte)47);
      assertEquals("public private protected static synchronized", string1);
      
      String string2 = Utility.compactClassName("K.");
      assertEquals("K.", string2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(356, 356);
      Utility.isJavaIdentifierPart('Y');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 356, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.typeOfSignature("Z6TUyNX");
      String string0 = "lstore_1";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z6TUyNX", "lstore_1", "lstore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z6TUyNX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "CONSTANT_Long";
      Utility.typeOfSignature("CONSTANT_Long");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(_$5 yA`h-Zj1`jS=", "W>/:oTKE6}9bVvM", "A\"5jFn?5~#j3po h:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_$5 yA`h-Zj1`jS='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-80);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)57;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte)99;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)59, (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.replace("new", "new", "ireturn");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("ireturn");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 146, 3263);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "areturn";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("areturn", false);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int0 = 16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)111;
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)69;
      byte byte1 = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byte byte2 = (byte)15;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)82;
      byte byte3 = (byte) (-36);
      byteArray0[7] = (byte) (-36);
      byte byte4 = (byte)45;
      byteArray0[8] = (byte)45;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "(r:o?T8Z@r fdX4Hhr";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(r:o?T8Z@r fdX4Hhr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r:o?T8Z@r fdX4Hhr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.replace("ldc", "ldc", "ldc");
      assertEquals("ldc", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)76;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("2e 62 88 d6 5a 4c", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.accessToString((int) (byte)76, true);
      assertEquals("protected static volatile", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass((byte)76);
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(75, 119);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("+?hI8Peg F");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iaload", string3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.isSet(1178, (-1895));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ">[G[7ff/`]E3l@X}V)";
      // Undeclared exception!
      try { 
        Utility.getSignature(">[G[7ff/`]E3l@X}V)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[G[7ff/`]E3l@X}V)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "HHSjprLbR8:/j8mW Y";
      try { 
        Utility.methodSignatureReturnType("HHSjprLbR8:/j8mW Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HHSjprLbR8:/j8mW Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, (int) (byte)114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)14;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-247L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[1];
      constantArray1[0] = (Constant) constantLong1;
      constantPool0.setConstantPool(constantArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 167, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.clearBit(65, (-2378));
      Utility.methodTypeToSignature("`+I@|", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)101;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)29);
      constantArray0[0] = (Constant) constantClass0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)101, (-537), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.accessToString(133);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 145, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dont call getValueBoolean() on a non BOOLEAN ElementValue");
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)89;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 1605);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.compactClassName("@Xr\u0005Q# 9?xh");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      int int0 = 305;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 305, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byte byte1 = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.replace("$a2$m$b6$bc", "$a2$m$b6$bc", "$a2$m$b6$bc");
      Utility.decode("$a2$m$b6$bc", false);
      String string0 = ">;";
      String string1 = "$pkNG_L-$4}D";
      boolean boolean0 = false;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "<illegal opcode>";
      String string1 = null;
      boolean boolean0 = false;
      int int0 = 1072;
      CodeException[] codeExceptionArray0 = new CodeException[2];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "=W#Mgq,s`B";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?Cj0ki8?");
      try { 
        Utility.typeOfSignature("=W#Mgq,s`B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =W#Mgq,s`B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = " I/i1M]zr@kR|`";
      stringArray0[1] = " I/i1M]zr@kR|`";
      stringArray0[2] = ")/NJ<=IXC{<>/";
      String string0 = Utility.methodTypeToSignature(" I/i1M]zr@kR|`", stringArray0);
      assertEquals("(LI/i1M]zr@kR|`;LI/i1M]zr@kR|`;L)/NJ<=IXC{<>/;)LI/i1M]zr@kR|`;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-118);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$B$8a", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3340), 1251);
      assertEquals("0:    aconst_null\n1:    l2d\n", string2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("JO)t9$m)F4/[%V~p", false);
      int int0 = 141;
      Utility.accessToString(141);
      Utility.toHexString(byteArray0);
      Utility.decode("\t\t<", false);
      String string0 = "aload_1";
      String string1 = "$Uri+S_|jmn#.G";
      int int1 = 1794;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Utility.isSet(62, 1506);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "dmul";
      Utility.convertString("dmul");
      try { 
        Utility.typeOfSignature("Ef@J*TUS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ef@J*TUS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.replace("hF8", "int", "hF8");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.replace("EuK88FBpfpjx4pmbY", "EuK88FBpfpjx4pmbY", "az+3C|;bhOhz^z");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "az+3C|;bhOhz^z";
      objectArray0[1] = (Object) "EuK88FBpfpjx4pmbY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "az+3C|;bhOhz^z";
      objectArray0[5] = (Object) "az+3C|;bhOhz^z";
      objectArray0[6] = (Object) "az+3C|;bhOhz^z";
      objectArray0[7] = (Object) "az+3C|;bhOhz^z";
      objectArray0[8] = (Object) "az+3C|;bhOhz^z";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-29);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), (int) (byte) (-34));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("{java.lang.Object@3e3709e8, java.lang.Object@5722e050}", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)69;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 228, 2025);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.clearBit(197, 14);
      String string0 = "(Lclass;Lclass;Lclass;Lclass;LFi6R}|$\\9WqmTHrh;Lclass;)Lclass;";
      try { 
        Utility.typeOfSignature("(Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 62;
      Utility.isSet(62, 62);
      try { 
        Utility.methodSignatureReturnType("Qe:`q_p['^$38Idt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qe:`q_p['^$38Idt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)48;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(4069);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-99), (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10653. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "U,3";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("U,3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U,3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fi6R}|$9WqmTHrh");
      String string0 = Utility.signatureToString("J");
      assertEquals("long", string0);
      
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.isSet(875, 83);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("=P#aZ37R2<Td.sg0?w", stringArray0);
      Utility.methodSignatureArgumentTypes("()L=P#aZ37R2<Td/sg0?w;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("()L=P#aZ37R2<Td/sg0?w;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()L=P#aZ37R2<Td/sg0?w;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "&=$6Db$,HU";
      boolean boolean0 = true;
      try { 
        Utility.decode("&=$6Db$,HU", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("lushr");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte) (-90);
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte)125;
      byteArray1[6] = (byte)63;
      byteArray1[7] = (byte) (-7);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)125, (-1505), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0);
      Utility.searchOpcode("? super ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)100;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 70);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("? super ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2048, 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "anewarray";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.getSignature("anewarray");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.setBit(98, 46);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-9);
      byte byte0 = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("17 5a f7 c7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 17 5a f7 c7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte) (-41), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KQ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.signatureToString("BSo", true);
      try { 
        Utility.methodSignatureReturnType("ERf7V3F%&AjNN,LmBd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ERf7V3F%&AjNN,LmBd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.convertString("RAay");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2082598359), (int) (byte)35, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    land
         // 1:    fload_1
         // 2:    laload
         // 3:    aload_0
         // 4:    astore_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "athrow");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-70);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 233, (-250), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.fillup("ifnull", (-1223), true, 'W');
      Utility.classOrInterface((-1223));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "ifnull";
      objectArray0[1] = (Object) "ifnull";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "ifnull";
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) "ifnull";
      objectArray0[7] = (Object) "interface";
      Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{\"ifnull\", \"ifnull\", \"java.lang.Object@588f7e78\", \"interface\", \"ifnull\", \"interface\", \"ifnull\", \"interface\"}";
      stringArray0[1] = "ifnull";
      stringArray0[2] = "{\"ifnull\", \"ifnull\", \"java.lang.Object@588f7e78\", \"interface\", \"ifnull\", \"interface\", \"ifnull\", \"interface\"}";
      stringArray0[3] = "{\"ifnull\", \"ifnull\", \"java.lang.Object@588f7e78\", \"interface\", \"ifnull\", \"interface\", \"ifnull\", \"interface\"}";
      stringArray0[4] = "ifnull";
      stringArray0[5] = "ifnull";
      stringArray0[6] = "ifnull";
      stringArray0[7] = "[v/VzO~3";
      stringArray0[8] = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{\"ifnull\", \"ifnull\", \"java.lang.Object@588f7e78\", \"interface\", \"ifnull\", \"interface\", \"ifnull\", \"interface\"}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [v/VzO~3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-46);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.isSet(919, (byte)41);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.accessToString(43);
      Utility.classOrInterface(43);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(904, 43);
      Utility.compactClassName("class", true);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-82);
      byte byte1 = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-62);
      byte byte2 = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-82);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)114, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Y{HQWG0RL6/@9";
      try { 
        Utility.typeOfSignature("Y{HQWG0RL6/@9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y{HQWG0RL6/@9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.compactClassName("", "CZwW72s.r\"q+aHX(>{s", true);
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 1, 5, false);
      assertEquals("1:    dload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.replace("ifnonnull", "ifnonnull", "ifnonnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)111;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-13), (-1387));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString((byte)84);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14067. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "jcTRcx$G wD4#=m=%";
      Utility.compactClassName("jcTRcx$G wD4#=m=%", "3x", true);
      try { 
        Utility.typeOfSignature("3x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A1bsJF(ime7zDz[mld");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A1bsJF(ime7zDz[mld
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "S";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      Utility.typeOfSignature("S");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "@$S%=.OU<x`[i";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&Z0G|0<~XOB3^";
      stringArray0[1] = "&Z0G|0<~XOB3^";
      Utility.methodTypeToSignature("&Z0G|0<~XOB3^", stringArray0);
      Utility.methodTypeToSignature("(L&Z0G|0<~XOB3^;L&Z0G|0<~XOB3^;)L&Z0G|0<~XOB3^;", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)86;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("&Z0G|0<~XOB3^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Z0G|0<~XOB3^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 1864);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = (-1785);
      Utility.classOrInterface((-1785));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("class", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1785), (-1785), false);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)101, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "0w\"GZfSL]9<2zR";
      try { 
        Utility.typeOfSignature("0w\"GZfSL]9<2zR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0w\"GZfSL]9<2zR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.clearBit(227, 227);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaReader";
      Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      String[] stringArray0 = new String[5];
      String string1 = "checkcast";
      stringArray0[0] = "checkcast";
      String string2 = ".class";
      stringArray0[1] = ".class";
      String string3 = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.bcel.classfile.Utility$JavaReader";
      stringArray0[4] = "org.apache.bcel.classfile.Utility$JavaReader";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaReader", stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2368), (int) (byte)118);
      try { 
        Utility.methodSignatureReturnType(">Fx],3x#D#%/RGC6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>Fx],3x#D#%/RGC6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-39);
      Utility.toHexString(byteArray0);
      Utility.getSignature("ed df 7f 9d 5a 10 d9");
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(13);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      constantInteger1.copy();
      ConstantDouble constantDouble0 = new ConstantDouble((byte)90);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)127, (int) (byte) (-33), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(81, 81);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_MethodType");
      Utility.signatureToString("CONSTANT_MethodType");
      Utility.convertString("CONSTANT_MethodType");
      Utility.accessToString(232);
      Utility.searchOpcode("static synchronized volatile transient");
      Utility.clearBit(89, 89);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[6];
      int int0 = 1837;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1837, (short) (-1));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.typeOfSignature("25ZQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 25ZQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.compactClassName("U0sq", false);
      Utility.getSignature("U0sq");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)7;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("N>5|[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N>5|['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, (-1881970474), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("BBFc)]($s\"`");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)53;
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)87;
      objectArray0[1] = (Object) (byte)64;
      Utility.printArray(objectArray0, true, false);
      Utility.encode(byteArray0, true);
      String string0 = "monitorenter";
      Utility.compactClassName("monitorenter");
      Utility.getSignature("o({oH*j@4Bg");
      Utility.getSignature("byte");
      try { 
        Utility.decode("(v", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.compactClassName("c;tNdaKP", "c;tNdaKP", true);
      assertEquals("", string0);
      
      String string1 = Utility.methodSignatureReturnType("Fw,S}T", false);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "PXq0lM.k};";
      // Undeclared exception!
      try { 
        Utility.signatureToString("PXq0lM.k};");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PXq0lM.k};'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)78;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.setBit(90, 90);
      Utility.accessToString((-842));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)103;
      String string0 = Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(67108954);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-2181), 34);
      Utility.isSet(10, (byte)68);
      String string1 = Utility.compactClassName("float");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.classOrInterface(84);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(422);
      String string0 = "!T/2fmdaOey<H9)";
      Utility.typeOfSignature("!T/2fmdaOey<H9)");
      String string1 = "KKio{f$ExniH";
      boolean boolean0 = false;
      int int0 = 72;
      int int1 = (-822);
      CodeException[] codeExceptionArray0 = new CodeException[5];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "&5aw+&Cm&!S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"&5aw+&Cm&!S\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.accessToString((-1));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(3057, 59);
      Utility.compactClassName("instanceof");
      Utility.compactClassName("instanceof", true);
      try { 
        Utility.methodSignatureReturnType("G]Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G]Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.fillup("C/sEb*9r?/$M", (-2750), true, 'y');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)47;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-2750));
      byteSequence0.readShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.searchOpcode("ifnull");
      Utility.compactClassName("java.lang.Void", false);
      Utility.accessToString((-1091));
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "iastore";
      objectArray0[1] = (Object) (byte)48;
      objectArray0[2] = (Object) "iastore";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{iastore, 48, iastore}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "p(X(SQ(";
      stringArray0[1] = "java.lang.Throwable";
      stringArray0[2] = "Expected class `";
      stringArray0[3] = "{iastore, 48, iastore}";
      String string1 = Utility.methodTypeToSignature("java.lang.Throwable", stringArray0);
      assertEquals("(Lp(X(SQ(;Ljava/lang/Throwable;LExpected;L{iastore,;)Ljava/lang/Throwable;", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)77;
      int int0 = 9;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1150916637), 9, true);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)64;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1351, (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1144;
      char char0 = '4';
      String string0 = Utility.fillup("Z", 1144, true, '4');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(57, 57);
      Utility.signatureToString(string0);
      try { 
        Utility.typeOfMethodSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("246\"jJb?XX>bR.(t6");
      String string0 = "java.lang.";
      Utility.compactClassName("java.lang.", true);
      try { 
        Utility.typeOfSignature("'3ctGy7QM<(gr?s.#S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '3ctGy7QM<(gr?s.#S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "D";
      Utility.searchOpcode("D");
      Utility.methodSignatureReturnType("D");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.isSet(122, 122);
      String string0 = "mm2:/xa![x";
      // Undeclared exception!
      try { 
        Utility.getSignature("mm2:/xa![x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.searchOpcode("R(+C:sOKMeZw-.w0,Y");
      // Undeclared exception!
      try { 
        Utility.signatureToString("R(+C:sOKMeZw-.w0,Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R(+C:sOKMeZw-.w0,Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart('r');
      boolean boolean0 = true;
      Utility.accessToString((-708), true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      objectArray0[2] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      objectArray0[5] = (Object) "protected static final native abstract strictfp synthetic annotation enum";
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("Xcj+h)]l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xcj+h)]l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)26;
      byte byte0 = (byte)14;
      byteArray0[5] = (byte)14;
      byte byte1 = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)38;
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "Unknown constant type ", "7f e5 80 90 1a 0e 12 50 26", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "VUHa>uVGp,1>x!9/";
      Utility.compactClassName("VUHa>uVGp,1>x!9/", false);
      Utility.typeOfSignature("VUHa>uVGp,1>x!9/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VUHa>uVGp,1>x!9.", "VUHa>uVGp,1>x!9.", "VUHa>uVGp,1>x!9/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VUHa>uVGp,1>x!9.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      Utility.fillup("$96$$$b8", 3951, false, 'r');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(3951);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ladd", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "getstatic";
      String string1 = "org.apache.bcel.classfile.Utility$1";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "org.apache.bcel.classfile.Utility$1", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[2];
      mockPrintWriter0.flush();
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedInputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.compactClassName("BP'u]", false);
      assertEquals("BP'u]", string0);
      
      int int0 = Utility.setBit(195, 195);
      assertEquals(203, int0);
      
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isSet(203, 203);
      boolean boolean1 = Utility.isJavaIdentifierPart('4');
      assertFalse(boolean1 == boolean0);
      
      Utility.getSignature("\t");
      byte byte0 = Utility.typeOfSignature("BP'u]");
      assertEquals((byte)8, byte0);
      
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte) (-89);
      byteArray1[7] = (byte) (-89);
      byteArray1[8] = (byte) (-89);
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid method signature: ");
      Utility.compactClassName("V+rJID(1I}z.", "; k^|.2~=", false);
      Utility.getSignature("jD{o u=y,;1");
      int int0 = 3598;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")%$0aD*M5QMh_fGC\"e<");
      Utility.format(3459, 3598, false, 'p');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jD{o u=y,;1", "int", "V+rJID(1I}z.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jD{o u=y,;1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D`5cl3QRQ6GoqL");
      Utility.setBit(154, 154);
      Utility.typeOfSignature("D`5cl3QRQ6GoqL");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "D`5cl3QRQ6GoqL";
      objectArray0[1] = (Object) "D`5cl3QRQ6GoqL";
      objectArray0[2] = (Object) "D`5cl3QRQ6GoqL";
      objectArray0[3] = (Object) "D`5cl3QRQ6GoqL";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "D`5cl3QRQ6GoqL";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}^nk#";
      stringArray0[1] = "}^nk#";
      stringArray0[2] = "}^nk#";
      stringArray0[3] = "}^nk#";
      stringArray0[4] = "}^nk#";
      stringArray0[5] = "}^nk#";
      stringArray0[6] = "}^nk#";
      stringArray0[7] = "}^nk#";
      Utility.methodTypeToSignature("}^nk#", stringArray0);
      Utility.compactClassName("boolean", false);
      Utility.classOrInterface(807);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-67);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)3, 22, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "\\";
      boolean boolean0 = false;
      String string1 = Utility.fillup("", 1616, false, ',');
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)25;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, (-686));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.searchOpcode("org.apache.bcel.classfile.EnclosingMethod");
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((int) (short) (-1), true);
      Utility.signatureToString("SV");
      try { 
        Utility.typeOfMethodSignature("S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "#(xG}n%=\\]9^&*zDi(";
      try { 
        Utility.typeOfSignature("#(xG}n%=]9^&*zDi(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #(xG}n%=]9^&*zDi(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.convertString("short");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "long";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, true);
      Utility.printArray((Object[]) stringArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)72;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.decode("(SSJSSS)S", false);
      try { 
        Utility.methodSignatureReturnType(">!gC)XE3Y_e)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ls,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ls,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.compactClassName("java.lang.l$t(I-LM.`Jd02}");
      try { 
        Utility.methodSignatureReturnType("$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.compactClassName(")\t", false);
      Utility.getSignature(")\t");
      String string0 = "invokespecial";
      Utility.searchOpcode("invokespecial");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")\t", ")\t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )\t
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = ">ai";
      try { 
        Utility.typeOfSignature(">ai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ai
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.convertString("monitorexit");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.compactClassName("Linstanceof;V", ">", true);
      assertEquals("Linstanceof;V", string0);
      
      boolean boolean0 = Utility.isSet(428, 428);
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("monitorexit");
      assertEquals("monitorexit", string1);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Invalid signature: ";
      objectArray0[1] = (Object) "monitorexit";
      objectArray0[2] = (Object) "Linstanceof;V";
      objectArray0[0] = (Object) "monitorexit";
      String string2 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string2);
      assertEquals("{monitorexit, monitorexit, Linstanceof;V, null}", string2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("if_icmple", false);
      int int0 = Utility.clearBit((-740), (-740));
      assertEquals((-268436196), int0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("if_icmple", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "Y~LWU`hb8i4l>0:s";
      Utility.convertString("Y~LWU`hb8i4l>0:s");
      String string1 = "goto_w";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y~LWU`hb8i4l>0:s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y~LWU`hb8i4l>0:s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("XSRy;E%P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XSRy;E%P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.replace("#g5?H&63;dpLRJ/?*]", "#g5?H&63;dpLRJ/?*]", "#g5?H&63;dpLRJ/?*]");
      assertEquals("#g5?H&63;dpLRJ/?*]", string0);
      
      String string1 = Utility.compactClassName("X|`uw-m4c.qa", ", npairs = ", false);
      assertEquals("X|`uw-m4c.qa", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("fLV6v^#-s'90ebQ", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.setBit(14, (-581));
      Utility.accessToString((-581), true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 125);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantInvokeDynamic constantInvokeDynamic0 = null;
      try {
        constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-15);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$JZ$3b$U$dd$f1", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "iaload";
      Utility.fillup("iaload", 329, true, '\\');
      Utility.format(329, 329, true, 'T');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)1;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (-787));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup(". Constant pool size is: ", 68, true, 'l');
      String[] stringArray0 = new String[3];
      stringArray0[0] = ". Constant pool size is: ";
      stringArray0[1] = ". Constant pool size is: lllllllllllllllllllllllllllllllllllllllllll";
      stringArray0[2] = ". Constant pool size is: lllllllllllllllllllllllllllllllllllllllllll";
      Utility.methodTypeToSignature("dmul", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)25;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, (-686));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = Utility.setBit(14, 197);
      assertEquals(46, int0);
      
      byte byte0 = Utility.typeOfMethodSignature("(Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.compactClassName("(Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;", "AnnotationDefault", false);
      assertEquals("(Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = (-266);
      Utility.isSet((-266), 119);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      try { 
        Utility.decode("{java.lang.Object@7e074407}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)58;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString(";D(Rs'uW)ic`TB");
      assertEquals(";D(Rs\\'uW)ic`TB", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.compactClassName("'Qr/K~.ur");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, 76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.format((-100), 97, false, 'W');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW-100");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW-100";
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW-100";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = 76;
      Utility.clearBit(76, 76);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)62;
      byte byte0 = (byte)105;
      String string0 = "G$HyKIe=S0M";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G$HyKIe=S0M");
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readChar();
      byteSequence0.reset();
      byteSequence0.skipBytes(76);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("'");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "'";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Locale.getISOLanguages();
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "'";
      objectArray0[8] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "LG0$;V", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.convertString("monitorexit");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("Linstanceof;V", ">", true);
      boolean boolean0 = Utility.isSet(428, 428);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("monitorexit");
      assertEquals("monitorexit", string0);
      
      byte byte0 = Utility.typeOfSignature("L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;V");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;V";
      objectArray0[1] = (Object) "monitorexit";
      objectArray0[2] = (Object) "Linstanceof;V";
      objectArray0[3] = (Object) "monitorexit";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;V, monitorexit, Linstanceof;V, monitorexit}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.format(50, 1652, false, 'd');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)77;
      int int0 = 9;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1150916637), 9, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore_2\n", "%c7,Q%9]t.$TUx*M-", "%c7,Q%9]t.$TUx*M-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OPpDkn5CO|\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OPpDkn5CO|\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Utility.convertString("VppnQ44q.");
      assertEquals("VppnQ44q.", string0);
      
      String string1 = Utility.methodSignatureReturnType("VppnQ44q\\.");
      assertEquals("void", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "VppnQ44q.";
      objectArray0[1] = (Object) "VppnQ44q.";
      objectArray0[2] = (Object) "VppnQ44q.";
      objectArray0[3] = (Object) "VppnQ44q.";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "void";
      objectArray0[6] = (Object) "void";
      objectArray0[7] = (Object) "VppnQ44q\\.";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("VppnQ44q., VppnQ44q., VppnQ44q., VppnQ44q., void, void, void, VppnQ44q\\.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "fi6r}|$\\9wqmthrh";
      boolean boolean0 = true;
      Utility.fillup("fi6r}|$9wqmthrh", 13, true, 'E');
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("fi6r}|$9wqmthrh", (String[]) null);
      Utility.isSet(13, 13);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 117, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(2640);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3751, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.accessToString((-1));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("?>...", false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u!`$L");
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "55n";
      try { 
        Utility.typeOfSignature("55n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 55n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-34);
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      MockFile mockFile0 = new MockFile("Invalid type: ", "Invalid type: ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ";\"7-~TV$A!D52&>L#j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \";\"7-~TV$A!D52&>L#j\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Lclass;V";
      stringArray0[1] = "Lclass;V";
      stringArray0[2] = "Lclass;V";
      stringArray0[3] = "instanceof";
      stringArray0[4] = "Lclass;V";
      stringArray0[5] = "Lclass;V";
      Utility.methodTypeToSignature("Lclass;V", stringArray0);
      String string0 = Utility.signatureToString("Lclass;V");
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      String string1 = Utility.methodTypeToSignature("Lclass;V", stringArray0);
      assertEquals("(LLclass;V;LLclass;V;LLclass;V;Linstanceof;LLclass;V;LLclass;V;)LLclass;V;", string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.decode("d,|", false);
      Utility.compactClassName("dup2_x2", "dup2_x2", false);
      Utility.methodTypeToSignature("d,|", (String[]) null);
      Utility.setBit(2087, (-1022));
      Utility.compactClassName(":", "+;U`qq8pV!(avvL<<W", false);
      try { 
        Utility.methodSignatureReturnType("dup2_x2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2_x2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.clearBit(199, 199);
      String string0 = "G0$";
      try { 
        Utility.methodSignatureArgumentTypes("G0$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G0$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.clearBit(65, (-2378));
      Utility.methodTypeToSignature("`+I@|", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)101;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)29);
      constantArray0[0] = (Constant) constantClass0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)101, (-534), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "arraylength";
      try { 
        Utility.typeOfMethodSignature("arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.format(91, 91, true, 'A');
      assertEquals("91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      int int0 = Utility.clearBit((-1440530666), 238);
      assertEquals((-1440530666), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.bcel.classfile.InnerClasses";
      stringArray0[1] = "91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
      stringArray0[2] = "91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
      stringArray0[3] = "org.apache.bcel.classfile.InnerClasses";
      stringArray0[4] = "org.apache.bcel.classfile.InnerClasses";
      stringArray0[5] = "org.apache.bcel.classfile.InnerClasses";
      stringArray0[6] = "org.apache.bcel.classfile.InnerClasses";
      stringArray0[7] = "91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
      String string1 = Utility.methodTypeToSignature("org.apache.bcel.classfile.InnerClasses", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/InnerClasses;L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;Lorg/apache/bcel/classfile/InnerClasses;Lorg/apache/bcel/classfile/InnerClasses;Lorg/apache/bcel/classfile/InnerClasses;Lorg/apache/bcel/classfile/InnerClasses;L91AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;)Lorg/apache/bcel/classfile/InnerClasses;", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "ixor";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("ixor", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ixor'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.searchOpcode("Fi6R}|$9WqmTHrh");
      Utility.classOrInterface((-855));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "Fi6R}|$9WqmTHrh";
      stringArray0[5] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.methodTypeToSignature("(Lclass;Lclass;Lclass;Lclass;LFi6R}|$9WqmTHrh;Lclass;)Lclass;", stringArray0);
      Utility.methodTypeToSignature("R.D5}DNJcS", stringArray0);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      int int0 = 91;
      boolean boolean1 = false;
      Utility.fillup("", 91, false, 't');
      Utility.setBit(4096, 4096);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SiX?L", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SiX?L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.convertString("\":\"m]l^VY9,}");
      Utility.isJavaIdentifierPart('e');
      try { 
        Utility.methodSignatureArgumentTypes("fcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fcmpl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(1435, 1435);
      assertEquals(134219163, int0);
      
      String string1 = Utility.accessToString(3074, true);
      assertEquals("private abstract strictfp", string1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.searchOpcode("monitorenter");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"}`q]vQ08~D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"}`q]vQ08~D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = Utility.classOrInterface(81);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"class\", \"class\"", string1);
      
      String string2 = Utility.accessToString(81, false);
      assertEquals("public final volatile", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)46;
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.methodTypeToSignature("", (String[]) null);
      String string0 = "{";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "void";
      Utility.decode("void", false);
      String string1 = "53g)V.C)fDdZ,<;j";
      Utility.replace("53g)V.C)fDdZ,<;j", "void", "53g)V.C)fDdZ,<;j");
      try { 
        Utility.typeOfSignature("dF>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dF>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)12;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 92 09 0c", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.getSignature("{ZJ~~c0");
      String string0 = "\"";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "boolean", "\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dIv#`B\"");
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Utility.setBit(2048, 170);
      assertEquals(3072, int0);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format((byte) (-128), (-284), false, 'm');
      assertEquals("-128", string0);
      
      String string1 = Utility.accessToString((int) (byte)85, false);
      assertEquals("public protected final volatile", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-284), (int) (byte) (-128));
      assertEquals("0:    ior\n1:    lushr\n2:    fconst_0\n3:    iconst_3\n4:    ior\n5:    castore\n6:    dload_1\n", string2);
      
      short short1 = Utility.searchOpcode("newarray");
      assertEquals((short)188, short1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.classOrInterface((-120));
      Utility.format((-120), (-120), false, 'd');
      Utility.accessToString((-120), true);
      Utility.fillup("1_pcp4yWz*?$8VGv~", (-120), true, 'l');
      try { 
        Utility.typeOfSignature("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)60;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-57);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "fconst_1";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fconst_1", "fconst_1", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "dreturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dreturn");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "lookupswitch";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 188, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
