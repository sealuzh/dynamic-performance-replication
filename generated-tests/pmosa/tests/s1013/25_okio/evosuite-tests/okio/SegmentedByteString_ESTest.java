/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:59:58 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      buffer0.read(byteArray0, (int) (byte)0, (int) (byte)2);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 7);
      String string0 = segmentedByteString0.base64Url();
      assertEquals(7, segmentedByteString0.size());
      assertEquals("P3BLajtDXg==", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.writeHexadecimalUnsignedLong(0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.toString();
      segmentedByteString0.hashCode();
      ByteString byteString0 = segmentedByteString1.sha1();
      segmentedByteString0.hashCode();
      Charset.defaultCharset();
      segmentedByteString1.hmacSha1(byteString0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-102);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 714);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Segment segment0 = new Segment();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte) (-21);
      segmentedByteString0.rangeEquals((-230), byteArray0, (-1117), 1);
      // Undeclared exception!
      try { 
        segmentedByteString1.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.write((ByteString) segmentedByteString0);
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(1);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 1);
      segmentedByteString1.hashCode();
      segmentedByteString1.sha1();
      segmentedByteString2.hashCode();
      SegmentedByteString segmentedByteString3 = new SegmentedByteString(buffer2, 1);
      segmentedByteString3.hmacSha1(segmentedByteString1);
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString4 = new SegmentedByteString(buffer1, 0);
      int int0 = 6;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      int int0 = 0;
      pipe0.sourceClosed = true;
      Segment segment0 = new Segment();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, (int) (byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int1 = 0;
      buffer0.writeHexadecimalUnsignedLong(0);
      int int2 = 1;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.utf8();
      int int3 = 18;
      int int4 = (-66);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Segment segment0 = realBufferedSink0.buffer.head;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)49;
      segmentedByteString0.rangeEquals((-402), byteArray0, 393, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals((Object) null);
      segmentedByteString0.write(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      segmentedByteString0.write(buffer1);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      segmentedByteString0.rangeEquals((-1435), byteString0, (-1435), 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p%#]JeB");
      buffer0.writeUtf8(").LPUWCcYunw");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.rangeEquals(362, (byte[]) null, (int) (byte)34, (int) (byte)34);
      ByteString byteString0 = segmentedByteString0.substring(2);
      segmentedByteString0.sha1();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(14L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      ByteString byteString0 = ByteString.encodeUtf8("?pKj;C^");
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
      assertEquals(6, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p%#]JeB");
      buffer0.writeUtf8(").LPUWCcYunw");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.rangeEquals(2170, (ByteString) null, 1967, (-2893));
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("timeout == null");
      int int0 = 6;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      segmentedByteString0.write(buffer1);
      segmentedByteString0.rangeEquals(192, (byte[]) null, (-2584), (-5598));
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-1);
      buffer0.read(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      segmentedByteString0.write(pipedOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("newSize < 0: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.sha256();
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("?pujF;CT");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?pujF;CT");
      segmentedByteString0.write(mockFileOutputStream0);
      String string0 = segmentedByteString0.base64Url();
      assertEquals("P3B1akY7", string0);
      assertEquals(6, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)98;
      segmentedByteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        segmentedByteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p%#]JeB");
      Buffer buffer1 = buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      segmentedByteString0.write(buffer0);
      buffer1.readByteArray((long) 0);
      buffer1.readAndWriteUnsafe();
      segmentedByteString0.rangeEquals(2170, (ByteString) null, 0, (-2789));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)62;
      boolean boolean0 = segmentedByteString0.rangeEquals(0, byteArray0, (int) (byte)0, 6);
      boolean boolean1 = segmentedByteString0.rangeEquals((int) (byte) (-28), (byte[]) null, 956, (-1));
      assertEquals(13L, buffer1.size());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p#]B");
      buffer0.writeUtf8(").LPUWCcSunw");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.write(buffer0);
      buffer0.writeIntLe((byte)34);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)38;
      segmentedByteString0.rangeEquals((-2596), byteArray0, (int) (byte)31, (int) (byte)38);
      boolean boolean0 = segmentedByteString0.rangeEquals(310, byteArray0, (int) (byte)38, (-2596));
      assertEquals(18L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("?pujs;CT");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.startsWith(byteString0);
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      assertEquals((byte)115, byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      ByteString byteString0 = ByteString.encodeUtf8("yc q^+");
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.getByte(1);
      segmentedByteString0.toString();
      segmentedByteString0.md5();
      ByteString byteString1 = segmentedByteString0.substring(0);
      boolean boolean0 = segmentedByteString0.equals(byteString1);
      assertEquals(13L, buffer1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("?pKj;C^");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 6);
      boolean boolean0 = segmentedByteString0.startsWith((ByteString) segmentedByteString1);
      assertTrue(boolean0);
      
      ByteString byteString0 = ByteString.encodeUtf8("yc q^+");
      byteString0.hmacSha1(segmentedByteString0);
      segmentedByteString0.equals(byteString0);
      byte[] byteArray0 = new byte[0];
      segmentedByteString0.rangeEquals((int) (byte)31, byteArray0, (-769), 1322);
      buffer1.writeDecimalLong((byte)31);
      segmentedByteString0.rangeEquals(6, byteArray0, (-532), 6);
      byte byte0 = segmentedByteString0.getByte(2);
      assertEquals((byte)75, byte0);
      
      String string0 = segmentedByteString1.base64Url();
      assertEquals("P3BLajtD", string0);
  }
}
