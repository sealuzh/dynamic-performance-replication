/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:06:24 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0, 154, 154);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader(2831);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2831);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2831. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 5);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-891), (-891));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2239), (-2239));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2239), simpleCharStream0.getBeginLine());
      assertEquals((-2238), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 5, 5);
      simpleCharStream0.inBuf = 5;
      charArrayReader0.ready();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 4);
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertEquals(16, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals("\u0000", token1.toString());
      assertEquals(0, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("O", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("O", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'O', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = 'W';
      charArray0[4] = '[';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("W", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'W', '[', '[', 'W', '[', 'W'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 5, 5);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      simpleCharStream0.inBuf = 5;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(16, token1.kind);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '^', '^');
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream1, 4);
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals("^", token1.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 5, 5);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(5, token0.beginColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(5, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-891), 28);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals((-891), token0.endLine);
      assertEquals((-891), token0.beginLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(29, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals(30, simpleCharStream0.getBeginColumn());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(31, token1.endColumn);
      assertEquals((-891), token1.endLine);
      assertEquals((-891), token1.beginLine);
      assertEquals(1, token1.kind);
      assertEquals(30, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 2, 25);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(25, simpleCharStream0.getColumn());
      assertEquals(25, simpleCharStream0.getEndColumn());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(25, token0.beginColumn);
      assertEquals(25, token0.endColumn);
      assertEquals(2, token0.endLine);
      assertEquals(2, token0.beginLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals(26, simpleCharStream0.getBeginColumn());
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(26, token1.endColumn);
      assertEquals(2, token1.endLine);
      assertEquals(26, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(2, token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'g';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', 'g', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', 'g', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', 'g', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', 'g', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("g", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', 'g', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = 'q';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = 'W';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 15);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.endColumn);
      assertEquals(15, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals((-2926), token0.beginLine);
      assertEquals((-2926), token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals("[[", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2926), token1.endLine);
      assertEquals(18, token1.endColumn);
      assertEquals(1, token1.kind);
      assertEquals(17, token1.beginColumn);
      assertEquals((-2926), token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("[[==");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-891), (-891));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals((-891), simpleCharStream0.getBeginColumn());
      assertEquals((-888), simpleCharStream0.getEndColumn());
      assertEquals((-888), simpleCharStream0.getColumn());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals("[[==", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-891), token0.endLine);
      assertEquals((-891), token0.beginLine);
      assertEquals((-888), token0.endColumn);
      assertEquals(3, token0.kind);
      assertEquals((-891), token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-888), simpleCharStream0.getBeginColumn());
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals((-888), simpleCharStream0.getEndColumn());
      assertEquals((-888), simpleCharStream0.getColumn());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-888), token1.beginColumn);
      assertEquals((-891), token1.beginLine);
      assertEquals((-888), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-891), token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 3, (-3071));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals((-3071), simpleCharStream0.getBeginColumn());
      assertEquals((-3070), simpleCharStream0.getColumn());
      assertEquals((-3070), simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3071), token0.beginColumn);
      assertEquals((-3070), token0.endColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(3, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals((-3069), simpleCharStream0.getBeginColumn());
      assertEquals((-3069), simpleCharStream0.getColumn());
      assertEquals((-3069), simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3069), token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals((-3069), token1.endColumn);
      assertEquals(3, token1.endLine);
      assertEquals(3, token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 2084);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2084. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(1, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("^", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = 'q';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', 'q', '['}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-891), 59);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.jjround = 1598;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      jVCParserTokenManager0.curLexState = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-891), token0.beginLine);
      assertEquals(59, token0.endColumn);
      assertEquals((-891), token0.endLine);
      assertEquals(59, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(60, simpleCharStream0.getBeginColumn());
      assertEquals((-891), simpleCharStream0.getEndLine());
      assertEquals(60, simpleCharStream0.getEndColumn());
      assertEquals((-891), simpleCharStream0.getLine());
      assertEquals((-891), simpleCharStream0.getBeginLine());
      assertEquals(60, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals((-891), token1.endLine);
      assertEquals((-891), token1.beginLine);
      assertEquals(60, token1.beginColumn);
      assertEquals(60, token1.endColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = 'W';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals((-2926), token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertEquals((-2926), token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.kind);
      assertEquals((-2926), token1.beginLine);
      assertEquals((-2926), token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("W", token2.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-2926), token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(7, token2.endColumn);
      assertEquals((-2926), token2.beginLine);
      assertEquals(7, token2.beginColumn);
      assertNotNull(token2);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2223, (byte) (-111));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-111), simpleCharStream0.getEndColumn());
      assertEquals((-111), simpleCharStream0.getBeginColumn());
      assertEquals((-111), simpleCharStream0.getColumn());
      assertEquals(2223, simpleCharStream0.getEndLine());
      assertEquals(2223, simpleCharStream0.getBeginLine());
      assertEquals(2223, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-111), token0.endColumn);
      assertEquals(2223, token0.beginLine);
      assertEquals((-111), token0.beginColumn);
      assertEquals(2223, token0.endLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-110), simpleCharStream0.getColumn());
      assertEquals((-110), simpleCharStream0.getEndColumn());
      assertEquals((-110), simpleCharStream0.getBeginColumn());
      assertEquals(2223, simpleCharStream0.getEndLine());
      assertEquals(2223, simpleCharStream0.getBeginLine());
      assertEquals(2223, simpleCharStream0.getLine());
      assertEquals("\u0014", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2223, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals((-110), token1.beginColumn);
      assertEquals(2223, token1.beginLine);
      assertEquals((-110), token1.endColumn);
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-110), simpleCharStream0.getColumn());
      assertEquals((-110), simpleCharStream0.getEndColumn());
      assertEquals((-110), simpleCharStream0.getBeginColumn());
      assertEquals(2223, simpleCharStream0.getEndLine());
      assertEquals(2223, simpleCharStream0.getBeginLine());
      assertEquals(2223, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-109), simpleCharStream0.getEndColumn());
      assertEquals((-109), simpleCharStream0.getBeginColumn());
      assertEquals(2223, simpleCharStream0.getEndLine());
      assertEquals(2223, simpleCharStream0.getBeginLine());
      assertEquals((-109), simpleCharStream0.getColumn());
      assertEquals(2223, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token2.toString());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-109), token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals((-109), token2.endColumn);
      assertEquals(2223, token2.beginLine);
      assertEquals(2223, token2.endLine);
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-109), simpleCharStream0.getEndColumn());
      assertEquals((-109), simpleCharStream0.getBeginColumn());
      assertEquals(2223, simpleCharStream0.getEndLine());
      assertEquals(2223, simpleCharStream0.getBeginLine());
      assertEquals((-109), simpleCharStream0.getColumn());
      assertEquals(2223, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)20, (byte) (-61), (byte) (-61)}, byteArray0);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager2.ReInit(simpleCharStream0, (int) (byte) (-61));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -61. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '[', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-886), 59);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '[', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '[', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.jjround = 1598;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      jVCParserTokenManager0.curLexState = (int) '\u0000';
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals((-886), simpleCharStream0.getBeginLine());
      assertEquals((-886), simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals((-886), simpleCharStream0.getLine());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(59, token0.beginColumn);
      assertEquals(59, token0.endColumn);
      assertEquals((-886), token0.beginLine);
      assertEquals((-886), token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '[', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(60, simpleCharStream0.getEndColumn());
      assertEquals((-886), simpleCharStream0.getBeginLine());
      assertEquals(60, simpleCharStream0.getColumn());
      assertEquals(60, simpleCharStream0.getBeginColumn());
      assertEquals((-886), simpleCharStream0.getEndLine());
      assertEquals((-886), simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-886), token1.endLine);
      assertEquals(60, token1.endColumn);
      assertEquals((-886), token1.beginLine);
      assertEquals(60, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '\u0000', '[', '[', '\u0000'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(Integer.MAX_VALUE);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2147483647. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.curLexState = 0;
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 7, 1, 8);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)58, (byte)13, (byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)58, (byte)13, (byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(bufferedInputStream0, (byte)13, 0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(simpleCharStream2);
      assertArrayEquals(new byte[] {(byte)13, (byte)58, (byte)13, (byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)13, (byte)58, (byte)13, (byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(13, simpleCharStream2.getEndLine());
      assertEquals(0, simpleCharStream2.getColumn());
      assertEquals(13, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getEndColumn());
      assertEquals(13, simpleCharStream2.getLine());
      assertEquals("\r", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(13, token1.beginLine);
      assertEquals(13, token1.endLine);
      assertEquals(6, token1.kind);
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)13, (byte)58, (byte)13, (byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'Z';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("[", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 7, 16, 8);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'[', 'Z', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)75, (byte)13, (byte)58, (byte)109}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)75, (byte)13, (byte)58, (byte)109}, byteArray0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(bufferedInputStream0, (-1247), 1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(simpleCharStream2);
      assertArrayEquals(new byte[] {(byte)13, (byte)75, (byte)13, (byte)58, (byte)109}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)13, (byte)75, (byte)13, (byte)58, (byte)109}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1247), simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals((-1247), simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals((-1247), simpleCharStream2.getEndLine());
      assertEquals("\r", token1.toString());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream2.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(6, token1.kind);
      assertEquals((-1247), token1.endLine);
      assertEquals((-1247), token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)13, (byte)75, (byte)13, (byte)58, (byte)109}, byteArray0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '\\';
      charArray0[2] = 'W';
      charArray0[3] = '[';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'L', '\\', 'W', '[', 'W', 'W'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 3, 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'L', '\\', 'W', '[', 'W', 'W'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'L', '\\', 'W', '[', 'W', 'W'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("L", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'L', '\\', 'W', '[', 'W', 'W'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(3, token1.endLine);
      assertEquals(3, token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'L', '\\', 'W', '[', 'W', 'W'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-881));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -881. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'I', 'I', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("b]L6W,*PV.\"2xQ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("b", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("]", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = 'W';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.kind);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'W', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[[", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = '+';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2926), token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals((-2926), token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("[[+", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(4, token1.kind);
      assertEquals((-2926), token1.beginLine);
      assertEquals((-2926), token1.endLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("[", token2.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals((-2926), token2.beginLine);
      assertEquals(8, token2.endColumn);
      assertEquals((-2926), token2.endLine);
      assertEquals(8, token2.beginColumn);
      assertNotNull(token2);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.kind);
      assertEquals((-2926), token3.endLine);
      assertEquals(8, token3.beginColumn);
      assertEquals(8, token3.endColumn);
      assertEquals((-2926), token3.beginLine);
      assertNotNull(token3);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '+', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = charArrayReader0.read();
      assertNotSame(charArray1, charArray0);
      assertEquals(91, int0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '\u0000', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      char[] charArray1 = new char[19];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = 'g';
      charArray1[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long long0 = charArrayReader0.skip(3);
      assertNotSame(charArray1, charArray0);
      assertEquals(3L, long0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("[", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals((-2926), token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals((-2926), token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals("g", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals((-2926), token1.beginLine);
      assertEquals((-2926), token1.endLine);
      assertNotNull(token1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals("[", token2.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals((-2926), token2.beginLine);
      assertEquals(5, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertEquals((-2926), token2.endLine);
      assertNotNull(token2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      jVCParserTokenManager0.SwitchTo(5);
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals((-2926), simpleCharStream0.getLine());
      assertNotSame(charArray1, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'b';
      charArray0[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-2926), token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals((-2926), token0.beginLine);
      assertEquals(1, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-2926), token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.kind);
      assertEquals((-2926), token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      assertFalse(token1.equals((Object)token0));
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals("b", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(7, token2.beginColumn);
      assertEquals(7, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals((-2926), token2.beginLine);
      assertEquals((-2926), token2.endLine);
      assertNotNull(token2);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'b';
      charArray0[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2926), 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(3, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.kind);
      assertEquals((-2926), token0.beginLine);
      assertEquals((-2926), token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2926), simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals((-2926), simpleCharStream0.getEndLine());
      assertEquals((-2926), simpleCharStream0.getBeginLine());
      assertEquals("[[", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-2926), token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.kind);
      assertEquals((-2926), token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', '[', '[', '[', 'b', '['}, charArray0);
      assertFalse(token1.equals((Object)token0));
  }
}
