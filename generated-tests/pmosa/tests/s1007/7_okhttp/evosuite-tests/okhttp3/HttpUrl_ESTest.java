/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 09:28:30 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("");
      List<String> list0 = httpUrl_Builder1.encodedPathSegments;
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string1 = "+b3*";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("+b3*", "+b3*");
      int int0 = 65280;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(65280, "+b3*");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65280, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("y");
      List<String> list0 = httpUrl_Builder1.encodedPathSegments;
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("Z+O,8^IyQ*!2C]x=d8");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      int int0 = HttpUrl.decodeHexDigit('Y');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('Y');
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("username == null");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "\n";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(47, "\n");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1848202323), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("+");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("\n", (String) null);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('Z');
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("a");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("");
      int int0 = (-1333);
      httpUrl_Builder2.password("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-1333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("\n", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("http:");
      httpUrl_Builder0.setEncodedPathSegment(0, "");
      int int0 = HttpUrl.decodeHexDigit(':');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("timeout < 0: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("LGfz;i%~)A8Qp~H)l");
      String string0 = "http:";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("LGfz;i%~)A8Qp~H)l", "http:");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port((-2320));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -2320
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-3427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3427
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("%");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".9QM[L-ml8c";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(".9QM[L-ml8c", ".9QM[L-ml8c");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters(".9QM[L-ml8c");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.decodeHexDigit('D');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Expected leading [0-9a-fA-F] character but was %#x
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("?H$t`P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ?H$t`P
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("*(4N");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("FWLb9%CGoq");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("size < 8: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("a");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(1694, "size < 8: ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1694, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("/vM{f");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "";
      HttpUrl.queryStringToNamesAndValues("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("KGb");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "unexpected host: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("unexpected host: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "N#Q?fHKz@qeAV:}WT";
      httpUrl_Builder0.addQueryParameter("N#Q?fHKz@qeAV:}WT", "8GGjVjFe*");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(45);
      int int0 = HttpUrl.decodeHexDigit('/');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 56319;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(56319);
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("", "");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = " for ";
      try { 
        HttpUrl.getChecked(" for ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for  for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("D");
      String string0 = "b4Eh}&";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("b4Eh}&");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("fromIndex < 0", (String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("b4Eh}&");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      String string0 = "j2o`gw[+Ra~`;I.v.";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("j2o`gw[+Ra~`;I.v.");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      httpUrl_Builder3.setEncodedQueryParameter("j2o`gw[+Ra~`;I.v.", "");
      httpUrl_Builder1.addEncodedPathSegments("");
      httpUrl_Builder1.addPathSegments("j2o`gw[+Ra~`;I.v.");
      String string2 = "encodedPath == null";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("encodedPath == null", "N.M,8aP`'vuw6>6B%", 810, "B0cRD-~d", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("J2_xV?S%r<,&9zT");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("J2_xV?S%r<,&9zT", "0000ffff");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("hex == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("J2_xV?S%r<,&9zT");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("0000ffff");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedQueryParameter("0000ffff", ">#ic@CLR2xuRs");
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("%2e", "lVr(dBx_2r\"NnL[ac6", true, true, true, true);
      assertEquals("%%32e", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(",z9hfi6%3fs4$zrbz", "+-1_Ay]X9M #", true, true, true, true);
      assertEquals(",z%39hfi6%3fs4$zrbz", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('_');
      assertEquals((-1), int0);
      
      boolean boolean0 = HttpUrl.percentEncoded(" \"#<>^`{|}", (-1073741822), (-1073741822));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("4RC~", 2, 108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder0.reencodeForUri();
      try { 
        HttpUrl.getChecked("6._oc%3fpz:usfz");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 6._oc%3fpz:usfz
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockURL.URL("https", "https", 5, "/^`%#|(^w");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(5, "/^`%#|(^w");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.decodeHexDigit('D');
      try { 
        HttpUrl.getChecked("qZ*L;%20).P%22zXxO");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for qZ*L;%20).P%22zXxO
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "");
      HttpUrl.decodeHexDigit('Y');
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("w{");
      String string0 = " \"<>^`{}|/\\?#";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", " \"<>^`{}|/?#");
      httpUrl_Builder2.addEncodedQueryParameter("-UK<B", " \"<>^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("https");
      httpUrl_Builder0.setQueryParameter(" \"<>^`{}|/?#", "w{");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPath("https");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: https
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.parse("SHA-256");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("-yJh7@");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("-yJh7@");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("SHA-256");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setPathSegment(0, "SHA-256");
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment((-1125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "w{";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("w{");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", " \"<>^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("https");
      httpUrl_Builder4.fragment("https");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", (String) null, 5, "2dom");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      assertEquals(443, httpUrl0.port());
      assertEquals("https://2dom/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("9%3cl'");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.defaultPort("u_!OhDoflTV}vGzp");
      int int1 = HttpUrl.decodeHexDigit('{');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockURL.getHttpExample();
      try { 
        HttpUrl.getChecked("http::");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(65);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        HttpUrl.getChecked("i:[4%y<02hg/$b'>G0k");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for i:[4%y<02hg/$b'>G0k
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("w{");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", " \"<>^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("https");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("https");
      httpUrl_Builder5.removeAllQueryParameters("9n+");
      httpUrl_Builder5.addEncodedPathSegments(" \"<>^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.setPathSegment(0, "-yJh7@");
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.parse("SHA-256");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("SHA-256");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("SHA-256");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string0 = "/";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("/");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("/", "SHA-256");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.removePathSegment((-198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(2891);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("");
      httpUrl_Builder1.removeAllEncodedQueryParameters("");
      httpUrl_Builder3.password("");
      String string0 = "m]qinz(l%7fq@%3ce";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("m]qinz(l%7fq@%3ce");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: m]qinz(l%7fq@%3ce
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      String string0 = "5n'ni=d";
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("5n'ni=d");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("Xk_?{o6iv=@");
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("FWLb9%CGoq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: FWLb9%CGoq
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('W');
      HttpUrl.parse("gjt+ ");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("gjt+ ");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(127);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("k");
      httpUrl_Builder1.removeAllEncodedQueryParameters("source is closed");
      httpUrl_Builder0.password("k");
      httpUrl_Builder2.host("Y2H0u>!");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.decodeHexDigit('Y');
      assertEquals((-1), int0);
      
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.isHttps();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('Y');
      HttpUrl.defaultPort("!");
      String string0 = "okhttp3.HttpUrl$1";
      StringBuilder stringBuilder0 = new StringBuilder("okhttp3.HttpUrl$1");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-2260));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2260
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.parse("SHA-256");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("-yJh7@");
      HttpUrl.decodeHexDigit('$');
      httpUrl_Builder1.addEncodedPathSegments("s == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("+ws");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('Y');
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("&8n:,-}f%\u000Er");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("&8n:,-}f%\u000Er");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("=1~{7tst3>\"CAm_{}$b", "..");
      httpUrl_Builder3.removeAllEncodedQueryParameters("s%20==%20null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password(" #a/19LI<");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername(" #a/19LI<");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.removePathSegment(1026);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1026, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedPath();
      httpUrl0.encodedPathSegments();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl0.encodedPassword();
      httpUrl0.queryParameterNames();
      httpUrl_Builder0.parse(httpUrl0, "");
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      
      String string1 = HttpUrl.percentDecode("v&9p6t!=j }|P\"mD4", true);
      assertEquals("v&9p6t!=j }|P\"mD4", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 55296, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      
      httpUrl0.queryParameterValues("");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:55296/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.parse("http:2");
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://2/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedFragment();
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals("https://https:7/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder("");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:7/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ",N<SO`u_0/*";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(",N<SO`u_0/*", ",N<SO`u_0/*");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query(",N<SO`u_0/*");
      httpUrl_Builder3.setQueryParameter("http:", (String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("http:", "/}'k+{q9^");
      httpUrl_Builder1.encodedFragment("/}'k+{q9^");
      httpUrl_Builder3.encodedFragment("BknGuk/UfSn%$Z");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-2230), "http:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.decodeHexDigit('.');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "U\"aoq)+Ww>3BmJA'\\";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("U\"aoq)+Ww>3BmJA'");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("U\"aoq)+Ww>3BmJA'");
      httpUrl_Builder3.removeAllEncodedQueryParameters("UTF-32BE");
      String string1 = "\"DTH!Qe].m[zdD+#g";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl0.encodedPassword();
      httpUrl_Builder1.addEncodedPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(1431, "endIndex < beginIndex");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1431, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      HttpUrl.decodeHexDigit(':');
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "maxBufferSize < 1: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("maxBufferSize < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: maxBufferSize < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("h:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: h:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/htt");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(".*KG,$}3lDR");
      httpUrl_Builder0.encodedFragment = "~T}z_1{45YjHjtct=UTo";
      String string0 = "+:%K!A7dLP'_aT";
      httpUrl_Builder0.removeAllQueryParameters(".*KG,$}3lDR");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath(".*KG,$}3lDR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .*KG,$}3lDR
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("pathSegments == null");
      httpUrl_Builder0.addEncodedPathSegments("");
      httpUrl_Builder0.addEncodedPathSegment("SZd768S)yZ>P>Je=wK");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("G");
      httpUrl_Builder1.encodedUsername("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("+y,%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: +y,%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 55347, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("$}J");
      assertEquals("https://https:55347/", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "FnBC#2Ce99`&}", 7, "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://fnbc/#2Ce99`&}:7http", httpUrl0.toString());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("b::");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "", "q?pxS-3a");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https://q/?pxS-3a", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertEquals(1, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 55347, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("b:");
      assertNull(httpUrl_Builder0);
      assertEquals("https://https:55347/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.decodeHexDigit('Y');
      httpUrl0.username();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".%2e");
      HttpUrl.decodeHexDigit('E');
      HttpUrl.defaultPort("Siys-p");
      httpUrl_Builder0.password(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(14, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https";
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("https");
      httpUrl_Builder1.addEncodedQueryParameter("https", "encodedPath%20==%20null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('m');
      httpUrl0.url();
      String string0 = ".%252e";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-672), ".%252e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.decodeHexDigit('Y');
      httpUrl0.username();
      HttpUrl.decodeHexDigit('%');
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("FHbQnA)djVd#g{/(]>K");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.querySize();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("::");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.decodeHexDigit('Y');
      httpUrl0.username();
      httpUrl0.encodedPathSegments();
      httpUrl0.querySize();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("http:/");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.port(58);
      httpUrl_Builder3.addEncodedPathSegments("");
      httpUrl_Builder0.password("K'k>v$~WqDA");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("r!R*%:~", "K'k>v$~WqDA");
      httpUrl_Builder2.host("vT!BR3_d");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      httpUrl_Builder5.addPathSegments("q5");
      int int0 = HttpUrl.decodeHexDigit('k');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl_Builder0.encodedPassword(".m#ID<FRb.].azp");
      HttpUrl httpUrl1 = httpUrl0.resolve(".m#ID<FRb.].azp");
      httpUrl1.encodedPassword();
      httpUrl0.queryParameterNames();
      httpUrl_Builder1.parse(httpUrl0, "C+p<|~[BR");
      httpUrl1.encodedFragment();
      int int0 = HttpUrl.decodeHexDigit('U');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Object object0 = new Object();
      httpUrl0.toString();
      HttpUrl.decodeHexDigit('{');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("'Gkz*8b(bwzi!ZIV_^J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 'Gkz*8b(bwzi!ZIV_^J
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl_Builder0.encodedPassword(".m#ID<FRb.].azp");
      httpUrl0.resolve(".m#ID<FRb.].azp");
      httpUrl0.encodedPassword();
      httpUrl0.queryParameterNames();
      httpUrl_Builder0.parse(httpUrl0, "");
      httpUrl0.encodedFragment();
      HttpUrl.decodeHexDigit('o');
      String string0 = "http:/";
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "rQ:t`5+`7B";
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "rQ:t`5+`7B", 2, 123, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("w{");
      httpUrl_Builder1.addEncodedPathSegment("https");
      httpUrl_Builder0.username("LU3=Hr&~+ntF*");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("w{");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("https", " \"<>^`{}|/?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder2.addPathSegments("https");
      HttpUrl.decodeHexDigit('X');
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("..");
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        HttpUrl.getChecked("k7m0n:IQQ[7%&M~y");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for k7m0n:IQQ[7%&M~y
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("h*FS\"k;A");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://httpshttps/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.decodeHexDigit('{');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("A,`W{})ctqW<`i");
      httpUrl_Builder0.encodedQuery("D*H{x~q@N");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("C88^ZX.o}q]aq9OmtH", "https");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("encodedPath%20==%20null");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setPathSegment(443, "^`{|}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 443, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "e:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("e:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("byteCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: byteCount > Integer.MAX_VALUE: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "eZ:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("eZ:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: eZ:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("icsW&whH[X>Gaj");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("b");
      httpUrl_Builder3.encodedPassword = "mCNo>T/{gY?_H9axf";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder();
      httpUrl0.isHttps();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(".m#ID<FRb.].azp");
      HttpUrl httpUrl1 = httpUrl0.resolve(".m#ID<FRb.].azp");
      httpUrl0.encodedPassword();
      httpUrl0.queryParameterNames();
      HttpUrl.decodeHexDigit('%');
      List<String> list0 = httpUrl1.queryParameterValues("");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("mf[^]r]`m|");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl0.encodedPassword();
      httpUrl_Builder1.addEncodedPathSegments(".2e");
      httpUrl_Builder1.encodedQuery(".2e");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample/.2e?.2e", httpUrl1.toString());
      
      HttpUrl httpUrl2 = httpUrl0.resolve("mf[^]r]`m|");
      httpUrl2.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/mf[%5E]r]%60m%7C", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.canonicalize("buffer(", "buffer(", true, false, true, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("%2e%2e", "oH,b");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("%2e%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("%2e.");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("%2e.");
      httpUrl_Builder5.username("%2e.");
      try { 
        HttpUrl.getChecked("%62%75%66%66%65%72%28");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %62%75%66%66%65%72%28
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:7/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("mf[^]r]`m|");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      httpUrl0.isHttps();
      httpUrl0.encodedPassword();
      httpUrl_Builder1.addEncodedPathSegments(".2e");
      httpUrl_Builder1.encodedQuery(".2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedPassword("timeout");
      httpUrl_Builder2.addPathSegments("timeout");
      HttpUrl.decodeHexDigit('*');
      int int0 = httpUrl0.pathSize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "sF5?$O!{>FsIDNG>Xk.";
      HttpUrl httpUrl1 = httpUrl0.resolve("sF5?$O!{>FsIDNG>Xk.");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue((-4738));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:7O8sc:.;q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:7O8sc:.;q
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.host("{u");
      HttpUrl.decodeHexDigit(':');
      httpUrl0.host();
      httpUrl0.encodedPath();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("data == null");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.percentEncoded("data == null", 11, 57);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("source%20is%2closed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: source%20is%2closed
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%~q2g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%~q2g
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.uri();
      HttpUrl.decodeHexDigit('Y');
      String string0 = "http:/";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = ",Pc?LaU,QzM";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(",Pc?LaU,QzM");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(565, "http:/");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("w{");
      URL uRL0 = MockURL.URL("https", "=+B", "https:/www.somefakebutwellformedurl.org/fooexample");
      URL uRL1 = MockURL.URL(uRL0, "w{");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      HttpUrl.decodeHexDigit('X');
      httpUrl0.password();
      httpUrl0.queryParameter((String) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameter("");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("w{");
      URL uRL0 = MockURL.URL("https", "https", "https:/www.somefakebutwellformedurl.org/fooexample");
      URL uRL1 = MockURL.URL(uRL0, "w{");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      MockURL.toString(uRL1);
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "6";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("6");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("6");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("6");
      httpUrl_Builder3.encodedUsername("6");
      httpUrl_Builder2.setQueryParameter("\r", "t}h?Gg");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-55297), "https:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder();
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl1, "_N2_<}e~Qe+eb,");
      httpUrl0.query();
      httpUrl1.pathSegments();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.fragment();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.URL("https", "scheme == null", "oohB?*BWM8Qg[fg");
      HttpUrl.get(uRL0);
      MockURL.toString(uRL0);
      HttpUrl.parse("[::");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("scheme == null");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("bC\"{Nb~QH$crZZl =");
      httpUrl_Builder0.host("gpbczu");
      String string0 = "::1\\/2:*f(b0";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::1/2:*f(b0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::1/2:*f(b0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl.get(uRL0);
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("^e*UVe+SZxMhCo:?4F");
      httpUrl0.encodedFragment();
      httpUrl1.queryParameter("^e*UVe+SZxMhCo:?4F");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "Miw4iFLK9)?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameter("https");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.port();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "]:&\"Sdr#nd\"^Y*";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1973517344), "]:&\"Sdr#nd\"^Y*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "Miw4iwFLK9N?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues("Miw4iwFLK9N?");
      try { 
        HttpUrl.getChecked("Miw4iwFLK9N?");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Miw4iwFLK9N?
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "Miw4iFLK9)?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterValues("'!]wNP/]pPM");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("Dnwz+ELwe0(");
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "Miw4iwFLK9N?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("1f)*-jFgz\"PX");
      httpUrl0.query();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 7, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals("https");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("No:`CZh");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "https";
      URL uRL0 = MockURL.URL("https", "https", "Miw4iwFLK9N?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1443));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.parse("mXW<F");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("?niN0t");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("mXW<F", "mXW<F");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "%(p{5Ltv?>");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      HttpUrl httpUrl1 = httpUrl0.resolve("%(p{5Ltv?>");
      URI uRI0 = httpUrl1.uri();
      HttpUrl httpUrl2 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl2.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("[");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("[");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("[");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegments("w~j,m^8f*'");
      httpUrl_Builder5.removePathSegment(0);
      try { 
        HttpUrl.getChecked("<g6");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for <g6
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "https:/www.somefakebutwellformedurl.org/fooexample", "http");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "byteCount > Integer.MAX_VALUE: ";
      URL uRL0 = MockURL.URL("https", "byteCount > Integer.MAX_VALUE: ", "https");
      HttpUrl.get(uRL0);
      try { 
        HttpUrl.getChecked("https");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for https
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "", 5, "/^`%#|(^w");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "Miw4iwFLK9N?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedQuery();
      httpUrl0.queryParameterNames();
      httpUrl0.resolve("%s:%20actual%200x%08x%20!=%20expected%200x%08x");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("~o5@(,", "\n");
      httpUrl_Builder0.encodedQuery("c%e+ct2F|P-PLX.+YJ}");
      httpUrl_Builder0.reencodeForUri();
      try { 
        HttpUrl.getChecked("[Invalid host: ]]");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for [Invalid host: ]]
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "Invalid host: ", "Jar([,B(P0i7'}2~x");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockURL.URL("https", "https", "Miw4iwFLK9N?");
      URL uRL0 = MockURL.URL("https", "{0:BZc){#m\"y", "No deadline");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("?");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "6.oc%3fpwz:usfz";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("6.oc%3fpwz:usfz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 6.oc%3fpwz:usfz
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("9.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 9.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "EE:b";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("EE:b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: EE:b
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve(".in6ujStre|m()");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "WEE^kbmB", 55296, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("/[");
      httpUrl0.encodedUsername();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("D&SDhX");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("D&SDhX");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("", "http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(55296);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query(" \"'<>#");
      httpUrl_Builder5.username("");
      httpUrl0.queryParameter("D&SDhX");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "341[.lEC\\u9q";
      URL uRL0 = MockURL.URL("https", "https", 7, string0);
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.URL("https", "https", 7, "vAK:@7Jv");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "Wr(2!wA@E?", "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.password();
      httpUrl0.encodedUsername();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("Wr(2!wA@E?", (-172), (-4498), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("https:mple:fooexample#%2540");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:mple:fooexample#%2540
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 0, "");
      HttpUrl.get(uRL0);
      HttpUrl.decodeHexDigit('8');
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 55347, "9");
      HttpUrl.get(uRL0);
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URL uRL0 = MockURL.URL("https:mnt/gaiagpfs/users/homedirs/apaniche@la/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/https/missing_scheme");
      URL uRL1 = MockURL.URL(uRL0, " \"':;<=>@[]^`{}|/?#");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.url();
      httpUrl0.resolve("%2e.");
      httpUrl0.queryParameterValues("9.:dt");
  }
}
