/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 18:42:43 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>Jm6;");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("D\"Z:rYE:dB[");
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm0);
      jSTerm1.capacity();
      StringReader stringReader1 = new StringReader(" 6RKL+)8o|~UA");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      jSTerm2.print();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm4.remove((Object) jSSubstitution1);
      jSTerm3.containsAll(jSTerm0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine("(<Jm");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      SystemInUtil.addInputLine("JSTerm: Error reading control parameters: ");
      StringReader stringReader0 = new StringReader("(<Jm");
      StringReader stringReader1 = new StringReader("JSTerm: Error reading control parameters: ");
      JSJshopVars.equalT = (-3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SystemInUtil.addInputLine("|4T08 8l16");
      SystemInUtil.addInputLine("(+<Jm");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      SystemInUtil.addInputLine("JSTerm: Error reading control parameters: ");
      StringReader stringReader0 = new StringReader("(+<Jm");
      StringReader stringReader1 = new StringReader("JSTerm: Error reading control parameters: ");
      jSTerm1.isEval();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      jSSubstitution0.standarizerSubs();
      JSTerm jSTerm3 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-475));
      streamTokenizer1.resetSyntax();
      jSTerm3.matches(jSTerm0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(,Jm}U;");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader(".");
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader2 = new StringReader("7.0");
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      streamTokenizer1.resetSyntax();
      jSTerm5.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K0U 2:C|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      jSTerm1.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.equals(jSTerm0);
      jSTerm2.toStr();
      JSSubstitution jSSubstitution0 = jSTerm4.matches(jSTerm1);
      jSTerm1.isGround();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      jSTerm3.isVariable();
      jSTerm3.makeEval(false);
      jSTerm4.applySubstitutionT(jSSubstitution0);
      jSTerm5.toStr();
      jSTerm0.toStr();
      jSTerm1.call();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>Jm6;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>Jm6;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("d*Ih>%u<V");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<Jmb;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*Jm3;");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<Jmb;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c|`+)");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("*_eT7ykJ");
      SystemInUtil.addInputLine("*_eT7ykJ");
      SystemInUtil.addInputLine("h");
      StringReader stringReader1 = new StringReader("@xB1W3Q,MMu@r");
      SystemInUtil.addInputLine("f");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      stringReader1.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.size();
      jSTerm0.isVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      jSTerm3.print();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(true);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      streamTokenizer0.wordChars(130, 130);
      JSJshopVars.lessT = 32;
      jSTerm1.matches((JSPredicateForm) jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm7 = new JSTerm();
      assertFalse(jSTerm7.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.toStr();
      jSTerm4.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      JSJshopVars.lessT = 32;
      jSTerm5.equals(jSTerm4);
      JSTerm jSTerm6 = jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm8 = jSTerm4.call();
      System.setCurrentTimeMillis((-848L));
      JSTerm jSTerm9 = jSTerm8.applySubstitutionT(jSSubstitution1);
      jSTerm9.matches(jSTerm8);
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm8.equals((Object)jSTerm6));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      streamTokenizer1.eolIsSignificant(false);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      jSTerm2.isGround();
      SystemInUtil.addInputLine("k");
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm3.isGround();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      jSTerm2.toStr();
      jSTerm4.isFunction();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      JSJshopVars.apostrophe = 32;
      jSTerm3.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.toStr();
      jSTerm4.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      jSTerm5.equals(jSTerm4);
      JSTerm jSTerm6 = jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm8 = jSTerm4.call();
      System.setCurrentTimeMillis((-848L));
      JSTerm jSTerm9 = jSTerm8.applySubstitutionT(jSSubstitution1);
      assertEquals("[K-0U, [-0.0]]", jSTerm0.toString());
      assertTrue(jSTerm9.equals((Object)jSTerm6));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      streamTokenizer1.eolIsSignificant(false);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      jSTerm2.isGround();
      jSTerm2.cloneT();
      jSTerm0.cloneT();
      assertEquals("[K-0U, [-0.0]]", jSTerm0.toString());
      
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.isGround();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      streamTokenizer1.eolIsSignificant(false);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm2.cloneT();
      jSTerm3.isGround();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      assertEquals("[K-0U, [-0.0]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.toStr();
      SystemInUtil.addInputLine("djhu");
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      streamTokenizer1.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-4));
      jSSubstitution0.remove((Object) "djhu");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      jSSubstitution0.listIterator();
      streamTokenizer1.eolIsSignificant(false);
      stringReader0.ready();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      jSTerm2.isGround();
      jSTerm2.cloneT();
      jSTerm2.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("K-0U 2:'Cb");
      stringReader0.skip((-272L));
      jSTerm0.add((Object) null);
      jSSubstitution0.listIterator();
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm1.toStr();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      stringReader0.skip((-272L));
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6XsnrD<9iU6*`ZL+fi{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSTerm0.isGround();
      SystemInUtil.addInputLine("6XsnrD<9iU6*`ZL+fi{");
      SystemInUtil.addInputLine("6XsnrD<9iU6*`ZL+fi{");
      stringReader0.skip((-1));
      jSTerm2.add((Object) jSSubstitution0);
      jSSubstitution0.listIterator();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.slashSlashComments(false);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.iterator();
      streamTokenizer1.resetSyntax();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSJshopVars.plus = (-4);
      streamTokenizer1.sval = "K-0U 2:'Cb";
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm2.equals(jSTerm0);
      jSTerm0.toStr();
      jSTerm2.matches(jSTerm1);
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm1);
      jSTerm2.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = (-1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm1.equals(jSTerm2);
      jSTerm1.isGround();
      jSTerm2.equals(jSTerm1);
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      boolean boolean1 = jSTerm2.isGround();
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.equals(jSTerm1);
      jSTerm2.makeEval(false);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isVariable());
      
      jSTerm2.toStr();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      
      jSTerm0.call();
      JSSubstitution jSSubstitution1 = jSTerm3.matches((JSTerm) null, jSSubstitution0);
      jSTerm1.matches(jSTerm3);
      assertFalse(jSTerm2.isEval());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(10, jSTerm4.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SystemInUtil.addInputLine("");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = 42;
      System.setCurrentTimeMillis(42);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      stringReader0.reset();
      jSTerm0.setSize(107);
      jSSubstitution0.clear();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(kA");
      StringReader stringReader1 = new StringReader("(kA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?FI0~H{s\"r z,C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[?%%%]", jSTerm2.toString());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      jSTerm0.addAll(0, (Collection) jSTerm0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A0U~2:'[Ub");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(-");
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      streamTokenizer1.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      SystemInUtil.addInputLine((String) null);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.makeFunction();
      jSTerm1.toStr();
      jSTerm1.setSize(32);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.isConstant();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      streamTokenizer1.resetSyntax();
      jSTerm1.print();
      streamTokenizer1.sval = "K-0U 2:'Cb";
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      stringReader0.markSupported();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSEvaluate.numericValue(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.reset();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.setSize(33);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSTerm1.isFunction());
      
      streamTokenizer0.lowerCaseMode(false);
      jSTerm1.makeFunction();
      jSTerm0.isGround();
      jSTerm1.call();
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(%%% )", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 3636;
      jSTerm0.setSize(3636);
      JSJshopVars.minus = 3636;
      JSJshopVars.coma = 3636;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      StringReader stringReader0 = new StringReader("(Dq(g^nMew");
      int int0 = 0;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-0U~2:'CUb");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "-0U~2:'CUb";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-0U~2:'CUb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "-0U~2:'CUb";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 196;
      jSTerm0.addAll(0, (Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      JSJshopVars.apostrophe = (-103);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      JSJshopVars.apostrophe = (-99);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "K-0U~2:'Cb";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      jSTerm0.iterator();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U~2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "K-0U~2:'Cb";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      stringReader0.markSupported();
      stringReader0.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-1485.7751939);
      jSTerm1.parseList(streamTokenizer1);
      assertEquals(41, streamTokenizer1.ttype);
      
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.size();
      jSTerm0.toStr();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      stringReader0.markSupported();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.addAll(0, (Collection) jSPredicateForm0);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.iterator();
      streamTokenizer1.resetSyntax();
      System.setCurrentTimeMillis((-1421L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSTerm1);
      stringReader0.read();
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.removeElement("K-0U 2:'Cb");
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSJshopVars.percent = (-2);
      streamTokenizer0.whitespaceChars((-3), 1396);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm4.makeFunction();
      jSTerm3.matches(jSTerm1, (JSSubstitution) null);
      jSTerm4.isEval();
      jSTerm1.equals(jSTerm2);
      streamTokenizer0.ordinaryChars((-3), (-3));
      long long0 = 0L;
      int int0 = (-295);
      // Undeclared exception!
      try { 
        jSTerm1.remove((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.matches(jSTerm2, (JSSubstitution) null);
      jSTerm2.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.isVariable();
      jSTerm2.makeFunction();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm2);
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSJshopVars.rightBrac = 0;
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.containsAll(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.removeElementAt(418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 418 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-32);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.iterator();
      jSSubstitution1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm0.equals(jSTerm2);
      jSTerm3.isGround();
      jSTerm0.makeFunction();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm5.matches(jSTerm1);
      jSTerm0.makeConstant();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = (-1);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.removeAllElements();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm1.isGround();
      jSTerm2.makeConstant();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2);
      streamTokenizer0.ordinaryChar(37);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.capacity();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.makeConstant();
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(2);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.capacity();
      jSTerm0.toStr();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeConstant();
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm0.removeElement("K-0U 2:'Cb");
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm2.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.containsAll(jSTerm1);
      jSTerm2.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.cloneT();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'Z';
      charArray0[3] = ' ';
      charArray0[4] = '1';
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yvC+Xm$hGr&d/]0;P ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      JSEvaluate.numericValue(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.spliterator();
      streamTokenizer0.wordChars(43, 1195);
      StringReader stringReader1 = new StringReader(".w4`F!Y");
      stringReader1.read();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.iterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.call();
      stringReader0.read();
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.ensureCapacity(0);
      stringReader0.ready();
      jSTerm3.print();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm1.remove(126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 126
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.call();
      stringReader0.read();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.iterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.call();
      stringReader0.read();
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSTerm0.ensureCapacity(0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.removeAllElements();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm1.matches(jSTerm2);
      jSTerm2.makeConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yvC+Xm$hGr&d/]0;P ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      streamTokenizer0.sval = "7XNuk`Kl;E],yAzoW";
      JSEvaluate.numericValue(jSTerm0);
      stringReader0.read();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MvWH^A0JH.}()gh?p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0);
      assertTrue(jSSubstitution2.fail());
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertFalse(jSTerm3.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yvC+Xm$hGr&d/]0;P ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      JSEvaluate.numericValue(jSTerm0);
      stringReader0.read();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      assertEquals(0, jSSubstitution2.size());
      
      StringReader stringReader0 = new StringReader("");
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      stringReader0.markSupported();
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      StringReader stringReader1 = new StringReader("rU# 106a4&ZDl'");
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.remove((Object) "Hq/R]M:ky^jCn~/=X");
      jSTerm1.containsAll(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.isEval();
      jSTerm0.cloneT();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.plus = 2072;
      streamTokenizer0.ordinaryChar((-2052));
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSEvaluate.numericValue(jSTerm1);
      stringReader0.read();
      jSTerm1.toStr();
      jSTerm2.isEval();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.cloneT();
      jSTerm1.makeConstant();
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yvC+Xm$hGr&d/]0;P ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      streamTokenizer0.sval = "7XNuk`Kl;E],yAzoW";
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip((-1102L));
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      jSTerm0.toStr();
      StringReader stringReader1 = new StringReader("YcrTs,H8`M!$9N");
      // Undeclared exception!
      try { 
        stringReader1.read(charArray0, (-755), (-2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      char[] charArray0 = new char[10];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'Z';
      charArray0[3] = ' ';
      charArray0[4] = '1';
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'Z';
      charArray0[3] = ' ';
      charArray0[4] = '1';
      charArray0[5] = 'R';
      charArray0[6] = 'G';
      charArray0[7] = 'X';
      stringReader0.read(charArray0);
      JSJshopVars.interrogation = 41;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.print();
      jSTerm1.makeConstant();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      
      stringReader0.read();
      jSTerm0.removeElement("K-0U 2:'Cb");
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm0.iterator();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSTerm jSTerm5 = jSTerm2.call();
      stringReader0.read();
      jSTerm4.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm5.ensureCapacity((-3));
      jSTerm0.matches(jSTerm4, jSSubstitution0);
      jSTerm5.isFunction();
      jSTerm3.matches(jSTerm0, (JSSubstitution) null);
      jSTerm4.makeEval(false);
      assertFalse(jSTerm1.isConstant());
      
      jSTerm2.isEval();
      JSTerm jSTerm6 = jSTerm3.call();
      boolean boolean0 = jSTerm6.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yvC+Xm$hGr&d/]0;P ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      streamTokenizer0.sval = "Expecting variable name in term";
      JSEvaluate.numericValue(jSTerm0);
      stringReader0.read();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeVariable();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      streamTokenizer0.nval = (double) 0;
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VG[|[~vUwU|[l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addAll(0, (Collection) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeFunction();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("member");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.leftPar = (-1);
      jSTerm1.print();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-675), (-2252));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm0.removeElement("K-0U 2:'Cb");
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm0.iterator();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSTerm jSTerm5 = jSTerm2.call();
      stringReader0.read();
      jSTerm4.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm5.ensureCapacity((-3));
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm4.forEach((Consumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%f2eL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%f2eL]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.listIterator();
      jSSubstitution0.listIterator();
      jSTerm0.ensureCapacity((-3));
      jSSubstitution0.add((Object) "H'{");
      jSTerm0.isFunction();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-649);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.remove((Object) "Hq/R]M:ky^jCn~/=X");
      jSTerm1.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p? o`y6;2]oPQHp#z'+");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      jSTerm0.makeEval(false);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(5744, 0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isEval();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.rightBrac = 32;
      JSJshopVars.semicolon = 0;
      // Undeclared exception!
      try { 
        jSTerm2.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'S';
      charArray0[2] = 'K';
      charArray0[3] = 'I';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";&iUkS0^2;\"}KBx=Qm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q~AS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        stringReader0.mark((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}EW iB)uHH&-qMb");
      stringReader0.markSupported();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
