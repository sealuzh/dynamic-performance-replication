/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:17:13 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      MockException mockException0 = new MockException();
      AssertionError assertionError0 = new AssertionError((String) null, mockException0);
      Okio.isAndroidGetsocknameError(assertionError0);
      Proxy proxy0 = Proxy.NO_PROXY;
      mockException0.getCause();
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R/.Qb1,");
      Okio.sink((File) mockFile0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h}8B1u0i`u");
      MockFile mockFile1 = new MockFile(mockFile0, "h}8B1u0i`u");
      mockFile0.setReadable(true);
      mockFile1.setExecutable(false, false);
      mockFile1.createNewFile();
      Sink sink0 = Okio.sink((File) mockFile1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeInt(0);
      realBufferedSink0.toString();
      mockFile0.setExecutable(false, false);
      byte[] byteArray0 = new byte[0];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      Okio.buffer((Sink) bufferedSink0);
      Okio.blackhole();
      AssertionError assertionError0 = new AssertionError(0);
      Okio.isAndroidGetsocknameError(assertionError0);
      try { 
        Okio.sink((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Path) null, (OpenOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockException mockException0 = new MockException(mockThrowable0);
      mockThrowable0.getLocalizedMessage();
      AssertionError assertionError0 = new AssertionError("", mockException0);
      Okio.isAndroidGetsocknameError(assertionError0);
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockURI.URI("T");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Okio.source((InputStream) pipedInputStream0);
      AssertionError assertionError0 = new AssertionError();
      Okio.isAndroidGetsocknameError(assertionError0);
      MockFile mockFile0 = new MockFile("T");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("N9", "N9");
      Sink sink0 = Okio.appendingSink(mockFile2);
      HashingSink.sha256(sink0);
      Okio.buffer(sink0);
      Sink sink1 = Okio.blackhole();
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" (to read code point prefixed 0x");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSource bufferedSource0 = Okio.buffer((Source) buffer0);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "V";
      MockFile mockFile0 = new MockFile("V");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[5];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      MockThrowable mockThrowable0 = new MockThrowable("V");
      mockThrowable0.getLocalizedMessage();
      String string1 = "2d0GJ(6";
      AssertionError assertionError0 = new AssertionError("2d0GJ(6", mockThrowable0);
      Okio.isAndroidGetsocknameError(assertionError0);
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Okio.sink(outputStream0);
      Okio.sink(outputStream0);
      MockFile mockFile0 = new MockFile("p9%z");
      MockFile mockFile1 = new MockFile(mockFile0, "p9%z");
      mockFile1.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[5];
      String string0 = "'L#;:_K\"k:up";
      // Undeclared exception!
      try { 
        StandardOpenOption.valueOf("'L#;:_K\"k:up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.nio.file.StandardOpenOption.'L#;:_K\"k:up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sv`NWPI<");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      Buffer buffer0 = realBufferedSink0.buffer;
      Source source0 = Okio.source((File) mockFile0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sv`NWPI<");
      Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      AssertionError assertionError0 = new AssertionError(source0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8");
      mockFile0.toPath();
      Sink sink0 = Okio.blackhole();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      hashingSink0.flush();
      BufferedSink bufferedSink0 = Okio.buffer((Sink) hashingSink0);
      assertNotNull(bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(8192);
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(bufferedSink0, deflater0);
      deflaterSink0.flush();
      BufferedSink bufferedSink1 = Okio.buffer((Sink) deflaterSink0);
      assertFalse(bufferedSink1.equals((Object)realBufferedSink0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sv`cWPI<", "Sv`cWPI<");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeByte((-324));
      realBufferedSink0.close();
      Buffer buffer0 = realBufferedSink1.buffer;
      Buffer buffer1 = realBufferedSink0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "UTF-8";
          MockFile mockFile0 = new MockFile("UTF-8");
          Sink sink0 = Okio.blackhole();
          RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
          BufferedSink bufferedSink0 = realBufferedSink0.writeShort(8192);
          realBufferedSink0.writeLongLe((-2854L));
          Deflater deflater0 = new Deflater();
          DeflaterSink deflaterSink0 = new DeflaterSink(bufferedSink0, deflater0);
          deflaterSink0.flush();
          Okio.buffer((Sink) deflaterSink0);
          Path path0 = mockFile0.toPath();
          OpenOption[] openOptionArray0 = new OpenOption[1];
          StandardOpenOption standardOpenOption0 = StandardOpenOption.WRITE;
          openOptionArray0[0] = (OpenOption) standardOpenOption0;
          // Undeclared exception!
          try { 
            Okio.sink(path0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"UTF-8\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // okio.Okio.sink(Okio.java:193)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8");
      mockFile0.toPath();
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      realBufferedSink0.writeByte(8192);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/25_okio/UTF-8");
      FileSystemHandling.createFolder(evoSuiteFile0);
      realBufferedSink0.close();
      Buffer buffer0 = realBufferedSink0.buffer;
      Source source0 = Okio.source((File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-8");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) buffer0;
      objectArray0[1] = (Object) source0;
      objectArray0[2] = (Object) source0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) evoSuiteFile0;
      PrintStream printStream0 = mockPrintStream0.format("UTF-8", objectArray0);
      Sink sink1 = Okio.sink((OutputStream) printStream0);
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4ngv7LV");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Source source0 = Okio.source((InputStream) dataInputStream0);
      try { 
        realBufferedSink0.writeAll(source0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Sv`c7PI<", "Sv`c7PI<");
      Sink sink0 = Okio.sink((File) mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Source source0 = Okio.source((InputStream) dataInputStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeAll(source0);
      realBufferedSink0.writeByte((byte)94);
      Buffer buffer0 = realBufferedSink0.buffer;
      GzipSink gzipSink0 = new GzipSink(sink0);
      GzipSink gzipSink1 = new GzipSink(realBufferedSink0);
      Deflater deflater0 = gzipSink1.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(sink0, deflater0);
      deflaterSink0.finishDeflate();
      deflaterSink0.flush();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "UTF-8";
      MockFile mockFile0 = new MockFile("UTF-8");
      mockFile0.toPath();
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      realBufferedSink0.writeByte(8192);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/25_okio/UTF-8");
      FileSystemHandling.createFolder(evoSuiteFile0);
      realBufferedSink0.close();
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer buffer1 = new Buffer();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("UTF-8", "UTF-8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
