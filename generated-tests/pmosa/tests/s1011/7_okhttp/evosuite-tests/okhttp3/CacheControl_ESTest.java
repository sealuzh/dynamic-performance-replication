/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:26:17 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder0.minFresh(233, timeUnit0);
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(0, timeUnit0);
      int int0 = 34;
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(34, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(0, timeUnit0);
      TimeUnit timeUnit2 = TimeUnit.HOURS;
      cacheControl_Builder2.onlyIfCached();
      // Undeclared exception!
      try { 
        cacheControl_Builder3.minFresh((-285), timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -285
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1146), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1146
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(44, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(13, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(13, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder3.build();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      cacheControl0.noTransform();
      cacheControl0.noStore();
      cacheControl0.noTransform();
      cacheControl0.minFreshSeconds();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("%A-oi@", "%A-oi@");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      cacheControl0.maxAgeSeconds();
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=1123200, min-fresh=780, no-transform", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bytes is empty";
      stringArray0[1] = "SwCs%Kvc7|[0";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("PFt][$", "");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      cacheControl0.mustRevalidate();
      boolean boolean0 = cacheControl0.noStore();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.headerValue = "";
      hashMap0.put("", "");
      cacheControl0.maxAgeSeconds();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.toString();
      boolean boolean0 = cacheControl1.isPublic();
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.FORCE_NETWORK.toString();
      String string0 = cacheControl0.toString();
      assertEquals("no-cache", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.noTransform();
      int int0 = cacheControl0.maxAgeSeconds();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder1.minFresh(0, timeUnit0);
      cacheControl_Builder1.noStore();
      int int1 = cacheControl1.sMaxAgeSeconds();
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noTransform());
      assertTrue(int1 == int0);
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.toString();
      cacheControl0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.noCache();
      cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      cacheControl0.isPublic();
      cacheControl0.noStore();
      CacheControl cacheControl1 = cacheControl_Builder1.build();
      cacheControl1.FORCE_CACHE.toString();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      assertSame(cacheControl_Builder3, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.minFresh(0, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder5.build();
      cacheControl_Builder3.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder4.maxAge(0, timeUnit0);
      cacheControl0.isPrivate();
      CacheControl.Builder cacheControl_Builder7 = cacheControl_Builder6.maxStale(Integer.MAX_VALUE, timeUnit0);
      assertSame(cacheControl_Builder7, cacheControl_Builder5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("", "PFt][$");
      Headers.Builder headers_Builder2 = headers_Builder1.set("PFt][$", "");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.noCache();
      cacheControl0.sMaxAgeSeconds();
      cacheControl0.sMaxAgeSeconds();
      cacheControl0.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "]5z(KD6");
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "]5z(KD6");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noCache());
      
      cacheControl0.sMaxAgeSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      cacheControl0.maxStaleSeconds();
      boolean boolean0 = cacheControl2.noStore();
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("X+sYkUd|)h}5E", "]5z(KD6");
      Headers.Builder headers_Builder2 = headers_Builder1.add("cache-control", "[size=");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl2 = cacheControl_Builder1.build();
      cacheControl0.maxStaleSeconds();
      boolean boolean0 = cacheControl2.noStore();
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertTrue(boolean0);
      assertFalse(cacheControl2.isPublic());
      assertFalse(cacheControl2.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("X+sYkUd|)h}5E", "$L~',puS8{y>");
      headers_Builder1.add("cache-control", "$L~',puS8{y>");
      Headers headers0 = headers_Builder1.build();
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1882225311), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1882225311
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "\"ZE:Bg=1ilU");
      headers_Builder1.add("X+sYkUd|)h}5E", "X+sYkUd|)h}5E");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      CacheControl cacheControl2 = CacheControl.FORCE_NETWORK;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(2373, timeUnit0);
      CacheControl cacheControl3 = cacheControl_Builder1.build();
      cacheControl2.noStore();
      cacheControl3.isPublic();
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertEquals(0, cacheControl3.maxStaleSeconds());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertFalse(cacheControl3.mustRevalidate());
  }
}
