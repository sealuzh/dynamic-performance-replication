/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:05:33 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.getXPath();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.consume();
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(542);
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.LA(0);
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('L');
      xPathLexer0.plus();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Sw@)");
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.consume(0);
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar('s');
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("Sw@)");
      assertEquals("Sw@)", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("puGw{");
      xPathLexer0.star();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.setXPath(")");
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.setXPath("<I:;ib8");
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-2964));
      xPathLexer0.plus();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(895);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.isIdentifierChar('\uFFFF');
      xPathLexer0.mod();
      xPathLexer0.setXPath("ZB78oZsy]");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("B78oZsy", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("]", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.comma();
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.dots();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.comma();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token11 = xPathLexer0.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      xPathLexer0.getXPath();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{.0eqlF");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(".0eqlF", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("K", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("n", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("V4", token7.getTokenText());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      xPathLexer0.setXPath("'K yUnn/8V4;}F");
      Token token11 = xPathLexer0.rightBracket();
      assertEquals("'", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer0.whitespace();
      assertEquals("", token12.getTokenText());
      assertEquals((-2), token12.getTokenType());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      assertEquals("y", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{.0eqlF");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("{.", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IoxUAAO&~U#");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Io", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.setXPath("IoxUAAO&~U#");
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.comma();
      assertEquals("o", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("xUAAO", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.setXPath("AjL~+3b#\"MO<T");
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("A", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.setXPath("OU(21u<(sV]");
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('k');
      String string0 = xPathLexer1.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("puGw{");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.setXPath(")");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.minus();
      assertEquals("d", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("v", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('t');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("!`", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('L');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("puGw{");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.setXPath("puGw{");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.number();
      boolean boolean0 = xPathLexer0.isIdentifierChar('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dk_vv!`v");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("k_vv", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("Yh#N5'@G]{D8E");
      Token token0 = xPathLexer1.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Af", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.consume();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('r');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("2", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      String string0 = xPathLexer0.getXPath();
      assertEquals("#dl*vv!`v", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-1485));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M=!3t");
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(5, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FV1vnG '.]]'IJhH|_|");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("1", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("vn", token3.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer1.dots();
      assertEquals("A", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("f", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("puGw{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("puGw", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath(")");
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(")", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.getXPath();
      char char0 = xPathLexer0.LA(23);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      Token token0 = xPathLexer0.not();
      assertEquals("'", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("K", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("'K yUnn/8V4;}F");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("yUnn", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(";", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("^", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(100);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals("]", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FV1vnG '.]]'IJhH|_|");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(19, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("V1vnG", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.isIdentifierStartChar('t');
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals(".]", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-1485));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FV1vnG '.]]'IJhH|_|");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("gbV=[-DP[n6a..2");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("FV1vnG", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qO<B##rSF32!JOa%n");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("qO", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M=!3t");
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      int int0 = xPathLexer0.endPosition();
      assertEquals(5, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("=(v\".'!*oDF<f");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer1.equals();
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('t');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FV1vnG '.]]'IJhH|_|");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.identifier();
      assertEquals("V1vnG", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("'", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer(";^](_'%+");
      xPathLexer1.div();
      Token token0 = xPathLexer1.dots();
      assertEquals(";", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.setXPath(";^](_'%+");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(4, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("(_", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&#>ig=`#q;E::[");
      XPathLexer xPathLexer1 = new XPathLexer("&#>ig=`#q;E::[");
      xPathLexer1.relationalOperator();
      int int0 = xPathLexer1.endPosition();
      assertEquals(15, int0);
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("&#>ig=`#q;E::[", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.consume();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token1 = xPathLexer0.star();
      assertEquals("d", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("l", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("vv", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("!", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("{", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("T,2[IC$!m_|");
      xPathLexer2.div();
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals("T", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer2.operatorName();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      XPathLexer xPathLexer3 = new XPathLexer("6!ejoep<Xf|jSh|ZJA");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      xPathLexer1.consume();
      assertNotSame(xPathLexer1, xPathLexer4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FV1vnG '.]]'IJhH|_|");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.slashes();
      assertEquals("F", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("V1vnG", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(27, token4.getTokenType());
      assertEquals(".]]", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("IJ", token5.getTokenText());
      
      xPathLexer0.endPosition();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('n');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("zu6PXCS1&)xd@");
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("zu6PXCS1&)xd@");
      xPathLexer2.consume();
      assertEquals("zu6PXCS1&)xd@", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      assertEquals("#dl*vv!`v", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      assertEquals("&r.b_L22SO )!W'g", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      assertEquals("&r.b_L22SO )!W'g", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      XPathLexer xPathLexer1 = new XPathLexer("B[1q.u[|#MH0o<k,3");
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fd/pCv/xdK9");
      Token token0 = xPathLexer0.not();
      assertEquals("F", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.at();
      assertEquals("v", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("/", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("x", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.dots();
      assertEquals("d", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals("d", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.whitespace();
      assertEquals("", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("a#d~)/89{-|8*r|G");
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("a#d~)/89{-|8*r|G");
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer2.consume();
      assertNotSame(xPathLexer2, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M=!3t");
      xPathLexer0.relationalOperator();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("N>Pb_t");
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      assertNotSame(xPathLexer0, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c~o.J;7b");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("c~o.J;7b");
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0u0T4nzvVbR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("u0T4nzvVbR", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("2Af#.CdO~");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("l", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("v!", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('t');
      Token token5 = xPathLexer0.nextToken();
      assertEquals("`v", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.consume();
      assertEquals(";^](_'%+", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("W=1|h-eS?AL9l");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.equals();
      assertEquals(21, token3.getTokenType());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("os/d=+</M1*)");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QzeIKr&}j;K>J2");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".%8P?E}*_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("%8P?E}*_", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("%8", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i,&x=");
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("i,&x=", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^VnI~NCc`u<<UF1");
      xPathLexer0.setXPath("( 6Cg:T6~2AS");
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("os/d=+</M1*)");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer1.endPosition();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("2Af#.CdO~");
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals("2Af", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("#.CdO~", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("#.CdO~", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      XPathLexer xPathLexer1 = new XPathLexer("KQd-l=)I,f");
      XPathLexer xPathLexer2 = new XPathLexer("<C;}c0qz_`t2j#");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<1'>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9yxJ");
      Token token0 = xPathLexer0.number();
      assertEquals("9", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (16) (y)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("J", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      
      xPathLexer0.at();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">;tt");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";tt", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      XPathLexer xPathLexer1 = new XPathLexer("jD");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jD", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!WX~{&U8uW>O7O");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      XPathLexer xPathLexer1 = new XPathLexer("/YeD$c;f7}!\"");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(11, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9yTaaXMJ-(@GURj|l97");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("9", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("y", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^(_'%+");
      Token token0 = xPathLexer0.minus();
      assertEquals(";", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("^", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("_", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("os/d=+</M1*)");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("os", token0.getTokenText());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^(_'%+");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals(";^", token0.getTokenText());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.equals();
      assertEquals("(", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("(>0[~{svtb");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("_", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("'", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      xPathLexer0.not();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">;tt");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("tt", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'K yUnn/8V4;}F");
      XPathLexer xPathLexer1 = new XPathLexer("\\qD{!.=ue2%vQVV{");
      xPathLexer1.setXPath("E'~NqM6D");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("'", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("K", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("E", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E>$NA5_}!W");
      XPathLexer xPathLexer1 = new XPathLexer("hX#JHz)<ZaGgX;T^/m");
      xPathLexer1.and();
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("hX", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dlH*vv!`v");
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.hasMoreChars();
      xPathLexer0.consume();
      assertNotSame(xPathLexer0, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H|?/MFwM|^[Qy\"'>D");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("?/MFwM|^[Qy\"'>D", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      xPathLexer0.endPosition();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      assertEquals(") (", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".%8P?E}*_");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{");
      xPathLexer0.at();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("{");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~J");
      Token token0 = xPathLexer0.star();
      assertEquals("~", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("J", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".%8P?E}*_");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("fZ#E/");
      xPathLexer1.slashes();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer0.equals();
      assertEquals("#", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("l", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(26, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("!", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("`v", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eA(a0mp;2+}]|8x[JG");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("eA", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("IheF|gqE*{BPB");
      xPathLexer0.endPosition();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("GN;f8.$U.k kRG");
      xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("GN", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("&r.b_L22SO )!W'g");
      xPathLexer3.consume();
      xPathLexer0.and();
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(";", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.setXPath("&r.b_L22SO )!W'g");
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("&", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("r", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.and();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("L22SO )!W'g", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QOuYvX'wAciZ^,M+\"");
      xPathLexer0.setXPath("QOuYvX'wAciZ^,M+\"");
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("QOuYvX'wAciZ^,M+\"");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('^');
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".%8P?E}*_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("UGtZcB(}rRW]r9-X6");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("UGtZcB", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("f", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(17, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("l", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      XPathLexer xPathLexer1 = new XPathLexer("4D@");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      XPathLexer xPathLexer2 = new XPathLexer("a9L~VU");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer0.dots();
      assertEquals("2", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      String string0 = token1.toString();
      assertEquals("[ (11) (A)", string0);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.not();
      assertEquals("#", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("CdO", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!ejoep<Xf|jSh|ZJA");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("ejoep<Xf|jSh|ZJA", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.dollar();
      assertEquals("e", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer0.dots();
      assertEquals("2", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (11) (A)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("f", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals("#", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.number();
      assertEquals(".", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{.{JNaBdSx[UEI\bA");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("{", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(".", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      XPathLexer xPathLexer1 = new XPathLexer("37F");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("37", token0.getTokenText());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer1.number();
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      String string0 = token0.toString();
      assertEquals("[ (11) (A)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("f", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.not();
      assertEquals("#", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("CdO~", token4.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";^](_'%+");
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y ^");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Y", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(" ", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":&GcNar");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Af#.CdO~");
      Token token0 = xPathLexer0.dots();
      assertEquals("2", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("J:");
      xPathLexer0.consume(108);
      Token token2 = xPathLexer1.slashes();
      assertEquals("J", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(18, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mg](_&CnTi>'t");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("mg", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-X5:7u5ExuA2(e2o");
      Token token0 = xPathLexer0.not();
      assertEquals("-", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("7u", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("lf", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("0", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("|", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("l", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".8P?E}*_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".8", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("P", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("?E}*_", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!ejoep<Xf|jSh|ZJA");
      Token token0 = xPathLexer0.doubleColon();
      String string0 = token0.toString();
      assertEquals("[ (19) (6!)", string0);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("f", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".%8P?E}*_");
      XPathLexer xPathLexer1 = new XPathLexer(">+LD.)w(1-81\"k=~$");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer(".%8P?E}*_");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(">", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(".", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!ejoep<Xf|jSh|ZJA");
      xPathLexer0.setXPath("5qv[.kCGnJkIR?_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U@/CHe^j9+??");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.slashes();
      assertEquals(12, token1.getTokenType());
      assertEquals("@/", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (13) (U)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.not();
      assertEquals("C", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("H", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("e", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#dl*vv!`v");
      Token token0 = xPathLexer0.dollar();
      assertEquals("#", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("vv", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eA$a0m2+}]|f8x[JS");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("eA", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("a0", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a&ITmxBnj7!!1");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.getXPath();
      xPathLexer0.literal();
      xPathLexer0.colon();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("x/(l8e8zNL,G");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("x", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rsa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Rsa", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("iaw8CT,4r5t");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eA$a0m2+}]|f8x[JS");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("eA", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(26, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("a0", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sCk80AAL2,SWWL");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("sCk80AAL2", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("SWWL", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?H6+{2B");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("H", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("6", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?H6+{2B");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("H6", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("+", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I!2b7H&'jyj2H!Ud");
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1406));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lf0|l?PTEsYfkj<g#z");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.isIdentifierChar('-');
      String string0 = xPathLexer0.getXPath();
      assertEquals("lf0|l?PTEsYfkj<g#z", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".8P?E}*_");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ms.aa0Vb;nIv* X9R");
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("ms.aa0Vb", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath("@!>OO<>bK*");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D'h_(w#XDTA@YzNPPrc");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("D", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6ejop<X|jShZJA");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("6", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!ejop<X|jSh|ZJA");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("6", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6!ejop<X|jSh|ZJA");
      xPathLexer0.setXPath("w1$S%KE@EU^c;h[y=8");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("w1", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("$", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eA$a0m2+}]|f8x[JS");
      XPathLexer xPathLexer1 = new XPathLexer("-]Wq*wyfO");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = new Token(25, "", 239, 239);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mp1pma8<~^FsU<k:ro:");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("mp1pma8", token0.getTokenText());
      
      Token token1 = xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mp1pma8<~^FsU<x:ro:");
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(895);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('\uFFFF');
      assertFalse(boolean0);
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("ZB78oZsy]");
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("Z", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("B", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("o", token9.getTokenText());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('(');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("di");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(9, "mp<ma8<~^FF<x:ro:", 369, 9);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".3i7Ycs.");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".3", token0.getTokenText());
  }
}
