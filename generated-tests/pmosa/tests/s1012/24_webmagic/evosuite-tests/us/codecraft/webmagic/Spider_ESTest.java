/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:50:49 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "$VALUES";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      String string1 = ".AIm^!OgPMk<A^\\";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".AIm^!OgPMk<A^", "$VALUES");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PLL1qC4g5'$Z6b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread((ExecutorService) null, 5);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "=T";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("=T");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("=T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\"J-*VkN-~0O1&6!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      Page page1 = page0.setRawText("\"J-*VkN-~0O1&6!");
      spider0.getStatus();
      Page page2 = page1.setSkip(false);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-3227);
      Spider.Status.fromValue((-3227));
      String string0 = "l{vyixSWlX";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l{vyixSWlX");
      Spider.create(simplePageProcessor0);
      int int1 = 86;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      CountableThreadPool countableThreadPool0 = null;
      try {
        countableThreadPool0 = new CountableThreadPool((-3227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      Page page2 = page1.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider1.get("\"J-*VkN-~0O1&6!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Request[] requestArray0 = new Request[2];
      String string1 = "95eC\"<ep";
      Request request0 = new Request("95eC\"<ep");
      Request request1 = request0.setUrl("+-rlXC-@Ex:4WEV\"<");
      Request request2 = request1.setBinaryContent(true);
      Request request3 = request2.putExtra("_cycle_tried_times", (Object) null);
      Request request4 = request3.setPriority(2899L);
      String string2 = null;
      Request request5 = request4.addHeader((String) null, "_cycle_tried_times");
      requestArray0[0] = request5;
      Request request6 = request3.setUrl("_cycle_tried_times");
      requestArray0[1] = request6;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      request0.setPriority(0L);
      request1.setCharset("");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("%-qgPYKu{{goLrv");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      Request request2 = request1.setCharset("8<QT(Caf");
      Request request3 = request2.setMethod("");
      requestArray0[0] = request3;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N|;aq!rZ'", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.addPipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("M.K", "");
      spider0.downloader(phantomJSDownloader0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      assertTrue(spider3.isExitWhenComplete());
      
      spider0.run();
      spider2.getCollectorPipeline();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=SN7IV");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler(queueScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1205);
      spider1.setExecutorService(forkJoinPool0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("=SN7IV");
      Spider spider2 = spider0.addPipeline(jsonFilePipeline0);
      spider1.clearPipeline();
      spider2.setSpawnUrl(false);
      spider2.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      request1.setMethod("");
      request1.setCharset("8<QT(Caf");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&RPpm3YLmw_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.startRequest((List<Request>) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.start();
      Spider spider3 = spider2.setPipelines(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(86);
      // Undeclared exception!
      try { 
        spider3.setExecutorService(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      request0.addHeader("", "");
      Spider spider1 = spider0.startRequest((List<Request>) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2367);
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      spider2.getThreadAlive();
      spider0.runAsync();
      spider3.getScheduler();
      assertTrue(spider3.isExitWhenComplete());
      
      spider3.setExitWhenComplete(false);
      assertFalse(spider2.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Request request0 = new Request("");
      Request request1 = request0.putExtra("b_$V{vLf8", (Object) null);
      fileCacheQueueScheduler0.push(request1, spider0);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "M.K");
      spider0.downloader(phantomJSDownloader0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      assertTrue(spider2.isExitWhenComplete());
      
      spider2.run();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      String[] stringArray0 = new String[9];
      spider1.getSite();
      stringArray0[0] = "\"J-*VkN-~0O1&6!";
      stringArray0[1] = "\"J-*VkN-~0O1&6!";
      stringArray0[2] = "\"J-*VkN-~0O1&6!";
      stringArray0[3] = "\"J-*VkN-~0O1&6!";
      stringArray0[4] = "u~5l@FwE9`";
      stringArray0[5] = "\"J-*VkN-~0O1&6!";
      stringArray0[6] = "\"J-*VkN-~0O1&6!";
      stringArray0[7] = "\"J-*VkN-~0O1&6!";
      stringArray0[8] = " stop success!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setEmptySleepTime(4675);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.stop();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"J-*VkN-~0O1&6!";
      stringArray0[1] = "\"J-*VkN-~0O1&6!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "\"J-*VkN-~0O1&6!";
      stringArray0[5] = "";
      stringArray0[6] = "\"J-*VkN-~0O1&6!";
      stringArray0[7] = "\"J-*VkN-~0O1&6!";
      stringArray0[8] = "\"J-*VkN-~0O1&6!";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1645);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      spider3.scheduler((Scheduler) null);
      spider0.setScheduler((Scheduler) null);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      List<SpiderListener> list1 = spider3.getSpiderListeners();
      assertNull(list1);
      
      Spider spider4 = Spider.create(simplePageProcessor0);
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Request request0 = new Request("");
      Request request1 = request0.putExtra("b_$V{vLf8", (Object) null);
      fileCacheQueueScheduler0.push(request1, spider0);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "M.K");
      spider0.downloader(phantomJSDownloader0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.addPipeline(consolePipeline0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "b_$V{vLf8";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
