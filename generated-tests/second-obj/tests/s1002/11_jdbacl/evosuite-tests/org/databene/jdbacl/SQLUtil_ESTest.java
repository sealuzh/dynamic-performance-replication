/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:49:01 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.catalog.types.SynonymAliasInfo;
import org.apache.derby.iapi.services.cache.CacheManager;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.log.LogFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.replication.master.MasterFactory;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.data.AllocPage;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.constraint.Constraint;
import org.h2.expression.Function;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.schema.TriggerObject;
import org.h2.table.RangeTable;
import org.h2.tools.Csv;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.normalize("0)R4QR41(u*['Ite", true);
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory1 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory1.newCacheable((CacheManager) null);
      genericLanguageConnectionFactory1.getStatementCache();
      baseDataFileFactoryJ4_0.newCacheable((CacheManager) null);
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_1 = new BaseDataFileFactoryJ4();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "0) R4QR41 (u * [ 'Ite'");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "0) R4QR41 (u * [ 'Ite'");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1022), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1022
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize(")R4QR41(u*['Ite", false);
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      Boolean boolean0 = new Boolean(") R4QR41 (u * [ 'Ite'");
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("select intogk<ywc\\g-avv\"");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.databene.jdbacl.SQLUtil");
      byte[] byteArray0 = new byte[1];
      SQLUtil.normalize("select intogk<ywc\\g-avv\"", true);
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      baseDataFileFactoryJ4_0.getIdentifier();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter materialized viewexecuteminrowsize");
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDML("getInsertResultSet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop tabley51");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("<UP>");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(", ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("P(", (String[]) null, "P(", "P(", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1157), "w");
      DBDataType.getInstance(10, "~Q,F");
      SQLUtil.removeComments("M+S$,A");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBTable1.getColumnNames();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U!+fZo!NR-qwkD-", defaultDBTable1, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("U!+fZo!NR-qwkD- W(3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      SQLUtil.join((String) null, "", stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null as null on .null = null.null and .null = null.null");
      DBDataType dBDataType0 = DBDataType.getInstance((-1962), " -");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Xp0pUE6`S~bc(k}g7PY", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("9u");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      dBCatalog0.getSchemas();
      SQLUtil.ownerDotComponent(dBCatalog0);
      String string0 = "select intonclob";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dBCatalog0.removeSchema((DBSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("minr");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "minr";
      stringArray0[1] = "minr";
      stringArray0[2] = "minr";
      stringArray0[3] = "minr";
      stringArray0[4] = "minr";
      stringArray0[5] = "minr";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM minr WHERE minr = 'minr' AND minr = 'minr' AND minr = 'minr' AND minr = 'minr' AND minr = 'minr' AND minr = 'minr'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("=b*QO/#", false);
      SQLUtil.substituteMarkers("= b * QO / #", "= b * QO / #", "=b*QO/#");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      int int0 = Function.LOCK_MODE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w", defaultDBTable1, 214, "w");
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(1810);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      SQLUtil.addRequiredCondition("w", stringBuilder1);
      assertEquals("0.0 and w", stringBuilder1.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]2m2Nh";
      String string0 = SQLUtil.innerJoin("x", stringArray0, "H)G9_<Gtk&6Od+IkzE", (String) null, stringArray0);
      assertEquals("H)G9_<Gtk&6Od+IkzE as null on x.^]2m2Nh = null.^]2m2Nh", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("null");
      String string1 = RangeTable.NAME;
      boolean boolean1 = SQLUtil.isQuery("SELECT * FROM ");
      assertFalse(boolean1 == boolean0);
      
      String string2 = SQLUtil.renderValue("null");
      assertEquals("'null'", string2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ACTION";
      stringArray0[1] = "{'zBw/Z$_xEZ2JU";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "truncatetruncateconstraint primary key (, , , , , , )";
      String string0 = SQLUtil.renderColumnListWithTableName("truncatetruncateconstraint primary key (, , , , , , )", stringArray1);
      assertEquals("truncatetruncateconstraint primary key (, , , , , , ).truncatetruncateconstraint primary key (, , , , , , ), truncatetruncateconstraint primary key (, , , , , , ).null", string0);
      
      SQLUtil.removeComments("ACTION");
      String string1 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("(truncatetruncateconstraint primary key (, , , , , , ), )", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]wD";
      stringArray0[1] = "truncatetruncateconstraint primary key (, , , , , , )";
      stringArray0[2] = "]wD";
      stringArray0[3] = "]wD";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]wD", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (]wD, truncatetruncateconstraint primary key (, , , , , , ), ]wD, ]wD)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("GGBVX", true, "insert", "insert");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("M", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals("MCONSTRAINT GGBVX ", stringBuilder1.toString());
      assertEquals("MCONSTRAINT GGBVX ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.normalize("drop tablefcs", false);
      SQLUtil.innerJoin("A+W6;", stringArray0, "drop tablefcs", "FILTER_CONDITION", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<UP>", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(".", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "s$iu";
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CONSTRAINT  ", false, dBPrimaryKeyConstraint0);
      defaultDBTable0.addIndex(dBUniqueIndex0);
      String string1 = SQLUtil.join("CONSTRAINT  ", (String) null, stringArray1, "", "D5Q{jh8S+xe3", stringArray0);
      assertEquals("CONSTRAINT   join  as D5Q{jh8S+xe3 on null. = D5Q{jh8S+xe3. and null.s$iu = D5Q{jh8S+xe3.", string1);
      
      String string2 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals(".", string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w");
      int int0 = TriggerObject.DEFAULT_QUEUE_SIZE;
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'NNi=l");
      stringBuilder0.append(0.0F);
      SQLUtil.mutatesDataOrStructure("w");
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("0.0 or null", stringBuilder0.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'NNi=l";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("('NNi=l)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SQLUtil.normalize("(g@+6^8,vJO\r", false);
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      assertEquals("Activation", constantActionActivation0.getClassType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = BTree.PROPERTY_NKEYFIELDS;
      SQLUtil.normalize("g.C", false);
      SQLUtil.isProcedureCall("g.C");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execselet intoexecuteminrowsize");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("nKeyFields");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = RangeTable.NAME;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SELECT * FROM ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SYSTEM_RANGE", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      Predicate predicate0 = new Predicate();
      // Undeclared exception!
      try { 
        predicate0.getDataDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop table";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop table", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (drop table, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "table null";
      stringArray0[1] = "UNIQUE ";
      stringArray0[2] = "table null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("UNIQUE ");
      TableContainer tableContainer0 = new TableContainer("table null");
      tableContainer0.getTable("table null");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "LOB update";
      stringArray0[1] = "LOB update";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "LOB update", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.addRequiredCondition("LOB update", stringBuilder0);
      SQLUtil.normalize("LOB update", true);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBUniqueConstraint0.setName("LOB update");
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.isDDL("D6{kZ67`h*4U90bz+)&");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = constraintDescriptorList0.getConstraintDescriptorList(true);
      assertNotSame(constraintDescriptorList0, constraintDescriptorList1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("table null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("table null");
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.isProcedureCall("select int");
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|RO.+u^";
      stringArray0[2] = "|RO.+u^";
      String string0 = SQLUtil.join("|RO.+u^", "|RO.+u^", stringArray0, stringArray0[1], "|RO.+u^", stringArray0);
      assertEquals("|RO.+u^ join null as |RO.+u^ on |RO.+u^.|RO.+u^ = |RO.+u^.|RO.+u^ and |RO.+u^.null = |RO.+u^.null and |RO.+u^.|RO.+u^ = |RO.+u^.|RO.+u^", string0);
      
      boolean boolean0 = SQLUtil.isDDL("|RO.+u^");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hd4I?7+h#9");
      String[] stringArray1 = defaultDBTable0.getColumnNames();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|RO.+u^", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("6[Y", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType.getInstance((-1149), "G.rm");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "|RO.+u^");
      Integer integer0 = new Integer((-1149));
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|RO.+u^", dBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|RO.+u^ |RO.+U^(-1149,1) NULL", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT |RO.+u^ UNIQUE ()", string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[5] = null;
      stringArray0[5] = null;
      stringArray0[6] = "/I";
      stringArray0[7] = null;
      stringArray0[8] = stringArray0[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBUniqueIndex0.getTable();
      defaultDBTable1.removeIndex(dBUniqueIndex0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, ":P(V3N1;", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , /I, , )", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.renderValue((Object) null);
      SQLUtil.isProcedureCall("null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "*dt>Li<~D");
      Integer integer3 = new Integer(0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer2, integer3);
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = RawTransaction.COMMIT;
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table|ro.+u^");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = TypeId.XML_NAME;
      boolean boolean0 = SQLUtil.isProcedureCall("executealter indexisuniquewithduplicatenulls");
      String string1 = TypeId.NATIONAL_LONGVARCHAR_NAME;
      boolean boolean1 = SQLUtil.isQuery("XML");
      assertFalse(boolean1 == boolean0);
      
      String string2 = SQLUtil.renderValue("executealter indexisuniquewithduplicatenulls");
      assertEquals("'executealter indexisuniquewithduplicatenulls'", string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isProcedureCall("drop materialized view");
      SQLUtil.renderValue((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("delete");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(5, "ALTER TABLE ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLE ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execut3eminrowsize");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      SQLUtil.isDML("truncateconstraint primary key (, , , , , , )");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      String string0 = Optimizer.JOIN_ORDER_OPTIMIZATION;
      SQLUtil.isDDL("rename");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_1 = new BaseDataFileFactoryJ4();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[2] = ")R4QR41(u*['Ite";
      stringArray0[3] = ")R4QR41(u*['Ite";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")R4QR41(u*['Ite", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")R4QR41(u*['Ite";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, stringArray0[1], true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()R4QR41(u*['Ite)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      Character character0 = Character.valueOf('!');
      SQLUtil.renderValue(character0);
      SQLUtil.isProcedureCall("create materialized viewselect into");
      SQLUtil.normalize("'!'", true);
      SQLUtil.isQuery("LONG VARCHAR FOR BIT DATA");
      SQLUtil.normalize("", true);
      StringBuilder stringBuilder0 = new StringBuilder((byte)21);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Constraint.CHECK;
      String string1 = "3wI4?E/: |";
      Csv.getInstance();
      SQLUtil.mutatesDataOrStructure("select intoexecuteminrowsize");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w";
      stringArray0[1] = "w";
      stringArray0[2] = "w";
      stringArray0[3] = "w";
      stringArray0[4] = "w";
      stringArray0[5] = "w";
      stringArray0[7] = "w";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("w", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1166), "w");
      DBDataType.getInstance(10, "~Q,F");
      Integer integer0 = new Integer(10);
      Integer.min(10, (-267533599));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w", dBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("w W(10,10) NULL", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "~Q,F");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("w, w, w, w, w", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("select intogk<ywc\\g-avv\"");
      SQLUtil.typeAndName(defaultDBTable1);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("qlPS");
      TableContainer tableContainer0 = new TableContainer("qlPS");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-y");
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable2.addReferrer(defaultDBTable0);
      SQLUtil.isProcedureCall("select int");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("CbAh[qdpe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ACTION";
      stringArray0[1] = "{'zBw/Z$_xEZ2JU";
      Integer integer0 = new Integer(122);
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter materialized view");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create materialized view", "ACTION", versionNumber0);
      defaultDatabase0.getTable("create materialized view", false);
      Integer integer1 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{'zBw/Z$_xEZ2JU");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ACTION";
      String string0 = "{'zBw/Z$_xEZ2J\\U";
      stringArray0[1] = "{'zBw/Z$_xEZ2JU";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("am*p");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ACTION", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      Predicate predicate0 = new Predicate();
      // Undeclared exception!
      try { 
        predicate0.getDataDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("select into");
      Predicate predicate0 = new Predicate();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SELECT * FROM ");
      stringBuilder0.insert(0, false);
      stringBuilder0.append('u');
      int int0 = 12;
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-565), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      int int0 = TriggerObject.DEFAULT_QUEUE_SIZE;
      String string0 = " ADY|EDj";
      String string1 = "C(VJ";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("pg#}B", defaultDBTable0, 1024, "C(VJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: C(VJ
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "insert";
      SQLUtil.mutatesDataOrStructure("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = "/AlRdH@IK(>}R";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("/AlRdH@IK(>}R", "/AlRdH@IK(>}R");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // /AlRdH@IK(>}R
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[8];
      stringArray0[5] = stringArray0[2];
      stringArray0[3] = stringArray0[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[5], true, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[2]);
      SQLUtil.renderColumnListWithTableName("cs8.sKOQf=h", stringArray0);
      String string0 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      String string1 = LogFactory.LOG_DIRECTORY_NAME;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      SQLUtil.normalize("APP", false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("a2lg;ycz{", defaultDBTable0, (-1378), "\"W'Q|N>()o=Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      pipedReader0.markSupported();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      SQLUtil.mutatesDataOrStructure("alter sessiong;ycz{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "table null";
      stringArray0[1] = "UNIQUE ";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("UNIQUE ");
      TableContainer tableContainer0 = new TableContainer("Z}N46(n1H#[)h");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("table null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "table null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "table null";
      stringArray0[1] = "table null";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("table null");
      TableContainer tableContainer0 = new TableContainer("table null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("table null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "table null");
      mockFileOutputStream0.write((-837));
      mockPrintWriter0.print(0.17);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery("table null");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("table null");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[8];
      stringArray0[5] = stringArray0[2];
      stringArray0[3] = stringArray0[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[5], true, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[2]);
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[3], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
      
      String string1 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      String string2 = LogFactory.LOG_DIRECTORY_NAME;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "APP");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.print(0.0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isQuery("zX?fB*[1:]8f#fI;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("w");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qlPS";
      stringArray0[1] = "qlPS";
      stringArray0[2] = "w";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "qlPS", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qlPS", false, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBUniqueConstraint0.setName("N/1\"eC8~DKs#x0~");
      String string0 = LogFactory.LOG_DIRECTORY_NAME;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      String string1 = "(";
      SQLUtil.normalize("(", false);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1378), "UNIQUE (qlPS, qlPS, w, , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qlPS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = Dependable.TABLE_PERMISSION;
      Csv.getInstance();
      String[] stringArray0 = new String[2];
      String string1 = SQLUtil.renderColumnListWithTableName("TablePrivilege", stringArray0);
      assertEquals("TablePrivilege.null, TablePrivilege.null", string1);
      
      String string2 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      String string3 = LogFactory.LOG_DIRECTORY_NAME;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[NWszcngBU\"+!", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)106, "APP");
      dBDataType0.isNumber();
      dBDataType0.isNumber();
      String string4 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2K\"zg{", defaultDBTable0, (byte)106, "TablePrivilege");
      String string5 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("2K\"zg{ TABLEPRIVILEGE NULL", string5);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("2K\"zg{ TABLEPRIVILEGE NULL");
      DBPackage dBPackage0 = new DBPackage("*zmN}3#?A", (DBSchema) null);
      String string6 = RawStore.TEST_REENCRYPT_CRASH_AFTER_RECOVERY_UNDO_REVERTING_KEY;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String string7 = MasterFactory.REPLICATION_MODE;
      System.setCurrentTimeMillis((byte)106);
      String string8 = LogToFile.TEST_LOG_INCOMPLETE_LOG_WRITE;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("derby.__rt.replication.master.mode");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string9 = SQLUtil.normalize("QJKiG[OKK!", false);
      assertEquals("QJKiG  [ OKK ! ", string9);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.normalize("=b*QO/#", false);
      String string0 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      String string1 = LogFactory.LOG_DIRECTORY_NAME;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("log", (DBSchema) null);
      Integer integer1 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(41, "LcLK!}9f7|");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("= b * QO / #", defaultDBTable0, dBDataType0, integer2);
      DBDataType dBDataType1 = DBDataType.getInstance(41, "r;ea[Rl^A!y");
      dBDataType1.isNumber();
      defaultDBColumn0.setDefaultValue("LcLK!}9f7|");
      dBDataType0.isNumber();
      String string2 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
