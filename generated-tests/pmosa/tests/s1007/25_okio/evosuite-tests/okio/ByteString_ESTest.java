/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:03:04 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)72;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byte byte0 = (byte)23;
      byteArray0[2] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = null;
      byteString0.EMPTY.utf8 = null;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      hashingSource0.timeout();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.md5();
      byteString2.sha512();
      byteString1.EMPTY.indexOf(byteArray0, 0);
      ByteString byteString3 = byteString1.md5();
      byteString3.lastIndexOf(byteString1);
      byteString3.toAsciiUppercase();
      // Undeclared exception!
      try { 
        buffer1.readByteString(1302L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1302
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size < 4: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)0, byteArray0, (int) (byte)110, (int) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.write(realBufferedSource0.buffer);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.asByteBuffer();
      byteString0.base64();
      String string0 = "6.";
      // Undeclared exception!
      try { 
        byteString0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "GvEm";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("GvEm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("SCSrTcP!");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-80);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (int) (byte)99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "SCSrTcP!";
      ByteString byteString0 = ByteString.encodeUtf8("SCSrTcP!");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(2298L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.md5(sink0);
      ByteString byteString2 = hashingSink0.hash();
      byteString2.lastIndexOf(byteString1);
      byteString2.toAsciiUppercase();
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteString(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-83);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("D*']B+)=klivW/:Db5[");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertEquals(19, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-83);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      byteString0.startsWith(byteArray0);
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, 1355);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-3);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiLowercase();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8 = null;
      byteString0.EMPTY.utf8 = null;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      hashingSource0.timeout();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString2.sha512();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byteString2.rangeEquals((int) (byte)23, byteString3, (int) (byte)71, (-123));
      try { 
        realBufferedSource0.readByteString(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("5_>J}&f6joaF", 2587);
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.hmacSha512(byteString1);
      byteString0.EMPTY.sha1();
      boolean boolean0 = byteString0.equals(byteArray0);
      boolean boolean1 = byteString1.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("6&$&O\"01CS{=\"", 1197);
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString.encodeUtf8("size=%s offset=%s byteCount=%s");
      ByteString.decodeBase64("size=%s offset=%s byteCount=%s");
      byteString0.EMPTY.toString();
      ByteString.decodeHex("");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 14, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=14 byteCount=64
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("s == null", 2587);
      assertEquals(9, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)65;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray1);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe((byte) (-63));
      HashingSink hashingSink1 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      realBufferedSource0.inputStream();
      byteString2.equals(hashingSource0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSource0.buffer, byteString0);
      hashingSink0.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=e0b0c44298fc0c049afbf4c8996fb92427ae40e4649b904ca495990b7852b855]", string0);
      
      ByteString byteString3 = byteString1.toAsciiLowercase();
      assertFalse(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("5_>J}&f6joaF", 2587);
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.asByteBuffer();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      int int1 = byteString2.lastIndexOf(byteArray0);
      assertEquals((-1), int1);
      
      ByteString byteString3 = byteString0.EMPTY.sha1();
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString4 = byteString3.toAsciiLowercase();
      byteString4.sha512();
      assertNotSame(byteString4, byteString3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-32);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)119;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)3);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      assertEquals(2, byteString3.size());
      assertTrue(byteString3.equals((Object)byteString1));
      assertNotSame(byteString3, byteString1);
      
      ByteString byteString4 = ByteString.of(byteArray0);
      assertFalse(byteString4.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString.decodeBase64("F$\tdICIM(Y`&V'E");
      // Undeclared exception!
      try { 
        byteString0.utf8();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-114);
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      assertFalse(boolean0);
      
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-114));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-114);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-114));
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertTrue(int1 == int0);
      
      GzipSink gzipSink0 = new GzipSink(realBufferedSource0.buffer);
      HashingSink hashingSink0 = HashingSink.hmacSha1(gzipSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int2 = byteString0.compareTo(byteString1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString.encodeUtf8("size=%s offset=%s byteCount=%s");
      ByteString.decodeBase64("size=%s offset=%s byteCount=%s");
      byteString0.EMPTY.toString();
      ByteString byteString1 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[0];
      ByteString byteString2 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte) (-83);
      byteString1.startsWith(byteArray1);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("<A8&};B]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: <
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.EMPTY.hex();
      byteString0.EMPTY.md5();
      byteString0.rangeEquals((-1811), (byte[]) null, (-1811), (-1811));
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hex();
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      byteString1.EMPTY.sha512();
      // Undeclared exception!
      try { 
        byteString0.startsWith(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.base64Url();
      ByteString.decodeHex("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 28, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=28 byteCount=14
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.indexOf(byteArray0);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      byteString1.asByteBuffer();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)0;
      int int0 = byteString0.indexOf(byteArray1);
      assertEquals((-1), int0);
      
      byteString1.sha512();
      int int1 = byteString0.indexOf(byteString1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteString.read(dataInputStream0, 5);
      assertEquals(4, byteArrayInputStream0.available());
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 2745);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-70);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      byteString0.equals(buffer0);
      byteString0.toString();
      try { 
        ByteString.read(inputStream0, (byte)117);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, 14);
      assertEquals((-1), int0);
      
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int1);
      
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink0.writeDecimalLong(1390L);
      GzipSink gzipSink0 = new GzipSink(bufferedSink1);
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink1, byteString1);
      ByteString byteString2 = hashingSink0.hash();
      int int2 = byteString2.compareTo(byteString0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)23;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)41;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.indexOf((ByteString) null, (-299));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.utf8();
      assertEquals("size=%s offset=%s byteCount=%s", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString0.substring(6);
      assertEquals(3, byteString2.size());
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("s == null", 2587);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)102;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toByteArray();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("8;");
      ByteString.decodeBase64("");
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("hB)J4otEDgOS-5or]fP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: hB)J4otEDgOS-5or]fP
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = ByteString.encodeUtf8("size=%s offset=%s byteCount=%s");
      ByteString byteString2 = ByteString.decodeBase64("size=%s offset=%s byteCount=%s");
      assertNull(byteString2);
      
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      ByteString.decodeHex("");
      ByteString.codePointIndexToCharIndex("", 64);
      ByteString byteString3 = new ByteString((byte[]) null);
      String string1 = byteString1.toString();
      assertEquals("[text=size=%s offset=%s byteCount=%s]", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      byteString0.hashCode();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString.encodeUtf8("endIndex < beginIndex");
      MockPrintStream mockPrintStream0 = new MockPrintStream("SHA-256");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteString0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "SHA-256", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      byteString0.write(mockPrintStream1);
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte) (-57);
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)9);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8(" hex=");
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.endsWith(byteString1);
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)102;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Pipe pipe0 = new Pipe(278L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)48;
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("-S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: -
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("000000000000000000000000000000", string0);
      
      ByteString byteString1 = byteString0.substring(6);
      byteString1.toByteArray();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(9, byteString1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)119;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-107);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.substring((int) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
