/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:49:45 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(289, (-1985.4281100217));
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      CRSMatrix.block(cRSMatrix0, matrix0, matrix0, cRSMatrix0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1485, 1485, 1485);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      CRSMatrix cRSMatrix2 = new CRSMatrix(7, 10);
      int int0 = cRSMatrix2.rank();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix.from2DArray(doubleArray1);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(1, 7);
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.getColumn(1821);
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(8, 8, 0.1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1485, 1485);
      MockRandom mockRandom0 = new MockRandom(1485);
      // Undeclared exception!
      try { 
        CRSMatrix.random(4311, 1485, (double) 1485, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4328, 4328, 737);
      Object object0 = new Object();
      cRSMatrix0.equals((Object) doubleArray0);
      cRSMatrix0.minInRow(737);
      CRSMatrix.from1DArray(737, 737, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4328, 4328, 4328);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix.from1DArray(4328, 4328, doubleArray0);
      cRSMatrix0.foldRow(int0, vectorAccumulator0);
      int int1 = cRSMatrix0.rank();
      Object object0 = new Object();
      cRSMatrix0.maxInRow(int0);
      Integer integer0 = new Integer(int0);
      CRSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = new CRSMatrix(8, 8);
          cRSMatrix0.rank();
          // Undeclared exception!
          try { 
            cRSMatrix0.iteratorOfRow((-660));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // -660
             //
             verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(13, 3, (-966.473231672236), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2652, 8, 1);
      cRSMatrix0.setAll(233.211241661);
      int int0 = (-425);
      cRSMatrix0.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.sum();
      cRSMatrix0.nonZeroRowMajorIterator();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      cRSMatrix0.setAll(8);
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1608L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(1945, 13);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1608L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1608L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(5);
      cRSMatrix0.trace();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(5, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom(1399L);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      Integer integer0 = new Integer(0);
      cRSMatrix1.nonZeroIteratorOfRow(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (-26);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.toDenseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      DenseVector.fromArray(doubleArray0);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom((-26));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2141), 2613, 0.6, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      Object object0 = new Object();
      Integer integer0 = new Integer(4863);
      double[] doubleArray0 = new double[0];
      CRSMatrix.from1DArray(480, 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 13;
      int int1 = 4;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 13);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      MockRandom mockRandom0 = new MockRandom((-1L));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)34, 0.3, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4328, 2, 4328);
      cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = new CRSMatrix(1537, 48);
      cRSMatrix1.rank();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-240.256359291797);
      doubleArray0[6] = (double) 1;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      MockRandom mockRandom0 = new MockRandom((-1L));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)34, 0.3, (Random) mockRandom0);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.removeLastRow();
      cRSMatrix0.copyOfShape(1, 1);
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.min();
      CRSMatrix.identity(1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) (-26);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      cRSMatrix0.toDenseMatrix();
      DenseVector.fromArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      MockRandom mockRandom0 = new MockRandom((-1L));
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)34, 0.3, (Random) mockRandom0);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1607L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      cRSMatrix0.iterator();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(13);
      cRSMatrix1.getColumn(18);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(173, 173, 173);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      Object object0 = new Object();
      int int0 = 4863;
      Integer integer0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.transpose();
      cRSMatrix0.nonZeroRowMajorIterator();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      cRSMatrix0.setAll(0.0);
      MockRandom mockRandom0 = new MockRandom(8);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(215, 215);
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1923, 1073741824, 0.0, (Random) mockRandom0);
      cRSMatrix0.min();
      cRSMatrix0.removeFirstColumn();
      String string0 = "x";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV(string0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.each(matrixProcedure0);
      int int0 = 32;
      cRSMatrix1.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(651, (-3324.45790519416));
      CRSMatrix cRSMatrix1 = new CRSMatrix(651, 651, 651);
      cRSMatrix0.maxInRow(32);
      Integer integer0 = new Integer(32);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1399L);
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("L^CTZeY2k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1485, 1485);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      MockRandom mockRandom0 = new MockRandom(1485);
      CRSMatrix cRSMatrix2 = CRSMatrix.random(4311, 1, (double) 1, (Random) mockRandom0);
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix2, cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      int[] intArray0 = new int[9];
      intArray0[0] = 4328;
      intArray0[1] = 4328;
      intArray0[2] = 1;
      intArray0[3] = 28;
      intArray0[4] = 28;
      intArray0[5] = 4328;
      intArray0[6] = 737;
      intArray0[7] = 1;
      intArray0[8] = 737;
      int[] intArray1 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(28, 4328, 1, doubleArray0, intArray0, intArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(590.7, (double)1, 2119.529258, 928.100058708733, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      Integer integer0 = new Integer(13);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, 6);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 8);
      cRSMatrix0.rank();
      Matrix matrix0 = cRSMatrix0.copyOfShape(30, 30);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-5176.78096), 558.908, 221.0, 558.908, (double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(590.7, (double)1, 2119.529258, 928.100058708733, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      Integer integer0 = new Integer(13);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.multiplyByItsTranspose();
      DenseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13, 13);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(2, vectorAccumulator0);
      int int0 = NumberFormat.INTEGER_FIELD;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      cRSMatrix0.copyOfShape(1, 7);
      CRSMatrix.fromBinary(byteArray0);
      CRSMatrix.identity(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(737, 737, 4328);
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.toBinary();
      cRSMatrix1.copyOfShape(3023, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1608L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MockRandom mockRandom0 = new MockRandom((-137L));
      CRSMatrix cRSMatrix0 = CRSMatrix.random(13, 275, 0.0, (Random) mockRandom0);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, (-3324.45790519416));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[2] = 13;
      intArray0[3] = 651;
      intArray0[4] = 651;
      intArray0[5] = 13;
      intArray0[6] = 1;
      intArray0[7] = 651;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1817, 4310, (double) 4310, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.toBinary();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      SparseMatrix.identity(85);
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.rotate();
      cRSMatrix0.maxInRow(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.to((MatrixFactory<Matrix>) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.maxInRow(1);
      Integer integer0 = new Integer(32);
      matrix0.copyOfShape(1133, 4311);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.fold(matrixAccumulator0);
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(20, 20);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      matrix0.rank();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, denseMatrix0);
      Object object0 = new Object();
      cRSMatrix0.minInRow(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[5] = (-238.32422528654055);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (-1.0);
      double[][] doubleArray1 = new double[18][8];
      doubleArray1[0] = doubleArray0;
      double[][] doubleArray2 = new double[2][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray2);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.sum();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, denseMatrix0);
      Object object0 = new Object();
      cRSMatrix0.minInRow(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-393));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -393
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 13;
      doubleArray0[0] = (double) 1;
      doubleArray0[5] = 13.0;
      doubleArray0[7] = (-1.0);
      double[][] doubleArray1 = new double[18][8];
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.min();
      cRSMatrix0.copyOfShape(1, 1994091958);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(3, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1485, 1485);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4328, 2, 4328);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(295, vectorFunction0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1485, 1485);
      MockRandom mockRandom0 = new MockRandom(1485);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(4311, 1, (double) 1, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix1.transformRow(1, (VectorFunction) null);
      CRSMatrix.block(cRSMatrix1, matrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4328, 2, 4328);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4328, 1989.439523923).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(295, vectorFunction0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
      matrix0.min();
  }
}
