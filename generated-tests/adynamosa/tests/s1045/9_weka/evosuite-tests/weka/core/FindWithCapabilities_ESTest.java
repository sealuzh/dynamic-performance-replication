/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 01:46:24 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      System.setCurrentTimeMillis((-4966L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.find();
      double[] doubleArray0 = new double[3];
      capabilities0.enableAll();
      doubleArray0[0] = (double) (-4966L);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (double) (-4966L);
      findWithCapabilities0.setFilename("binary-class");
      doubleArray0[2] = (double) (-4966L);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("oY`RU,X,_L uXh &6!");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "not-date-class";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      findWithCapabilities0.setFilename("w_i");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("not-date-class");
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities2.m_ClassIndex = null;
      testInstances0.m_NumClasses = 271;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      testInstances0.setNumNumeric(48);
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("not-date-class");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities2);
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      findWithCapabilities2.getClassIndex();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("w_i", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "Testdata";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("Testdata");
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      capabilities0.m_MinimumNumberInstances = (-2);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities2.disable(capabilities_Capability0);
      assertFalse(findWithCapabilities2.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      findWithCapabilities0.setFilename("-W");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "O{f;%I{_2Y";
      SingleIndex singleIndex0 = new SingleIndex("#oPF;dVfA`1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-W");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("dK ysp@n");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "Testdata";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("Testdata");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("UR");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Length of copy missing: ");
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      StringTokenizer stringTokenizer0 = new StringTokenizer("The,quick,brown,fox,jumps,over,the,lazy,dog", "`SYAqW*0s5O");
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String string0 = ",3(1~`-<0)";
      findWithCapabilities3.setClassIndex(",3(1~`-<0)");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities2);
      String[] stringArray0 = findWithCapabilities4.getOptions();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5<sD8}E+\"h~-";
      stringArray0[1] = "uz;>V^Fd_$jv)R>?$.Q";
      stringArray0[2] = "-not-nominal-class";
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("uz;>V^Fd_$jv)R>?$.Q");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      assertEquals(13, stringArray1.length);
      
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Vector<String> vector1 = findWithCapabilities0.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.setClassIndex("not-date-class");
      findWithCapabilities0.m_Superclass = "not-date-class";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RLUJvh");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("not-date-class");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability2);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("not-date-class", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.setClassIndex("not-date-class");
      findWithCapabilities0.m_Superclass = "not-date-class";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RLUJvh");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("not-date-class");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("not-date-class", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=Y9|Pp=r`~+6\b32?");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("keyword @relation expected");
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=Y9|Pp=r`~+6\b32?");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("0zOI$x0# eJyi^$oMn:");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.getOptions();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "Testdata";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("Testdata");
      findWithCapabilities0.setFilename("Testdata");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("not-date-class");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("images.txt");
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("0zOI$x0# eJyi^$oMn:");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka.core.CheckScheme");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "weka.core.CheckScheme";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka.core.CheckScheme");
      Enumeration enumeration0 = new StringTokenizer("not-date-class");
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("weka.core.CheckScheme");
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      vector0.iterator();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      findWithCapabilities3.setClassIndex("No+}!TG<V^Cr^TiLRs+");
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities2.getMisses();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("mRoDO");
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V*u0E@%2*9*G");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("km($<aNQLb+ X:");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("V*u0E@%2*9*G");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.setClassIndex("\"6%BT^/LIx[5/");
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("not-date-class");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      vector0.iterator();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getRevision();
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities3.setClassIndex("relational-numeric");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("Testdata");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "Testdata";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Testdata");
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("Testdata");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      vector0.iterator();
      findWithCapabilities0.setClassIndex("O//lN:<WR <JK/");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.setClassIndex("-W");
      findWithCapabilities1.setOptions(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumNumeric());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("+ot-date-clas ");
      findWithCapabilities0.setClassIndex(" (");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities0.setFilename("n&LIHof(F<:;E!u4");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setFilename("not-ate-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      String string0 = findWithCapabilities0.m_Filename;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("#FCxSQ{vU7<+I_");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      SingleIndex singleIndex1 = new SingleIndex();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = null;
      testInstances0.setOptions((String[]) null);
      String string1 = null;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.m_Superclass = "-date-atts";
      findWithCapabilities0.find();
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAll();
      findWithCapabilities0.setClassIndex(")Z>P");
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities2.toString();
      capabilities2.getOtherCapabilities();
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertTrue(vector1.equals((Object)vector0));
      assertNotSame(vector1, vector0);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
      
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities capabilities3 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities3, capabilities0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("6PO|T4C[.5,WE`");
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      Random.setNextRandom(193);
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      findWithCapabilities0.getOptions();
      assertEquals("6PO|T4C[.5,WE`", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("+ot-date-clas ");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "+ot-date-clas ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("Capabilities:");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Can't find class called '");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enable(capabilities_Capability3);
      findWithCapabilities2.setOptions(stringArray0);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities2));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("+ot-date-clas ");
      findWithCapabilities0.setClassIndex("\tFull name of the OptionHandler analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+ot-date-clas ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nData (internal values):\n");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("\tFull name of the OptionHandler analysed.\n\teg: weka.classifiers.rules.ZeroR\n\t(default weka.classifiers.rules.ZeroR)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      capabilities0.enableAllClasses();
      capabilities0.getClassCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ":");
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.setClassIndex(":");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename(":");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("not-nominal-atts");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      capabilities0.m_MinimumNumberInstances = (-2);
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals(":", findWithCapabilities0.getFilename());
      
      Vector<String> vector1 = findWithCapabilities3.getMatches();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "tl4A>pJA,Qw+v";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "+*";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      assertEquals("not-date-class", findWithCapabilities0.getFilename());
      
      findWithCapabilities0.setFilename("relational-numeric");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("no-class");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ts9@+lC~v`G\" !(a`v7");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ts9@+lC~v`G\" !(a`v7");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("Ts9@+lC~v`G\" !(a`v7");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("string-atts");
      findWithCapabilities1.setHandler(findWithCapabilities0);
      assertEquals("Ts9@+lC~v`G\" !(a`v7", findWithCapabilities0.getFilename());
      
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(24, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("+ot-date-clas ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("SN)=Et/$_mHeSI.uJ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+ot-date-clas ");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("number expected");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("number expected");
      findWithCapabilities2.m_ClassIndex = singleIndex0;
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("Ts9@+lC~v`G\" !(a`v7");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tl4A>pJA,Qw+v");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("Ts9@+lC~v`G\" !(a`v7");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O{f;%I{_2Y";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("O{f;%I{_2Y");
      findWithCapabilities1.setClassIndex("O{f;%I{_2Y");
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities2.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getWords();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray1);
      capabilities0.toSource("O{f;%I{_2Y", (-2));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.setCapabilities(capabilities0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities2));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("+ot-date-clas ");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      assertEquals("+ot-date-clas ", findWithCapabilities0.getFilename());
      
      findWithCapabilities0.setFilename("relational-numeric");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumRelationalNominal = 255;
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("relational-numeric");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("^ZE64M7");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("2Eq(rRRBLAGiL7");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("#FCxSQ{vU7<+I_");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      SingleIndex singleIndex1 = new SingleIndex();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = null;
      testInstances0.setOptions((String[]) null);
      String string0 = null;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities3.setHandler(findWithCapabilities2);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("not-date-class");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ":DhXwOA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      SingleIndex singleIndex0 = new SingleIndex("v$XlP+<q*JO-");
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("nominal-atts");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities2.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      singleIndex0.setSingleIndex("z2>");
      testInstances0.getWords();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "v$XlP+<q*JO-");
      capabilities1.getAttributeCapabilities();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("-}w<R<");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("z2>");
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      singleIndex0.setSingleIndex("~-O<Xt!{1xuH&ety");
      testInstances0.getWords();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities3.m_NotCapabilities;
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~-O<Xt!{1xuH&ety");
      capabilities0.getAttributeCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("-}w<R<");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("z2>");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      singleIndex0.setSingleIndex("@%UBeUE8s<>S)i!-");
      singleIndex0.m_Upper = (-1);
      testInstances0.getWords();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities4.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities3.m_NotCapabilities = capabilities1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p3<EQbFS,bX[vd?6=}{");
      findWithCapabilities2.getOptions();
      findWithCapabilities1.getHandler();
      findWithCapabilities4.setHandler(findWithCapabilities3);
      assertFalse(findWithCapabilities4.equals((Object)findWithCapabilities3));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("not-date-class");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "not-date-class");
      findWithCapabilities0.setFilename(":DhXwOA");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("\nFound ");
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":DhXwOA");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("#FCxSQ{vU7<+I_");
      findWithCapabilities2.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "nominal-atts");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      assertEquals(":DhXwOA", findWithCapabilities0.getFilename());
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      String string0 = "\tMust handle date classes.";
      SingleIndex singleIndex0 = new SingleIndex("\tMust handle date classes.");
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("tl4A>pJA,Qw+v");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities2.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      singleIndex0.setSingleIndex("wPyW+O*`o~T$5/ ");
      testInstances0.getWords();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities3.m_NotCapabilities;
      Instances instances0 = testInstances0.m_RelationalClassFormat;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.enableDependency(capabilities_Capability1);
      capabilities0.toSource("last", (-1983966616));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getRevision();
      findWithCapabilities2.setCapabilities(capabilities0);
      findWithCapabilities2.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities3.enable(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tl4A>pJA,Qw+v";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not-date-class");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "tl4A>pJA,Qw+v";
      stringArray1[1] = "not-date-class";
      SingleIndex.main(stringArray1);
      findWithCapabilities0.setFilename("Q");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("relational-numeric");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("tl4A>pJA,Qw+v");
      SingleIndex singleIndex1 = new SingleIndex("-c");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("#FCxSQ{vU7<+I_");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      TestInstances testInstances0 = new TestInstances();
      SingleIndex singleIndex2 = new SingleIndex();
      singleIndex2.setSingleIndex((String) null);
      testInstances0.getWords();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities3.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      try { 
        findWithCapabilities4.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.add("Copy with last attribute set to \"first\": ");
      findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("D5+f|aV[");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-t <file>");
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D5+f|aV[");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      String string0 = "tl4A>pJA,Qw+v";
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("not-date-class");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      String string1 = "@%UBeUE8s<>S)i!-";
      testInstances0.setNumNominal(1991);
      singleIndex0.setSingleIndex("Induction of decision trees");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(2);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.m_NotCapabilities.disableAllClasses();
      HashSet<Capabilities.Capability> hashSet0 = findWithCapabilities0.m_NotCapabilities.m_Dependencies;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      capabilities0.m_AttributeTest = false;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.m_NotCapabilities.m_MissingClassValuesTest = true;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.");
      findWithCapabilities0.getHandler();
      assertEquals("All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("-}w<R<");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("z2>");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      singleIndex0.setSingleIndex("@%UBeUE8s<>S)i!-");
      singleIndex0.m_Upper = (-2);
      testInstances0.getWords();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities4.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities3.m_NotCapabilities = capabilities1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p3<EQbFS,bX[vd?6=}{");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getClassIndex();
      assertEquals("-}w<R<", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("{~w.ZVIf970](");
      findWithCapabilities1.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U]4}@");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities3.setFilename(":");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities3.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities2.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities3.enable(capabilities_Capability0);
      findWithCapabilities2.isEnabled(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities3.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tl4A>pJA,Qw+v");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("org.pentaho.packageManagement.Package");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tMust handle numeric attributes.");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("K*s6fx:AFslre[");
      findWithCapabilities1.setClassIndex("z2>");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.setClassIndex(" classes that matched the criteria:\n");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability3);
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.DATE_CLASS;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      capabilities0.disable(capabilities_Capability4);
      findWithCapabilities0.enableNot(capabilities_Capability3);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("relational-numeric");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      singleIndex0.m_IndexString = "\tMust handle numeric attributes.";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "K");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities0.listOptions();
      findWithCapabilities1.setClassIndex("A yI(+,^0/[");
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.getMisses();
      findWithCapabilities1.setFilename("A yI(+,^0/[");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability3);
      TestInstances testInstances0 = new TestInstances();
      SingleIndex singleIndex0 = new SingleIndex("Ome(5s,WJpFP%C");
      singleIndex0.setSingleIndex(" ");
      testInstances0.getWords();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities0.listOptions();
      findWithCapabilities1.setClassIndex("A yI(+,^0/[");
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.getMisses();
      findWithCapabilities1.setFilename("A yI(+,^0/[");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities2.isEnabled(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability4);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("inv(");
      SingleIndex singleIndex0 = new SingleIndex("Wz");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("not-date-class");
      findWithCapabilities2.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      findWithCapabilities2.listOptions();
      findWithCapabilities1.getMisses();
      findWithCapabilities0.setFilename("J)");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability3);
      findWithCapabilities2.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.enable(capabilities_Capability3);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not-date-class");
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("z2>");
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tMust handle numeric attributes.");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("-1");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tl4A>pJA,Qw+v";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not-date-class");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("Q");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tl4A>pJA,Qw+v";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("tl4A>pJA,Qw+v");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y0Z=z-s{e:U]I");
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getMisses();
      findWithCapabilities2.setFilename("Y0Z=z-s{e:U]I");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enableNot(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities2.isEnabled(capabilities_Capability3);
      findWithCapabilities3.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FF6IEs:");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability4);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]dqC]3Gd%";
      stringArray0[1] = "{/EZq^2kM-9u{wT|\"r";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "\tMust handle nominal classes.";
      FindWithCapabilities.main(stringArray0);
      String string0 = "MyrB{#(']iA21\\s=xq";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MyrB{#(']iA21s=xq");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~,5|7#0_Lz_0u";
      stringArray0[1] = "-W";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setClassIndex("*;Tf");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      findWithCapabilities3.getOptions();
      findWithCapabilities1.m_Superclass = " classes that matched the criteria:\n";
      findWithCapabilities0.getCapabilities();
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -W option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setFilename("i#/{WU{bhXJ`?!IyosL");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tSuperclass to look for in the packages.\n";
      stringArray0[1] = "K*s6fx:AFslre[";
      stringArray0[2] = "o?b^QJ$(";
      stringArray0[3] = "m#]/";
      stringArray0[4] = "PZsTk#RqK,ecJC";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("$");
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("Class '");
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities3.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities4.enable(capabilities_Capability3);
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      SingleIndex singleIndex0 = new SingleIndex("J)");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("J)");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J)");
      findWithCapabilities0.listOptions();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.setFilename("relational-numeric");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.enable(capabilities_Capability2);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      stringArray0[1] = "-W";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("~,5|7#0_Lz_0u");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities2.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = findWithCapabilities2.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      findWithCapabilities0.setFilename("-W");
      SingleIndex singleIndex0 = new SingleIndex("#oPF;dVfA`1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-W");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("not-date-class");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability3);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      stringArray0[1] = "-W";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("~,5|7#0_Lz_0u");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities2.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities2.isEnabled(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setFilename("not-date-class");
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setFilename("relational-numeric");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      singleIndex0.m_IndexString = "\tMust handle numeric attributes.";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals("relational-numeric", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities1.setClassIndex("xAy");
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      findWithCapabilities2.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enable(capabilities_Capability2);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      stringArray0[1] = "O{f;%I{_2Y";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("~,5|7#0_Lz_0u");
      findWithCapabilities0.setClassIndex("~,5|7#0_Lz_0u");
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities2.enable((Capabilities.Capability) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray1);
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enable(capabilities_Capability3);
      assertFalse(capabilities_Capability3.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A yI(+,^0/[";
      stringArray0[1] = "num-instances-relational";
      stringArray0[2] = ">4XDg+WkMeL+KeAP?f";
      stringArray0[3] = "-not-no-c{lass";
      stringArray0[4] = ">$N";
      stringArray0[5] = "+1j.v+vN?NLoC@Hf8";
      stringArray0[6] = "R$cT<w4,:7/tu}r=y]";
      stringArray0[7] = "-not-relational-atts";
      stringArray0[8] = "!D'*O=";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("J)");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J)";
      stringArray0[1] = "J)";
      stringArray0[2] = "J)";
      stringArray0[3] = "J)";
      stringArray0[4] = "J)";
      stringArray0[5] = "J)";
      stringArray0[6] = "J)";
      stringArray0[7] = "J)";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("[");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5<sD8}E+\"h~-";
      stringArray0[1] = "uz;>V^Fd_$jv)R>?$.Q";
      stringArray0[2] = "-not-nominal-class";
      stringArray0[3] = "";
      stringArray0[4] = "h!08(uye3c";
      stringArray0[5] = "t_.D";
      stringArray0[6] = "S=OYr~";
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      stringArray0[1] = "-W";
      stringArray0[2] = "O{f;%I{_2Y";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities2.getOptions();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities2.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-W";
      stringArray0[1] = "O{f;%I{_2Y";
      stringArray0[2] = "%DpX";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("Ud9tQNj$");
      findWithCapabilities0.setClassIndex("Ud9tQNj$");
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      Vector<String> vector2 = new Vector<String>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getMatches();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("Copy with first attribute set to 0: ");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getCapabilities();
      assertEquals("Ud9tQNj$", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O{f;%I{_2Y";
      stringArray0[1] = "-W";
      stringArray0[2] = "O{f;%I{_2Y";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("~,5|7#0_Lz_0u");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      String[] stringArray1 = findWithCapabilities2.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("Ud9tQNj$");
      findWithCapabilities0.setClassIndex("Ud9tQNj$");
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "%DpX";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "Ud9tQNj$";
      stringArray0[5] = "-not-unary-class";
      stringArray0[6] = "%DpX";
      stringArray0[7] = "%DpX";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disableNot(capabilities_Capability0);
      findWithCapabilities2.getOptions();
      findWithCapabilities2.setClassIndex("SK/l&l* sahT5}R}");
      findWithCapabilities2.setFilename(">FP");
      assertEquals(">FP", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = null;
      findWithCapabilities0.m_Filename = null;
      String string1 = "J)";
      findWithCapabilities0.setClassIndex("J)");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String string0 = null;
      findWithCapabilities0.m_Filename = null;
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances.forCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getHandler();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bd-DC<91jV%H$";
      stringArray0[1] = "-unary-class";
      stringArray0[2] = "Shallow copy: ";
      stringArray0[3] = "last";
      stringArray0[4] = "sq!, ~$";
      stringArray0[5] = "!";
      stringArray0[6] = "U]t4gw*OE3DMqw!Y&w";
      stringArray0[7] = "hub@I";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("NN,)tc0");
      findWithCapabilities0.setClassIndex("{^ZM>");
      String string0 = findWithCapabilities0.m_Filename;
      String string1 = findWithCapabilities0.m_Filename;
      findWithCapabilities0.setClassIndex("NN,)tc0");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability1);
      assertEquals("NN,)tc0", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      String string0 = "NN,)tc0";
      findWithCapabilities0.setFilename("NN,)tc0");
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("{^ZM>");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " found.");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-61);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)117;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("/hsgy lK%<[ylW3}");
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("Ud9tQNj$");
      findWithCapabilities0.setClassIndex("Ud9tQNj$");
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      vector1.stream();
      Vector<String> vector2 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector1.add("Ud9tQNj$");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      capabilities0.enableAll();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.enableAllAttributeDependencies();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.add("weka/core/Capabilities.props");
      capabilities1.enableAll();
      findWithCapabilities1.getHandler();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("Ud9tQNj$");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("vxeeoj4Lz%$E2C*5");
      findWithCapabilities1.setClassIndex("Ud9tQNj$");
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("?Wy&%h1N,.z-d)2D");
      FindWithCapabilities.main((String[]) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("?Wy&%h1N,.z-d)2D", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "O{f;%I{_2Y";
      stringArray0[3] = "-W";
      stringArray0[4] = "N(5,,UE\"WX";
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setFilename("u;zefUOakN");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.getFailReason();
      MockException mockException0 = new MockException((Throwable) null);
      capabilities0.m_FailReason = (Exception) mockException0;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = null;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Packages = null;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2J:'X[Qb[.OxB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Copy with length set to be missing: ";
      stringArray0[5] = "\"$X>|";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_ClassIndex = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Superclass = "";
      capabilities0.createMessage("");
      vector0.add("");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      findWithCapabilities0.setFilename("");
      stringArray0[2] = "9yn";
      stringArray0[3] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      String string0 = "x4XV^qd@";
      findWithCapabilities0.setClassIndex("x4XV^qd@");
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      capabilities1.disableAllClasses();
      capabilities1.m_MinimumNumberInstances = 0;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Filename = "X,F=";
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector0.add("weka/core/Capabilities.props");
      capabilities0.enableAll();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("\tSuppresses the '*' in the Javadoc.");
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.setFilename("i#/{WU{bhXJ`?!IyosL");
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.m_InstancesTest = false;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.disableAllAttributeDependencies();
      findWithCapabilities0.m_NotCapabilities.disableDependency(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.assign(findWithCapabilities0.m_NotCapabilities);
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      capabilities0.disableAllAttributes();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.disableNot(capabilities_Capability2);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "nominal-atts";
      stringArray0[1] = "numeric-class";
      stringArray0[2] = "";
      stringArray0[3] = "weka.core.UnsupportedAttributeTypeException";
      stringArray0[4] = "JvajH5c<N&3H5.l";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        TestInstances.forCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.stream();
      findWithCapabilities0.m_Matches = vector0;
      vector0.listIterator();
      findWithCapabilities0.m_Superclass = "\tMust handle multi-instance data.";
      findWithCapabilities0.getOptions();
      CapabilitiesHandler capabilitiesHandler0 = null;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = "z~hDxtR=##|L";
      vector0.add("z~hDxtR=##|L");
      vector0.forEach(consumer0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      SingleIndex singleIndex0 = new SingleIndex("tl4A>pJA,Qw+v");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("relational-numeric");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "relational-numeric";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational-numeric");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setFilename("relational-numeric");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      singleIndex0.m_IndexString = "\tMust handle numeric attributes.";
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-985.5568007013), doubleArray0);
      instances0.add((Instance) denseInstance0);
      try { 
        capabilities0.testWithFail(instances0, (-2), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.disableAllAttributeDependencies();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      capabilities2.setMinimumNumberInstances(4);
      capabilities0.and(capabilities2);
      findWithCapabilities0.setNotCapabilities(capabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = new String[0];
      capabilities0.m_InstancesTest = false;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[0] = "bUps`fm4anr&'w";
      stringArray0[1] = "^9VkE!";
      stringArray0[2] = "";
      vector0.add("bUps`fm4anr&'w");
      stringArray0[3] = "pTPx7Zfng8O+lY#jdT";
      stringArray0[4] = "";
      stringArray0[5] = "3a";
      stringArray0[6] = "-UCpZ!#)H}^R";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      stringArray0[7] = "Dl}>";
      vector0.parallelStream();
      stringArray0[8] = "&2EC8g:5q*r+ky";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IN]4&Yy";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.disableAllClasses();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.m_Superclass = "/Mj+dy";
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
