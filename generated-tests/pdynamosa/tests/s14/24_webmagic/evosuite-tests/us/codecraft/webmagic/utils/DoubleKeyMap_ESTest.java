/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:26:22 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put("", hashMap1);
      Map<Object, String> map0 = doubleKeyMap0.get("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Integer integer0 = doubleKeyMap0.remove("", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Map<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Map<Object, String>, String>();
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(hashMap0);
      String string0 = doubleKeyMap1.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap0.remove((HashMap<String, String>) null, "W8>QNl X>B1");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer((-1861));
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Object, String>>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Object) doubleKeyMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, String>>((Map<Object, Map<Object, HashMap<String, String>>>) null);
      Map<String, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(map0, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("", (Object) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>>();
      DoubleKeyMap<HashMap<Integer, Map<Object, String>>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Map<Object, String>>, Object, String>((Map<HashMap<Integer, Map<Object, String>>, Map<Object, String>>) null);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      doubleKeyMap1.put(hashMap0, (Object) doubleKeyMap0, "");
      Map<Object, String> map0 = doubleKeyMap1.remove(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      Integer integer0 = new Integer((-1411));
      DoubleKeyMap<HashMap<Integer, String>, HashMap<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, String>, HashMap<Object, Object>, String>();
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Object object0 = doubleKeyMap2.put((Object) doubleKeyMap0, integer0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(map0, class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap1.get(object0, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<String, Map<Object, String>>> hashMap0 = new HashMap<HashMap<String, String>, Map<String, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>>(hashMap0, class0);
      HashMap<Object, Map<String, HashMap<Object, Object>>> hashMap1 = new HashMap<Object, Map<String, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(hashMap1);
      Map<String, HashMap<Object, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Map<String, HashMap<Object, String>>> hashMap0 = new HashMap<String, Map<String, HashMap<Object, String>>>();
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", "us.codecraft.webmagic.utils.DoubleKeyMap", (HashMap<Object, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Map<Object, String>>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      doubleKeyMap0.put(hashMap0, "wrong proto type map ", (Map<Object, String>) null);
      Map<Object, String> map0 = doubleKeyMap0.remove(hashMap0, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<String, String>, Map<String, Map<Object, String>>> hashMap0 = new HashMap<HashMap<String, String>, Map<String, Map<Object, String>>>();
      DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>>(hashMap0, class0);
      Map<Object, String> map0 = doubleKeyMap0.get((HashMap<String, String>) null, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<String, Map<Object, String>>> hashMap0 = new HashMap<HashMap<String, String>, Map<String, Map<Object, String>>>();
      DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Map<Object, String>>(hashMap0);
      doubleKeyMap0.put((HashMap<String, String>) null, "G9Iw", (Map<Object, String>) null);
      Map<Object, String> map0 = doubleKeyMap0.get((HashMap<String, String>) null, "G9Iw");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, String>>();
      Map<HashMap<Object, Map<Object, String>>, Map<String, Map<Object, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Map<Object, String>>, String, Map<Object, String>>(map0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      doubleKeyMap1.put(hashMap0, "", (Map<Object, String>) null);
      doubleKeyMap1.remove(hashMap0, "");
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = doubleKeyMap0.put(",}nCm8qEu6Ubt4mhR~", "", hashMap0);
      HashMap<Object, String> hashMap2 = doubleKeyMap0.put(",}nCm8qEu6Ubt4mhR~", "", hashMap1);
      assertSame(hashMap0, hashMap2);
  }
}
