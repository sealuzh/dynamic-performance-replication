/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:23:11 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.KeyListener;
import java.beans.EventSetDescriptor;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(substringLabeler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SubstringLabeler : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("1\"Me`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1\"Me` not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("uK[f-\"F(~jZ");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addTestSetListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "instance");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("hM;y`0j'._", "hM;y`0j'._");
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.connectionNotification("w-C{co\"IJczK7U", sorter0);
      boolean boolean0 = filter0.eventGeneratable("weka.gui.ExtensionFileFilter");
      boolean boolean1 = filter0.isBusy();
      assertTrue(boolean1 == boolean0);
      
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setWrappedAlgorithm(attributeSelection0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      float float0 = Component.TOP_ALIGNMENT;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textDirectoryLoader0, instances0, 568, 1, 1, 0);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.connectionNotification("v^hg_[:lnqWm:", filter0);
      filter1.connectionNotification("v^hg_[:lnqWm:", "v^hg_[:lnqWm:");
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-1795), (-1795));
      trainingSetEvent0.m_runNumber = (-1795);
      trainingSetEvent0.m_runNumber = (-1795);
      filter0.acceptTrainingSet(trainingSetEvent0);
      MockThread.reset();
      filter0.getCustomName();
      SystemInUtil.addInputLine("AllFilter");
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      filter0.addTrainingSetListener((TrainingSetListener) null);
      filter0.stop();
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      Discretize discretize0 = new Discretize();
      discretize0.globalInfo();
      filter0.setFilter(discretize0);
      System.setCurrentTimeMillis(1599L);
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      filter0.connectionAllowed("AllFilter");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addTrainingSetListener((TrainingSetListener) null);
      filter0.isBusy();
      Sorter sorter0 = new Sorter();
      filter0.removeTestSetListener(sorter0);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      filter0.setVisual(beanVisual0);
      filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes</font><br><br> Discretization is by Fayyad & Irani's MDL method (the default).<br><br>For more information, see:<br><br>Usama M.<br>Fayyad, Keki B.<br>Irani: Multi-interval discretization of continuousvalued attributes for classification learning.<br>In: Thirteenth International Joint Conference on Articial Intelligence, 1022-1027, 1993.<br><br>Igor Kononenko: On Biases in Estimating Multi-Valued Attributes.<br>In: 14th International Joint Conference on Articial Intelligence, 1034-1040, 1995.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instace", "instace");
      filter0.eventGeneratable("instace");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.addInstanceListener(sorter0);
      filter0.disconnectionNotification("w5+T`BhtrV[b`", "w5+T`BhtrV[b`");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Sorter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Logger logger0 = substringReplacer0.m_log;
      substringReplacer0.getInputMap();
      filter0.setLog((Logger) null);
      filter0.getBounds((Rectangle) null);
      filter0.addInstanceListener(substringReplacer0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.getVisual();
      beanVisual0.setDebugGraphicsOptions(1);
      beanVisual0.transferFocus();
      filter0.setVisual(beanVisual0);
      filter0.enumerateRequests();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Sorter sorter0 = new Sorter();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      sorter0.m_log = null;
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.setCustomName(" not supported (Filter)");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeTrainingSetListener(crossValidationFoldMaker0);
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.performRequest("Stop");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "^hYg_[:lnqWm:";
      filter0.connectionNotification("^hYg_[:lnqWm:", filter0);
      // Undeclared exception!
      try { 
        filter0.eventGeneratable("^hYg_[:lnqWm:");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("hM;y`0j'._", scatterPlotMatrix0);
      filter0.eventGeneratable("hM;y`0j'._");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      filter0.acceptInstance((InstanceEvent) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification(" ", classAssigner0);
      filter0.eventGeneratable(" ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.addKeyListener((KeyListener) null);
      filter0.setUI(basicPanelUI0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.getAlignmentX();
      Saver saver0 = new Saver();
      saver0.getX();
      filter0.removeTrainingSetListener(saver0);
      SystemInUtil.addInputLine((String) null);
      filter0.getVisual();
      filter0.addDataSourceListener(saver0);
      filter0.addDataSourceListener(saver0);
      filter0.removeTrainingSetListener(saver0);
      filter0.acceptDataSet((DataSetEvent) null);
      String string0 = "(}!u^;Uc=}J";
      SparseInstance sparseInstance0 = new SparseInstance(1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance1.setClassValue("Cache size cannot be smaller than 0 (provided: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.connectionNotification("instance", "instance");
      Random.setNextRandom(2177);
  }
}
