/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 00:15:42 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put("PMqz#LQN3<", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove("PMqz#LQN3<", integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Object, Map<HashMap<String, Object>, Object>>, Map<Map<Object, Integer>, Object>> hashMap0 = new HashMap<HashMap<Object, Map<HashMap<String, Object>, Object>>, Map<Map<Object, Integer>, Object>>();
      DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Object>>, Map<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<HashMap<String, Object>, Object>>, Map<Object, Integer>, Object>(hashMap0);
      HashMap<Object, Map<HashMap<String, Object>, Object>> hashMap1 = new HashMap<Object, Map<HashMap<String, Object>, Object>>();
      HashMap<String, Map<HashMap<Object, Object>, Map<Map<Object, Integer>, Object>>> hashMap2 = new HashMap<String, Map<HashMap<Object, Object>, Map<Map<Object, Integer>, Object>>>();
      DoubleKeyMap<String, HashMap<Object, Object>, Map<Map<Object, Integer>, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, Object>, Map<Map<Object, Integer>, Object>>(hashMap2);
      Map<Map<Object, Integer>, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>();
      Map<Object, Integer> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.get(hashMap1, map1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>(class0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put("PMqz#LQN3<", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0, class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.remove("PMqz#LQN3<");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) integer0, integer0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<HashMap<Object, Object>, Object>> hashMap0 = new HashMap<HashMap<Object, String>, Map<HashMap<Object, Object>, Object>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<HashMap<Object, Object>, Object> hashMap2 = new HashMap<HashMap<Object, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Object>, Object>(hashMap0);
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap0.get(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = doubleKeyMap0.remove((String) null, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Integer, String>>();
      HashMap<Integer, String> hashMap0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, Map<HashMap<String, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<HashMap<String, Object>, Object>>();
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.put("WW1/sQUWu^I_", (Object) "WW1/sQUWu^I_", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Integer, Object>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap1.put((Map<HashMap<String, Object>, Object>) hashMap0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<HashMap<Object, Integer>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, Integer>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, String>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      String string0 = doubleKeyMap1.put(hashMap1, (Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "?:`#", "?:`#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap1.get("dXm&V/O=RIfUVeci", (Object) doubleKeyMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Integer, Map<HashMap<Object, Object>, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Object, Object>, String>(map0, class0);
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Object, Object, HashMap<Integer, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap0 = doubleKeyMap2.get((Object) doubleKeyMap1, (Object) integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0, class0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", integer0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Integer>((Map<HashMap<Object, Object>, Map<String, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, Object>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<HashMap<String, Object>, Object>>();
      Map<Map<Object, Object>, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Object>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Integer, Object>(map0, class0);
      Map<Integer, Object> map1 = doubleKeyMap1.get((Map<Object, Object>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put("\"\"3]r1", hashMap0, (Object) hashMap0);
      Object object0 = doubleKeyMap0.remove("\"\"3]r1", (HashMap<String, Integer>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Map<Map<HashMap<String, Object>, Object>, Integer>> hashMap0 = new HashMap<String, Map<Map<HashMap<String, Object>, Object>, Integer>>();
      DoubleKeyMap<String, Map<HashMap<String, Object>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<String, Object>, Object>, Integer>(hashMap0, class0);
      DoubleKeyMap<HashMap<Object, Integer>, Object, Map<HashMap<String, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Map<HashMap<String, Object>, Object>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap1.remove(hashMap1, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put("", (Object) "", (Object) integer0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>, Object>();
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      doubleKeyMap0.put((Map<HashMap<String, Object>, Object>) null, (Map<HashMap<String, Object>, Object>) null, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.get((Map<HashMap<String, Object>, Object>) null, (Map<HashMap<String, Object>, Object>) null);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<Object, Map<HashMap<String, Integer>, Object>> map0 = doubleKeyMap0.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (String) null, (Object) map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0, class0);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap1);
      Map<String, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Integer>, Object>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put("\"\"3]r1", hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.remove("\"\"3]r1", hashMap0);
      assertTrue(hashMap1.isEmpty());
  }
}
