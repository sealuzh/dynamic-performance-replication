/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:17:47 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("Li", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      jVCParser0.debugColumn = (-633);
      // Undeclared exception!
      try { 
        jVCParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      jVCParser0.enable_tracing();
      // Undeclared exception!
      try { 
        JVCParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[");
      stringReader0.reset();
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      Token token0 = jVCParser0.getToken(100);
      assertNotNull(token0);
      assertEquals(2, token0.beginColumn);
      
      jVCParser0.getNextToken();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((JVCParserTokenManager) null);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.ReInit((JVCParserTokenManager) null);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JVCParser.main(stringArray0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0, (String) null);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Reader reader0 = null;
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.ReInit((Reader) null);
      assertEquals(100, jVCParser0.debugColumn);
      
      // Undeclared exception!
      try { 
        jVCParser0.getToken(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream1);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\n\");\n", string0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      Token token0 = jVCParser0.getToken((byte)10);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals("", token0.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = jVCParser0.getToken(59);
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals("", token1.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"A\");", string0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      Token token0 = jVCParser0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", token0.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(100);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Token token1 = jVCParser0.getToken((byte)65);
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", token1.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      
      String string1 = jVCParser0.parse();
      assertNotNull(string1);
      assertEquals("_sb.append(\"A\");", string1);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      Token token2 = jVCParser0.token_source.getNextToken();
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", token2.toString());
      assertEquals(100, jVCParser0.debugColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream2);
      assertFalse(pipedInputStream2.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream2.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream2.available());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"[[=(\"";
      stringArray0[1] = "\"[[=(\"";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream1);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\n\");\n", string0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z[[");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      StringReader stringReader1 = new StringReader("Unbalanced cache block in ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader0.reset();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      int int0 = stringReader1.read();
      assertEquals(85, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"[[=(\"";
      StringReader stringReader0 = new StringReader("\"[[=(\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"";
      StringReader stringReader0 = new StringReader("\"");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      StringReader stringReader1 = new StringReader(":\"[\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(58, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\\"\");", string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(100, jVCParser0.debugColumn);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'X';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      Token token0 = jVCParser0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("", token0.toString());
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(100, jVCParser0.debugColumn);
      
      try { 
        stringReader0.read(charArray0, 1813, 67582);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)13, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(5, byteArrayInputStream1.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream1);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)13, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      Token token0 = new Token((byte)10);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(10, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      jVCParser0.jj_nt = token0;
      assertEquals(5, byteArrayInputStream1.available());
      assertNull(token0.toString());
      assertNull(jVCParser0.jj_nt.toString());
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\r\\n\");\r\n_sb.append(\"\\n\");\n_sb.append(\"\\n\");\n_sb.append(\"\\n\");\n", string0);
      assertArrayEquals(new byte[] {(byte)13, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      JVCParser.main(stringArray0);
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte byte0 = (byte)10;
      StringReader stringReader0 = new StringReader("aN,5[Cu");
      assertNotNull(stringReader0);
      
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      assertNotNull(jVCParser0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"aN,5[Cu\");", string0);
      assertEquals(100, jVCParser0.debugColumn);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        JVCParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("j-Dyr");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-58), (byte)13, (byte) (-58), (byte) (-58), (byte)13, (byte) (-58)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-58), (byte)13, (byte) (-58), (byte) (-58), (byte)13, (byte) (-58)}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(7, byteArrayInputStream1.available());
      
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream1);
      assertNotNull(jVCParser0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-58), (byte)13, (byte) (-58), (byte) (-58), (byte)13, (byte) (-58)}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)13, (byte) (-58), (byte)13, (byte) (-58), (byte) (-58), (byte)13, (byte) (-58)}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(7, byteArrayInputStream0.available());
      
      Token token0 = new Token((-1134));
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals((-1134), token0.kind);
      assertEquals(0, token0.beginLine);
      
      String string0 = jVCParser0.parse();
      assertNotNull(string0);
      assertEquals("_sb.append(\"\\r\");\r_sb.append(\"\uFFFD\\r\");\r_sb.append(\"\uFFFD\uFFFD\\r\");\r_sb.append(\"\uFFFD\");", string0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-58), (byte)13, (byte) (-58), (byte) (-58), (byte)13, (byte) (-58)}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(100, jVCParser0.debugColumn);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "j-Dyr";
      stringArray0[2] = "_sb.append(\"\r\");\r_sb.append(\"\uFFFD\r\");\r_sb.append(\"\uFFFD\uFFFD\r\");\r_sb.append(\"\uFFFD\");";
      JVCParser.main(stringArray0);
      // Undeclared exception!
      try { 
        JVCParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }
}
