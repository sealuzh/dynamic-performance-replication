/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:46:43 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<Map<String, String>, String>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, String>>();
      DoubleKeyMap<Integer, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, String>, String>(hashMap0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, HashMap<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Object>, String>();
      Map<Map<String, String>, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      doubleKeyMap0.remove(integer0, (Map<String, String>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object>();
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      doubleKeyMap0.put((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      Map<Object, Object> map0 = doubleKeyMap0.remove((Map<Integer, HashMap<Object, Object>>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("", "", "|,ni2;m.JXhQ~rcUm");
      String string0 = doubleKeyMap0.get("", "");
      assertEquals("|,ni2;m.JXhQ~rcUm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Map<Map<String, String>, String>> hashMap0 = new HashMap<Integer, Map<Map<String, String>, String>>();
      DoubleKeyMap<Integer, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, String>, String>(hashMap0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap0.remove(integer0, (Map<String, String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Object object0 = doubleKeyMap0.remove((Integer) null, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.remove((HashMap<Object, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Map<HashMap<Map<Integer, HashMap<Object, Object>>, String>, Map<Object, Integer>>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<HashMap<Map<Integer, HashMap<Object, Object>>, String>, Map<Object, Integer>>, Object>();
      Map<HashMap<Map<Integer, HashMap<Object, Object>>, String>, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Integer, HashMap<Object, Object>>, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Integer, HashMap<Object, Object>>, String>, Object, Integer>(map0);
      Map<Object, Map<HashMap<String, String>, Object>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<String, String>, Object>(map1, class0);
      Object object0 = new Object();
      Map<HashMap<String, String>, Object> map2 = doubleKeyMap2.remove(object0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, Object>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, Object>>();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>(hashMap0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) null, (Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Map<Object, Object>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Map<Object, Object>>, Integer>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object1 = doubleKeyMap0.get((Object) "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Integer, HashMap<Object, Object>>, Map<Map<Integer, HashMap<Object, Object>>, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, HashMap<Object, Object>>, Map<Map<Integer, HashMap<Object, Object>>, String>>();
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      Map<Map<Integer, HashMap<Object, Object>>, String> map0 = doubleKeyMap0.get((Integer) null, (Map<Integer, HashMap<Object, Object>>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, Map<Map<Integer, HashMap<Object, Object>>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Map<Map<Integer, HashMap<Object, Object>>, Object>>((Map<HashMap<Object, Object>, Map<String, Map<Map<Integer, HashMap<Object, Object>>, Object>>>) null);
      DoubleKeyMap<Object, Object, Map<Integer, HashMap<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, HashMap<Object, Object>>>();
      Map<Integer, HashMap<Object, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
      Map<String, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Map<String, HashMap<Object, Integer>>> hashMap0 = new HashMap<HashMap<Object, Integer>, Map<String, HashMap<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Integer>, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, HashMap<Object, Integer>>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((HashMap<Object, Integer>) null, "v}C3gU:rzV", (HashMap<Object, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, Map<Map<Integer, HashMap<Object, Object>>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Map<Map<Integer, HashMap<Object, Object>>, Object>>();
      DoubleKeyMap<Object, Map<Integer, HashMap<Object, Object>>, Map<Integer, HashMap<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, HashMap<Object, Object>>, Map<Integer, HashMap<Object, Object>>>();
      Map<Map<Integer, HashMap<Object, Object>>, Map<Integer, HashMap<Object, Object>>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object>();
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      doubleKeyMap0.put((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      Object object0 = doubleKeyMap0.remove((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object>();
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) integer0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.put((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) integer0, (Object) hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Object, String>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, String>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, HashMap<Object, Object>>, Object, Object>();
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      doubleKeyMap0.put((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.remove((Map<Integer, HashMap<Object, Object>>) hashMap0, (Object) hashMap0);
      assertEquals(0, hashMap1.size());
  }
}
