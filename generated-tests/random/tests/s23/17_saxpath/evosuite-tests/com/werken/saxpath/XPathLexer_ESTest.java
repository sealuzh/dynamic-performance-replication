/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:07:37 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]m7R$#CoTn~\".[XD?/");
      Token token0 = xPathLexer0.dollar();
      assertEquals("]", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("m", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("$#", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("CoTn", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("~", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(14, token7.getTokenType());
      assertEquals("\".", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("#[8=RQ<j<");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_=>sxwrQ/");
      xPathLexer0.setXPath(">@dFr:qlM");
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iTYc4>DrZ~l7H'");
      Token token0 = xPathLexer0.minus();
      assertEquals("i", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("c4", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.relationalOperator();
      assertNotNull(token4);
      assertEquals(9, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "+\\u'>Ok6''tD";
      XPathLexer xPathLexer0 = new XPathLexer(string0);
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" [;gf-fR=W?w-XYXSY#");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(20, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HMGhAa-K)i+X;|Ot92");
      xPathLexer0.setXPath("");
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("#[8=RQ<j<");
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U|/**5Am.LB5[/8");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("U|", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      char char0 = xPathLexer0.LA(1);
      assertEquals('A', char0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "+\\u'>Ok6''tD";
      XPathLexer xPathLexer0 = new XPathLexer(string0);
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("+\\u'>Ok6''tD", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I@a6',4?;");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" MSgRp]Z6(E&Bq!l$t");
      boolean boolean0 = xPathLexer0.isIdentifierChar('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0");
      boolean boolean0 = xPathLexer0.isIdentifierChar('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jw");
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QOFE,:$uMcGb!");
      xPathLexer0.consume(0);
      assertEquals("QOFE,:$uMcGb!", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";s~U?h+>61O\":}f/O");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      char char0 = xPathLexer0.LA(1005);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?]g7e2]k%?Bs>o`$h");
      xPathLexer0.consume((-2243));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l]aKqB(gZKsH");
      xPathLexer0.consume((-2006));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c4K`>UKi`zYp-!+~^Hx");
      xPathLexer0.consume((-331));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5TU&}G<^66");
      xPathLexer0.consume((-3085));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-970));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U|/**5Am.LB5[/8");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("U|", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.consume(4);
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.LB5", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      String string0 = xPathLexer0.getXPath();
      assertEquals("com.werken.saxpath.XPathLexer", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U|/**5Am.LB5[/8");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("O/6Bw");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]m7R$#CoTn~\".[XD?/");
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DL&ic*zE%b$YDj%-DS6");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("anF'rm%7Dh");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DL&ic*zE%b$YDj%-DS6");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M&7=iy5WUYaP");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")n!_or8Kq=%E2lO");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*Ddn&:s>{E<<0>OU");
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("kfaS");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("._x1K}z5+*l.19a");
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X;DQ'zDk=7'|`T`}4A ");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("X", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("DQ", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertNotNull(token3);
      
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(27, token3.getTokenType());
      assertEquals("zDk=7", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("T`}4A ", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{)%$x5-A");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("{", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(")", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("x5-A", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jY?LJ2=PBr_;J#j8!+|");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals("jY", token0.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer0.comma();
      Token token2 = xPathLexer0.colon();
      assertEquals("2", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("PBr_", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sG+z=%[cuCv");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("sG", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3vY");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("3", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("vY", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]m7R$#CoTn~\".[XD?/");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eq<) ");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("e", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@t4e*6");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("@", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("4", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(" g*~Vb<x}?kgNC90");
      Token token0 = xPathLexer0.not();
      assertEquals(" ", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      Token token2 = xPathLexer0.star();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Vb", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ki7CAT\"3!uNYjF$T");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(3, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("i7CAT", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".0", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4/Mcl,|$@5dvi_+$4");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.equals();
      assertEquals(",", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("|", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1@JM+ 81`-J");
      xPathLexer0.setXPath("'{0^[$?Hzd|f5K");
      Token token0 = xPathLexer0.slashes();
      assertEquals("'", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("{0^[$?Hzd|f5K", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("~zEsA|3E;)cqVfe`dAc");
      Token token0 = xPathLexer0.plus();
      assertEquals("~", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("zEsA", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$vR/U,");
      Token token0 = xPathLexer0.slashes();
      assertEquals("$", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("vR", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pt)3T");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("t", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("s*yBhIJjv");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("s", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eNW1=VV`r");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("eNW1", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("`", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l]aKqB(gZKsH");
      Token token0 = xPathLexer0.not();
      assertEquals("l", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.equals();
      assertEquals("a", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("K", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("qB", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("pIQTdA");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("pIQTdA", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("m", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("w", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("rk", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("n.saxpath.XPathLexer", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.setXPath(">mx=)5  .5Yf+C$");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(">m", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("=)", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("5", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(".5", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k+; ;w,V}`fpit k");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DL&ic*zE%b$YDj%-DS6");
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      assertEquals("L&ic*zE%b$Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("j", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*hFdR!CY(zc");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("hFdR", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?]g7e2]k%?Bs>o`$h");
      Token token0 = xPathLexer0.plus();
      assertEquals("?", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("g7e2", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pIqQ/aec;@lTT:[:[");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("p", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("Q/", token3.getTokenText());
      assertEquals(12, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("a", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("ec", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}mp3!X,d]as3ZAZ_B");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.identifier();
      assertEquals("mp3", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("X", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jL");
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(" g*~Vb<x}?kgNC90");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("~", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("V", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("b", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nP/?Btair)a :5R<");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("n", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("P", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("?", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals(")", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("a", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e`jrSCcbiE#_N>-");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("`jrSCcbiE#_N>-", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_lfZY}");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_lfZY", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LZtqd%]X");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("L", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Zt", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("d", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("]", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("S2q7\u0003p");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("S2q7\u0003p", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z3~4E(lfi#({R-kE%#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Z3", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Yq fN+0N1oa9p9+.)$M");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Yq", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("fN+0N1oa9p9+.)$M", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X`-UIx2G%yR");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("X", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("UI", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("x", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("%", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("yR", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b3WA");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("b", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("WA", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5TU&}G<^66");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" [;gf-fR=W?w-XYXSY#");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      assertEquals("[", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("-", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("f", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("R", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q}VFU\"#$J(<tt8O]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Q", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("@GO");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?N");
      xPathLexer0.consume(1);
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("N", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ltd(|p(O(p5GE<");
      xPathLexer0.setXPath("AML}sfhxfg'?");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("ML", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ltd(|p(O(p5GE<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Ltd", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~+Uk.sK}-5jT[{}f4");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.dollar();
      assertEquals("U", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("k", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(".s", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("K", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Jw", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I@a6',4?;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q&Jvjf-HPcrR%T@E]W");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals("&", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("J", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("v", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("-", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("HPcrR", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b%6GJE");
      Token token0 = xPathLexer0.minus();
      assertEquals("b", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("%", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("6", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("GJE", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QOFE,:$uMcGb!");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("O", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("FE", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("J>wprO,EBcVC4Y) y/m");
      Token token0 = xPathLexer0.comma();
      assertEquals("J", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("pr", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("EBcVC4Y", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DwL=rO0<;*X@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("DwL", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1-9CB]*h");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.plus();
      assertEquals("-", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("9", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("CB", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("O/6Bw");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Bw", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@)|nAs{sP1&_R\u0004>W[4");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(")", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("As", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w(lJJ8t?tb<8e'k'");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("lJJ8t", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("?tb<8e'k'", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(">nvgE20Xq");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("nvgE20Xq", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("c?<+J=}g5<KZueE/*xI");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("?", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(21, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(";Ce%r]1qB,d1");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";Ce%r]1qB,d1", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kB:yEa,B;");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("k", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("B", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(":", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6D}2-B/29[8.xx<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("6", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("2-B", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("9", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6D}2-B/29[8.xx<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("}", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("2-B", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("29", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("8.", token7.getTokenText());
      assertEquals(31, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("x", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("x", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(7, token10.getTokenType());
      assertEquals("<", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M&7=iy5WUYaP");
      Token token0 = xPathLexer0.equals();
      assertEquals("M", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("iy5WUYaP", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";s~U?h+>61O\":}f/O");
      Token token0 = xPathLexer0.not();
      assertEquals(";", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("~", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("U", token3.getTokenText());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("61", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8N^:vKL]5mC;A");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("8N", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("^", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(":v", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("K", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("L", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("5", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c4K`>UKi`zYp-!+~^Hx");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z3~4E(lfi#({R-kE%#");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("S2q7\u0003p");
      Token token0 = xPathLexer0.pipe();
      assertEquals("S", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("2", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1dwnl?D3g");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1@JM+ 81`-J");
      xPathLexer0.setXPath("'{0^[$?Hzd|f5K");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("'", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("{", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("0", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("^[$?Hzd|f5K", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S/wwC,[PGW2%t");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("S", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("/", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("wwC", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("](u.(`g),VK~y");
      Token token0 = xPathLexer0.minus();
      assertEquals("]", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q&Jvjf-HPcrR%T@E]W");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals("&", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("J", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("v", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("f", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("-", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("J>wprO,EBcVC4Y) y/m");
      Token token0 = xPathLexer0.comma();
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(">", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("pr", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XyIEz>ps`'=&f?B");
      xPathLexer0.setXPath("*`xe}Z5*u/jdL$E8=");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("`", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Z5", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("u", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M'c!GV~7`QNU0)s@N");
      Token token0 = xPathLexer0.pipe();
      assertEquals("M", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5TU&}G<^66");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("5", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("T", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("U", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("&}G<^66", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WN%!@rw,^Sm0\"");
      Token token0 = xPathLexer0.dollar();
      assertEquals("W", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("N", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("%!@rw,^Sm0\"", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#!.NJSuO}WF^6Y");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("#!.NJSuO}WF^6Y", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"P2Y(f");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "+\\u'>Ok6''tD";
      XPathLexer xPathLexer0 = new XPathLexer(string0);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }
}
