/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:02:55 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) null, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Integer integer0 = new Integer((-2892));
      Object object0 = new Object();
      doubleKeyMap0.put((Object) integer0, object0, "");
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      doubleKeyMap1.newMap();
      doubleKeyMap1.newMap();
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class1);
      Map<Object, Map<Object, Object>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(map1);
      doubleKeyMap3.get((Object) class1, (Object) class1);
      HashMap<Integer, Map<Object, Map<String, Integer>>> hashMap1 = new HashMap<Integer, Map<Object, Map<String, Integer>>>();
      HashMap<Object, Map<String, Integer>> hashMap2 = new HashMap<Object, Map<String, Integer>>();
      hashMap1.put(integer0, hashMap2);
      DoubleKeyMap<Integer, Object, Map<String, Integer>> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, Map<String, Integer>>(hashMap1);
      Integer integer1 = new Integer(0);
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      Integer integer2 = new Integer((-2892));
      doubleKeyMap4.put(integer2, (Object) class1, (Map<String, Integer>) hashMap3);
      HashMap<String, Integer> hashMap4 = new HashMap<String, Integer>();
      doubleKeyMap3.put((Object) "", (Object) hashMap4, object0);
      assertFalse(hashMap0.equals((Object)hashMap2));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      doubleKeyMap0.remove("", "");
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer1 = new Integer(0);
      Map<String, Object> map0 = doubleKeyMap1.get(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      doubleKeyMap0.remove("", "[d,eJobUw1'%");
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer1 = new Integer(0);
      Map<String, Object> map0 = doubleKeyMap1.get(integer1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      doubleKeyMap0.get((Object) hashMap0, (String) null);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = new Object();
      doubleKeyMap0.put(object0, (String) null, "wrong proto type map ");
      doubleKeyMap1.put((Object) hashMap0, (Object) "", (Object) null);
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>();
      Object object1 = new Object();
      doubleKeyMap2.put((Object) null, "", object1);
      doubleKeyMap2.remove(object0, "");
      doubleKeyMap2.get((Object) null, "");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<String, Map<Map<String, Integer>, Integer>> hashMap2 = new HashMap<String, Map<Map<String, Integer>, Integer>>();
      DoubleKeyMap<String, Map<String, Integer>, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Map<String, Integer>, Integer>(hashMap2, class0);
      doubleKeyMap3.newMap();
      doubleKeyMap3.remove("wrong proto type map ", (Map<String, Integer>) hashMap1);
      Integer integer0 = new Integer((-1409));
      DoubleKeyMap<String, Map<String, Integer>, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Map<String, Integer>, Integer>(hashMap2);
      Integer integer1 = new Integer(0);
      doubleKeyMap4.put((String) null, (Map<String, Integer>) hashMap1, integer1);
      HashMap<Integer, Map<String, String>> hashMap3 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap5 = new DoubleKeyMap<Integer, String, String>(hashMap3, class0);
      Integer integer2 = new Integer(962);
      Map<String, String> map0 = doubleKeyMap5.remove(integer2);
      assertNull(map0);
  }
}
