/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:02:20 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1676.0), (-1676.0), 0.0, (-1676.0));
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1676.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-2185.130268472978);
      doubleArray2[1] = (-1009.2594155075574);
      doubleArray2[2] = (-2185.130268472978);
      doubleArray2[3] = (-2185.130268472978);
      doubleArray2[4] = (-1009.2594155075574);
      doubleArray2[5] = (-1009.2594155075574);
      doubleArray2[6] = (-2185.130268472978);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1676.0);
      doubleArray3[1] = (-1009.2594155075574);
      doubleArray3[2] = (-2185.130268472978);
      doubleArray3[3] = (-1009.2594155075574);
      doubleArray3[4] = (-1009.2594155075574);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1676.0);
      doubleArray4[2] = (-2185.130268472978);
      doubleArray4[3] = (-2185.130268472978);
      doubleArray4[4] = (-1676.0);
      doubleArray4[5] = (-2185.130268472978);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-1009.2594155075574);
      doubleArray0[5] = doubleArray6;
      dormandPrince853Integrator0.estimateError(doubleArray0, doubleArray5, (double[]) null, (-2185.130268472978));
      dormandPrince853Integrator0.setStepSizeControl(0.0, (-1676.0), (-2185.130268472978), (-1009.2594155075574));
      double double0 = dormandPrince853Integrator0.getSafety();
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-939.32), (-939.32), 0.0, 397.03985214270045);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 1.0700758858011432E108;
      double double1 = (-1789.711627799);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1789.711627799);
      doubleArray0[1] = 1.0700758858011432E108;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0700758858011432E108, (-1789.711627799), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxGrowth();
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      double double2 = 0.2;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(1.0700758858011432E108, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-108.084665715), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-108.084665715);
      doubleArray1[1] = (-1484.42);
      doubleArray1[2] = (-108.084665715);
      highamHall54Integrator0.vecRelativeTolerance = doubleArray1;
      doubleArray1[3] = (-1484.42);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1484.42), doubleArray0, doubleArray1);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter((EventHandler) null, filterType0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, (-108.084665715), (-108.084665715), 0);
      dormandPrince853Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-108.084665715), (-1484.42), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getOrder();
      double double0 = dormandPrince853Integrator0.getMinReduction();
      assertEquals(0.2, double0, 0.01);
      
      double[][] doubleArray2 = new double[5][5];
      double[] doubleArray3 = new double[0];
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = highamHall54Integrator0.vecRelativeTolerance;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = highamHall54Integrator0.vecRelativeTolerance;
      dormandPrince54Integrator0.estimateError(doubleArray2, doubleArray3, doubleArray3, (-108.084665715));
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 0.2;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 0.0, (-1904.2), 1163.2);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.setMinReduction(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-939.32), (-939.32), 397.03985214270045, 4368.493065073);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-2157.045974), doubleArray0, (-2511.58), doubleArray0);
      assertEquals(8, highamHall54Integrator0.getEvaluations());
      
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(1.0, 1.5627006743114285E-7, doubleArray0, doubleArray0);
      highamHall54Integrator1.setSafety((-2157.045974));
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 397.03985214270045;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      expandableStatefulODE1.computeDerivatives((-1.0), doubleArray0, doubleArray0);
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-970.9331707), (-914.9060750874), doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-914.9060750874));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1653.0775013, 10.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1653.0775013);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-412.0), 1.8048513285848406E-35, (-3096.3659740000003), 397.03985214270045);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-318.197856164763), doubleArray0, 1.8048513285848406E-35, doubleArray0);
  }
}
