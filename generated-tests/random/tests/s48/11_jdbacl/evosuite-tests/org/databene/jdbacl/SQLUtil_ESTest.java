/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:19:48 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.AlterTableNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.jdbc.JdbcConnection;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "selectsetncharacterstream(int, reader, ldng)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("selectsetncharacterstream(int, reader, ldng)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("CHECK ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "CHECK ";
      stringArray0[3] = "CHECK ";
      stringArray0[4] = "9/rm`aorR yx_Uc0:I";
      stringArray0[5] = "CHECK ";
      stringArray0[6] = "CHECK ";
      SQLUtil.innerJoin("CHECK ", stringArray0, "CHECK ", "eO|=0M<pYtilR3,E", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("select into", stringArray0);
      SQLUtil.normalize("`P/fE", true);
      Random.setNextRandom(420);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Wcs6;;9:dg", defaultDBTable0, 300, "omGnkTHLVAR%Y;Um");
      SQLUtil.substituteMarkers("8.0", "FOREIGN KEY (, , ) REFERENCES null(, , )", defaultDBColumn0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("select", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "(");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GsCygWU<'3";
      stringArray0[1] = "(";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      stringArray0[4] = "(";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("GsCygWU<'3 = 'GsCygWU<'3' AND ( = '(' AND select = 'select' AND select = 'select' AND ( = '('", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LINK";
      stringArray0[1] = "LINK";
      stringArray0[2] = "LINK";
      stringArray0[3] = "alter session";
      String string0 = SQLUtil.join("LINK", "alter session", stringArray0, "LINK", (String) null, stringArray0);
      assertEquals("LINK join LINK as null on alter session.LINK = null.LINK and alter session.LINK = null.LINK and alter session.LINK = null.LINK and alter session.alter session = null.alter session", string0);
      
      String string1 = SQLUtil.leftJoin("alter session", stringArray0, "rename", "org.postgresql.jdbc4.AbstractJdbc4Blob", stringArray0);
      assertEquals("left join rename as org.postgresql.jdbc4.AbstractJdbc4Blob on alter session.LINK = org.postgresql.jdbc4.AbstractJdbc4Blob.LINK and alter session.LINK = org.postgresql.jdbc4.AbstractJdbc4Blob.LINK and alter session.LINK = org.postgresql.jdbc4.AbstractJdbc4Blob.LINK and alter session.alter session = org.postgresql.jdbc4.AbstractJdbc4Blob.alter session", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("LINK");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-124);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      jdbcClob jdbcClob0 = new jdbcClob("k'56}6rE*R/Ul");
      jdbcClob0.getAsciiStream();
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = 1882.891;
      SQLUtil.renderNumber(streamTokenizer0);
      jdbcClob0.getAsciiStream();
      System.setCurrentTimeMillis(20000L);
      // Undeclared exception!
      try { 
        jdbcClob0.setAsciiStream((byte) (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "$p^D_-vc";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, stringArray0[0], false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("V7");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.renderValue((Object) null);
      SQLUtil.removeComments("null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "meK";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("meK", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder(42);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT null ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("n|");
      tableContainer0.getTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(3195);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("n|", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Bw+[9M;<1j]");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!1D>M>";
      stringArray0[1] = "!1D>M>";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "G?@", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("!1D>M>", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueConstraint0.toString();
      dBUniqueConstraint0.setTable(dBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bw+[9M;<1j]", dBTable0, (-501), "SELECT * FROM ");
      dBUniqueConstraint0.addColumnName("Error converting to character stream.");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLUtil.mutatesDataOrStructure("select intozb^sva+c{");
      SQLUtil.isProcedureCall("!1D>M>");
      SQLUtil.join("G?@", "SELECT * FROM ", stringArray0, "!1D>M>", "c'", stringArray0);
      SQLUtil.join("", "Bw+[9M;<1j]", stringArray0, "c'", "R@`lz/X", stringArray0);
      SQLUtil.leftJoin("org.h2.mess", stringArray0, "drop index", "c' as R@`lz/X on Bw+[9M;<1j].!1D>M> = R@`lz/X.!1D>M> and Bw+[9M;<1j].!1D>M> = R@`lz/X.!1D>M>", stringArray0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("_F)E-=+GeTX", true);
      String[] stringArray0 = new String[8];
      String string0 = "`=\\>K6";
      stringArray0[0] = "`=>K6";
      stringArray0[1] = "_F)E-=+GeTX";
      stringArray0[2] = "O;)hH+ze";
      stringArray0[3] = null;
      stringArray0[4] = "_F) E - =  + GeTX";
      stringArray0[5] = "_F) E - =  + GeTX";
      stringArray0[6] = "_F) E - =  + GeTX";
      stringArray0[7] = null;
      SQLUtil.leftJoin((String) null, stringArray0, "O;)hH+ze", "_F) E - =  + GeTX", stringArray0);
      SQLUtil.isProcedureCall("(Message ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-2163));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-2243L));
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema(" on ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e{rJ.gKhg`v'", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(38, "org.databene.jdbacl.SQLUtil");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e{rJ.gKhg`v'", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil.normalize("alter tableexec = 'exec'", true);
      String string0 = "Vd\"*,r!OS1";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("e{rJ.gKhg`v'", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete(38, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Qm'_&/OS", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Qm'_&/OS", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Qm'_&/OS PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "setNCharacterStream(int, Reader, long)";
      SQLUtil.isQuery("setNCharacterStream(int, Reader, long)");
      SQLUtil.normalize("setNCharacterStream(int, Reader, long)", false);
      int int0 = (-2011);
      DBDataType dBDataType0 = DBDataType.getInstance((-2011), "setNCharacterStream(int, Reader, long)");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("setNCharacterStream (int, Reader, long)", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      int int1 = (-64);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-64), (CharSequence) "setNCharacterStream(int, Reader, long)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -64
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "selectexec = '";
      stringArray0[1] = "'9{h:1B@P_66";
      stringArray0[2] = "selectexec = '";
      SQLUtil.join("'9{h:1B@P_66", "selectexec = '", stringArray0, "'9{h:1B@P_66", "42Y62", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("select");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      AlterTableNode alterTableNode0 = new AlterTableNode();
      TableDescriptor tableDescriptor0 = alterTableNode0.baseTable;
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors((TableDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("executegetcatalog", false, "executegetcatalog", "exec");
      dBCheckConstraint0.setDoc("exec");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint executegetcatalog", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string1 = SQLUtil.normalize("execute]ul\"=xz@^", true);
      assertEquals("execute ] ul \"=xz@^\"", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "exec";
      stringArray0[1] = "execute]ul\"=xz@^";
      stringArray0[2] = "check constraint executegetcatalog";
      stringArray0[3] = "exec";
      stringArray0[4] = "exec";
      stringArray0[5] = "executegetcatalog";
      stringArray0[6] = "executegetcatalog";
      stringArray0[7] = "execute ] ul \"=xz@^\"";
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(exec, execute]ul\"=xz@^, check constraint executegetcatalog, exec, exec, executegetcatalog, executegetcatalog, execute ] ul \"=xz@^\")", string2);
      
      String string3 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT executegetcatalog ", string3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "hu9Xm]ZN}1(4o";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("hu9Xm]ZN}1(4o", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "hu9Xm]ZN}1(4o", 32768, 32768);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 32768, end 32768, s.length() 14
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1996), "call");
      Integer integer0 = new Integer((-1438074770));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter index CALL(-1438074770) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1630), "DATE");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "]");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DBCatalog dBCatalog0 = new DBCatalog(">?X[\"}-T]", (Database) null);
      DBSchema dBSchema0 = new DBSchema("update7", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("WQ>2.wskC`5", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">?X[\"}-T]";
      defaultDBTable0.getCheckConstraints();
      stringArray0[1] = "&~Oi";
      dBCatalog0.addSchema(dBSchema0);
      stringArray0[2] = "VALUES";
      stringArray0[3] = ">?X[\"}-T]";
      stringArray0[4] = "java.lang.Object@257d50ab";
      dBSchema0.getTriggers();
      Object object1 = new Object();
      defaultDBTable0.equals(object1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "inner", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.mutatesStructure("inner");
      SQLUtil.renderColumnListWithTableName("inner", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("enter ");
      SQLUtil.normalize("inner", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-2058076526), "Nb^sjFa>t!<5$PPh");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v-$ti'tV/b*s(", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[2] = "call";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "call";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "call";
      stringArray1[1] = null;
      stringArray1[2] = "call";
      stringArray1[3] = null;
      stringArray1[4] = "$KVM.";
      stringArray1[5] = "call";
      stringArray1[6] = null;
      stringArray1[7] = "call";
      stringArray1[8] = "call";
      String string0 = SQLUtil.join((String) null, "call", stringArray0, stringArray0[3], stringArray0[4], stringArray1);
      assertEquals("null as null on call.call = null.call and call.call = null.null and call.call = null.call and call.null = null.null and call.null = null.$KVM. and call.call = null.call", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "Can not copy ";
      stringArray0[2] = "w3iS*";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(create unique index, Can not copy , w3iS*)", string0);
      
      String string1 = SQLUtil.normalize("'", false);
      assertEquals("''", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g4;aYP,[{#vV?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g4;aYP,[{#vV?");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g4;aYP,[{#vV?";
      stringArray0[1] = null;
      stringArray0[2] = "g4;aYP,[{#vV?";
      stringArray0[3] = null;
      stringArray0[4] = "CLOB";
      stringArray0[5] = "7&fGZ(Ux_";
      stringArray0[6] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g4;aYP,[{#vV?", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, dBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("CLOB");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("g4;aYP,[{#vV?", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(45);
      StringBuilder stringBuilder3 = stringBuilder2.append("]wgl)vpV(r-aSjyIld4");
      StringBuilder stringBuilder4 = stringBuilder3.append(false);
      StringBuilder stringBuilder5 = stringBuilder4.insert(45, (float) 45);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder5);
      assertEquals("CLOB and g4;aYP,[{#vV?45]wgl)vpV(r-aSjyIld4fa45.0lse", stringBuilder1.toString());
      assertEquals("CLOB and g4;aYP,[{#vV?45]wgl)vpV(r-aSjyIld4fa45.0lse", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{`q& Y,~XOEwV&,V");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{`q& Y,~XOEwV&,V";
      stringArray0[1] = "uCF*_$Z5I'LdcMeZ";
      stringArray0[2] = "{`q& Y,~XOEwV&,V";
      stringArray0[3] = "{`q& Y,~XOEwV&,V";
      stringArray0[4] = "uCF*_$Z5I'LdcMeZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "{`q& Y,~XOEwV&,V", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("uCF*_$Z5I'LdcMeZ", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, " DEFAULT ", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{`q& Y,~XOEwV&,V", dBTable0, (-132468551), "_8vV5+");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.leftJoin("_8VV5+", stringArray0, "{`q& Y,~XOEwV&,V.{`q& Y,~XOEwV&,V", "tm<xoaf.m", stringArray0);
      String string0 = "insert";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-132468551));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = Character.valueOf('[');
      SQLUtil.renderValue(character0);
      SQLUtil.substituteMarkers("org.databene.jdbacl.sql.parser.SQLParser$relational_expression_return", "ALTER TABLE ", "org.databene.jdbacl.sql.parser.SQLParser$relational_expression_return");
      VersionNumber versionNumber0 = VersionNumber.valueOf("create tablealter table");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("L{^/\ru>:!VyGN]O9o", "org.databene.jdbacl.sql.parser.SQLParser$relational_expression_return", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("ALTER TABLE ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'ALTER TABLE '
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize("Tcrg6c9pY*YY9y", true);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("exec", "Tcrg6c9pY * YY9y", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("Tcrg6c9pY * YY9y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'exec'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      SQLUtil.normalize("*/", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "*/");
      int int0 = 466;
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int1 = 152;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(466, charArray0, 152, 152);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 466
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "gD+W|ml\"-RSxVGU";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("gD+W|ml\"-RSxVGU");
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "gD+W|ml\"-RSxVGU", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string1 = "|c4\\ R#V;U2 -";
      int int0 = 10;
      String string2 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBConstraint dBConstraint0 = null;
      String string0 = "delete";
      int int0 = 1451;
      StringBuilder stringBuilder0 = new StringBuilder(1451);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("delete", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("delete", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        stringBuilder2.insert(4773, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4773
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isDDL("pqfh9j&(f");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("");
      SQLUtil.isProcedureCall("tGxs6:ll");
      SQLUtil.removeComments("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.normalize("org.h2.m", false);
      SQLUtil.mutatesDataOrStructure("tGxs6:ll");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2848), "BEFORE UPDATE");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", (DBTable) null, dBDataType0, integer0, integer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BEFORE UPDATE");
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis((-2848));
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream((-1L), (long) (-2848));
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter table");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter table";
      stringArray0[1] = "alter table";
      stringArray0[2] = "alter table";
      stringArray0[3] = "create materialized view5+7,ydo*;'ff@}1cecx";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[6] = "alter table";
      stringArray0[7] = "alter table";
      stringArray0[8] = "alter table";
      String string0 = SQLUtil.leftJoin("alter table", stringArray0, "alter table", "wP'QU7[$SFg/|h", stringArray0);
      assertEquals("left join alter table as wP'QU7[$SFg/|h on alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.create materialized view5+7,ydo*;'ff@}1cecx = wP'QU7[$SFg/|h.create materialized view5+7,ydo*;'ff@}1cecx and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table and alter table.alter table = wP'QU7[$SFg/|h.alter table", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(k";
      stringArray0[1] = ")Eo&c, (RdjB0g^*5s";
      stringArray0[2] = "CONSTRAINT ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("(k = '(k' AND )Eo&c, (RdjB0g^*5s = ')Eo&c, (RdjB0g^*5s' AND CONSTRAINT  = 'CONSTRAINT '", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S1000");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S1000", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("S1000", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-4246), "S1000");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = Integer.getInteger("org.firebirdsql.jca.FBManagedConnection", integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S1000", dBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("S1000", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("update");
      SQLUtil.isProcedureCall("42X17");
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/iKj?3BWpZ:`\"<";
      stringArray0[1] = "42X17";
      stringArray0[2] = ")";
      stringArray0[3] = "6";
      stringArray0[4] = "42X17";
      stringArray0[5] = "update";
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/iKj?3BWpZ:`\"<");
      StringBuilder stringBuilder1 = stringBuilder0.append((-885.212998388));
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'C';
      charArray0[2] = 'i';
      charArray0[3] = 'D';
      charArray0[4] = 'O';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 1275, 1275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("OXktbMl1EI");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.normalize("EW\"]qWamU@y", false);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchemas();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil sQLUtil0 = new SQLUtil();
      TableContainer tableContainer0 = new TableContainer("alter indextc&d|woc");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("catalog null", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(2873, "7br$j,B}");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7br$j,B}", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("?$|Xk!'e4", (DBTable) null, 2873, "BPceOCDb%2_");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("7br$j,B}, ?$|Xk!'e4", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "tC&d|wOc";
      SQLUtil.isDDL("tC&d|wOc");
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin((String) null, stringArray0, (String) null, (String) null, stringArray0);
      SQLUtil.isProcedureCall("(~==?o8NL|N0)?");
      SQLUtil.join(":FRJE:u;{sq$S5c@c-q", "exec", stringArray0, (String) null, "(~==?o8NL|N0)?", stringArray0);
      String string1 = "inner";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " DEFAULT ");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(" DEFAULT ", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("tC&d|wOc", stringBuilder1);
      int int0 = (-1104924719);
      int int1 = (-1120252655);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "inner", (-1104924719), (-1120252655));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1104924719, end -1120252655, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      stringArray0[4] = "select";
      SQLUtil.innerJoin("select", stringArray0, "select", " AND ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      int int0 = 889;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("/$l%B", defaultDBTable0, 889, "getBlob(int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      String string0 = null;
      int int0 = 978;
      DBDataType dBDataType0 = DBDataType.getInstance(978, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = "giAY{dNCD8n";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("WIN", (DBTable) null, 978, "giAY{dNCD8n");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("s>}Kb");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s>}Kb";
      stringArray0[1] = "Hto`t:i{_LQKA;";
      stringArray0[2] = "Hto`t:i{_LQKA;";
      stringArray0[3] = "Hto`t:i{_LQKA;";
      stringArray0[4] = "s>}Kb";
      stringArray0[5] = "Hto`t:i{_LQKA;";
      stringArray0[6] = "s>}Kb";
      stringArray0[7] = "s>}Kb";
      String string0 = SQLUtil.leftJoin("Hto`t:i{_LQKA;", stringArray0, "s>}Kb", "s>}Kb", stringArray0);
      assertEquals("left join s>}Kb as s>}Kb on Hto`t:i{_LQKA;.s>}Kb = s>}Kb.s>}Kb and Hto`t:i{_LQKA;.Hto`t:i{_LQKA; = s>}Kb.Hto`t:i{_LQKA; and Hto`t:i{_LQKA;.Hto`t:i{_LQKA; = s>}Kb.Hto`t:i{_LQKA; and Hto`t:i{_LQKA;.Hto`t:i{_LQKA; = s>}Kb.Hto`t:i{_LQKA; and Hto`t:i{_LQKA;.s>}Kb = s>}Kb.s>}Kb and Hto`t:i{_LQKA;.Hto`t:i{_LQKA; = s>}Kb.Hto`t:i{_LQKA; and Hto`t:i{_LQKA;.s>}Kb = s>}Kb.s>}Kb and Hto`t:i{_LQKA;.s>}Kb = s>}Kb.s>}Kb", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderValue((Object) null);
      String string0 = " WHERE ";
      SQLUtil.removeComments(" WHERE ");
      SQLUtil.isProcedureCall("null");
      String string1 = "execute(~==?o8nl|n0)?";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("execute(~==?o8nl|n0)?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~==?o8nl|n0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "K\"mE1R#?%}9`')JW";
      SQLUtil.join("K\"mE1R#?%}9`')JW", "R]!l", stringArray0, "drop table6~b>_knma#", "R]!l", stringArray0);
      SQLUtil.renderValue("K\"mE1R#?%}9`')JW");
      String string0 = "RAt\" y+,<V`,\">";
      SQLUtil.parseColumnTypeAndSize("RAt\" y+,<V`,\">");
      String string1 = "@z(*Y";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("@z(*Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: @z(*Y
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "exec";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.substituteMarkers("Ql~`I", "exec", "exec = 'exec'");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec = 'exec'");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("h;wQg`hBQ-Ql0.kg/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("h;wQg`hBQ-Ql0.kg/");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "-tcpDaemon";
      stringArray0[2] = null;
      stringArray0[3] = "h;wQg`hBQ-Ql0.kg/";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        SQLUtil.isDML(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(20L);
      SQLUtil.normalize("Z 8E(.Cw;<,G~$hU", true);
      SQLUtil.mutatesDataOrStructure("2200H.S");
      String string0 = "NIkk";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Z 8E(.Cw;<,G~$hU", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NIkk", dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("$/F9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter table43y16.u";
      stringArray0[1] = "alter table43y16.u";
      stringArray0[2] = "alter table43y16.u";
      stringArray0[3] = "alter table43y16.u";
      stringArray0[4] = "alter table43y16.u";
      stringArray0[5] = "U$+wUPA6A#tsP=eXKJ";
      stringArray0[6] = "alter table43y16.u";
      SQLUtil.renderColumnListWithTableName("alter table43y16.u", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "yZ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("yZ", stringArray0, "alter table43y16.u", "org.apache.derby.impl.sql.compile.AccessPathImpl", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1757;
      Random.setNextRandom(1757);
      String string0 = "- ";
      SQLUtil.isDML("- ");
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      int int1 = (-444477136);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-444477136), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -444477136
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "drop table43y16.u";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop table43y16.u";
      stringArray0[1] = "*(FqlY^+U";
      stringArray0[2] = "*(FqlY^+U";
      stringArray0[3] = "*(FqlY^+U";
      stringArray0[4] = "drop table43y16.u";
      stringArray0[5] = "*(FqlY^+U";
      stringArray0[6] = "},x(visA";
      stringArray0[7] = "drop table43y16.u";
      stringArray0[8] = "drop table43y16.u";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop table43y16.u", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("*(FqlY^+U", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBDataType.getInstance(90, "drop table43y16.u");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      try { 
        Integer.decode("alter in");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"alter in\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "k?";
      SQLUtil.normalize("k?", false);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection("alter materialized view", (Properties) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value \"alter materialized view\" for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("7");
      SQLUtil.isProcedureCall("42X17");
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fIr(~GDB=BNdP5(dc(H");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/iKj?3BWpZ:`\"<";
      stringArray0[1] = "42X17";
      stringArray0[2] = "fIr(~GDB=BNdP5(dc(H";
      stringArray0[3] = "6";
      stringArray0[4] = "42X17";
      stringArray0[5] = "7";
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/iKj?3BWpZ:`\"<");
      StringBuilder stringBuilder1 = stringBuilder0.append((-885.212998388));
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'C';
      charArray0[2] = 'i';
      charArray0[3] = 'D';
      charArray0[4] = 'O';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 1262, 1262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "insertpmv");
      String string0 = "-K0:YDNJ'00<";
      String string1 = "inner";
      String string2 = "insert";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-K0:YDNJ'00<", false, "inner", "insert");
      String string3 = "/k,z\\\"39";
      dBCheckConstraint0.setName("/k,z\"39");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "inner";
      stringArray0[1] = "CONSTRAINT /k,z\"39 CHECK insert";
      SQLUtil.innerJoin("insertpmv", stringArray0, "^EkpIPc", "insert", stringArray0);
      SQLUtil.substituteMarkers("select into@x]", "insertpmv", nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("select into@x]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'select into@x]' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "drop materialized view";
      DBSequence dBSequence0 = new DBSequence("create materialized view", "drop materialized view", "43X47.U");
      SQLUtil.ownerDotComponent(dBSequence0);
      String string1 = "6ms,;`|l|";
      DBSchema dBSchema0 = new DBSchema("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6ms,;`|l|", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
