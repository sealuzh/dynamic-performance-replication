/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 22:39:18 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("1.2.46");
      jSONArray0.getComponentType();
      jSONArray0.size();
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      JSON.DEFAULT_TYPE_KEY = "@type";
      JSON.defaultLocale = jSONArray0.defaultLocale;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      jSONArray0.iterator();
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((byte) (-94));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -94
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      jSONArray0.iterator();
      jSONArray0.getBooleanValue((byte)63);
      jSONArray0.getSqlDate(0);
      jSONArray0.iterator();
      jSONArray0.getObject(1224, (Type) null);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.getShortValue(3176);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -100
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      Type type0 = jSONArray0.componentType;
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      jSONArray0.iterator();
      jSONArray0.getBooleanValue(3176);
      jSONArray0.getSqlDate(3152);
      jSONArray0.iterator();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("GuBu<9*'M(");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      jSONArray0.iterator();
      jSONArray0.getBooleanValue(1224);
      jSONArray0.getSqlDate(0);
      jSONArray0.iterator();
      jSONArray0.getObject(3167, (Type) parameterizedTypeImpl0);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.getDoubleValue(3172);
      short short0 = jSONArray0.getShortValue(3169);
      assertEquals(3177, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("1.2.46");
      Type type0 = jSONArray0.componentType;
      jSONArray0.size();
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.getBooleanValue(0);
      jSONArray0.getFloat(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Byte byte0 = new Byte((byte) (-25));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      JSONObject jSONObject0 = new JSONObject(372, true);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(3169);
      jSONArray3.fluentRetainAll(jSONArray2);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.and(predicate0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("1.2.46");
      Type type0 = jSONArray0.componentType;
      jSONArray0.size();
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      byte byte0 = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Byte byte1 = new Byte((byte) (-94));
      jSONArray0.set(3143, (Object) null);
      Integer integer0 = new Integer(3176);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((int) (byte)63, (Object) integer0);
      int int0 = 2188;
      jSONArray1.getSqlDate(2188);
      jSONArray1.iterator();
      jSONArray1.getBooleanValue(1568);
      jSONArray1.getSqlDate((byte)63);
      jSONArray0.fluentRemove((Object) null);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseBigDecimal;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      System.setCurrentTimeMillis((-2196L));
      Integer integer0 = new Integer(989);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = JSON.toJSON((Object) integer0, parserConfig0);
      jSONArray0.add(object0);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-1250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      jSONArray0.iterator();
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType1).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType1);
      jSONArray0.getInteger((byte)0);
      JSONType jSONType2 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType2).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class1, jSONType2);
      jSONArray0.getByteValue(3176);
      jSONArray0.getObject(3171, (Type) null);
      jSONArray0.getLong(3143);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3176, (Type) class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.serializer.SerializerFeature
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(381, (Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      jSONArray0.getBoolean(247);
      assertEquals(382, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      jSONArray0.iterator();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.getBoolean(3176);
      assertEquals(3177, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      Integer integer1 = new Integer(989);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getByteValue(102);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("~QMoD-\"A^KOBQ}teNeJ", treeMap0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      jSONArray2.isEmpty();
      boolean boolean0 = jSONArray2.containsAll(jSONArray1);
      assertEquals(3040, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "0&wVXDvV@{A";
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte) (-94));
      jSONArray0.set((byte)70, byte0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -94
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SerializerFeature> class0 = SerializerFeature.class;
      List<SerializerFeature> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.containsAll(list0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray1.fluentClear();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3089);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream1);
      Integer integer0 = new Integer(1027);
      try { 
        dataInputStream1.readBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      System.setCurrentTimeMillis(1615L);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONArray0.getFloat(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONArray0.lastIndexOf((Object) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("@type");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte byte0 = (byte)70;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 3176;
      Byte byte1 = new Byte((byte) (-94));
      jSONArray0.set(3176, byte1);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      jSONArray0.getSqlDate((byte)70);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      jSONArray0.getInteger(3176);
      int int1 = (-1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        mockFileInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte) (-25));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1386), 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      jSONArray0.set((byte)70, bufferedInputStream0);
      Class<SerializeConfig> class0 = SerializeConfig.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Integer integer0 = new Integer((-1757));
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((byte)70);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Integer integer0 = new Integer((-505));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.listIterator();
      MockDate mockDate0 = new MockDate(528, 1002, (-505), 528, 528, 3038);
      byte[] byteArray0 = new byte[6];
      JSONArray jSONArray1 = jSONArray0.fluentAdd(1255, (Object) mockDate0);
      byteArray0[1] = (byte)36;
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte)44;
      jSONArray0.isEmpty();
      jSONArray0.getInteger((byte)44);
      jSONArray1.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1255);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 528;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Integer integer0 = new Integer((-505));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.listIterator();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray1.add((Object) sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -505
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JSON.parseArray("", class0);
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte) (-25));
      jSONArray0.set(3176, byte0);
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) byte0);
      jSONArray2.getByte(0);
      int int0 = 3023;
      // Undeclared exception!
      try { 
        jSONArray0.subList(29, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(29) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      jSONArray0.getFloat(0);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1054), (-1054));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1054
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      assertTrue(jSONArray0.isEmpty());
      
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      jSONArray0.get(0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) pipedOutputStream0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      System.setCurrentTimeMillis(3089);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3089);
      jSONArray0.add(0, (Object) null);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      jSONArray0.lastIndexOf((Object) null);
      System.setCurrentTimeMillis(3089);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      List<PipedInputStream> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -897
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      jSONArray0.set(3089, integer0);
      jSONArray0.getTimestamp(3089);
      jSONArray0.getFloatValue(989);
      jSONArray0.getLongValue(3089);
      jSONArray0.getDate(1519);
      jSONArray0.getString(989);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      Byte byte0 = new Byte((byte) (-56));
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      LinkedList<SerializeConfig> linkedList1 = new LinkedList<SerializeConfig>();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(517);
      jSONArray0.size();
      System.setCurrentTimeMillis(0);
      jSONArray0.add((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(517);
      jSONArray0.size();
      System.setCurrentTimeMillis(0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<SerializerFeature> linkedList0 = new LinkedList<SerializerFeature>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap0.clone();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("!y<<'\"`", hashMap0);
      Class<Byte> class1 = Byte.class;
      ParserConfig.getFieldFromCache("set", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class1, class1, (Field) null, (-948), (-948), (-948));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONField jSONField0 = mock(JSONField.class, new ViolatedAssumptionAnswer());
      FieldInfo fieldInfo1 = new FieldInfo("@type", class0, class1, parameterizedTypeImpl0, (Field) null, (-948), (-948), 3089);
      BeanContext beanContext1 = new BeanContext(class0, fieldInfo1);
      beanContext1.getBeanClass();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.setComponentType(parameterizedTypeImpl0);
      boolean boolean0 = jSONArray0.contains("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(517);
      jSONArray0.size();
      System.setCurrentTimeMillis(0);
      jSONArray0.add((Object) null);
      jSONArray0.getByte(0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.subList(0, (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2147483647)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer[] integerArray0 = new Integer[0];
      jSONArray0.toArray(integerArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      // Undeclared exception!
      try { 
        JSON.handleResovleTask((DefaultJSONParser) null, serializerFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<SerializerFeature> linkedList0 = new LinkedList<SerializerFeature>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.setRelatedArray(sequenceInputStream0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      concurrentSkipListMap0.clone();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("!y<<'\"`", hashMap0);
      jSONArray1.setComponentType(class0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 528;
      Integer integer0 = new Integer(989);
      jSONArray0.set(528, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 529
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      byte byte0 = (byte)70;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte1 = new Byte((byte) (-25));
      jSONArray0.set(3176, byte1);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      LinkedList<SerializeConfig> linkedList0 = new LinkedList<SerializeConfig>();
      jSONArray0.getSqlDate(3002);
      jSONArray0.iterator();
      jSONArray0.get(488);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((byte) (-25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -25
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(528, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      int int0 = 1002;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 529
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JSONArray> class0 = JSONArray.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      jSONArray0.componentType = (Type) class0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.set(3007, class0);
      jSONArray0.getDouble(149);
      jSONArray0.isEmpty();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = new JSONArray(3007);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentSet(652, jSONArray1);
      jSONArray2.getByte((byte)0);
      jSONArray0.getShortValue(2736);
      jSONArray2.addAll((Collection<?>) jSONArray0);
      jSONArray2.retainAll(jSONArray1);
      jSONArray2.removeAll(jSONArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1883);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      jSONArray0.set(652, pushbackInputStream0);
      assertEquals(653, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      Integer integer1 = new Integer(3038);
      jSONArray0.getDate(1002);
      jSONArray0.getShortValue(528);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.getJSONObject(528);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3089, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3039
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      Integer integer1 = new Integer(3038);
      int int0 = 1002;
      jSONArray0.getDate(1002);
      jSONArray0.getShortValue(528);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.getJSONObject(528);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3039
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-528));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      JSONArray jSONArray1 = jSONArray0.fluentAdd(1255, (Object) null);
      byteArray0[1] = (byte)36;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONArray1.getSqlDate(528);
      jSONArray1.iterator();
      jSONArray1.remove(23);
      int int0 = jSONArray0.size();
      assertEquals(3039, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-528));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.toJSON((Object) integer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      stringArray0[4] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.setComponentType((Type) null);
      jSONArray1.getIntValue(3038);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(99999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99999999, Size: 3039
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      byte[] byteArray0 = new byte[16];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      byteArray0[1] = (byte) (-122);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      JSON.parse(byteArray0, featureArray0);
      byteArray0[2] = (byte)9;
      JSON.toJSON((Object) fileSystemHandling0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.getIntValue((byte)9);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(65);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      Integer integer1 = new Integer(3038);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jSONArray0.getSqlDate(53);
      jSONArray0.iterator();
      jSONArray0.remove((int) (byte)78);
      assertEquals(3038, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-528));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      JSONArray jSONArray1 = jSONArray0.fluentAdd(1255, (Object) null);
      byteArray0[1] = (byte)36;
      // Undeclared exception!
      try { 
        jSONArray1.toArray((SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      jSONArray0.getObject(0, class1);
      jSONArray0.getJSONArray(0);
      jSONArray0.getShort(1002);
      jSONArray0.getBooleanValue(1);
      short short0 = jSONArray0.getShortValue(191);
      assertEquals(3039, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      Integer integer1 = new Integer(3038);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) class1);
      jSONArray0.getBigInteger((byte)70);
      jSONArray0.getShortValue(0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3806);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3806, Size: 3039
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray1 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      Integer integer0 = new Integer(3003);
      JSON.toJSON((Object) integer0, serializeConfig0);
      serializeConfig0.setTypeKey("v");
      JSONArray jSONArray2 = jSONArray1.fluentSet((-1), "v");
      jSONArray2.isEmpty();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray2.set((byte)0, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 528;
      Integer integer0 = new Integer((-528));
      jSONArray0.set(3038, integer0);
      int int1 = 2194;
      jSONArray0.getTimestamp(2194);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3038);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray1.containsAll(jSONArray0);
      jSONArray1.set(989, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      byte[] byteArray0 = new byte[16];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      byteArray0[1] = (byte) (-122);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-36);
      JSON.parse(byteArray0, (Feature[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.getIntValue((byte)9);
      // Undeclared exception!
      try { 
        jSONArray0.add((-656), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -656, Size: 66
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) class1);
      jSONArray0.getBigInteger((byte)70);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 176;
      jSONArray0.set(176, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      jSONArray0.set(3007, class0);
      jSONArray0.getDouble(149);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(652, jSONArray0);
      jSONArray1.getByte((byte)0);
      jSONArray0.getShortValue(2736);
      jSONArray0.getLong(989);
      jSONArray1.addAll(161, (Collection<?>) jSONArray0);
      assertEquals(6016, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      jSONArray0.getLongValue(528);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byte byte0 = (byte)78;
      JSONObject[] jSONObjectArray0 = new JSONObject[0];
      // Undeclared exception!
      try { 
        jSONArray0.toArray(jSONObjectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      Class<JSONArray> class0 = JSONArray.class;
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-1);
      jSONArray0.set((-1), class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(598);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 598, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JSONArray> class0 = JSONArray.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.set(3007, class0);
      jSONArray0.getDouble(149);
      jSONArray0.remove((Object) null);
      JSONArray jSONArray1 = new JSONArray(3007);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentSet(652, jSONArray1);
      jSONArray1.setRelatedArray(jSONArray2);
      assertEquals(3007, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JSONArray> class0 = JSONArray.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.set(3007, class0);
      jSONArray0.getDouble(149);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray(3007);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentSet(652, jSONArray1);
      jSONArray2.getByte((byte)0);
      assertEquals(3008, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      Integer integer0 = new Integer(989);
      jSONArray0.set(3083, integer0);
      jSONArray0.getFloatValue(3083);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        uTF8Decoder0.detectedCharset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(528, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -507
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      Properties properties0 = new Properties();
      Collection<Object> collection0 = properties0.values();
      jSONArray0.fluentRemoveAll(collection0);
      JSONArray jSONArray1 = new JSONArray(88);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byte byte0 = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byte byte1 = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      jSONArray0.getLong(1642);
      jSONArray0.getDouble(0);
      // Undeclared exception!
      try { 
        jSONArray0.remove((int) (byte) (-108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      int int0 = 1002;
      jSONArray0.getDate(1002);
      jSONArray0.isEmpty();
      jSONArray0.getInteger(528);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((byte) (-62));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -62
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(1002, "@type");
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1002, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.BufferedInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.retainAll(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.set((-1), (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((byte) (-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3051, integer0);
      Integer integer1 = new Integer(3051);
      jSONArray0.getDate(3051);
      jSONArray0.isEmpty();
      jSONArray0.getShortValue(528);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.getJSONObject(528);
      assertEquals(3052, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray1.toJSONString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-497);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -497
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.size();
      System.setCurrentTimeMillis(989);
      jSONArray0.add((Object) "0&wVXDvV@{A");
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      jSONArray0.getObject(3002, (Type) class0);
      jSONArray0.toArray();
      jSONArray0.getDoubleValue(1647);
      Class<Field> class1 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      Integer integer0 = new Integer(1709);
      jSONArray0.set(2417, (Object) null);
      jSONArray0.getLongValue(0);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(1281);
      jSONArray0.getFloat(1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 65);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2419
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.retainAll(list0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      byteArray0[1] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.set(3007, class0);
      jSONArray0.getDouble(149);
      JSONArray jSONArray1 = new JSONArray(0);
      jSONArray0.fluentSet(652, jSONArray1);
      assertEquals(3008, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-122);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-36);
      JSON.parse(byteArray0, (Feature[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      jSONArray0.getIntValue((byte)9);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((byte) (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -40
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.getShortValue((byte)44);
      jSONArray0.getString(3038);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "4D-.!&:`.+L_/G^pX");
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-1923), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(989, integer0);
      jSONArray0.getLongValue(505);
      jSONArray0.getDate(505);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(505);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray1.setRelatedArray((Object) null);
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      Integer integer0 = new Integer(1709);
      jSONArray0.set(2417, (Object) null);
      jSONArray0.getLongValue(0);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(1281);
      jSONArray0.getFloat(1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 65);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.add(986, (Object) null);
      assertEquals(2420, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, serializeConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet((-1), jSONArray1);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray1.fluentAdd((Object) jSONArray2);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("writeFieldValueStringWithDoubleQuoteCheck", treeMap0);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getLong((-1691));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1691
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(989, integer0);
      jSONArray0.getLongValue(505);
      jSONArray0.getDate(505);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(505);
      Integer integer1 = new Integer((-507));
      jSONArray0.indexOf(integer1);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      jSONArray0.indexOf((Object) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) class1);
      jSONArray0.equals((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-507));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -507
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getShort(1);
      boolean boolean0 = jSONArray0.getBooleanValue(189);
      assertEquals(3039, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      jSONArray0.getShort(3038);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(989, integer0);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(528);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(528);
      jSONArray0.getFloat(528);
      int int0 = 8233;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream((InputStream) null, (-386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      long long0 = new Integer(3038);
      jSONArray0.getDate(1002);
      jSONArray0.isEmpty();
      jSONArray0.getShortValue(528);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.getJSONObject(528);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) bufferedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getShort((byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((int) (byte)46, (Object) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3038, (byte)46);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 54);
      int int0 = jSONArray1.indexOf(pushbackInputStream1);
      assertEquals(3040, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-122);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-36);
      JSON.parse(byteArray0, (Feature[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      int int0 = jSONArray0.getIntValue((byte)9);
      assertEquals(66, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getShortValue(528);
      jSONArray0.getString(1);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.contains((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Type type0 = jSONArray1.componentType;
      JSONArray jSONArray2 = jSONArray1.fluentSet(40, (Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray1);
      jSONArray3.getObject(3089, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parseObject("UJd/wd+>UWtKe>~0P|", (Type) null, parserConfig0, 3089, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : UJd/wd+>UWtKe>~0P|
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      jSONArray0.set(3028, pipedInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-39);
      JSON.parse(byteArray0, (Feature[]) null);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.getBigDecimal(0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) class1);
      jSONArray0.equals((Object) null);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[2] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<BufferedInputStream, InputStream> concurrentHashMap0 = new ConcurrentHashMap<BufferedInputStream, InputStream>();
      Enumeration<InputStream> enumeration0 = concurrentHashMap0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.set((byte)0, sequenceInputStream0);
      Class<Field> class1 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((int)  (-63), (Type) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      jSONArray0.getString(1453);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-507));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -507
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.getLongValue(528);
      jSONArray0.getDate(1002);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.set(0, (Object) null);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) null);
      assertEquals(3039, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3412);
      jSONArray0.toJSONString();
      int int0 = 507;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 507);
      jSONArray0.fluentSet(1098, bufferedInputStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      jSONArray1.fluentSet(3089, jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_asm_prefix__";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "";
      stringArray0[8] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Asia/Aden
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(53);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject jSONObject0 = new JSONObject(53, true);
      Class<String> class0 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, class0, (Field) null, (-2249), 59, 3089);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1152, (Object) null);
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(fieldInfo0.alternateNames);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.setComponentType(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3089);
      jSONArray0.fluentAdd(1052, (Object) pushbackInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-3035), (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3035, Size: 1154
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_asm_prefix__";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "";
      stringArray0[8] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.setComponentType((Type) null);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(1, (Object) jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(2504, (Collection<?>) jSONArray1);
      byte[] byteArray0 = new byte[2];
      jSONArray4.fluentRemove(3089);
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      jSONArray4.fluentAdd(3089, (Object) pushbackInputStream0);
      jSONArray4.fluentAddAll(3089, (Collection<?>) jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray4.getDate((-746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -746
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_asm_prefix__";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "";
      stringArray0[8] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.setComponentType((Type) null);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(1, (Object) jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(2504, (Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getLongValue(3044);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Asia/Khandyga
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1480), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1480, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-585), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(240, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 240, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1707
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      int int0 = 10;
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Field> class0 = Field.class;
      jSONArray0.toJavaList(class0);
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(3028);
      jSONArray0.add((Object) "@type");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-2412));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2412
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.parallelStream();
      boolean boolean0 = jSONArray0.remove((Object) stream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 989);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      jSONArray0.lastIndexOf(stream0);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      int int0 = 28;
      jSONArray0.spliterator();
      int int1 = 4;
      // Undeclared exception!
      try { 
        jSONArray0.subList(2875, 343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 343
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-507));
      jSONArray0.set(3038, integer0);
      jSONArray0.getFloatValue(528);
      jSONArray0.remove(528);
      assertEquals(3038, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      boolean boolean0 = jSONArray2.equals(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("not match ", concurrentHashMap0);
      jSONArray0.equals((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(4211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4211, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray1.contains(jSONArray0);
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(27, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(27);
      jSONArray0.fluentRemoveAll(jSONArray1);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      JSON.defaultTimeZone = jSONArray1.defaultTimeZone;
      Type[] typeArray0 = new Type[3];
      Object object0 = jSONArray1.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = jSONArray0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1895));
      jSONArray0.indexOf(integer0);
      jSONArray0.iterator();
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1018);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1018, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, serializeConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet((-1), jSONArray1);
      jSONArray2.getJSONArray(0);
      assertEquals(1, jSONArray1.size());
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Stream<Object> stream0 = jSONArray1.stream();
      boolean boolean0 = jSONArray1.contains(stream0);
      assertFalse(boolean0);
      
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1748), 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1748
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2410;
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-2251));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2251
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-807);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -807
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(6, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd((-122), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -122, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "v:*z{=Nkz~%?f";
      // Undeclared exception!
      try { 
        jSONArray0.add(1, (Object) "v:*z{=Nkz~%?f");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, serializeConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet((-1), jSONArray1);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(1, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("0&wVXDvV@{A");
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) jSONArray1, serializeConfig0, serializerFeatureArray0);
      jSONArray0.fluentRetainAll(jSONArray1);
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", hashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(456);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(456, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 456, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getIncludes();
      jSONArray0.removeAll(set0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(8064);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8064, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1722));
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1722));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1722
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      Integer integer0 = new Integer(989);
      boolean boolean1 = jSONArray0.contains(integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      jSONArray1.add((Object) "@type");
      // Undeclared exception!
      try { 
        jSONArray0.get((-147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -147
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[7];
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-3199));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3199
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray2.set((-1253), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.add((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      ParserConfig parserConfig0 = new ParserConfig();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray2);
      jSONArray1.remove((Object) jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-32746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32746
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        JSON.parseArray("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      int int0 = (-2183);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-2183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2183
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(65, "@type");
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 37;
      JSONArray jSONArray0 = new JSONArray(37);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(554);
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray0.clone();
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      byte byte0 = (byte) (-109);
      // Undeclared exception!
      try { 
        jSONArray0.subList((byte) (-109), (byte) (-37));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -109
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray((String) null, class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 3702;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3702);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 922, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1156));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray1);
      Integer integer0 = new Integer(989);
      jSONArray1.getComponentType();
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportAutoType;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowISO8601DateFormat;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableFieldSmartMatch;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseBigDecimal;
      featureArray0[7] = feature7;
      JSON.parseObject("", (Type) null, (-9), featureArray0);
      jSONArray0.remove((Object) null);
      jSONArray1.fluentRemove((Object) "@type");
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray0.clone();
      Integer integer1 = new Integer(3089);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONArray");
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -803
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(3089);
      jSONArray1.clone();
      Integer integer0 = new Integer(1391);
      SerializeConfig serializeConfig0 = new SerializeConfig(937);
      JSON.toJSON((Object) null, serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-223));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      int int1 = 568;
      // Undeclared exception!
      try { 
        jSONArray4.getShort(3578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3578, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      double double0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray1.getString(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue((-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(37);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONArray0.setRelatedArray(linkedList0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) jSONArray1, serializeConfig0, 37, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = new JSONArray(989);
      jSONArray2.clone();
      JSONArray jSONArray3 = jSONArray0.fluentSet(989, jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(3056);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3056, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(37);
      jSONArray0.toArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      double double0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue((-3660));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3660
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-861);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-861), "@type");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      jSONArray0.listIterator(0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.parallelStream();
      jSONArray0.clone();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.clone();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(989, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray2.sort(comparator0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(1490);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1490, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(176);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 176, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray3.fluentClear();
      int int1 = 568;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      jSONArray3.clear();
      // Undeclared exception!
      try { 
        JSON.parse("@type", parserConfig0, 3041);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) null, 3089, serializerFeatureArray0);
      jSONArray0.remove((Object) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((-471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -471
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 0;
      String string0 = "timezoneOffset";
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONArray jSONArray3 = new JSONArray();
      JSONArray jSONArray4 = jSONArray2.fluentAdd((Object) jSONArray3);
      JSON.parse("", parserConfig0);
      jSONArray4.fluentRemove((Object) null);
      jSONArray4.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray2.toArray();
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getString(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(191);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 191, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator(0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1926
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject jSONObject0 = new JSONObject(0, true);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_asm_prefix__";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "@type";
      stringArray0[6] = "@type";
      stringArray0[7] = "";
      stringArray0[8] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray1.setComponentType((Type) null);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(1, (Object) jSONArray1);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(2504, (Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray4.getDate((-746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -746
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2394);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      Object[] objectArray0 = jSONArray2.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 2605;
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(2605);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2605, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.fluentClear();
      Object[] objectArray0 = jSONArray1.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "com.alibaba.fastjson.JSONArray";
      stringArray0[1] = "&J~~";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "getClass";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(list0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-3019));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      jSONArray0.add((Object) "@type");
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) serializerFeature0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator(0);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray3.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(568, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 568, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "com.alibaba.fastjson.JSONArray";
      stringArray0[1] = "&J~~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "getClass";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = 3043;
      int int1 = 334;
      JSONArray[] jSONArrayArray0 = new JSONArray[1];
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3043);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3043, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(789);
      JSONArray jSONArray1 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-1149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1149
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(3217);
      jSONObject0.getJSONArray("o;~^bf{[K`5R$");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(795);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.listIterator(0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.SortField;
      serializerFeatureArray0[7] = serializerFeature7;
      int int1 = 1536;
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2883), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2883, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentRemove((Object) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)109;
      Class<JSONObject> class0 = JSONObject.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(11);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.NonStringKeyAsString;
      featureArray0[2] = feature2;
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "com.alibaba.fastjson.JSONArray";
      stringArray0[1] = "&J~~";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      stringArray0[4] = "getClass";
      stringArray0[5] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues("com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray0 = new JSONArray(list0);
      int int0 = 3043;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(335);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 335, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray0.fluentRetainAll(jSONArray1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowUnQuotedFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowComment;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowSingleQuotes;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.IgnoreAutoType;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.CustomMapDeserializer;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableFieldSmartMatch;
      featureArray0[8] = feature8;
      JSON.parse(byteArray0, 0, 0, charsetDecoder0, featureArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSON.toJSON((Object) null, serializeConfig0);
      byteArray0[2] = (byte) (-98);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (int) (byte)71, 3089, (CharsetDecoder) uTF8Decoder1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-522);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[9];
      JSON.parse("", 0);
      jSONArray0.toArray((Object[]) stringArray0);
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      jSONObject0.getJSONArray("o;~^bf{[K`5R$");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>();
      Collection<Integer> collection0 = concurrentSkipListMap0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      jSONArray1.fluentRemoveAll(jSONArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byte byte1 = (byte)107;
      byteArray0[1] = (byte)107;
      byte byte2 = (byte)0;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(789);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(789);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 789, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      Class<Integer> class0 = Integer.class;
      String string0 = "h>eu$qKGR&[\"VP!NQ;";
      String string1 = "iH)";
      // Undeclared exception!
      try { 
        jSONArray2.remove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = (-1022);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1022
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-59);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-59), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = ";hDB4YrFk;}ay/KwI";
      int int0 = (-2394);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-2394));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2394
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializeConfig serializeConfig0 = new SerializeConfig(1691);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      Class<Annotation> class0 = Annotation.class;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      serializeConfig0.config(class0, serializerFeature2, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      JSON.toJSONBytes((Object) jSONArray1, serializeConfig0, 989, serializerFeatureArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(object0);
      jSONArray2.addAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      jSONArray0.fluentAdd((Object) integer0);
      String string0 = "|";
      Type[] typeArray0 = new Type[3];
      Class<Object> class0 = Object.class;
      String string1 = "kZW:b!uQ!SeH";
      Method method0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }
}
