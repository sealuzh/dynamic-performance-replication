/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:07:15 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayDeque;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) bufferCapabilities0, (Object) bufferCapabilities0);
      ParseContext parseContext2 = defaultJSONParser0.setContext((ParseContext) null, (Object) classLoader0, (Object) imageCapabilities0);
      assertNotSame(parseContext2, parseContext1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ", parserConfig0, (-1935));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Bxf?{n*n4\"j\"?R5-1", (-937));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XMe+ydRof^M&QlxGvsU", 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, jSONLexer0.pos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|>)~/1J:C]e;CU");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) decimalFormat0, (Object) decimalFormat0);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 13);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.setDateFormat("");
      assertEquals("", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TOPkI");
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.config(feature0, true);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/_Yg{i/.oy}6", parserConfig0, (-1452));
      TreeMap<BigInteger, Long> treeMap0 = new TreeMap<BigInteger, Long>();
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Long long0 = new Long((byte)57);
      treeMap0.put(bigInteger0, long0);
      defaultJSONParser0.checkMapResolve(treeMap0, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#Fil%#", parserConfig0, (-2723));
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-440), 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("- MaHVd^Q&@Y,(ibR", parserConfig0, 2488);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sX[&U");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 15, parserConfig0, 3018);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dimension dimension0 = new Dimension(15, (-1414));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t{JTJe:W(", (-1414));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(dimension0, jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0T)iL2mf4", parserConfig0);
      TreeMap<RenderingHints, DecimalFormatSymbols> treeMap0 = new TreeMap<RenderingHints, DecimalFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, json : 0T)iL2mf4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TOPkI");
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("v");
      Class<Boolean> class0 = Boolean.TYPE;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : v
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XMe+ydRof^M&QlxGvsU", 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParserConfig parserConfig1 = defaultJSONParser0.getConfig();
      assertSame(parserConfig0, parserConfig1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "syntax error : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName syntax error : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, 48);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("AllowArbitraryCommas", parserConfig0, 1900);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1900, "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(simpleTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/_Yg{i/.oy}6", parserConfig0, (-1452));
      defaultJSONParser0.handleResovleTask("{Z/_Yg{i/.oy}6");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(list0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal ref, ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONScanner0, parserConfig0);
      defaultJSONParser0.resolveReference("");
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.setContext((Object) "unterminated json string, ", (Object) "unterminated json string, ");
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1479);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 13);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("- MaHVd^Q&@Y,(ibR", parserConfig0, 2488);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("({cA/~A*KU <{gz)", 25);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.accept(10);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" 7ob}{(s", parserConfig0, 12);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (byte)30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";v]cfyxy?q&+!");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;v]cfyxy?q&+!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      GridBagConstraints gridBagConstraints0 = defaultJSONParser0.parseObject((Type) null, (Object) "@");
      assertNull(gridBagConstraints0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":lI&?#.QI", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :lI&?#.QI
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(breakIterator0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2245, 2245);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")Q'_G,TPrFpy/@H", (-611));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )Q'_G,TPrFpy/@H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N *\"%O7+)o-_DLYO");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("N", object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO", parserConfig0, (-255));
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) "TODO");
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("e", parserConfig0, (-492));
      BigInteger bigInteger0 = BigInteger.ONE;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) bigInteger0, (Object) bigInteger0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1367);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|>)~/1J:C]e;CU");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) decimalFormat0, (Object) decimalFormat0);
      assertNotNull(parseContext0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.contains(defaultJSONParser_ResolveTask0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/_Yg{i/.oy}6", parserConfig0, (-1452));
      TreeMap<BigInteger, Long> treeMap0 = new TreeMap<BigInteger, Long>();
      defaultJSONParser0.checkMapResolve(treeMap0, parserConfig0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>();
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("EC.6VS");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, object0, (Object) bitSet0);
      assertNotNull(parseContext0);
      
      Object object1 = defaultJSONParser0.getObject("EC.6VS");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|>)~/1J:C]e;CU");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      defaultJSONParser0.setContext((Object) decimalFormat0, (Object) decimalFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%T+O}>/k9OfBS/q", parserConfig0, 1477);
      defaultJSONParser0.getObject("list_item");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y:+dA7~~'e", parserConfig0, 6);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("(Ljava/lang/reflect/Type;)Ljava/util/Collection;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P8b9@?_;=]Oj,=x", parserConfig0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : P8b9@?_;=]Oj,=x
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalDouble", parserConfig0, 20);
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uBb!MBci", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", fieldName ");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(mockSimpleDateFormat0, jSONReaderScanner0, parserConfig0);
      HashMap<JSONScanner, Date> hashMap0 = new HashMap<JSONScanner, Date>(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1367);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[*RQ\"'h%P*+|");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/_Yg{i/.oy}6", parserConfig0, (-1452));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "{Z/_Yg{i/.oy}6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XMe+ydRof^M&QlxGvsU", 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) classLoader0, (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.deny");
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TOPkI");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : TOPkI
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N *\"%O7+)o-_DLYO");
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(1, 0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.AwtCodec");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      char[] charArray0 = new char[1];
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N *\"%O7+)o-_DLYO");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 1, json : N *\"%O7+)o-_DLYO
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<PageAttributes> class0 = PageAttributes.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TOPkI");
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("utmAsdr>w", parserConfig0, 72);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal ref, ");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONScanner0, parserConfig0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 13);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(82, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".x/S>kzSH%+:]:F", parserConfig0, (-4111));
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., pos 1, json : .x/S>kzSH%+:]:F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@", parserConfig0);
      defaultJSONParser0.setResolveStatus(86);
      assertEquals(86, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("can not cast to short, value : ", parserConfig0, 84);
      Vector<HttpCookie> vector0 = new Vector<HttpCookie>(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yyO~?AlIJs!");
      ParserConfig parserConfig0 = new ParserConfig(true);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("o_lRJO_Ts|:", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(20, jSONLexer0.token());
      assertNotNull(jSONLexer0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat("@");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
