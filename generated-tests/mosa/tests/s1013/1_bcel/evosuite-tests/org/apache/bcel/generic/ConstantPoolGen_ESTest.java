/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:43:30 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-2040109463), (Constant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2040109463
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = (-6022);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-6022), (-6022));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-6022), (-6022));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1908874349), (-1908874349));
      Constant[] constantArray0 = new Constant[26];
      constantArray0[10] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(26, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(")l*J56");
      constantPoolGen0.addLong(2);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("/:Bn=Q{C\"L0$NqiJYr");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "2";
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("2", "2", "2");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantInteger constantInteger0 = new ConstantInteger(114);
      constantArray0[5] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupInteger(4656);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2.0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString((-664));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -664
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
      int int0 = constantPoolGen0.addFloat(4);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("U:U", "U:U", "U:U");
      constantPoolGen0.toString();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1908874352), (-1908874352));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Float.BYTES;
      constantPoolGen1.toString();
      constantPoolGen0.addFloat((-1908874352));
      int int1 = constantPoolGen0.addFloat(1.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantClass constantClass0 = new ConstantClass(4);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(336, 336);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 336
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref(":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy");
      int int0 = constantPoolGen0.addFieldref(":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref(":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy");
      int int0 = constantPoolGen0.addDouble(4);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 1)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(71);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantInteger0.setBytes(2397);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5, 5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2730), (-2730));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2730
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2174), (-2174));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(4620693217682128896L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.lookupFloat(4620693217682128896L);
      int int1 = constantPoolGen1.lookupLong(1218L);
      assertTrue(int1 == int0);
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref(":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy", ":FuPr&Y0\"Iy");
      ConstantLong constantLong0 = new ConstantLong(4);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      constantPoolGen1.lookupLong((-4565849135813190706L));
      constantPoolGen0.lookupInteger(4);
      ConstantString constantString0 = new ConstantString(177);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1), 0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantLong1, constantPoolGen3);
      assertEquals(3, constantPoolGen1.getSize());
      
      String string0 = constantPoolGen2.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("rE=Q^[", "BFC}&vnT4&>sP`", "rE=Q^[");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("xQz\"", "xQz\"", "xQz\"");
      ConstantString constantString0 = new ConstantString((-1932735281));
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(108);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantInteger0, constantPoolGen2);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-2412.2009417));
      int int0 = constantPoolGen0.lookupDouble(1417.88);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-157);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("Unexpected constant type: ", "Unexpected constant type: ", "Unexpected constant type: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(207);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(207);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1932735281), (-1932735281));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat((-1932735281));
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("java.util.jar.");
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addString("java.util.jar.");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mv'P>X+4'3nG$PC+I");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-212.3));
      int int0 = constantPoolGen0.addDouble((-212.3));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unknown constant type ");
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.", "Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.", "Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.");
      int int0 = constantPoolGen0.lookupMethodref("Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.", "Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.", "Possibly initializing object twice. A valid instruction sequence must not have an uninitialized object on thL operand stack or in a local variable during a backwards branch, or in a local variable in code protected by an exception handler. Plea~e see The Java Virtual Machine Specification, Second Edition, 4.9.4 (pages 147 and 148) for details.");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("WFl5)}?");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(3, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("?", "?", "?");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addNameAndType("?", "?");
      int int0 = constantPoolGen0.lookupInterfaceMethodref("?", "?", "?");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("?T /I,&)L.m{2RR,(", "?T /I,&)L.m{2RR,(", "?T /I,&)L.m{2RR,(");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      Constant constant0 = constantPoolGen0.getConstant(5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen1.addConstant(constant0, constantPoolGen0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("?T /I,&)L.m{2RR,(", "?T /I,&)L.m{2RR,(", "?T /I,&)L.m{2RR,(");
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      Constant constant0 = constantPoolGen0.getConstant(5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constant0, constantPoolGen1);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }
}
