/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:45:10 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 519.446;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1876.3307, mnStrategy0, (-100.0));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-100.0), (-183));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-4412.1115), mnStrategy0, 11.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 11.0;
      doubleArray0[3] = (-4412.1115);
      doubleArray0[4] = (-4412.1115);
      doubleArray0[5] = (-0.5);
      doubleArray0[6] = 11.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-4412.1115), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), (-543.9995446105305), (-543.9995446105305), 519.446, (-543.9995446105305)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 519.446;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.0);
      double[] doubleArray1 = mnUserParameters0.params();
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-3.93124273403783E36), 8);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-571.5229685478685), 3.0, 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-571.5229685478685);
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10, mnStrategy0, (-643.7650225811446));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, 10);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 519.4458347988;
      doubleArray0[4] = 519.4458347988;
      doubleArray0[7] = (-543.9995446105305);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, (-543.9995446105305));
      int[] intArray0 = new int[2];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-571.5229685478685), (-571.5229685478685), 1.0E-4, 1.0E-4).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0E-4;
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10, mnStrategy0, (-643.7650225811446));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, 10);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-354.69758), 0.05, (-354.69758), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 519.4458347988;
      doubleArray0[2] = 519.4458347988;
      doubleArray0[4] = 519.4458347988;
      double[] doubleArray1 = new double[15];
      doubleArray0[7] = 0.05;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      mnUserParameters1.clone();
      mnUserParameters1.setPrecision(0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 519.4458347988, mnStrategy0, 0.05);
      int[] intArray0 = new int[2];
      mnStrategy0.setLowStrategy();
      int int0 = 2142239458;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 2142239458);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), (-543.9995446105305), 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.05;
      doubleArray0[3] = (-543.9995446105305);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, (-543.9995446105305));
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.1376681609206004E42, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 519.4458347988);
      mnStrategy0.setGradientStepTolerance(161.45076774505878);
      mnUserParameterState0.add("", 0.05, 519.4458347988, 36.4960492521, 1070.7039060869067);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1070.7039060869067;
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientStepTolerance(519.4458347988);
      mnStrategy0.setHessianGradientNCycles(0);
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1070.7039060869067, 14);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.999545), 0.05, (-543.999545), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-543.999545);
      doubleArray0[2] = (-543.999545);
      doubleArray0[4] = (-543.999545);
      double[] doubleArray1 = new double[6];
      doubleArray0[7] = 0.05;
      doubleArray1[2] = (-543.999545);
      doubleArray1[3] = (-543.999545);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      mnUserParameters1.setPrecision((-543.999545));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.05);
      int int0 = 0;
      int[] intArray0 = new int[2];
      mnUserParameters1.setPrecision(1419.5796986923);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-4726.0), 996);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[4] = 0.05;
      doubleArray0[6] = 0.05;
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 0.05;
      doubleArray1[3] = 519.4458347988;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 753.06, mnStrategy1, (-543.9995446105305));
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 2654.112998972, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (-1.0), (-1.0), 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.02;
      doubleArray0[1] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.02;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.02;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.02;
      doubleArray1[0] = 0.02;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      double double0 = (-381.9);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.02);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1.0), 0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, 774);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-643.7650225811446), 2745);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, (-571.5229685478685), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-539.792), 0.05, (-539.792), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.02;
      doubleArray0[1] = 0.02;
      doubleArray0[4] = 0.02;
      doubleArray0[5] = 0.02;
      doubleArray0[6] = 0.05;
      doubleArray0[7] = 0.02;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.02;
      doubleArray0[7] = 519.4458347988;
      doubleArray1[2] = 0.02;
      doubleArray1[3] = 0.02;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray1, doubleArray1);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {0.02, 0.0, 0.02, 0.02}, doubleArray1, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.02, 0.0, 0.02, 0.02}, doubleArray1, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 519.4458347988);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.02, 0.0, 0.02, 0.02}, doubleArray1, 0.01);
      
      mnStrategy0.setLowStrategy();
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      mnStrategy0.setGradientNCycles((-1));
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-1), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-100.0), 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-571.5229685478685), 1.0511884832363496E13, 1.0511884832363496E13).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-571.5229685478685);
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10, mnStrategy0, (-643.7650225811446));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, 10);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-571.5229685478685), (-571.5229685478685), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.3507677450588), 0.05, (-543.3507677450588), (-543.3507677450588), 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.05;
      doubleArray0[2] = 0.05;
      doubleArray0[4] = 0.05;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[7] = 0.05;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnUserParameters mnUserParameters2 = mnUserParameters1.clone();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameters1, mnUserParameters2);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertEquals(4, mnUserParameters2.variableParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-543.3507677450588), mnStrategy0, 0.05);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      mnStrategy0.setMediumStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      
      mnUserParameterState0.add((String) null, 0.05, 0.05, 1.0642845974785654E46, (-1341.297543808));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameters1, mnUserParameters2);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(5, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(5, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-543.3507677450588);
      int int0 = 2142239468;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1341.297543808);
      doubleArray3[1] = (double) 2142239468;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray3, 0.05, 2142239468);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-260.25064), (-2578.7748434653), (-2827.711), 10.0, (-260.25064)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-0.5), mnStrategy0, (-0.5));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-7.990472547554336);
      doubleArray0[1] = (double) 0;
      mnStrategy0.setGradientNCycles(0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      
      mnUserParameterState0.add("", (double) 0, (-2474.650650599), 779.77677, (-7.990472547554336));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3123.54187118638), 16);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-7.990472547554336), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
      assertNotSame(mnCross1, mnCross0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-7.990472547554336), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertNotSame(intArray0, intArray1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(mnCross2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-7.990472547554336), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[6] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = 0.05;
      doubleArray1[2] = 0.05;
      doubleArray1[3] = 0.02;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.05);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("", (-543.9995446105305), 519.4458347988, 36.4960492521, 1070.7039060869067);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      mnStrategy0.setHessianStepTolerance(0.010000000000000002);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.010000000000000002, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int[] intArray0 = new int[9];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 0.0;
      doubleArray1[3] = 36.4960492521;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 2143783568);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.010000000000000002, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 0.0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[6] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 0.05);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("", (-543.9995446105305), 519.4458347988, 36.4960492521, 1070.7039060869067);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 1070.7039060869067;
      mnStrategy0.setLowStrategy();
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      
      mnStrategy0.setGradientStepTolerance((-543.9995446105305));
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      mnStrategy0.setHessianGradientNCycles(0);
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-188.2963834033834), 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 519.4458347988, 0);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {0.0, 1070.7039060869067, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-571.5229685478685), (-571.5229685478685), 1876.3307, (-2.0687881354231937E45), 2.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-571.5229685478685);
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10, mnStrategy0, (-643.7650225811446));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, 10);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-571.5229685478685), (-571.5229685478685), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-571.5229685478685), 976.01445728161).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-571.5229685478685);
      doubleArray0[1] = (-571.5229685478685);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertNotNull(mnStrategy0);
      
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10, mnStrategy0, (-643.7650225811446));
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-381.895), 10);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-571.5229685478685), (-571.5229685478685), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-643.7650225811446), 10);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnCross1, mnCross0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {(-571.5229685478685), (-571.5229685478685), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = (-1354);
      int int1 = 4;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-643.7650225811446), (double)(-1354), 1031.79077351168, 2.80185528412826E44).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 2.80185528412826E44, mnStrategy0, 4.0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnFunctionCross1.equals((Object)mnFunctionCross0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross1);
      
      // Undeclared exception!
      try { 
        mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, (-810.5894167716092), (-1354));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, (double)0, 1558.1949874196, 1558.1949874196).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5614);
      doubleArray0[4] = (double) 7;
      doubleArray0[7] = (double) (-5614);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-5614), mnStrategy0, 0.0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      mnUserParameters0.setLowerLimit(0, 929.245722491639);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 5.0, 3);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0}, intArray0);
      
      mnUserParameters0.setPrecision(1);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserParameterState0.ext2int(15, 1419.5796986923);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, (double)0, 1558.1949874196, 1558.1949874196).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5614);
      doubleArray0[4] = (double) 7;
      doubleArray0[7] = (double) (-5614);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-5614), mnStrategy0, 0.0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertEquals(8, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      mnUserParameters0.setLowerLimit(0, 929.245722491639);
      assertEquals(8, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, (-5614.0), 0.0, 0.0, 7.0, 0.0, 0.0, (-5614.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 8.0, 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[6] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      doubleArray0[7] = 0.05;
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertEquals(0, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      
      MnUserParameters mnUserParameters2 = mnUserParameters1.clone();
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnUserParameters1, mnUserParameters2);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameters2.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertNotNull(mnUserParameters2);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters2);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameters2.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-27.199977230526528), mnStrategy0, 1597.0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameters2.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertNotNull(mnFunctionCross0);
      
      int[] intArray0 = new int[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1597.0;
      doubleArray1[1] = (-543.9995446105305);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-543.9995446105305), 10);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(mnUserParameters1, mnUserParameters2);
      assertNotSame(mnUserParameters2, mnUserParameters0);
      assertNotSame(mnUserParameters2, mnUserParameters1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, mnUserParameters2.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters2));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters0));
      assertFalse(mnUserParameters2.equals((Object)mnUserParameters1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {1597.0, (-543.9995446105305), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-543.9995446105305);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      assertEquals(8, mnUserParameters1.variableParameters());
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      assertArrayEquals(new double[] {0.0, (-543.9995446105305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertNotNull(mnUserCovariance0);
      
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertEquals(0, mnUserCovariance1.nrow());
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertNotNull(mnUserCovariance1);
      
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0, mnUserCovariance1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertEquals(0, mnUserCovariance1.nrow());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, 4.0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertNotNull(mnFunctionCross0);
      
      mnStrategy0.setHessianG2Tolerance((-2978.856452789659));
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals((-2978.856452789659), mnStrategy0.hessianG2Tolerance(), 0.01);
      
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      
      mnStrategy0.setGradientNCycles(0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnUserCovariance mnUserCovariance2 = mnUserCovariance1.clone();
      assertNotSame(mnUserCovariance0, mnUserCovariance2);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      assertNotSame(mnUserCovariance1, mnUserCovariance2);
      assertNotSame(mnUserCovariance2, mnUserCovariance1);
      assertNotSame(mnUserCovariance2, mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance1.ncol());
      assertEquals(0, mnUserCovariance1.nrow());
      assertEquals(0, mnUserCovariance2.nrow());
      assertEquals(0, mnUserCovariance2.ncol());
      assertFalse(mnUserCovariance0.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertFalse(mnUserCovariance2.equals((Object)mnUserCovariance1));
      assertFalse(mnUserCovariance2.equals((Object)mnUserCovariance0));
      assertNotNull(mnUserCovariance2);
      
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0, 0);
      assertNotSame(mnUserParameters0, mnUserParameters1);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.gradientNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnUserParameters0.equals((Object)mnUserParameters1));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, (-543.9995446105305), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.3507677450588), 0.05, (-543.3507677450588), 519.4458347988, 0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertEquals(0, mnUserParameters0.variableParameters());
      assertNotNull(mnUserParameters0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 519.4458347988;
      doubleArray0[2] = 519.4458347988;
      doubleArray0[4] = 519.4458347988;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[7] = 519.4458347988;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameters1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = (-381.9);
      mnUserParameters1.setPrecision(0.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-381.9), mnStrategy0, 519.4458347988);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertNotNull(mnFunctionCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-543.3507677450588);
      doubleArray2[1] = (-381.9);
      doubleArray2[2] = 0.05;
      doubleArray2[3] = 0.05;
      doubleArray2[4] = 0.05;
      doubleArray2[5] = (-543.3507677450588);
      doubleArray2[6] = 519.4458347988;
      doubleArray2[7] = (-381.9);
      int int0 = 2142239458;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 0.5, 2142239458);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mnUserParameters1, mnUserParameters0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, mnUserParameters1.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(4, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mnUserParameters1.equals((Object)mnUserParameters0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {519.4458347988, 0.0, 519.4458347988, 0.0, 519.4458347988, 0.0, 0.0, 519.4458347988}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {(-543.3507677450588), (-381.9), 0.05, 0.05, 0.05, (-543.3507677450588), 519.4458347988, (-381.9)}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        mnUserParameters1.removeLimits("lower Minos error is not valid.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 520.0486978764462, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[6] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = 0.05;
      doubleArray0[12] = 0.02;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertNotNull(mnUserParameterState0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-363.82566489479984), mnStrategy0, 0.05);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("", (-543.9995446105305), 520.0486978764462, 0.02, 1070.9704954616323);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      mnStrategy0.setHessianStepTolerance((-363.82566489479984));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals((-363.82566489479984), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      doubleArray2[1] = 0.0;
      mnStrategy0.setLowStrategy();
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      mnUserParameterState0.setLowerLimit("", (-2823.8237086));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setGradientStepTolerance((-543.9995446105305));
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      int[] intArray0 = new int[2];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, (-2483.654992601285), 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      mnUserParameterState0.setUpperLimit(0, 0.05);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setHessianStepTolerance((-543.9995446105305));
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals((-543.9995446105305), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      MnCross mnCross2 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 23.7234190127407, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(mnCross2, mnCross0);
      assertNotSame(mnCross2, mnCross1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals((-543.9995446105305), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals((-543.9995446105305), mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(mnCross2.equals((Object)mnCross0));
      assertFalse(mnCross2.equals((Object)mnCross1));
      assertNotNull(mnCross2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.05}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 520.0486978764462, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      double[] doubleArray1 = new double[19];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = 0.05;
      doubleArray0[12] = (-543.9995446105305);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      double double0 = (-252.3907518);
      mnUserParameterState0.setPrecision((-252.3907518));
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2296.84, mnStrategy0, 0.05);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("", (-543.9995446105305), 520.0486978764462, (-543.9995446105305), 0.05);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      mnStrategy0.setHessianStepTolerance(2296.84);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray0 = new int[21];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      mnStrategy0.setHessianStepTolerance(2296.84);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      mnStrategy0.setGradientNCycles((-1073741824));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1073741824), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      doubleArray2[1] = 0.0;
      int int0 = 0;
      mnStrategy0.setGradientStepTolerance(0.0);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1073741824), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 0.0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1073741824), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray2, doubleArray0, (-2483.654992601285), 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals((-1073741824), mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2296.84, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, 3529);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 520.0486978764462, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = 0.05;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setPrecision((-252.3907518));
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-362.81916370652243), mnStrategy0, 0.05);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("zTC!7DRC8+`ZJ", 520.0486978764462, 520.0486978764462, (-543.9995446105305), 0.05);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      int[] intArray0 = new int[21];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 520.0486978764462;
      mnStrategy0.setLowStrategy();
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.hessianNCycles());
      
      mnStrategy0.setGradientStepTolerance(520.0486978764462);
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(520.0486978764462, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray1, (-701.0), 820);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intArray1, intArray0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(520.0486978764462, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 520.0486978764462, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 520.0486978764462, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[7] = 0.05;
      double[] doubleArray1 = new double[21];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = 0.05;
      doubleArray0[12] = (-543.9995446105305);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setPrecision((-543.9995446105305));
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-308.8396), mnStrategy0, 0.05);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("zTC!7DRC8+`ZJ", (-543.9995446105305), 520.0486978764462, (-543.9995446105305), 0.05);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setHessianStepTolerance((-308.8396));
      assertEquals((-308.8396), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      int[] intArray0 = new int[21];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      mnStrategy0.setHessianStepTolerance((-308.8396));
      assertEquals((-308.8396), mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      doubleArray2[1] = 0.0;
      mnStrategy0.setLowStrategy();
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      
      mnStrategy0.setGradientStepTolerance(0.0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 0.0, 13);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray2, doubleArray0, (-2483.654992601285), 13);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isLow());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 13, 976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-543.9995446105305), 0.05, (-543.9995446105305), 520.0486978764462, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = (-543.9995446105305);
      doubleArray0[7] = 520.0486978764462;
      double[] doubleArray1 = new double[19];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = 0.05;
      doubleArray0[12] = (-543.9995446105305);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertNotNull(mnUserParameterState0);
      
      mnUserParameterState0.setPrecision((-543.9995446105305));
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnStrategy0);
      
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-362.81916370652243), mnStrategy0, 520.0486978764462);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertNotNull(mnFunctionCross0);
      
      mnUserParameterState0.add("zTC!7DRC8+`ZJ", (-543.9995446105305), 520.0486978764462, (-543.9995446105305), 0.05);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      
      mnStrategy0.setHessianStepTolerance((-362.81916370652243));
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals((-362.81916370652243), mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int[] intArray0 = new int[21];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      mnStrategy0.setHessianStepTolerance((-362.81916370652243));
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals((-362.81916370652243), mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      doubleArray2[1] = 0.0;
      int int0 = 0;
      mnStrategy0.setLowStrategy();
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      mnStrategy0.setGradientStepTolerance(0.0);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 0.0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(mnCross0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      assertNotSame(mnUserParameterState1, mnUserParameterState0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasCovariance());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState1.equals((Object)mnUserParameterState0));
      assertNotNull(mnUserParameterState1);
      
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray2, doubleArray0, (-2483.3405899874015), 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.0, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(mnUserParameterState0.equals((Object)mnUserParameterState1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(mnCross1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, 976);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }
}
