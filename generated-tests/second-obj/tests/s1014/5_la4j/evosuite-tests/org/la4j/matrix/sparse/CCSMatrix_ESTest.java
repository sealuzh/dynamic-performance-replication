/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:36:41 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4061);
      SparseMatrix.zero(9, 9);
      cCSMatrix0.setColumn(4061, (double) 4061);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1211, 1211);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, cCSMatrix0, rowMajorSparseMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(21, (-1186));
      assertNotNull(cCSMatrix0);
      assertEquals(0.047619047619047616, cCSMatrix0.density(), 0.01);
      assertEquals(21, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals((-1186.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(21, cCSMatrix0.rows());
      assertEquals(21, cCSMatrix0.columns());
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.047619047619047616, cCSMatrix0.density(), 0.01);
      assertEquals(21, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals((-1186.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(21, cCSMatrix0.rows());
      assertEquals(21, cCSMatrix0.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cCSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0.047619047619047616, cCSMatrix0.density(), 0.01);
      assertEquals(21, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals((-1186.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(21, cCSMatrix0.rows());
      assertEquals(21, cCSMatrix0.columns());
      
      MatrixFactory<Matrix> matrixFactory0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      
      cCSMatrix0.setAll(26.0);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(26.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.nonZeroColumnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 14;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(16, 14, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 5023.392647747452;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(490, 490);
      assertNotNull(cCSMatrix1);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(490, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(490, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(490, vectorProcedure0);
      CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(doubleArray1[0]);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = cCSMatrix0.nonZeroAt(0, 0);
      assertFalse(boolean0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(0);
      assertNotNull(compressedVector0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2, 2);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3138, 3138, 3138);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3138, cCSMatrix0.columns());
      assertEquals(3138, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(26, 4, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1838);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1838), (-723), (-295.5803998198362), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3138, 3138, 3138);
      assertNotNull(cCSMatrix0);
      assertEquals(3138, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(3138, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      cCSMatrix0.eachNonZeroInColumn(4, vectorProcedure0);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (double) (-1);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.toBinary();
      int int1 = 26;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(int1, int0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1091, 4239, (int) (byte)0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1091, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(4239, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1779.171114263), (double)(byte)0, (double)(byte)0, (double)1091, (-1779.171114263)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn((byte)0, vectorFunction0);
      double double0 = 381.22760149;
      double double1 = (-789.63087971);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0, (double)byte0, double1).when(vectorAccumulator0).accumulate();
      cCSMatrix0.removeLastRow();
      int int0 = (-1483);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int1 = 1780;
      cCSMatrix0.blankOfShape(int1, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 21;
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2234, 2234);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1747.2244288213662, (double)21, (-3418.8801532), (-3418.8801532)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(21, vectorFunction0);
      double double0 = 677.3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, (double)int0, (double)int0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 7;
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 0);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn((double)7, (-2485.8), (-2485.8), (-2485.8), (-51.0)).when(vectorAccumulator0).accumulate();
          cCSMatrix0.foldRows(vectorAccumulator0);
          cCSMatrix0.toMatrixMarket();
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          doReturn((double)0, (-51.0), (double)7, (-2485.8), (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
          cCSMatrix0.updateColumn(0, vectorFunction0);
          int int1 = 20;
          int int2 = (-4401);
          // Undeclared exception!
          try { 
            cCSMatrix0.select((int[]) null, (int[]) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, 3.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      byte byte0 = (byte) (-120);
      byte byte1 = (byte)85;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)88;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 2.0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      columnMajorSparseMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n2 2 2\n1 1 2.000\n2 2 2.000\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 3);
      cCSMatrix0.toRowVector();
      cCSMatrix0.iteratorOfColumn(3);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.isColumnMajor();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 3;
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (byte) (-48);
      doubleArray2[1] = (double) (byte) (-48);
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) (byte)0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray3 = new double[0];
      doubleArray1[5] = doubleArray3;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1235, 1.0);
      double[][] doubleArray0 = new double[3][9];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2362.005823262491, 1.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 1235;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 1235;
      doubleArray2[5] = (double) 1235;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Matrix matrix0 = cCSMatrix1.copyOfShape(1207, 1224);
      matrix0.insert((Matrix) cCSMatrix0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix2.getOrElse(2, 1969, (-141.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      cCSMatrix0.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(2473L);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-2887), vectorAccumulator0);
      int int1 = 7;
      cCSMatrix1.removeLastRow();
      double double0 = (-52.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5023.392647747452;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int0 = (-1750);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-1750), 3132.0419369712);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, 32);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          CCSMatrix.diagonal(13, 2112.36776473362);
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn((double)32).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.updateAt(7, 0, matrixFunction0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 7);
      double double0 = (-5389.248468421);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (-5389.248468421), (-2017.189225966)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.toMatrixMarket();
      cCSMatrix0.mkString("%%MatrixMarket matrix coordinate real general column-major\n3 7 0\n", "%%MatrixMarket matrix coordinate real general column-major\n3 7 0\n");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-339.2737), Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(3, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3140.0, 1879.1567887056115, (-5389.248468421)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(3, vectorFunction1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int1 = 2838;
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(1220);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1220
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3138, 3138, 3138);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4, 4, matrixFunction0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      doubleArray0[5] = (double) 32;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(32, 32, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(453, 453);
      cCSMatrix0.setAll(453);
      int int0 = 37;
      int int1 = 2403;
      cCSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(0, 3.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-1855), (-4814.9182215));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(468, 468);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DenseMatrix.constant(32, 32, 32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(101, 2234.0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIteratorOfRow(101);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 2;
      intArray0[3] = 101;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      int int0 = 32;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, 2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.nonZeroAt(0, 0);
      cCSMatrix0.toCSV();
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 498, 0, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.nonZeroColumnMajorIterator();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 322.35563147035;
      doubleArray0[2] = (-2016.064866967396);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1221, 3721.7280171);
      double double0 = new Double(0.0);
      int int0 = 8;
      cCSMatrix1.copyOfShape(8, 1224);
      double[][] doubleArrayArray0 = null;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArrayArray0);
      cCSMatrix2.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(57);
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix2.copyOfShape(1224, 0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix1.getOrElse(1207, 2601, 1224);
      int int0 = 22;
      CCSMatrix cCSMatrix3 = CCSMatrix.identity(int0);
      Matrix matrix0 = cCSMatrix3.shuffle();
      CCSMatrix.block(cCSMatrix2, cCSMatrix1, matrix0, cCSMatrix3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix2.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1235, 1235);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1235, 1235, 1235);
      int int0 = 4;
      cCSMatrix0.eachInColumn(4, (VectorProcedure) null);
      int int1 = 1;
      cCSMatrix0.nonZeroAt(int0, int1);
      int int2 = 32;
      cCSMatrix0.getColumn(int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 3138;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 3138;
      doubleArray0[3] = (-851.9476344856491);
      doubleArray0[4] = (double) (-1);
      int[] intArray0 = new int[5];
      doubleArray0[4] = (double) (-1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(3138, 3138, 897, doubleArray0, intArray0, intArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 48;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(897, 48, (-1.0));
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.multiply(matrix0);
      int int2 = Double.MAX_EXPONENT;
      CCSMatrix.diagonal(int0, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.nonZeroIteratorOfRow(0);
      int int1 = 42;
      CCSMatrix.from1DArray(0, 42, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-2211), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2211
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(453, 1.0);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cCSMatrix0.nonZeroAt(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2, 2);
      DecimalFormat decimalFormat0 = new DecimalFormat("W>(M<?n[");
      cCSMatrix1.toMatrixMarket((NumberFormat) decimalFormat0);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(2, vectorAccumulator0);
      int int0 = 7;
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 7;
      double double0 = (-2017.189225966);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3171, 7);
      cCSMatrix0.minInColumn(3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      boolean boolean0 = cCSMatrix0.isColumnMajor();
      cCSMatrix0.infinityNorm();
      boolean boolean1 = false;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(boolean1).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = 3187;
      CCSMatrix.diagonal(int1, double0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("W>(M<?n[");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      cCSMatrix0.minInColumn(7);
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      int int1 = 93;
      Matrix matrix0 = cCSMatrix0.blankOfShape(7, 93);
      cCSMatrix0.copy();
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.mkString("", "");
      int int2 = 95;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)93, (double)95, Double.POSITIVE_INFINITY, (-1248.791148), 4.294967296E9).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      double double0 = 1668.6937;
      ColumnMajorSparseMatrix.diagonal(95, 1668.6937);
      int int3 = 1217;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(95, 95, matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int3, int2, int2);
      SparseMatrix.diagonal(int0, double0);
      cCSMatrix0.maxInColumn(int1);
      cCSMatrix0.columnMajorIterator();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.fold(matrixAccumulator0);
      int int4 = 2;
      cCSMatrix1.power(int4);
      cCSMatrix0.max();
      int int5 = 1229;
      cCSMatrix0.copyOfShape(int5, int0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix1.toBinary();
      int int6 = 2210;
      CCSMatrix.identity(int6);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(25, 25);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(257, 47, 25);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.partiallyApply(denseMatrix0);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.toMatrixMarket();
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix0.foldRows((VectorAccumulator) null);
      double[] doubleArray0 = cCSMatrix0.foldRows(vectorAccumulator0);
      double[][] doubleArray1 = new double[7][2];
      doubleArray1[0] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.toColumnMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(0, 25, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3138, 3138, 3138);
      int int0 = 4;
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4, (-1.0));
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix1.foldNonZero(matrixAccumulator0);
      int int1 = (-3542);
      Matrix.diagonal((-2275), 2014.41444);
      cCSMatrix0.maxInColumn(int1);
      double double0 = (-787.0296088576812);
      CCSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 16);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (-2485.8), (-2485.8), (-2485.8), (-51.0)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-62.512972844), 1.0, (-2485.8), (double)16).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(7, 0, 0);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      int int0 = 1235;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1235, 1.0);
      double[][] doubleArray0 = new double[3][9];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2362.005823262491, 1.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 1235;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 1235;
      doubleArray2[5] = (double) 1235;
      doubleArray2[6] = (double) 2;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      MatrixFunction matrixFunction0 = null;
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.multiply(matrix0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, denseMatrix0);
      String string0 = "I[UTe=CgVl|'.vD<a?";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromMatrixMarket(string0);
      cCSMatrix2.min();
      int int1 = 1215;
      double double0 = (-131.0);
      long long0 = 99L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix cCSMatrix3 = CCSMatrix.random(int0, int0, double0, (Random) mockRandom0);
      cCSMatrix3.hadamardProduct(denseMatrix0);
      cCSMatrix2.maxInColumn(int1);
      VectorProcedure vectorProcedure0 = null;
      int int2 = 0;
      cCSMatrix2.eachNonZeroInColumn(int2, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(610, 445);
      cCSMatrix0.toBinary();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      int int1 = 32;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(32, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("W>(M<?n[");
      cCSMatrix1.nonZeroAt(2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(21);
      cCSMatrix0.min();
      int int0 = (-2147483641);
      int[] intArray0 = new int[3];
      intArray0[1] = (-783);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-783' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (-2485.8), (-2485.8), (-2485.8), (-51.0)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.toMatrixMarket();
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = cCSMatrix0.copyOfColumns(32);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix2, cCSMatrix0, matrix2, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[][] doubleArray0 = new double[12][2];
      double[] doubleArray1 = new double[8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cCSMatrix1.iteratorOfColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = (-41);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, (-41));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (-2485.8), (-2485.8), (-2485.8), (-51.0)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.toCSV();
      String string0 = cCSMatrix0.mkString("-41.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000\n  0.000, -41.000,   0.000,   0.000,   0.000,   0.000,   0.000\n  0.000,   0.000, -41.000,   0.000,   0.000,   0.000,   0.000\n  0.000,   0.000,   0.000, -41.000,   0.000,   0.000,   0.000\n  0.000,   0.000,   0.000,   0.000, -41.000,   0.000,   0.000\n  0.000,   0.000,   0.000,   0.000,   0.000, -41.000,   0.000\n  0.000,   0.000,   0.000,   0.000,   0.000,   0.000, -41.000\n", "-41.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000\n  0.000, -41.000,   0.000,   0.000,   0.000,   0.000,   0.000\n  0.000,   0.000, -41.000,   0.000,   0.000,   0.000,   0.000\n  0.000,   0.000,   0.000, -41.000,   0.000,   0.000,   0.000\n  0.000,   0.000,   0.000,   0.000, -41.000,   0.000,   0.000\n  0.000,   0.000,   0.000,   0.000,   0.000, -41.000,   0.000\n  0.000,   0.000,   0.000,   0.000,   0.000,   0.000, -41.000\n");
      cCSMatrix0.blank();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-41), (-535.0), (-2485.8), (-2485.8), (-723.0)).when(vectorAccumulator1).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator1);
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-51.0);
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (-51.0);
      doubleArray2[3] = (-2485.8);
      doubleArray2[4] = 1414.0;
      doubleArray2[5] = (double) 7;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix1.removeFirstRow();
      cCSMatrix0.min();
      double double0 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(21, 0);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 0);
      cCSMatrix0.determinant();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (-2485.8), (-2485.8), (-2485.8), (-51.0)).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 2;
      int int2 = 9;
      int int3 = 34;
      // Undeclared exception!
      try { 
        CCSMatrix.random(9, 34, 7.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2671.717358454)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      cCSMatrix0.nonZeroAt(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(7, (-2671.717358454));
      cCSMatrix1.determinant();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(7);
      cCSMatrix1.toMatrixMarket();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix2.updateColumn(3727, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3727
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2671.717358454)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      cCSMatrix0.nonZeroAt(0, 0);
      cCSMatrix0.toCSV();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, denseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(0, vectorFunction0);
      cCSMatrix1.determinant();
      Matrix matrix0 = cCSMatrix1.sliceTopLeft(0, 37);
      CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = (-2017.189225966);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3171, 7);
      cCSMatrix0.minInColumn(3);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      cCSMatrix0.isColumnMajor();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = 3187;
      CCSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 2216;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2216, 2216);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-52.0), (double)7, 677.3, (double)21, (-52.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.zero(int1, int0, int0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double double0 = (-257.66001219);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int0, double0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.is(matrixPredicate0);
      cCSMatrix1.min();
      int int2 = (-611);
      int int3 = 1049;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int2, int3, int0);
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.is(matrixPredicate1);
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix1.to(matrixFactory0);
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 0);
      cCSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2;
      CCSMatrix cCSMatrix1 = CCSMatrix.random(2, 830, (double) 0, (Random) mockRandom0);
      int int1 = 944;
      int int2 = 3435;
      CCSMatrix cCSMatrix2 = new CCSMatrix(944, 830, 3435);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      cCSMatrix1.toCSV();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(23, 830, matrixFunction1);
      String string0 = "";
      int int3 = 2475;
      SparseMatrix.diagonal(int3, int2);
      DenseMatrix.fromCSV(string0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, matrix0);
      CCSMatrix cCSMatrix3 = CCSMatrix.identity(int2);
      CCSMatrix cCSMatrix4 = new CCSMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      cCSMatrix4.select(intArray0, intArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.to(matrixFactory0);
      String string1 = "Can not decode CompressedVector from the given byte array.";
      CCSMatrix.fromMatrixMarket(string1);
      int int4 = (-2074);
      CCSMatrix.identity(int4);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2671.717358454)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      cCSMatrix0.nonZeroAt(0, 0);
      cCSMatrix0.toCSV();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, denseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldRows(vectorAccumulator0);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2671.717358454)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      cCSMatrix0.nonZeroAt(0, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = 3502;
      CCSMatrix.zero(3502, 1, 1);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 3502;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 999.906;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 3502;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 2.0;
      doubleArray0[2] = doubleArray3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      cCSMatrix1.toDenseMatrix();
      org.evosuite.runtime.Random.setNextRandom(int0);
      int int1 = 37;
      int int2 = 48;
      SparseMatrix.from1DArray(int1, int2, doubleArray0[1]);
      int int3 = (-680);
      int int4 = 13;
      long long0 = (-641L);
      MockRandom mockRandom0 = new MockRandom(long0);
      mockRandom0.doubles((long) int2);
      SparseMatrix sparseMatrix1 = SparseMatrix.random(int3, int4, doubleArray1[2], (Random) mockRandom0);
      CCSMatrix cCSMatrix3 = CCSMatrix.block(sparseMatrix0, cCSMatrix2, sparseMatrix0, sparseMatrix1);
      cCSMatrix3.getRow(int1);
  }
}
