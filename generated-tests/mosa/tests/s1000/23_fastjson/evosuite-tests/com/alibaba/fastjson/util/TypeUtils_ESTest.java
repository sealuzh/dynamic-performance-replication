/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:47:40 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.IntegerCodec;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.LongCodec;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(0.0);
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("write javaBean error, fastjson version 1.2.46");
      assertEquals("write javabean error, fastjson version 1.2.46", locale0.getLanguage());
      
      Class<Integer> class0 = Integer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isKotlin(class0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Message";
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("Message");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Message\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Long> class0 = Long.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      InterruptedException interruptedException0 = new InterruptedException();
      interruptedException0.getLocalizedMessage();
      boolean boolean0 = TypeUtils.isHibernateInitialized(interruptedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.castToString(class0);
      TypeUtils.clearClassMapping();
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<?> class0 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(type0);
      Class<InputStream> class1 = InputStream.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      boolean boolean0 = true;
      Class<Double> class0 = Double.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      interruptedException0.printStackTrace();
      interruptedException0.getLocalizedMessage();
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      treeMap0.descendingMap();
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getKoltinConstructorParameters(class1);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[1] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // craete instance error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      treeMap0.pollFirstEntry();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JobAttributes jobAttributes0 = new JobAttributes();
          Class<Character> class0 = Character.TYPE;
          Type[] typeArray0 = new Type[1];
          typeArray0[0] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          ClassLoader.getSystemClassLoader();
          ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
          ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
          ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
          MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) mockRuntimeException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // type not match. org.evosuite.runtime.mock.java.lang.MockRuntimeException -> char
             //
             verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      TreeMap<Float, SQLSyntaxErrorException> treeMap1 = new TreeMap<Float, SQLSyntaxErrorException>((SortedMap<Float, ? extends SQLSyntaxErrorException>) treeMap0);
      treeMap1.descendingMap();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.clearClassMapping();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.isNumber("META-INF/services/");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.clearClassMapping();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.merge("META-INF/services/", "msm", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.toLocale("write javaBean error, fastjson version 1.2.46");
      TypeUtils.isNumber("write javaBean error, fastjson version 1.2.46");
      TypeUtils.fnv1a_64("write javaBean error, fastjson version 1.2.46");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      long long0 = new Integer(0);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToDouble((Object) null);
      long long1 = new Long(0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.util.TypeUtils", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.util.TypeUtils -> java.lang.String
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("b[-+F <q");
      mockNullPointerException0.getCause();
      TypeUtils.fnv1a_64("Ljava.awt.Color");
      java.util.IdentityHashMap<SQLTransientException, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<SQLTransientException, NoClassDefFoundError>();
      TypeUtils.castToBigDecimal(identityHashMap0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ghf}wmv0e'&!k=O");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("Ghf}wmv0e'&!k=O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      TreeMap<Float, SQLSyntaxErrorException> treeMap1 = new TreeMap<Float, SQLSyntaxErrorException>((SortedMap<Float, ? extends SQLSyntaxErrorException>) treeMap0);
      treeMap1.descendingMap();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.fnv1a_64_lower("A68o");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      Class<InterruptedException> class1 = InterruptedException.class;
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      TreeMap<Float, SQLSyntaxErrorException> treeMap1 = new TreeMap<Float, SQLSyntaxErrorException>((SortedMap<Float, ? extends SQLSyntaxErrorException>) treeMap0);
      treeMap1.descendingMap();
      TypeUtils.computeGetters(class1, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      ClassLoader.getSystemClassLoader();
      Class<SQLException> class1 = SQLException.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("L");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Lorg.springframework.util.LinkedMultiValueMap");
      stringIndexOutOfBoundsException0.getStackTrace();
      stringIndexOutOfBoundsException0.initCause(mockRuntimeException0);
      hashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", stringIndexOutOfBoundsException0);
      ParserConfig parserConfig0 = ParserConfig.global;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException();
      interruptedException0.printStackTrace();
      interruptedException0.getLocalizedMessage();
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.toLocale("write javaBean error, fastjson version 1.2.46");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "write javaBean error, fastjson version 1.2.46", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short short0 = new Short((short) (-710));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -710
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("META-INF/services/");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("META-INF/services/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"META-INF/services/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Character> class0 = Character.TYPE;
      TypeUtils.unwrapOptional(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToByte((Object) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("1L$4D? /");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.1L$4D? /
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.TYPE;
      TypeUtils.unwrapOptional(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Character character0 = new Character('I');
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToDate((Object) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.clearClassMapping();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.castToBytes("META-INF/service#/");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : interface java.util.List
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Character> class0 = Character.TYPE;
      TypeUtils.unwrapOptional(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Character character0 = new Character('D');
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("u<Cf&-ne");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.InstantiationError: u<Cf&-ne
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getFastMatchToken.000000000", "has", (Throwable) null);
      SecurityException securityException0 = new SecurityException(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("has", (Map<String, ClientInfoStatus>) null, securityException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLClientInfoException: has
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Lorg.springframework.util.LinkedMultiValueMap", class0, 1971);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<Boolean> class0 = Boolean.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup("");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 3L);
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("", classLoader1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.isNumber("G}wmv0e'&!k=O");
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Y?1t.Dp@NWLn@3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Y?1t.Dp@NWLn@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      InterruptedException interruptedException0 = new InterruptedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("m1,u5_Tfbilr;<@X}O");
      interruptedException0.printStackTrace();
      interruptedException0.getLocalizedMessage();
      Dimension dimension0 = new Dimension(0, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Boolean.logicalXor(false, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.observesDaylightTime();
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      MockThread mockThread0 = new MockThread("e0i@c@D Q7=`^+0?z");
      MockThread mockThread1 = new MockThread(mockThread0, "getFastMatchToken");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      mockThread0.getStackTrace();
      TypeUtils.loadClass("com.alibaba.fastjson.util.ASMClassLoader", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<VerifyError> class0 = VerifyError.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      Class<Collator> class1 = Collator.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      TypeUtils.isNumber(".T'=V\"l(Ck*A\"^H");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<ChronoLocalDate>[] classArray0 = (Class<ChronoLocalDate>[]) Array.newInstance(Class.class, 2);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      classArray0[0] = class1;
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      classArray0[1] = class2;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("scanFloat");
      NumberFormat.getIntegerInstance();
      Class<Object> class0 = Object.class;
      TypeUtils.castToJavaBean((Object) decimalFormat0, class0);
      Locale locale0 = Locale.UK;
      Type[] typeArray0 = new Type[0];
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Ghf}wmv0e'&!k=O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short short0 = new Short((short)1591);
      TypeUtils.castToLong(short0);
      Class<Insets> class0 = Insets.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      String string0 = "can not cast oracle.sql.TIMESTAMP to Date";
      Field[] fieldArray0 = new Field[4];
      Class<String> class2 = String.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d7U~,zpSzG`%1?{G!@", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("can not cast oracle.sql.TIMESTAMP to Date", class0, class2, class0, (Field) null, (short)1591, 8, 8);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", weakHashMap0);
      fieldArray0[1] = null;
      beanContext0.getField();
      fieldArray0[2] = null;
      Class<RenderingHints> class3 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class3, "PaL5y}nH>", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getSerializeFeatures(class0);
      Map<String, Object> map0 = null;
      ParserConfig parserConfig0 = new ParserConfig();
      LongCodec longCodec0 = new LongCodec();
      parserConfig0.putDeserializer(class0, longCodec0);
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      PriorityQueue<Dimension> priorityQueue0 = new PriorityQueue<Dimension>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Byte> class1 = Byte.class;
      parserConfig0.checkAutoType("fastjson.parser.autoTypeSupport", class1, (-718));
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = "av~'tr[s?<g+R*!u";
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("[D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<Collator> class0 = Collator.class;
      Locale locale0 = Locale.US;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getCollectionItemClass(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getClass((Type) class0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "toL";
      stringArray0[1] = "DisableCircularReferenceDetect";
      stringArray0[2] = "]'mj8*+N[;?%>lDV";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      int int0 = 11;
      simplePropertyPreFilter0.setMaxLevel(11);
      simplePropertyPreFilter0.setMaxLevel(11);
      TypeUtils.isNumber("0");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("ha");
      mockNullPointerException0.printStackTrace();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.isNumber("3Uju^?mdcYr");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("Message");
      mockNullPointerException0.getSuppressed();
      MockNullPointerException mockNullPointerException1 = new MockNullPointerException("javax.xml.datatype.XMLGregorianCalendar");
      mockNullPointerException1.printStackTrace();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaBeanDeserializer javaBeanDeserializer0 = null;
      try {
        javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.clearClassMapping();
      TypeUtils.castToShort((Object) null);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.castToInt((Object) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Short.toUnsignedLong((short)1666);
      // Undeclared exception!
      try { 
        MockDateFormat.getDateInstance(620);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 620
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 2620;
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>(2620);
      TypeUtils.loadClass("yyyy\uB144M\uC6D4d\uC77C HH:mm:ss", (ClassLoader) null, true);
      Boolean.logicalXor(true, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.min(0.0F, (-2223.62F));
      Float.max((-2223.62F), (-2223.62F));
      TypeUtils.castToFloat(float0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.global = parserConfig0;
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      ParserConfig parserConfig1 = new ParserConfig();
      IntegerCodec integerCodec0 = IntegerCodec.instance;
      parserConfig0.putDeserializer((Type) null, jdk8DateCodec0);
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class1, ParserConfig.global);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.getCollectionItemType(class0);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("G>An*OCl3[", class1, 2612);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. G>An*OCl3[
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      InterruptedException interruptedException0 = new InterruptedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("\":\"");
      interruptedException0.addSuppressed(mockIllegalArgumentException0);
      interruptedException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = new ParserConfig();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.loadClass("_asm_deser_Tm_");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("_asm_deser_Tm_");
      mockNullPointerException0.getCause();
      mockNullPointerException0.printStackTrace();
      TypeUtils.fnv1a_64("!uE");
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Date> class0 = Date.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(46);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.unwrapOptional(type0);
      Class<SQLDataException> class2 = SQLDataException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGettersWithFieldBase(class2, weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.decapitalize((String) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.Object@39af0680
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kotlin.ranges.IntRange");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.castToBigDecimal((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.observesDaylightTime();
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      int[] intArray0 = new int[4];
      intArray0[0] = 19;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<InternalError>[] classArray0 = (Class<InternalError>[]) Array.newInstance(Class.class, 6);
      Class<InternalError> class0 = InternalError.class;
      classArray0[0] = class0;
      Class<InternalError> class1 = InternalError.class;
      classArray0[1] = class1;
      Class<InternalError> class2 = InternalError.class;
      classArray0[2] = class2;
      Class<InternalError> class3 = InternalError.class;
      classArray0[3] = class3;
      Class<InternalError> class4 = InternalError.class;
      classArray0[4] = class4;
      Class<InternalError> class5 = InternalError.class;
      classArray0[5] = class5;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.observesDaylightTime();
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      mockNullPointerException0.getCause();
      mockNullPointerException0.printStackTrace();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Exception> class0 = Exception.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@a0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Throwable> class0 = Throwable.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) list0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.castToChar((Object) null);
      Class<Integer> class1 = Integer.class;
      TypeUtils.getSerializeFeatures(class1);
      ThreadGroup threadGroup0 = new ThreadGroup("e");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "kotlin.jvm.internal.DefaultConstructorMarker");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup1, thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("e", classLoader0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToTimestamp((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      TypeUtils.clearClassMapping();
      TypeUtils.isKotlin(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      TypeUtils.castToString(simpleTimeZone0);
      MockThread mockThread0 = new MockThread("2-[21{=");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      mockThread1.getContextClassLoader();
      InternalError internalError0 = new InternalError("java.util.SimpleTimeZone@0000000001");
      InstantiationError instantiationError0 = new InstantiationError();
      instantiationError0.initCause(internalError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("2-[21{=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2-[21{=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      TypeUtils.castToString(simpleTimeZone0);
      MockThread mockThread0 = new MockThread("2-[21S{=");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      mockThread1.getStackTrace();
      TypeUtils.loadClass(".{", (ClassLoader) aSMClassLoader0, true);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      mockThread1.getStackTrace();
      TypeUtils.loadClass("5_U.'te+c", classLoader0, true);
      Locale locale0 = Locale.US;
      DecimalFormatSymbols.getInstance(locale0);
      Boolean boolean0 = Boolean.FALSE;
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.fnv1a_64_lower("2-[21S{=");
      TypeUtils.getCollectionItemClass((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(simpleTimeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.SimpleTimeZone[id=.{,offset=1971,dstSavings=1971,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("scanFloat");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) numberFormat0, (Class<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("u<Cf&-ne");
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayLanguage(locale1);
      Locale locale2 = Locale.JAPAN;
      DecimalFormatSymbols.getInstance(locale2);
      JSONObject jSONObject0 = new JSONObject(15);
      jSONObject0.getBigInteger((String) null);
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((BigInteger) null, 2210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.castToSqlDate((Object) null);
      TypeUtils.getCollectionItemType(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("L");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("L");
      stringIndexOutOfBoundsException0.getStackTrace();
      Throwable throwable0 = stringIndexOutOfBoundsException0.initCause(mockRuntimeException0);
      SQLDataException sQLDataException0 = new SQLDataException(throwable0);
      hashMap0.put("L", sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("i", "L");
      identityHashMap0.put("M??Z1-~+bg6Q\"@WFq.3", (String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeUtils.castToFloat((Object) null);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      MockThread mockThread0 = new MockThread("2-[21{=");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      mockThread1.getContextClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.unwrapOptional(class1);
      try { 
        classLoader0.loadClass(".{");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      TypeUtils.castToString(simpleTimeZone0);
      Class<String> class0 = String.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("scanFloat");
      NumberFormat.getIntegerInstance();
      Class<Object> class0 = Object.class;
      TypeUtils.castToJavaBean((Object) decimalFormat0, class0);
      Locale locale0 = Locale.UK;
      locale0.getDisplayName();
      Locale.forLanguageTag("s&[6N~y~B#N,");
      TypeUtils.createCollection(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.getDeserializer((Type) class0);
      Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
      TypeUtils.isPath(class1);
      Locale locale1 = Locale.FRENCH;
      String string0 = "L";
      MessageFormat messageFormat0 = new MessageFormat("L", locale1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : en_GB
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      PriorityQueue<Dimension> priorityQueue0 = new PriorityQueue<Dimension>();
      Class<Annotation> class0 = Annotation.class;
      Class<Float> class1 = Float.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      IntegerCodec integerCodec0 = IntegerCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(integerCodec0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      InterruptedException interruptedException0 = new InterruptedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("\":\"");
      interruptedException0.addSuppressed(mockIllegalArgumentException0);
      interruptedException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashtable0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("\":\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\":\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      Dimension dimension0 = new Dimension(2174, 2174);
      TypeUtils.castToSqlTime(typeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockThread mockThread0 = new MockThread("r-C");
      ThreadGroup threadGroup0 = new ThreadGroup("short");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      mockThread1.getContextClassLoader();
      InternalError internalError0 = new InternalError("short");
      InstantiationError instantiationError0 = new InstantiationError();
      instantiationError0.initCause(internalError0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      MockThread mockThread0 = new MockThread("_asm_deser_Tm_");
      MockThread mockThread1 = new MockThread(mockThread0, "_asm_deser_Tm_");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1);
      mockThread2.getContextClassLoader();
      mockThread0.getStackTrace();
      Locale locale0 = Locale.CANADA_FRENCH;
      DecimalFormatSymbols.getInstance(locale0);
      Boolean boolean0 = Boolean.FALSE;
      TypeUtils.fnv1a_64_lower("_asm_deser_Tm_");
      Byte byte0 = new Byte((byte)119);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) long0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Float float0 = new Float((double) 1971);
      TypeUtils.castToDouble(float0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      MockThread mockThread0 = new MockThread("e0i@c@D Q7=`^+0?z");
      MockThread mockThread1 = new MockThread(mockThread0, "getFastMatchToken");
      TypeUtils.fnv1a_64_lower("e0i@c@D Q7=`^+0?z");
      TypeUtils.fnv1a_64("");
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToDate((Object) null);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("8/})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.8/})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.clearClassMapping();
      String string0 = "META-INF/services/";
      boolean boolean0 = new Boolean("META-INF/services/");
      Character.valueOf('D');
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("META-INF/services/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : META-INF/services/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      MockThread mockThread0 = new MockThread("e0i@c@D Q7=`^+0?z");
      MockThread mockThread1 = new MockThread(mockThread0, "getFastMatchToken");
      TypeUtils.fnv1a_64_lower("e0i@c@D Q7=`^+0?z");
      TypeUtils.fnv1a_64("");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WriteMapNullValue");
      TypeUtils.castToDate("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      InterruptedException interruptedException0 = new InterruptedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("m1,u5_Tfbilr;<@X}O");
      interruptedException0.addSuppressed(mockIllegalArgumentException0);
      interruptedException0.getLocalizedMessage();
      Dimension dimension0 = new Dimension(0, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      TypeUtils.toLocale("m1,u5_Tfbilr;<@X}O");
      TypeUtils.castToTimestamp((Object) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      Calendar calendar0 = MockCalendar.getInstance(locale1);
      TypeUtils.castToSqlDate(calendar0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.observesDaylightTime();
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString((Object) null);
      Locale locale0 = Locale.US;
      locale0.stripExtensions();
      DecimalFormatSymbols.getInstance(locale0);
      Boolean boolean0 = Boolean.FALSE;
      TypeUtils.fnv1a_64_lower("8[&[tbl{ ;@xjf");
      Byte byte0 = new Byte((byte)119);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Message";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.setMaxLevel(400);
      simplePropertyPreFilter0.setMaxLevel(400);
      TypeUtils.isNumber("Message");
      int int0 = (-706);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<ChronoLocalDate>[] classArray0 = (Class<ChronoLocalDate>[]) Array.newInstance(Class.class, 2);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      parserConfig0.clearDeserializers();
      Class<NegativeArraySizeException> class2 = NegativeArraySizeException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class2, (PropertyNamingStrategy) null, true, true);
      JavaBeanInfo.getBuilderClass(javaBeanInfo0.clazz, (JSONType) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      classArray0[0] = class1;
      Class<ChronoLocalDate> class3 = ChronoLocalDate.class;
      classArray0[1] = class3;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      TypeUtils.loadClass((String) null);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      mockNullPointerException0.getCause();
      mockNullPointerException0.printStackTrace();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      String string0 = ".{";
      TypeUtils.castToString(".{");
      int[] intArray0 = new int[4];
      intArray0[0] = 19;
      Type[] typeArray0 = new Type[2];
      TypeUtils.getClassFromMapping(".{");
      typeArray0[0] = (Type) null;
      Class<?> class0 = TypeUtils.getCollectionItemClass(typeArray0[0]);
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@c1ce3f4a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.cast((Object) null, class0, (ParserConfig) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      InterruptedException interruptedException0 = new InterruptedException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("m1,u5_Tfbilr;<@X}O");
      interruptedException0.addSuppressed(mockIllegalArgumentException0);
      interruptedException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("m1,u5_Tfbilr;<@X}O");
      Insets insets0 = new Insets(94, 0, 94, 29);
      Class<Byte> class1 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "m1,u5_Tfbilr;<@X}O", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.castToString(class0);
      TypeUtils.getClassFromMapping("ha");
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      Type[] typeArray0 = new Type[8];
      Class<?> class2 = TypeUtils.getRawClass(class0);
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) null;
      typeArray0[7] = (Type) class1;
      Class<Long> class3 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Date> class0 = Date.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(46);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<JavaBeanDeserializer>[] classArray0 = (Class<JavaBeanDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      classArray0[2] = class1;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.OutOfMemoryError: fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<JavaBeanDeserializer>[] classArray0 = (Class<JavaBeanDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      hashtable0.put("_=Ycf4f<s+EQuwP''_\"", "_=Ycf4f<s+EQuwP''_\"");
      classArray0[2] = class0;
      InstantiationError instantiationError0 = new InstantiationError();
      hashtable0.put("$xNc;BKv", "$xNc;BKv");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException(".et9kKYs/sqi");
      instantiationError0.initCause(noSuchFieldException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {_=Ycf4f<s+EQuwP''_\"=_=Ycf4f<s+EQuwP''_\", $xNc;BKv=$xNc;BKv}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Date> class0 = Date.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(46);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<JavaBeanDeserializer>[] classArray0 = (Class<JavaBeanDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      classArray0[2] = class1;
      InstantiationError instantiationError0 = new InstantiationError();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("et9kKYs/sqi");
      instantiationError0.initCause(noSuchFieldException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      int int0 = 19;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, ".{");
      simpleTimeZone0.observesDaylightTime();
      simpleTimeZone0.setDSTSavings(487);
      TypeUtils.castToString(".{");
      int[] intArray0 = new int[4];
      intArray0[0] = 19;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("byte");
      String string0 = "C";
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "C");
      threadGroup0.interrupt();
      Thread[] threadArray0 = new Thread[6];
      Thread thread0 = MockThread.currentThread();
      threadArray0[0] = thread0;
      MockThread mockThread0 = new MockThread();
      threadArray0[1] = (Thread) mockThread0;
      MockThread mockThread1 = new MockThread("C");
      threadArray0[2] = (Thread) mockThread1;
      MockThread mockThread2 = new MockThread(threadArray0[2]);
      threadArray0[3] = (Thread) mockThread2;
      Thread thread1 = MockThread.currentThread();
      threadArray0[4] = thread1;
      MockThread mockThread3 = new MockThread();
      threadArray0[5] = (Thread) mockThread3;
      threadGroup0.enumerate(threadArray0, false);
      MockThread mockThread4 = new MockThread(threadGroup1, "&uF P~:F+]_)tMXMJH");
      ClassLoader classLoader0 = mockThread4.getContextClassLoader();
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      classLoader0.setPackageAssertionStatus("Tp>iDrR&6++-(+Lc/", false);
      classLoader0.setClassAssertionStatus("Bsssut", false);
      TypeUtils.loadClass("byte", classLoader0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("byte");
      noSuchMethodException0.getSuppressed();
      noSuchMethodException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodException: byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getGenericParamType(class0);
      InterruptedException interruptedException0 = new InterruptedException();
      MockThread mockThread0 = new MockThread("{aZez~c6Tg)h");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThrowable.getDefaultStackTrace();
      TypeUtils.decapitalize("N+g42-YnIDy");
      Class<BigInteger> class1 = BigInteger.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", hashtable0);
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      Class<Short> class3 = Short.class;
      FieldInfo fieldInfo0 = new FieldInfo("{aZez~c6Tg)h", class2, class3, class3, (Field) null, 0, (-2584), 0);
      Class<Jdk8DateCodec> class4 = Jdk8DateCodec.class;
      BeanContext beanContext0 = new BeanContext(class4, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {aZez~c6Tg)h
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[1] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) propertyProcessableDeserializer0.type;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig.getGlobalInstance();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("Ljava.util.concurrent.ConcurrentSkipListMap");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // craete instance error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(":Tr@..E+bb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : :Tr@..E+bb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PriorityQueue<Dimension> priorityQueue0 = new PriorityQueue<Dimension>();
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      IntegerCodec integerCodec0 = IntegerCodec.instance;
      parserConfig0.putDeserializer(class2, integerCodec0);
      Class<MockJapaneseDate> class3 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.isNumber("META-INF/services/");
      TypeUtils.castToShort((Object) null);
      Long long0 = Long.valueOf((-798L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -798
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer((Class<PropertyProcessable>) null);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) null;
      MockThread mockThread0 = new MockThread("{aZez~c6Tg)h");
      ThreadGroup threadGroup0 = new ThreadGroup("{aZez~c6Tg)h");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThrowable.getDefaultStackTrace();
      TypeUtils.decapitalize("_u>m~;[L0l:9");
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("5_U.'te+c", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("N", class2, class1, (Type) null, (Field) null, 21, 956, 8232);
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class4);
      Short short0 = new Short((short)38);
      TypeUtils.castToSqlTime(short0);
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Message";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.setMaxLevel(11);
      simplePropertyPreFilter0.setMaxLevel(400);
      TypeUtils.isNumber("Message");
      int[] intArray0 = new int[9];
      intArray0[0] = (-706);
      intArray0[2] = (-706);
      intArray0[3] = 400;
      intArray0[4] = (-706);
      intArray0[6] = 400;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("Message");
      mockNullPointerException0.getSuppressed();
      mockNullPointerException0.printStackTrace();
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Message");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Message
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      PriorityQueue<Dimension> priorityQueue0 = new PriorityQueue<Dimension>();
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<DateFormatSymbols> class2 = DateFormatSymbols.class;
      MockThread mockThread0 = new MockThread();
      mockThread0.getStackTrace();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("%*bo?e", classLoader1, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<ParameterizedTypeImpl> class3 = ParameterizedTypeImpl.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class3);
      ConcurrentHashMap<NumberFormat, IllegalStateException> concurrentHashMap0 = new ConcurrentHashMap<NumberFormat, IllegalStateException>();
      Class<Collator> class4 = Collator.class;
      TypeUtils.cast((Object) concurrentHashMap0, class4, parserConfig0);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("%*bo?e", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. %*bo?e
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      simpleTimeZone0.setDSTSavings(1971);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToString(noSuchFieldException0);
      MockThread mockThread0 = new MockThread("h&)5^]L,!'M");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "java.lang.NoSuchFieldException@0000000001");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("toS", "toS");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BigDecimal bigDecimal0 = new BigDecimal((long) 90);
      TypeUtils.castToDate(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>(2620);
      MockThread mockThread0 = new MockThread("EQgZT5e;");
      MockThread mockThread1 = new MockThread(mockThread0, "EQgZT5e;");
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "getFastMatchToken");
      MockThread mockThread2 = new MockThread(threadGroup1, "FvwRoR$?2P9-Ui");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      MockThread.dumpStack();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      mockThread1.getStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[USv%6}AL+_UGx71s", (ClassLoader) aSMClassLoader0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.isKotlin(class0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      InterruptedException interruptedException0 = new InterruptedException("5XY:@\"+pr>\"yjq\"");
      interruptedException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("5XY:@\"+pr>\"yjq\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5XY:@\"+pr>\"yjq\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
