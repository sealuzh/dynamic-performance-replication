/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:03:31 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Insets insets0 = new Insets((-885), (-2106), (-214748364), 52);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=-885,left=-2106,bottom=-214748364,right=52]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(48);
      TypeUtils.castToSqlDate(integer0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass("cp>n.`&");
      ParserConfig.getGlobalInstance();
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.loadClass("L");
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BreakIterator.getWordInstance();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("codePoints", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. codePoints
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<ClassLoader> class0 = ClassLoader.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      JobAttributes jobAttributes0 = new JobAttributes();
      jobAttributes0.setFileName("java.sql.SQLWarning");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=java.sql.SQLWarning,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.castToString(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long((-368L));
      Long.compareUnsigned((-368L), (-368L));
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = TypeUtils.isNumber("L");
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      illegalThreadStateException0.getLocalizedMessage();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      Integer integer0 = new Integer(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "L", illegalThreadStateException0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("xl");
      Float float0 = new Float((float) 0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = TypeUtils.isPath(class0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.isNumber("create instance error, class ");
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.getClassFromMapping("create instance error, class ");
      ThreadGroup threadGroup0 = new ThreadGroup("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread mockThread0 = new MockThread(threadGroup0, "75&JxyO:t");
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ParserConfig.getGlobalInstance();
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertNotSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getParserFeatures(class0);
      Long long0 = new Long(0);
      TypeUtils.castToBoolean((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      String string0 = ":true";
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache(":true", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo(":true", class0, class1, (Type) null, (Field) null, 30, 40, 30);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      MockFile mockFile0 = new MockFile(":true", "f+fB1;XU-2`{_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      numberFormatException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.getDeserializer((Type) class0);
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes jobAttributes1 = new JobAttributes();
      assertNull(jobAttributes1.getPrinter());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("U/Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("org.springframework.security.web.csrf.DefaultCsrfToken", classLoader0);
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToTimestamp((Object) null);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1950L);
      Time.valueOf(localTime0);
      ParserConfig.getGlobalInstance();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BatchUpdateException batchUpdateException0 = TypeUtils.cast((Object) null, (Type) null, parserConfig1);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isPath(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("@e|y}", (ClassLoader) aSMClassLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.isNumber("[Z");
      byte[] byteArray0 = TypeUtils.castToBytes("[Z");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.loadClass("cp>n.`&");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("cp>n.`&", (String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.isProxy(class1);
      NumberFormatException numberFormatException0 = new NumberFormatException("nextException");
      TypeUtils.getSerializeFeatures(class1);
      JSONObject jSONObject0 = new JSONObject(false);
      Class<Locale> class2 = Locale.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      TypeUtils.isNumber("create instance error, class ");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClassFromMapping("create instance error, class ");
      TypeUtils.castToInt((Object) null);
      LinkedHashMap<SQLNonTransientConnectionException, Date> linkedHashMap0 = new LinkedHashMap<SQLNonTransientConnectionException, Date>();
      Class<BigDecimal> class1 = BigDecimal.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, parserConfig0);
      assertNull(sQLTimeoutException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<NoSuchFieldException> arrayList0 = new ArrayList<NoSuchFieldException>();
      arrayList0.clone();
      String string0 = TypeUtils.castToString(arrayList0);
      assertNotNull(string0);
      
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.isKotlin(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Long long0 = new Long(0L);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TreeMap<IllegalStateException, Locale> treeMap0 = new TreeMap<IllegalStateException, Locale>();
      Class<JobAttributes> class0 = JobAttributes.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = new Boolean("~");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeUtils.isPath(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.unwrapOptional(class0);
      Class<Double> class2 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("{\"$ref\":\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThread.currentThread();
      ThreadGroup threadGroup1 = new ThreadGroup("{\"$ref\":\"");
      MockThread mockThread0 = new MockThread();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Collator> class0 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : HOURS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isGenericParamType((Type) null);
      System.setCurrentTimeMillis((-1787L));
      Class<Exception> class1 = Exception.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, true);
      TypeUtils typeUtils0 = new TypeUtils();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      TypeUtils.getRawClass(class0);
      String string0 = TypeUtils.decapitalize("jK1^%19PN");
      assertEquals("jK1^%19PN", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyString() , any());
      identityHashMap0.compute((String) null, biFunction0);
      identityHashMap0.clear();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "me");
      MockThread mockThread0 = new MockThread(threadGroup1, "h0e:JV|$");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1, "h0e:JV|$");
      MockThread mockThread3 = new MockThread(mockThread0);
      mockThread3.getStackTrace();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long((-368L));
      Long.compareUnsigned((-368L), (-368L));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      System.setCurrentTimeMillis((-165L));
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ThreadGroup threadGroup0 = new ThreadGroup("W5|2MrhePk6+0/");
      MockThread mockThread0 = new MockThread(threadGroup0, "dw@m");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Class<Time> class1 = Time.class;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-274), 67, noSuchMethodException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-2373));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("yk8${)]yJ,/F}#A", "Gl!K2POzop@^X5-gek");
      hashMap0.put("", "z2q}Mob`7i");
      Class<BitSet> class0 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {=z2q}Mob`7i, yk8${)]yJ,/F}#A=Gl!K2POzop@^X5-gek}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isNumber("|DkOE`%0:^o!r,@bP");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("getMetaClass");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("|DkOE`%0:^o!r,@bP", outOfMemoryError0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("|DkOE`%0:^o!r,@bP", typeNotPresentException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: |DkOE`%0:^o!r,@bP
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put("kxc{c?", "kxc{c?");
      hashMap0.put("Ljava.awt.Font", "8");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.isPath(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.isNumber("jsonpath can not be null");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("jsonpath can not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jsonpath can not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-2373));
      ParameterizedType parameterizedType0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus((String) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long((-368L));
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      ArrayList<NoSuchFieldException> arrayList0 = new ArrayList<NoSuchFieldException>();
      arrayList0.clone();
      TypeUtils.castToString(arrayList0);
      Class<Double> class1 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long((-368L));
      Long.compareUnsigned((-368L), (-368L));
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = TypeUtils.isNumber("L");
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      illegalThreadStateException0.getLocalizedMessage();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      Integer integer0 = new Integer(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "L", illegalThreadStateException0);
      Float float0 = new Float((float) 0);
      Type[] typeArray0 = new Type[2];
      Class<Long> class0 = Long.TYPE;
      typeArray0[0] = (Type) class0;
      Class<?> class1 = TypeUtils.getRawClass(typeArray0[0]);
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.isKotlin(class2);
      boolean boolean2 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("dDecrmgent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : dDecrmgent
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      Byte.toUnsignedLong((byte)35);
      Byte.compare((byte)11, (byte) (-84));
      Byte.toUnsignedInt((byte)11);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Byte.toUnsignedInt((byte)41);
      TypeUtils.castToLong(byte0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.fnv1a_64("getgetNumberFormat");
      Class<Collator> class0 = Collator.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("getgetNumberFormat");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("clazz is null");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      Class<Float> class0 = Float.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "has");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "(^{<!u6V?^u{ A*E", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1.classLoader);
      String string0 = "~_g";
      Class<SQLException> class1 = SQLException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "8RFpPr,>iI*Q5#O`D0|", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("~_g", class1, class0, class1, (Field) null, (-225), (-225), (-225));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      Class<SQLDataException> class2 = SQLDataException.class;
      TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
      FieldInfo fieldInfo1 = null;
      try {
        fieldInfo1 = new FieldInfo("8RFpPr,>iI*Q5#O`D0|", (Method) null, (Field) null, fieldInfo0.declaringClass, fieldInfo0.fieldClass, 65, 65, (-225), (JSONField) null, (JSONField) null, "i/=G+a@bD6E4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.castToBigDecimal((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jobAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4YoAhX[a&NZSdn+GJb");
      Rectangle rectangle0 = new Rectangle();
      Rectangle2D.intersect(rectangle0, rectangle0, rectangle0);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      Class<Long> class1 = Long.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class1);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "4YoAhX[a&NZSdn+GJb", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Point> class0 = Point.class;
      TypeUtils.isProxy(class0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "ha", (Throwable) null);
      Map<String, String> map0 = null;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.toLocale("getgetCause");
      TypeUtils.loadClass((String) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToBigInteger((Object) null);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("X>zp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X>zp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mapDeserializer0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", true);
      JSONObject jSONObject0 = new JSONObject(198);
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.cast((Object) jSONObject0, class0, parserConfig0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.isKotlin(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("j", "can not cast to : ");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("EQ4LN.k<}Mo|L$LA").when(biFunction0).apply(anyString() , any());
      weakHashMap0.replaceAll(biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) weakHashMap1, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class1);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (-2373));
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals((-2373), sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      ParameterizedType parameterizedType0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      classLoader0.setClassAssertionStatus((String) null, false);
      Throwable throwable0 = null;
      TreeMap<StackTraceElementDeserializer, InstantiationException> treeMap0 = new TreeMap<StackTraceElementDeserializer, InstantiationException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getPercent", "ha", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("ha", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: getPercent", sQLNonTransientConnectionException0.toString());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getMessage());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("?");
      assertNotNull(stackOverflowError0);
      assertEquals("?", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: ?", stackOverflowError0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.StackOverflowError\",\"localizedMessage\":\"?\",\"message\":\"?\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor89\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("codePoints", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. codePoints
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getPercent", "getPercent", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getMessage());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: getPercent", sQLNonTransientConnectionException0.toString());
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) class0;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      String string0 = TypeUtils.decapitalize("getPercent");
      assertEquals("getPercent", string0);
      assertNotNull(string0);
      
      Locale locale0 = TypeUtils.toLocale("SpR8y");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("spr8y", locale0.toString());
      assertEquals("spr8y", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Class<Method> class1 = Method.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short short0 = new Short((short) (-1887));
      assertEquals((short) (-1887), (short)short0);
      assertNotNull(short0);
      
      Long long0 = TypeUtils.castToLong(short0);
      assertEquals((-1887L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean2 = TypeUtils.isPath(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = TypeUtils.decapitalize("!y*TWj|Y|rWCr)u");
      assertEquals("!y*TWj|Y|rWCr)u", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("!y*TWj|Y|rWCr)u", "!y*TWj|Y|rWCr)u", (short) (-1887));
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException: !y*TWj|Y|rWCr)u", sQLNonTransientConnectionException1.toString());
      assertEquals((-1887), sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("!y*TWj|Y|rWCr)u", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("!y*TWj|Y|rWCr)u", sQLNonTransientConnectionException1.getMessage());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      Short short1 = TypeUtils.castToShort((Object) null);
      assertNull(short1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Time> class1 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "0w'M6ia", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0w'M6ia
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("{\"$ref\":\"");
      assertNotNull(threadGroup0);
      assertEquals("{\"$ref\":\"", threadGroup0.getName());
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ha", "ha", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("ha", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ha", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ha", sQLNonTransientConnectionException0.toString());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("8S");
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError: 8S", stackOverflowError0.toString());
      assertEquals("8S", stackOverflowError0.getMessage());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@828a0fed
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("fastjson.compatibleWithFieldName");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.compatibleWithFieldName\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("/Date(");
      assertNull(class1);
      
      Integer integer0 = new Integer(1174);
      assertEquals(1174, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = TypeUtils.castToInt(integer0);
      assertEquals(1174, (int)integer1);
      assertNotNull(integer1);
      
      LinkedHashMap<SQLNonTransientConnectionException, Date> linkedHashMap0 = new LinkedHashMap<SQLNonTransientConnectionException, Date>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      java.util.IdentityHashMap<BufferCapabilities, Integer> identityHashMap0 = new java.util.IdentityHashMap<BufferCapabilities, Integer>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Class<BigDecimal> class2 = BigDecimal.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
      assertNotNull(mockThread0);
      assertNull(threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNull(threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertNull(threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      mockThread0.setUncaughtExceptionHandler(threadGroup0);
      assertNull(threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      classLoader0.setClassAssertionStatus((String) null, true);
      assertNull(threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Class<?> class0 = TypeUtils.loadClass("java.lang.AutoCloseable");
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isInterface());
      assertEquals("interface java.lang.AutoCloseable", class0.toString());
      assertEquals(1537, class0.getModifiers());
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("jsonpath can not be null");
      assertFalse(boolean0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Map<String, String> map0 = null;
      Class<Insets> class0 = Insets.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("jsonpath can not be null");
      assertNotNull(mockIllegalAccessException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("(^{<!u6V?^u{ A*E");
      assertNotNull(threadGroup0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[1];
      threadGroupArray0[0] = threadGroup0;
      int int0 = threadGroup0.enumerate(threadGroupArray0);
      assertEquals(0, int0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "j");
      assertNotNull(threadGroup1);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertEquals("j", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "can not cast to : ", 1874L);
      assertNotNull(mockThread0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      
      MockThread mockThread1 = new MockThread(threadGroup1, thread0);
      assertNotNull(mockThread1);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertEquals("j", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ThreadGroup threadGroup2 = new ThreadGroup((String) null);
      assertNotNull(threadGroup2);
      assertNull(threadGroup2.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      
      Thread[] threadArray0 = new Thread[7];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = thread0;
      threadArray0[4] = thread0;
      threadArray0[5] = (Thread) mockThread1;
      threadArray0[6] = (Thread) mockThread0;
      MockThread.dumpStack();
      int int1 = threadGroup2.enumerate(threadArray0);
      assertEquals(0, int1);
      assertNotSame(threadGroup2, threadGroup1);
      assertNotSame(threadGroup2, threadGroup0);
      assertNull(threadGroup2.getName());
      assertTrue(int1 == int0);
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread1, mockThread0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertEquals("j", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread1, mockThread0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertEquals("j", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Class<?> class0 = TypeUtils.loadClass("(^{<!u6V?^u{ A*E", classLoader0);
      assertNull(class0);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread1, mockThread0);
      assertEquals("(^{<!u6V?^u{ A*E", threadGroup0.getName());
      assertEquals("j", threadGroup1.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockFile mockFile0 = new MockFile("wLc~6'~o- ", "can not cast to : ");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- /can not cast to : ", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("can not cast to : ", mockFile0.getName());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- /can not cast to : ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("can not cast to : ", mockFile0.getName());
      
      mockPrintStream0.print('4');
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- /can not cast to : ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("can not cast to : ", mockFile0.getName());
      
      NumberFormatException numberFormatException0 = new NumberFormatException("fBxja\".hl.");
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException: fBxja\".hl.", numberFormatException0.toString());
      assertEquals("fBxja\".hl.", numberFormatException0.getMessage());
      
      numberFormatException0.printStackTrace((PrintStream) mockPrintStream0);
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- /can not cast to : ", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1103L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/wLc~6'~o- ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("can not cast to : ", mockFile0.getName());
      assertEquals("java.lang.NumberFormatException: fBxja\".hl.", numberFormatException0.toString());
      assertEquals("fBxja\".hl.", numberFormatException0.getMessage());
      
      boolean boolean0 = TypeUtils.isNumber("shortMonths");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("(^{<!u6V?^u{ A*E");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) threadGroup0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.ThreadGroup[name=(^{<!u6V?^u{ A*E,maxpri=10]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      Thread[] threadArray0 = new Thread[7];
      threadArray0[3] = thread0;
      threadArray0[4] = thread0;
      NumberFormatException numberFormatException0 = new NumberFormatException("fBxja\".hl.");
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException: fBxja\".hl.", numberFormatException0.toString());
      assertEquals("fBxja\".hl.", numberFormatException0.getMessage());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      WeakHashMap<SQLNonTransientConnectionException, InstantiationError> weakHashMap0 = new WeakHashMap<SQLNonTransientConnectionException, InstantiationError>();
      assertNotNull(weakHashMap0);
      
      WeakHashMap<SQLNonTransientConnectionException, InstantiationError> weakHashMap1 = new WeakHashMap<SQLNonTransientConnectionException, InstantiationError>();
      assertNotNull(weakHashMap1);
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getClass", "R$I6", 3097);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: getClass", sQLNonTransientConnectionException0.toString());
      assertEquals(3097, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getClass", sQLNonTransientConnectionException0.getMessage());
      assertEquals("R$I6", sQLNonTransientConnectionException0.getSQLState());
      
      InstantiationError instantiationError0 = new InstantiationError("oW%7mRehY/");
      assertNotNull(instantiationError0);
      assertEquals("oW%7mRehY/", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: oW%7mRehY/", instantiationError0.toString());
      
      InstantiationError instantiationError1 = weakHashMap1.put(sQLNonTransientConnectionException0, instantiationError0);
      assertNull(instantiationError1);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertEquals("java.sql.SQLNonTransientConnectionException: getClass", sQLNonTransientConnectionException0.toString());
      assertEquals(3097, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getClass", sQLNonTransientConnectionException0.getMessage());
      assertEquals("R$I6", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("oW%7mRehY/", instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError: oW%7mRehY/", instantiationError0.toString());
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      
      weakHashMap0.putAll(weakHashMap1);
      assertNotSame(weakHashMap0, weakHashMap1);
      assertNotSame(weakHashMap1, weakHashMap0);
      assertTrue(weakHashMap0.equals((Object)weakHashMap1));
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {java.sql.SQLNonTransientConnectionException: getClass=java.lang.InstantiationError: oW%7mRehY/}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [I", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      String string0 = hashtable0.put("andIncrement", "andIncrement");
      assertNull(string0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      String string1 = TypeUtils.castToString(hashtable0);
      assertNotNull(string1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      String string2 = null;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string3 = "getPercent";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java/lang/Short", "getPercent", illegalThreadStateException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("java/lang/Short", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java/lang/Short", sQLNonTransientConnectionException0.toString());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(12, 12);
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Set<String> set0 = hashtable0.keySet();
      assertNotNull(set0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = TypeUtils.isNumber("Pw^V,O@|1");
      assertFalse(boolean0);
      
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      long long0 = TypeUtils.fnv1a_64_lower("*b9<+t3^ali[[C ");
      assertEquals((-6507544740126705561L), long0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("gFrr}.;ORdY", "Ljava.awt.Point", "gFrr}.;ORdY", 2080);
      assertNotNull(stackTraceElement0);
      assertEquals(2080, stackTraceElement0.getLineNumber());
      assertEquals("gFrr}.;ORdY", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Ljava.awt.Point", stackTraceElement0.getMethodName());
      assertEquals("gFrr}.;ORdY.Ljava.awt.Point(gFrr}.;ORdY:2080)", stackTraceElement0.toString());
      assertEquals("gFrr}.;ORdY", stackTraceElement0.getFileName());
      
      String string0 = TypeUtils.castToString("gFrr}.;ORdY");
      assertNotNull(string0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = null;
      Byte byte0 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Date date0 = TypeUtils.castToDate(byte1);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertTrue(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      Class<InternalError> class3 = InternalError.class;
      Class<Collator> class4 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class4, (Type) class2, propertyNamingStrategy0, false, false);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("o", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. o
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("_q-{");
      assertNotNull(threadGroup0);
      assertEquals("_q-{", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, ".[~K6#wh|Ng");
      assertNotNull(threadGroup1);
      assertEquals("_q-{", threadGroup0.getName());
      assertEquals(".[~K6#wh|Ng", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "_q-{", (-1014497654951707632L));
      assertNotNull(mockThread0);
      assertEquals("_q-{", threadGroup0.getName());
      assertEquals(".[~K6#wh|Ng", threadGroup1.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Thread[] threadArray0 = new Thread[28];
      threadArray0[0] = thread0;
      MockThread mockThread1 = new MockThread("getNumberFormat");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = thread0;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread0;
      threadArray0[7] = (Thread) mockThread1;
      threadArray0[8] = (Thread) mockThread1;
      Long long0 = Long.getLong((String) null, (long) 0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = TypeUtils.castToShort(long0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Class<Float> class1 = Float.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<SQLTransientException> class1 = SQLTransientException.class;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      FieldInfo fieldInfo0 = new FieldInfo("j", class1, class2, class2, (Field) null, 42, (-252), (-715));
      assertNotNull(fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("j", fieldInfo0.toString());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-252), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-715), fieldInfo0.parserFeatures);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertNotNull(beanContext0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("j", fieldInfo0.toString());
      assertEquals((-252), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("j", beanContext0.getName());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-252), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-715), fieldInfo0.parserFeatures);
      
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("j", fieldInfo0.toString());
      assertEquals((-252), beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("j", beanContext0.getName());
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-252), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertEquals((-715), fieldInfo0.parserFeatures);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<Point> class0 = Point.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<Short> class1 = Short.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "ha", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("ha", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      assertNotNull(stackOverflowError0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      ThreadGroup threadGroup0 = new ThreadGroup("net.sf.cglib.proxy.Factory");
      assertNotNull(threadGroup0);
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread("net.sf.cglib.proxy.Factory");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      StackTraceElement[] stackTraceElementArray0 = mockThread1.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader2);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader2, classLoader1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      classLoader0.setClassAssertionStatus("le", true);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ClassLoader classLoader3 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader3);
      assertSame(classLoader3, classLoader2);
      assertSame(classLoader3, classLoader1);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("net.sf.cglib.proxy.Factory");
      assertNull(class2);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "{\"$ref\":\"";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      Thread[] threadArray0 = new Thread[5];
      int int0 = Calendar.SEPTEMBER;
      assertEquals(8, int0);
      
      boolean boolean1 = MockThread.interrupted();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Insets insets0 = new Insets(8, 1283, 1283, 1283);
      assertNotNull(insets0);
      assertEquals(1283, insets0.left);
      assertEquals(1283, insets0.right);
      assertEquals(8, insets0.top);
      assertEquals(1283, insets0.bottom);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("{\"$ref\":\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {\"$ref\":\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1787, 1787);
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = hashtable0.put("fileName", "fileName");
      assertNull(string0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-17);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)110, (byte)71, (byte) (-17)}, byteArray0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "printerResolution");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constructor<Jdk8DateCodec>[] constructorArray0 = (Constructor<Jdk8DateCodec>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      Thread[] threadArray0 = new Thread[7];
      threadArray0[3] = thread0;
      threadArray0[4] = thread0;
      NumberFormatException numberFormatException0 = new NumberFormatException("fBxja\".hl.");
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException: fBxja\".hl.", numberFormatException0.toString());
      assertEquals("fBxja\".hl.", numberFormatException0.getMessage());
      
      boolean boolean0 = TypeUtils.isNumber("shortMonths");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("(^{<!u6V?^u{ A*E");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava/lang/Object;", classLoader0, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)15, (byte)62, (byte)35, (byte) (-27), (byte)127, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) byteArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [B@3135cd76
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getgetMessage";
      stringArray0[1] = "/Yi]2V8H-";
      stringArray0[2] = "<Ya]f7^M/";
      stringArray0[3] = "[short";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      assertNotNull(jSONSerializer0);
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertEquals(0, jSONSerializer0.getIndentCount());
      
      WeakHashMap<DateFormatSymbols, SQLTransientException> weakHashMap0 = new WeakHashMap<DateFormatSymbols, SQLTransientException>();
      assertNotNull(weakHashMap0);
      
      boolean boolean1 = simplePropertyPreFilter0.apply(jSONSerializer0, weakHashMap0, "[short");
      assertTrue(boolean1);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertTrue(boolean1 == boolean0);
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertNotNull(class1);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      
      boolean boolean2 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean2);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("/Yi]2V8H-");
      assertNotNull(threadGroup0);
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "[@J+ kroT&W)tMq");
      assertNotNull(mockThread0);
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "2'K!20vM$-g{-09 =");
      assertNotNull(mockThread1);
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "[short", 48L);
      assertNotNull(mockThread3);
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread3, mockThread1);
      assertNotSame(mockThread3, mockThread2);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertEquals("/Yi]2V8H-", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[@J+ kroT&W)tMq", classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotNull(parserConfig1);
      assertSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "has", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      int int0 = (-904);
      boolean boolean0 = Character.isIdeographic((-904));
      assertFalse(boolean0);
      
      Character character1 = TypeUtils.castToChar(character0);
      assertEquals('6', (char)character1);
      assertNotNull(character1);
      
      Class<SQLException> class0 = SQLException.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<String, String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getPercent", "ha", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("getPercent", sQLNonTransientConnectionException0.getMessage());
      assertEquals("ha", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: getPercent", sQLNonTransientConnectionException0.toString());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNotNull(stackOverflowError0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      Throwable throwable0 = stackOverflowError0.initCause((Throwable) null);
      assertNotNull(throwable0);
      assertSame(stackOverflowError0, throwable0);
      assertSame(throwable0, stackOverflowError0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(throwable0.getMessage());
      assertEquals("java.lang.StackOverflowError", throwable0.toString());
      
      Throwable[] throwableArray0 = stackOverflowError0.getSuppressed();
      assertNotNull(throwableArray0);
      assertSame(stackOverflowError0, throwable0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) parameterizedTypeImpl0;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      assertEquals("char", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getPercent", (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@41734904
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Type type0 = null;
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("toS").when(biFunction0).toString();
      String string0 = identityHashMap0.put("java.lang.InternalError", "toS");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      ThreadGroup threadGroup0 = new ThreadGroup("g9}e-");
      assertNotNull(threadGroup0);
      assertEquals("g9}e-", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      mockThread0.setContextClassLoader((ClassLoader) null);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("7{s.d;8y5qzWINH(");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: 7{s.d;8y5qzWINH(", illegalThreadStateException0.toString());
      assertEquals("7{s.d;8y5qzWINH(", illegalThreadStateException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      List<FieldInfo> list0 = new ArrayList<FieldInfo>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = TypeUtils.decapitalize("o");
      assertEquals("o", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(biFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : toS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "getgetCause";
      Locale locale0 = TypeUtils.toLocale("getgetCause");
      assertNotNull(locale0);
      assertEquals("getgetcause", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("getgetcause", locale0.getLanguage());
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
      
      long long1 = 48L;
      String string1 = "hashCode";
      ThreadGroup threadGroup0 = new ThreadGroup("hashCode");
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = null;
      try {
        threadGroup1 = new ThreadGroup((ThreadGroup) null, "rfdi=`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ThreadGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1787, 1787);
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Set<String> set0 = hashtable0.keySet();
      assertNotNull(set0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = "Ho5}nGP?-Lw9du";
      String string1 = hashtable0.put("fileName", "Ho5}nGP?-Lw9du");
      assertNull(string1);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isNumber("getMetaClass");
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      String string2 = hashtable0.put("getMetaClass", "fastjson.parser.autoTypeAccept");
      assertNull(string2);
      assertEquals(2, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Class<Annotation> class0 = Annotation.class;
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(2, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      boolean boolean1 = TypeUtils.isNumber(" Q9$S=PY");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(12, 12);
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Set<String> set0 = hashtable0.keySet();
      assertNotNull(set0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<AtomicLong> class1 = AtomicLong.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) identityHashMap1, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      
      boolean boolean0 = TypeUtils.isNumber("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Field field0 = ParserConfig.getFieldFromCache("zw", identityHashMap0);
      assertNull(field0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(identityHashMap0.equals((Object)identityHashMap1));
      
      Class<Point> class2 = Point.class;
      Class<NumberDeserializer> class3 = NumberDeserializer.class;
      Class<Character> class4 = Character.class;
      FieldInfo fieldInfo0 = new FieldInfo("Pw^V/O@|1", class3, class4, class0, (Field) null, 3059, 15, (-2547));
      assertNotNull(fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("Pw^V/O@|1", fieldInfo0.toString());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertEquals((-2547), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      assertNotNull(beanContext0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("Pw^V/O@|1", fieldInfo0.toString());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Pw^V/O@|1", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertEquals((-2547), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      Class<Annotation> class5 = Annotation.class;
      Annotation annotation0 = beanContext0.getAnnation(class5);
      assertNull(annotation0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("Pw^V/O@|1", fieldInfo0.toString());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Pw^V/O@|1", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertEquals((-2547), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("Pw^V/O@|1", fieldInfo0.toString());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Pw^V/O@|1", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertEquals((-2547), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      Method method1 = beanContext0.getMethod();
      assertNull(method1);
      assertNull(fieldInfo0.getFormat());
      assertEquals("Pw^V/O@|1", fieldInfo0.toString());
      assertEquals(15, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Pw^V/O@|1", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(15, fieldInfo0.serialzeFeatures);
      assertEquals((-2547), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      Byte byte0 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte0);
      assertNotNull(byte0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("LLjava.awt.Point");
      assertEquals((-1988788987009875921L), long0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("LLjava.awt.Point");
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = mockPrintStream0.checkError();
      assertFalse(boolean0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("");
      assertNotNull(numberFormatException0);
      assertEquals("", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: ", numberFormatException0.toString());
      
      Throwable[] throwableArray0 = numberFormatException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: ", numberFormatException0.toString());
      
      numberFormatException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: ", numberFormatException0.toString());
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isNumber("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Long long1 = TypeUtils.castToLong((Object) null);
      assertNull(long1);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("LLjava.awt.Point");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      System.setCurrentTimeMillis((-3750763034362895579L));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "(^{<!u6V?^u{ A*E";
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      String string1 = null;
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("(^{<!u6V?^u{ A*E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (^{<!u6V?^u{ A*E
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<Point> class0 = Point.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<Short> class1 = Short.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "ha", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("ha", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      assertNotNull(stackOverflowError0);
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class2);
      
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      assertNotNull(parameterizedTypeImpl1);
      
      Insets insets0 = new Insets(974, 1188, 107, 1188);
      assertNotNull(insets0);
      assertEquals(107, insets0.bottom);
      assertEquals(1188, insets0.left);
      assertEquals(1188, insets0.right);
      assertEquals(974, insets0.top);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) insets0, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support awt class : com.alibaba.fastjson.util.ParameterizedTypeImpl@d09c455
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ThreadGroup threadGroup0 = new ThreadGroup("getgetClass");
      assertNotNull(threadGroup0);
      assertEquals("getgetClass", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup("getgetClass");
      assertNotNull(threadGroup1);
      assertEquals("getgetClass", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null, "getgetClass");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "_asm", 66L);
      assertNotNull(mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread("~");
      assertNotNull(mockThread2);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      classLoader0.setClassAssertionStatus("~", false);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader1);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader1, classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotNull(classLoader2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader1, classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("~", classLoader2);
      assertNull(class0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader1, classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      long long0 = TypeUtils.fnv1a_64_lower("L.Tv_");
      assertEquals((-5986476135144823931L), long0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      classLoader0.setClassAssertionStatus("4YoAhX[a&NZSdn+GJb", false);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4YoAhX[a&NZSdn+GJb");
      assertFalse(boolean0);
      
      Rectangle rectangle0 = new Rectangle();
      assertNotNull(rectangle0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle2D.intersect(rectangle0, rectangle0, rectangle0);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertNotNull(rectangle1);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.width);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      classLoader0.setDefaultAssertionStatus(true);
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap1);
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      assertNotNull(noClassDefFoundError0);
      assertNull(noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError", noClassDefFoundError0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f}=J9^*<", "GE", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("GE", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: f}=J9^*<", sQLNonTransientConnectionException0.toString());
      assertEquals("f}=J9^*<", sQLNonTransientConnectionException0.getMessage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("4YoAhX[a&NZSdn+GJb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "can not cast to boolean, value : ";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("can not cast to boolean, value : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : can not cast to boolean, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long((-368L));
      assertEquals((-368L), (long)long0);
      assertNotNull(long0);
      
      int int0 = Long.compareUnsigned((-368L), (-368L));
      assertEquals(0, int0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = TypeUtils.isNumber("L");
      assertFalse(boolean1);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("L");
      assertNotNull(illegalThreadStateException0);
      assertEquals("L", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: L", illegalThreadStateException0.toString());
      
      String string0 = illegalThreadStateException0.getLocalizedMessage();
      assertEquals("L", string0);
      assertNotNull(string0);
      assertEquals("L", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: L", illegalThreadStateException0.toString());
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      SQLException sQLException0 = new SQLException(illegalThreadStateException0);
      assertNotNull(sQLException0);
      assertEquals("L", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: L", illegalThreadStateException0.toString());
      assertEquals("java.sql.SQLException: java.lang.IllegalThreadStateException: L", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.lang.IllegalThreadStateException: L", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("L", "L");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("L", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: L", sQLNonTransientConnectionException0.toString());
      assertEquals("L", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      Class<Calendar> class0 = Calendar.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.clearClassMapping();
      System.setCurrentTimeMillis((-529L));
      SerializeConfig serializeConfig0 = new SerializeConfig();
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      LinkedHashMap<SQLNonTransientConnectionException, Date> linkedHashMap0 = new LinkedHashMap<SQLNonTransientConnectionException, Date>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<BigDecimal> class0 = BigDecimal.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("{\"$ref\":\"");
      assertNotNull(threadGroup0);
      assertEquals("{\"$ref\":\"", threadGroup0.getName());
      
      Class<Properties> class0 = Properties.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)20;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-35), (byte)20}, byteArray0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      Insets insets0 = new Insets(2154, 2351, 673, (byte) (-35));
      assertNotNull(insets0);
      assertEquals(673, insets0.bottom);
      assertEquals(2154, insets0.top);
      assertEquals((-35), insets0.right);
      assertEquals(2351, insets0.left);
      
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{\"$ref\":\"", "{\"$ref\":\"", 937);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(937, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("{\"$ref\":\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals("{\"$ref\":\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: {\"$ref\":\"", sQLNonTransientConnectionException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("{\"$ref\":\"", concurrentHashMap0, sQLNonTransientConnectionException0);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: {\"$ref\":\"", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("{\"$ref\":\"", sQLClientInfoException0.getMessage());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(937, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("{\"$ref\":\"", sQLNonTransientConnectionException0.getMessage());
      assertEquals("{\"$ref\":\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: {\"$ref\":\"", sQLNonTransientConnectionException0.toString());
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getPercent", "/J_a", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("/J_a", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: getPercent", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      String string0 = "vCyD-p :b1ON";
      StackOverflowError stackOverflowError0 = new StackOverflowError("vCyD-p :b1ON");
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError: vCyD-p :b1ON", stackOverflowError0.toString());
      assertEquals("vCyD-p :b1ON", stackOverflowError0.getMessage());
      
      Throwable throwable0 = stackOverflowError0.initCause((Throwable) null);
      assertNotNull(throwable0);
      assertSame(stackOverflowError0, throwable0);
      assertSame(throwable0, stackOverflowError0);
      assertEquals("java.lang.StackOverflowError: vCyD-p :b1ON", stackOverflowError0.toString());
      assertEquals("vCyD-p :b1ON", stackOverflowError0.getMessage());
      assertEquals("vCyD-p :b1ON", throwable0.getMessage());
      assertEquals("java.lang.StackOverflowError: vCyD-p :b1ON", throwable0.toString());
      
      Throwable[] throwableArray0 = stackOverflowError0.getSuppressed();
      assertNotNull(throwableArray0);
      assertSame(stackOverflowError0, throwable0);
      assertEquals("java.lang.StackOverflowError: vCyD-p :b1ON", stackOverflowError0.toString());
      assertEquals("vCyD-p :b1ON", stackOverflowError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(".0000-00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : .0000-00
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("jsonpath can not be null");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "jsonpath can not be null", class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("{\"$ref\":\"");
      assertNotNull(threadGroup0);
      assertEquals("{\"$ref\":\"", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "org.springframework.security.web.savedrequest.SavedCookie");
      assertNotNull(mockThread0);
      assertEquals("{\"$ref\":\"", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      int int0 = Calendar.SEPTEMBER;
      assertEquals(8, int0);
      
      boolean boolean1 = MockThread.interrupted();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{\"$ref\":\"", "{\"$ref\":\"", 1509950721);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: {\"$ref\":\"", sQLFeatureNotSupportedException0.toString());
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1509950721, sQLFeatureNotSupportedException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: {\"$ref\":\"", sQLFeatureNotSupportedException0.toString());
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1509950721, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: {\"$ref\":\"", sQLFeatureNotSupportedException1.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: {\"$ref\":\"", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.springframework.security.web.savedrequest.SavedCookie", "8^J (IYH.qDcZV3*", sQLFeatureNotSupportedException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: {\"$ref\":\"", sQLFeatureNotSupportedException0.toString());
      assertEquals("{\"$ref\":\"", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1509950721, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("8^J (IYH.qDcZV3*", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("org.springframework.security.web.savedrequest.SavedCookie", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.springframework.security.web.savedrequest.SavedCookie", sQLNonTransientConnectionException0.toString());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      
      boolean boolean2 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      BigDecimal bigDecimal0 = new BigDecimal(1509950721);
      assertNotNull(bigDecimal0);
      assertEquals((short)1281, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Integer integer0 = TypeUtils.castToInt(bigDecimal0);
      assertEquals(1509950721, (int)integer0);
      assertNotNull(integer0);
      assertEquals((short)1281, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(integer0.equals((Object)int0));
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-557));
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("String index out of range: -557", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -557", stringIndexOutOfBoundsException0.toString());
      
      Class<Time> class0 = Time.class;
      Time time0 = TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long((-368L));
      assertEquals((-368L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("L", long0);
      assertEquals((-368L), (long)long1);
      assertNotNull(long1);
      
      int int0 = Long.compareUnsigned((-368L), (-368L));
      assertEquals(0, int0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Calendar> class0 = Calendar.class;
      Class<Calendar> class1 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("S");
      assertNull(class0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("K$Hov]r2D@3v4q");
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "S");
      assertNotNull(threadGroup1);
      assertEquals("S", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[3];
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D|.=2");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("D|.=2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D|.=2", sQLFeatureNotSupportedException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap", (-71), sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("D|.=2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D|.=2", sQLFeatureNotSupportedException0.toString());
      assertEquals((-71), sQLTransientConnectionException0.getErrorCode());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", sQLTransientConnectionException0.getSQLState());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Lorg.springframework.util.LinkedMultiValueMap", sQLTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S", "org.springframework.cglib.proxy.Factory", (-71), sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("D|.=2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D|.=2", sQLFeatureNotSupportedException0.toString());
      assertEquals("S", sQLTransactionRollbackException0.getMessage());
      assertEquals((-71), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: S", sQLTransactionRollbackException0.toString());
      assertEquals("org.springframework.cglib.proxy.Factory", sQLTransactionRollbackException0.getSQLState());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      assertEquals("D|.=2", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: D|.=2", sQLFeatureNotSupportedException0.toString());
      assertEquals("S", sQLTransactionRollbackException0.getMessage());
      assertEquals((-71), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: S", sQLTransactionRollbackException0.toString());
      assertEquals("org.springframework.cglib.proxy.Factory", sQLTransactionRollbackException0.getSQLState());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<Rectangle> class1 = Rectangle.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      assertNotNull(list0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<?> class2 = TypeUtils.getClassFromMapping("K$Hov]r2D@3v4q");
      assertNull(class2);
      
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "getZeroDigit";
      Locale locale0 = TypeUtils.toLocale("S");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("s", locale0.getLanguage());
      assertEquals("s", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("rS}accH-r4*-\"MCxSvk");
      assertEquals(762107215777884562L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      int int0 = Calendar.SEPTEMBER;
      assertEquals(8, int0);
      
      boolean boolean1 = MockThread.interrupted();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("{\"$ref\":\"", false);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      assertNotNull(treeSet0);
      
      Class<Time> class0 = Time.class;
      WeakHashMap<MockJapaneseDate, ChoiceFormat> weakHashMap0 = new WeakHashMap<MockJapaneseDate, ChoiceFormat>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
      
      System.setCurrentTimeMillis((-529L));
      ThreadGroup threadGroup0 = new ThreadGroup("mrd39(ko_<OGT]*!8");
      assertNotNull(threadGroup0);
      assertEquals("mrd39(ko_<OGT]*!8", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "org.hibernate.Hibernate");
      assertNotNull(mockThread0);
      assertEquals("mrd39(ko_<OGT]*!8", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setDefaultAssertionStatus(true);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig1 = null;
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ASMClassLoader@65cf4f6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("jsonpath can not be null");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TypeUtils.compatibleWithFieldName = false;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(20, 20, 20, 53, 53, (-4423));
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=20,MONTH=20,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=20,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=53,HOUR_OF_DAY=53,MINUTE=53,SECOND=-4423,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=20,MONTH=20,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=20,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=53,HOUR_OF_DAY=53,MINUTE=53,SECOND=-4423,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Integer integer0 = Integer.getInteger("jsonpath can not be null", (-4423));
      assertEquals((-4423), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=20,MONTH=20,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=20,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=53,HOUR_OF_DAY=53,MINUTE=53,SECOND=-4423,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("jsonpath can not be null");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.compatibleWithFieldName = false;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("jsonpath can not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : jsonpath can not be null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Function<String, Byte> function0 = (Function<String, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Byte byte0 = concurrentHashMap0.searchValues(908L, (Function<? super String, ? extends Byte>) function0);
      assertNull(byte0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TypeUtils.clearClassMapping();
      AtomicInteger atomicInteger0 = new AtomicInteger((-2522));
      assertNotNull(atomicInteger0);
      assertEquals((-2522.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-2522.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-2522), atomicInteger0.intValue());
      assertEquals((-2522L), atomicInteger0.longValue());
      assertEquals((-2522), atomicInteger0.get());
      assertEquals((short) (-2522), atomicInteger0.shortValue());
      assertEquals((byte)38, atomicInteger0.byteValue());
      assertEquals("-2522", atomicInteger0.toString());
      
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      int int0 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertEquals(0, int0);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      
      Double double0 = TypeUtils.castToDouble(atomicInteger0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0, atomicInteger0.intValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals((short)0, atomicInteger0.shortValue());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("g9}e-");
      assertNotNull(threadGroup0);
      assertEquals("g9}e-", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("java.lang.InternalError");
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.InternalError", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: java.lang.InternalError", noSuchFieldError0.toString());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      Class<?> class1 = TypeUtils.loadClass("Y,", (ClassLoader) null);
      assertNull(class1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setPackageAssertionStatus("TODO", true);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      assertNotNull(treeSet0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertNotNull(parserConfig0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((Class<?>) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "has");
      assertFalse(boolean0);
      
      HttpCookie httpCookie0 = new HttpCookie("\"6baU9{}'", "vBv+tQk$");
      assertNotNull(httpCookie0);
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertEquals("\"6baU9{}'=\"vBv+tQk$\"", httpCookie0.toString());
      assertFalse(httpCookie0.getDiscard());
      assertEquals("\"6baU9{}'", httpCookie0.getName());
      assertNull(httpCookie0.getPath());
      assertNull(httpCookie0.getComment());
      assertFalse(httpCookie0.getSecure());
      assertNull(httpCookie0.getPortlist());
      assertFalse(httpCookie0.hasExpired());
      assertNull(httpCookie0.getCommentURL());
      assertEquals("vBv+tQk$", httpCookie0.getValue());
      assertFalse(httpCookie0.isHttpOnly());
      assertNull(httpCookie0.getDomain());
      assertEquals(1, httpCookie0.getVersion());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertNotNull(list0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLClientInfoException", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getPercent", "getPercent", (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: getPercent", sQLNonTransientConnectionException0.toString());
      assertEquals("getPercent", sQLNonTransientConnectionException0.getSQLState());
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) class0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertNull(class1);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      typeArray0[6] = (Type) null;
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("long", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      
      typeArray0[8] = (Type) class2;
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotNull(parserConfig1);
      assertSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = identityHashMap0.put("jav^.lang.InternalError", "toS");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jav^.lang.InternalError";
      stringArray0[1] = "K=f";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<?> class0 = simplePropertyPreFilter0.getClazz();
      assertNull(class0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertEquals("long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      
      ThreadGroup threadGroup0 = new ThreadGroup("m-=q0HG");
      assertNotNull(threadGroup0);
      assertEquals("m-=q0HG", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread("fastjson.properties");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertNotSame(mockThread0, mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      assertEquals("m-=q0HG", threadGroup0.getName());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertNotSame(mockThread0, mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertNotNull(classLoader3);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader3));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(classLoader2.equals((Object)classLoader3));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory2);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader3));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("g<DsacW$hk}CqtsKg`");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: g<DsacW$hk}CqtsKg`", illegalThreadStateException0.toString());
      assertEquals("g<DsacW$hk}CqtsKg`", illegalThreadStateException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.IllegalThreadStateException: g<DsacW$hk}CqtsKg`
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "v:~A]7%DB^@4EF";
      String string1 = TypeUtils.decapitalize("v:~A]7%DB^@4EF");
      assertEquals("v:~A]7%DB^@4EF", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "v:~A]7%DB^@4EF", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
