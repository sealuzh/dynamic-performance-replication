/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:49:23 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      int int0 = (-62);
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.consume((-62));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DKnt*:>r]j");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("K", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      xPathLexer0.consume(1746);
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (nt)", string0);
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1%o;D1x");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar('q');
      xPathLexer0.comma();
      xPathLexer0.not();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}-[)Rp");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(62);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.setXPath("*cL#f");
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.LA(27);
      xPathLexer0.doubleColon();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar(')');
      Token token1 = xPathLexer0.at();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("0", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (E)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals("*", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("}", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("V", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("_", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer(":Keaw-");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.not();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume(1223);
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1230, int0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.plus();
      int int1 = xPathLexer0.endPosition();
      assertEquals(0, int1);
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertNull(token11);
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(")", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("D", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("Q", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("!", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("[ (");
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(" (", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('e');
      assertTrue(boolean0);
      
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.or();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("dWShgC", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("!", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("5", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("clPn", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(":", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.and();
      Token token4 = xPathLexer0.dollar();
      assertEquals("F", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('q');
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals("S", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.at();
      assertEquals("", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.dollar();
      assertEquals("=", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("g^c(Q5,?A;9KuQS#");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("^", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (g)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("E0uQ3*:}V_:");
      xPathLexer1.nextToken();
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("Q5", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lsUcEgX9)");
      xPathLexer0.whitespace();
      xPathLexer0.consume(0);
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.minus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierChar('%');
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.setXPath("10\u0004k,{");
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('h');
      xPathLexer0.consume();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("E", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("u", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (0)", string0);
      
      Token token4 = xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(20, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("V_", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      xPathLexer0.number();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(23);
      xPathLexer0.at();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("J=");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.not();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer1.currentPosition();
      xPathLexer1.nextToken();
      xPathLexer1.identifier();
      xPathLexer0.identifier();
      xPathLexer2.star();
      xPathLexer1.mod();
      xPathLexer1.plus();
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(";D", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("T", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      Token token6 = xPathLexer0.slashes();
      assertEquals("7", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("^", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Z", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals(";D", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("T", token3.getTokenText());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      Token token4 = xPathLexer0.slashes();
      assertEquals("7", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(2, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".U:& ;");
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("y", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("=", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(";D", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("T", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.setXPath("78)JFHD6)@g~L9}J");
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      String string1 = xPathLexer0.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("elg");
      Token token1 = xPathLexer2.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer2.literal();
      assertNull(token2);
      
      xPathLexer2.and();
      xPathLexer1.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gK$brYaov83+wq]");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.plus();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("gK$brYaov83+wq]");
      xPathLexer0.div();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      xPathLexer0.LA(62);
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('$');
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.setXPath("gK$brYaov83+wq]");
      assertEquals("gK$brYaov83+wq]", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("amUJ:UZO~AE=}u:_K");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("+", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("WShgC", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      token0.toString();
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.getPreviousToken();
      Token token4 = xPathLexer0.equals();
      assertEquals("x", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("0", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("b16U", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.star();
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("DEhc=gPt");
      Token token1 = xPathLexer3.nextToken();
      assertEquals("DEhc", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(5, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      String string0 = xPathLexer0.getXPath();
      assertEquals("(+dWShgC+", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dmGhVPr;I*e[Ya");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lequ:k(3oMe");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.equals();
      assertEquals("l", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("equ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(";DTF", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(";D", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("T", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("FH4D6", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("dWShgC", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("v<Z");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.getXPath();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Oa`/");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Oa", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}$/HGn#Q5){xx");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.consume(4);
      assertEquals("y=^Z;DTF", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("U0_^R*Gm>");
      Token token0 = xPathLexer1.rightParen();
      assertEquals("U", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("0", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("_^R*Gm>", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("`X6qt?%I{@|$");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("`X6qt?%I{@|$", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("I,01mK[v98mk'3HQ>a(");
      Token token3 = xPathLexer0.slashes();
      assertEquals("I", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(",", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("I,01mK[v98mk'3HQ>a(");
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("I", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("01", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Oa`/");
      xPathLexer0.setXPath("4M-;8kwuc:Qu}<Rp2iY");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      xPathLexer1.leftParen();
      xPathLexer1.and();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("kw", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals("c", token6.getTokenText());
      
      xPathLexer1.identifier();
      xPathLexer0.consume(22);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      xPathLexer3.getPreviousToken();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("4M-;8kwuc:Qu}<Rp2iY");
      xPathLexer4.consume(4);
      xPathLexer0.leftParen();
      xPathLexer2.getPreviousToken();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Oa`/");
      xPathLexer0.getPreviousToken();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.comma();
      assertEquals("?", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("O", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("a", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("`", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("/", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("+", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("S", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.setXPath("9Rdc8#_Fjh1Au,");
      Token token3 = xPathLexer0.slashes();
      assertEquals("9", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("dc", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("8", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?Oa`/");
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?Oa`/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("I,01mK[v98mk'3HQ>a(");
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(",", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("01", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.setXPath("&<u!-tvi");
      xPathLexer1.mod();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0!Sf~-K2.");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.slashes();
      assertEquals("r", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.hasMoreChars();
      String string0 = token0.toString();
      assertEquals("[ (26) (=)", string0);
      
      xPathLexer0.isIdentifierChar(' ');
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("d2", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer0.comma();
      assertEquals("1", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("9", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("6", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("kGhOt", token7.getTokenText());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZOj++oY>=4y");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("m.PoX,e");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer1.not();
      Token token1 = xPathLexer2.at();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer2.identifier();
      xPathLexer1.star();
      xPathLexer2.mod();
      xPathLexer1.plus();
      xPathLexer2.or();
      token0.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("Z", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      Token token3 = xPathLexer0.at();
      assertEquals("x", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("0", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("b", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(3, token0.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("x", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("0b16U", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.rightParen();
      assertEquals("^", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.dollar();
      assertEquals("=", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("r", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer0.setXPath("g^c(Q5,?A;9KuQS#");
      xPathLexer0.number();
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("^c", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.setXPath("4^u .So.SW!%*6_GY;D");
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("x", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("0", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("b", token5.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.identifier();
      assertEquals("U", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals(">", token7.getTokenText());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
      
      Token token9 = xPathLexer0.number();
      token9.toString();
      String string1 = token9.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer0.setPreviousToken(token9);
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      assertEquals("CM", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ForbWq#::EuU");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.setXPath("dN]3<.gwoP?9I5&t[");
      xPathLexer1.mod();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("dN", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("r", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.setXPath("1%o;D1x");
      xPathLexer1.mod();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?O:a`/");
      XPathLexer xPathLexer1 = new XPathLexer("cPF");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.getXPath();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("?O", token3.getTokenText());
      
      Token token4 = xPathLexer2.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.setXPath("?O:a`/");
      xPathLexer1.mod();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!.");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer1.setXPath("N0!Sf~-K2.");
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("N", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer1.equals();
      assertEquals("0", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?O:a`/");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("a`/", token4.getTokenText());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("a", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('4');
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("(+dWShgC+");
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer1.not();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals("W", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("hgC", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("DCm|)k$[");
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("D", token4.getTokenText());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      XPathLexer xPathLexer2 = new XPathLexer("DCm|)k$[");
      Token token5 = xPathLexer2.slashes();
      assertEquals("D", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer3.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer2.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("Cm", token7.getTokenText());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals("|", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y^Z;AT");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("%_0^fJgg.)Uk~q");
      xPathLexer1.getXPath();
      Token token3 = xPathLexer1.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.notEquals();
      assertEquals("%_", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer2.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer2.setXPath("y^Z;AT");
      xPathLexer0.mod();
      Token token6 = xPathLexer2.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("N0!Sf~-K2.");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals("N", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m&1!%duo%j<");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("m", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.dots();
      assertEquals("E", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("uQ3*:}V_:", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".-Oj+oY)yP;9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("m.PoX,e");
      xPathLexer1.at();
      xPathLexer0.leftParen();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      String string0 = xPathLexer1.getXPath();
      assertEquals("m.PoX,e", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      assertEquals("$", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("r", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("xE");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("C;$b6A<4X1");
      Token token4 = xPathLexer0.not();
      assertEquals("!", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer1.setPreviousToken(token1);
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("x0b16U", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer2.identifier();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(9, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}$/HGn#Q5){xx");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.pipe();
      assertEquals("}", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("}$/HGn#Q5){xx");
      xPathLexer1.div();
      Token token1 = xPathLexer1.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.slashes();
      assertEquals("$/", token3.getTokenText());
      assertEquals(12, token3.getTokenType());
      
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(11, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
      
      Token token6 = xPathLexer2.number();
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(+dWShgC+");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("+", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("W", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("ShgC", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}$/LHGn#Q5){xx");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.equals();
      assertEquals("/", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("LHGn", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("Q", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      xPathLexer0.number();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("E", token1.getTokenText());
      
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("J=");
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("J=");
      Token token2 = xPathLexer1.slashes();
      assertEquals("J", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}$/LHGn#Q5){xx");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("}", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gK$brYaov83+wq]");
      Token token0 = xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('4');
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer1.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?O:a`/");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("?", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(":", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("a`/", token4.getTokenText());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("a", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("/", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar('c');
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gK$brYaov83+wq]");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (g)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      Token token1 = xPathLexer0.identifier();
      token1.toString();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("b", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals("r", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.currentPosition();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Yaov83", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer1.consume(0);
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.star();
      assertEquals("+", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.plus();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("UCFr[w'\"IuWfD'Gb>jk");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("UCFr", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}$/LHGn#Q5){xx");
      xPathLexer0.isIdentifierChar('H');
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("}$", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token1 = xPathLexer2.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("/", token2.getTokenText());
      
      xPathLexer1.operatorName();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
      
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("Gn", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gK$brYaov83+wq]");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (g)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token2 = xPathLexer0.pipe();
      assertEquals("b", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.currentPosition();
      xPathLexer0.setXPath("[ (5) (g)");
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(" ", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer1.mod();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      Token token7 = xPathLexer0.number();
      assertEquals("5", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      assertEquals(3, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Xoon");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("Xvoae#'2IYAut 0%'f");
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("X", token3.getTokenText());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("v", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("I,01mK[v98mk'3HQ>a(");
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("oae#'2IYAut 0%'f", token7.getTokenText());
      assertNotSame(token7, token4);
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("01", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?O:a`/");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("?O:a`/", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("@]\"qZfDVk!28<");
      xPathLexer0.mod();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      String string0 = token0.toString();
      assertEquals("[ (26) (=)", string0);
      
      xPathLexer0.isIdentifierChar(' ');
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.slashes();
      assertEquals("2", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("1", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("wC96kGhOt", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("I,01mK[v98mk'3HQ>a(");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token5);
      assertEquals(",", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals("01mK", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("[v", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$r${xf$|V");
      Token token0 = xPathLexer0.literal();
      assertNotNull(token0);
      assertEquals(27, token0.getTokenType());
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("x", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("f", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token5.getTokenText());
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("|", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals("V", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("I,01mK[v98mk'3HQ>a(");
      XPathLexer xPathLexer1 = new XPathLexer("}}HXr;k]");
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("HXr", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.setXPath("Xvoae#'2IYAut 0%'f");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.nextToken();
      assertNotSame(token4, token2);
      assertEquals("Xvoae#'2IYAut 0%'f", token4.getTokenText());
      
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gK$brYaov831+wq]");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals("gK", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (5) ($)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("brYaov831", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("+", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("q", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(4, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("+^");
      xPathLexer1.dollar();
      String string0 = xPathLexer0.getXPath();
      assertEquals(") (", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (=)", string0);
      
      xPathLexer0.isIdentifierChar(' ');
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("d2", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("1", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("w", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.slashes();
      assertEquals("C", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("96", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VT>gW}v");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("T", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("Xvoae#'2IYAut 0%'f");
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("Xvoae#'2IYAut 0%'f");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("$", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("*{i@odgR!/8;g");
      Token token2 = xPathLexer0.comma();
      assertEquals("Z", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*{i@odgR!/8;g");
      xPathLexer2.not();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      Token token5 = xPathLexer1.not();
      assertEquals("{", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("i", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer1.comma();
      assertEquals(")", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("(", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|l;Z_(QrN7F<[].'7");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (3) (|)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(";", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.star();
      assertEquals("Q", token3.getTokenText());
      
      xPathLexer0.mod();
      char char0 = xPathLexer0.LA(117);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("7", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("5%N\"Z9Xv1");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath(")");
      assertEquals(")", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gf:YsYb6H|]}p9O$[F@");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("gf:YsYb6H|]}p9O$[F@");
      xPathLexer1.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("f", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tt-rP$QF7");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("t", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("Q", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("7", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('Q');
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0!Sf~-K2.");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(23, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Sf~-K2.", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("$)", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("*{i@odgR!/8;g");
      xPathLexer0.comma();
      XPathLexer xPathLexer2 = new XPathLexer("*{i@odgR!/8;g");
      Token token1 = xPathLexer2.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer1.comma();
      assertEquals("*", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer1.nextToken();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("Z", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer(">-SsXYD7b)nE*");
      xPathLexer1.dollar();
      xPathLexer1.hasMoreChars();
      xPathLexer1.nextToken();
      xPathLexer1.at();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("n72]PT<YI*");
      Token token1 = xPathLexer1.colon();
      assertEquals("n", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("n72]PT<YI*");
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("n72", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("zihua&@~BZ5/<G");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("zihua", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|!s+'uk*tuh<J");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("|!", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~j`~ N6zZ");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" M(");
      Token token0 = xPathLexer0.minus();
      assertEquals(" ", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("M", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("n72]PT<YI*");
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      xPathLexer0.setXPath("n72]PT<YI*");
      Token token1 = xPathLexer0.not();
      assertEquals("n", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("72", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q.Hn.ZQ/.gl*a\"T/");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R=W-&uBe(C50");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("R", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<:-J&SyKim");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",<");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertNotNull(token1);
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'nk]W6M6#$mutG`W");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q.Hn.ZQ/.gl*a\"T/");
      Token token0 = xPathLexer0.dots();
      assertEquals(14, token0.getTokenType());
      assertEquals("Q.", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("H", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      char char0 = xPathLexer1.LA(67);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q.Hn.ZQ/.gl*a\"T/");
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(".Hn.Z", token0.getTokenText());
      assertEquals(27, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("/", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q.Hn.ZQ/.gl*a\"T/");
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      assertNotNull(token0);
      assertEquals(".Hn.Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("/", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(".g", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("*a", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.operatorName();
      Token token6 = xPathLexer1.whitespace();
      assertEquals((-2), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("H2d4v");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5._4Oj++oY>yPl;!9;!");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ppBCt z{8`o");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%H}t\"Ml BCYVh];kh");
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('X');
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.consume((-104));
      int int0 = 1214;
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q.Hn.ZQ/.gl*a\"T/");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VT>gW}v");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("T", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('');
      assertFalse(boolean0);
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("gW", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".4Oj++oY>yP;9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".4", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.equals();
      assertEquals("[", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(" ", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.setXPath("&<u!-tvi");
      xPathLexer1.mod();
      Token token6 = xPathLexer1.plus();
      assertEquals("&", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("<", token7.getTokenText());
      assertEquals(7, token7.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer1.or();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("u", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = new Token(25, "amUJ:UZO~AE=}u:_K", (-316), (-316));
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5Oj++oY>yP;9");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".5", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("amUJ:UZO~UAEu}u:_K");
      XPathLexer xPathLexer1 = new XPathLexer("dimGhVPlr;I*e[Ya");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dimGhVPlr;I*e[Ya");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("anKmUJ: ZO~AEu}u:_K");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }
}
