/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:24:53 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.setBit(2042, (-1128));
      Utility.searchOpcode("@5}n^!pZW");
      try { 
        Utility.typeOfSignature("@5}n^!pZW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @5}n^!pZW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-112);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(48);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-40));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-112), (-505));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-98), (int) (byte) (-58));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (-2116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "=;z[W`(VuMH-JtH*O`";
      try { 
        Utility.typeOfSignature("=;z[W`(VuMH-JtH*O`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =;z[W`(VuMH-JtH*O`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, 2025, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)79;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1847039057), (int) (byte) (-76), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.accessToString(3207);
      String string1 = Utility.compactClassName("public private protected transient abstract strictfp", "public private protected transient abstract strictfp", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("(");
      assertEquals("(", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)37;
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (int) (byte)37);
      assertEquals("0:    dload_2\n1:    <illegal opcode>\n2:    bipush\t\t-53\n4:    iconst_4\n5:    <illegal opcode>\n6:    fload_3\n", string3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((-1438732378), (-845), true, 'U');
      Utility.replace("-1438732378", "Xvp", (String) null);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)13;
      byteArray0[0] = (byte) (-57);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-72);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    fconst_2
         // 5:    nop
         // 6:    dneg
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.compactClassName("null", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)83;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      String string0 = ">";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-13));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)91, 93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-94);
      Utility.toHexString(byteArray0);
      Utility.clearBit((byte) (-94), (byte) (-123));
      Utility.setBit((byte) (-94), (byte) (-123));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "85 a2";
      objectArray0[1] = (Object) (byte) (-94);
      objectArray0[2] = (Object) (byte) (-94);
      Utility.printArray(objectArray0);
      Utility.clearBit(178, 178);
      try { 
        Utility.typeOfSignature("85 a2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 85 a2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.accessToString((-1465));
      Utility.compactClassName("public private protected volatile interface strictfp synthetic annotation enum", "public private protected volatile interface strictfp synthetic annotation enum", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-69);
      byte byte0 = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-21);
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), 1259, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-18);
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-84), (byte) (-18));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("monitorexit");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(168);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantString constantString0 = new ConstantString(95);
      constantArray0[4] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(163, 2786);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-67));
      assertEquals("0:    jsr_w\t\t#-1112463569\n5:    lload\t\t%172\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((-1438732378), (-845), true, 'U');
      Utility.replace("-1438732378", "Xvp", (String) null);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-72);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "%?P=5%K&>.";
      Utility.replace("VEFs0Vt=^|&9", "VEFs0Vt=^|&9", "%?P=5%K&>.");
      try { 
        Utility.typeOfSignature("%?P=5%K&>.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %?P=5%K&>.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.convertString("rAq6EE=*pi)|Ji");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (int) (byte) (-123), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 256;
      Utility.classOrInterface(256);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<;72{;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;72{;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)65;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)112;
      byteArray1[5] = (byte) (-33);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray1[6] = (byte)116;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-96), (int) (byte)116, false);
      try { 
        Utility.methodSignatureReturnType("$OVGKS7]2wD_E2MC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$OVGKS7]2wD_E2MC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7M{XT(#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7M{XT(#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.accessToString((-1833), true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-96);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("public private protected final volatile transient strictfp synthetic annotation enum");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte)58);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-33), (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore\t\t%59
         // 2:    land
         // 3:    swap
         // 4:    dcmpg
         // 5:    <illegal opcode>
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OzGD$??''Pm");
      Utility.isJavaIdentifierPart('b');
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)45;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)109, (byte)45);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1447, 3605);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, 170, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.setBit((-44), (-44));
      Utility.compactClassName("static", "static", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("lKOX_");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, 202);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName("", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, false);
      Utility.isJavaIdentifierPart('z');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("9@");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 99, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[2] = (byte)90;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-32);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1822, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "H%l4@c'sDu>4e";
      try { 
        Utility.typeOfSignature("H%l4@c'sDu>4e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H%l4@c'sDu>4e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)102;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 2030, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("?>...");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "?>...";
      objectArray0[1] = (Object) "?>...";
      objectArray0[2] = (Object) "?>...";
      objectArray0[3] = (Object) "?>...";
      objectArray0[4] = (Object) "?>...";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=Va]B#f");
      objectArray0[5] = (Object) "o3jfs*&{v-v' PM4*[_";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) "?>...";
      PrintStream printStream0 = mockPrintStream0.printf("o3jfs*&{v-v' PM4*[_", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.setBit(2147483645, 2147483645);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)19;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, (-663));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "Ep|L~RR";
      try { 
        Utility.typeOfSignature("Ep|L~RR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ep|L~RR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)6;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("64 d0 06 81 7c 5b 20 06");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 64 d0 06 81 7c 5b 20 06
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-92);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1269, (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-25);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 255);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 84, (int) (byte) (-25));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.classOrInterface(210);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "class";
      Utility.printArray(objectArray0);
      Utility.isSet(210, 210);
      Utility.classOrInterface(1285);
      Utility.clearBit(210, 1219);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, 95);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(1459, 210);
      constantArray0[1] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-723), 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lastore
         // 1:    d2l
         // 2:    fstore_3
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.format(82, (byte)0, false, 'Q');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.setBit(1635, 1635);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)54;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    if_icmpgt\t\t#-323
         // 7:    dstore_2
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("java.lang.{\"java.lang.Object@5349d46c\", \"java.lang.Object@30c8b53e\", \"java.lang.Object@233f6667\", \"java.lang.Object@51f8d2d4\"}", false);
      assertEquals(126, byteArray0.length);
      
      int int0 = Utility.setBit((-265), (-265));
      assertEquals((-265), int0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte) (-22);
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)22;
      byteArray1[8] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)7, (int) (byte)99, false);
      assertEquals("7:    lload\t\t%122\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.clearBit(60, 60);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)43;
      byte byte0 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)44;
      byte byte1 = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-125);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1427), (int) (byte) (-18), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-529), (int) (byte)75);
      assertEquals("0:    astore_0\n1:    athrow\n", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0:    astore_0\n1:    athrow\n";
      stringArray0[1] = "0:    astore_0\n1:    athrow\n";
      stringArray0[2] = "0:    astore_0\n1:    athrow\n";
      String string1 = Utility.methodTypeToSignature("0:    astore_0\n1:    athrow\n", stringArray0);
      assertEquals("(L0:;L0:;L0:;)L0:;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{0:    astore_0\n1:    athrow\n, 0:    astore_0\n1:    athrow\n, 0:    astore_0\n1:    athrow\n}", string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{}", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("4b bf", string4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-112);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(48);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-40));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-112), (-505));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-98), (int) (byte) (-58));
      assertEquals("0:    caload\n1:    lstore_3\n2:    faload\n3:    ishl\n4:    ifnull\t\t#-10177\n7:    iconst_m1\n8:    d2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dcmpl");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "address");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-128);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-128);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "0:    ior\n";
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(8);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0:    ior\n";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.clearBit((byte) (-128), (byte) (-128));
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    ior\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ior
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "5iMNm";
      try { 
        Utility.typeOfSignature("5iMNm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5iMNm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokestatic");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 112, (int) (byte)121, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "O.(RE>.9Xt";
      try { 
        Utility.typeOfSignature("O.(RE>.9Xt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O.(RE>.9Xt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("enc%IB~K'-lr-:q");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte) (-106), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-88);
      byte byte1 = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-95);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-38);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4896), 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifne\t\t#2728
         // 3:    i2l
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-32);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1822, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      Utility.isSet(190, 190);
      String string0 = Utility.convertString("byte");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.isSet(2016, 2016);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), (int) (byte) (-16), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    <illegal opcode>
         // 2:    iconst_m1
         // 3:    fstore_2
         // 4:    monitorenter
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)10;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)118);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1072, (-898));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("impdep2");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-46));
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-898), 16384, true);
      assertEquals("0:    bipush\t\t-46\n2:    fneg\n3:    fconst_1\n4:    lcmp\n5:    lconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "._}#&f(";
      try { 
        Utility.typeOfSignature("._}#&f(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ._}#&f(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)25, 145);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3486), 134);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3486), 2727);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)9);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)29;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-65));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-65), 1449);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 56, (-1447));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      Utility.accessToString((-3836), false);
      Utility.format(954, 57, false, '\'');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)98;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.commons.io.filefilter.FalseFileFilter");
      constantArray0[0] = (Constant) constantUtf8_0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 171, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38242. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<V(C\u0003KM)j\"");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 16384, true);
      assertEquals("0:    fload_1\n1:    ret\t\t%188\n3:    fstore_0\n", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)35;
      objectArray0[1] = (Object) (byte) (-87);
      objectArray0[2] = (Object) (byte)35;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{35, -87, 35}", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "public";
      Utility.convertString("public");
      String string1 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)64;
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.fillup("f0 16 aa 02 40", (byte)2, false, '{');
      assertTrue(string1.equals((Object)string0));
      
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 808, false);
      String string2 = Utility.accessToString((int) (byte)64, false);
      assertEquals("volatile", string2);
      
      Utility.searchOpcode("f0 16 aa 02 40");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)64);
      assertEquals("0:    <illegal opcode>\n1:    lload\t\t%170\n3:    iconst_m1\n4:    lstore_1\n", string3);
      
      byte byte0 = Utility.typeOfSignature("SAME_EXTENDED");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-44);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("9$8dW_$d4", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("39 8d 57 5f d4", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%141", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte)79;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      String string0 = "new";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("new");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)42, (int) (byte) (-27), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("mrU/\"");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-78), 47);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat(47);
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)110;
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(48);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-40));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)110, (-496));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-98), (int) (byte) (-58));
      assertEquals("0:    caload\n1:    lstore_3\n2:    faload\n3:    ishl\n4:    ifnull\t\t#-10177\n7:    iconst_m1\n8:    fdiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-47));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Zt)--*PI6,V+tw|G");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(194);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("jsr\t\t#2426", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.getSignature("QoJ5SP yf");
      assertEquals("LQoJ5SP;", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "LQoJ5SP;";
      objectArray0[1] = (Object) "LQoJ5SP;";
      objectArray0[2] = (Object) "LQoJ5SP;";
      objectArray0[3] = (Object) "LQoJ5SP;";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"LQoJ5SP;\", \"LQoJ5SP;\", \"LQoJ5SP;\", \"LQoJ5SP;\"}", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string2 = Utility.classOrInterface((-316));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-60);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1284), 176);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    goto_w\t\t#-1054727501\n5:    freturn\n6:    wide\t(wide)\n", "0:    goto_w\t\t#-1054727501\n5:    freturn\n6:    wide\t(wide)\n", "M;[!p-ivO;e)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    goto_w\t\t#-1054727501
         // 5:    freturn
         // 6:    wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.isSet(8, 74);
      String string0 = ";bTmLzv>gbL5bZr}6(V";
      try { 
        Utility.typeOfSignature(";bTmLzv>gbL5bZr}6(V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;bTmLzv>gbL5bZr}6(V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.compactClassName("!#2),?<I@@lzQ");
      try { 
        Utility.typeOfSignature("!#2),?<I@@lzQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #2),?<I@@lzQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.classOrInterface((-4184));
      assertEquals("interface", string0);
      
      boolean boolean0 = Utility.isSet(90, 1323);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-110);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 57);
      assertEquals("0:    pop2\n1:    dup\n2:    if_icmpge\t\t#2640\n5:    if_icmplt\t\t#-16379\n8:    i2c\n", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)89;
      byte byte0 = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)2;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1968), 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iushr
         // 1:    ixor
         // 2:    dup
         // 3:    <illegal opcode>
         // 4:    astore_3
         // 5:    lstore_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.convertString("\nAttribute(s) = ");
      assertEquals("\\nAttribute(s) = ", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte) (-78);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("0b 53 b7 0d b2", string1);
      
      String string2 = Utility.getSignature("Nyv");
      assertEquals("LNyv;", string2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-77);
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1284), 176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.fillup("MT:TL:I", 1150, true, '}');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2757), 1074);
      assertEquals("0:    fstore_1\n1:    saload\n2:    lstore_2\n3:    istore\t\t%0\n", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@26afe4c6\", \"java.lang.Object@1a71c7b4\", \"java.lang.Object@5025959d\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@26afe4c6\", \"java.lang.Object@1a71c7b4\", \"java.lang.Object@5025959d\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      byteArray0[0] = (byte)34;
      Utility.toHexString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      Utility.encode(byteArray1, false);
      boolean boolean0 = true;
      try { 
        Utility.decode("$o$o$o", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1284), 176);
      assertEquals("0:    goto_w\t\t#-1054726477\n5:    lreturn\n6:    wide\t(wide)\n", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.ConstantInvokeDynamic", "invokedynamic", "lreturn");
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)11;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("5a df a2 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string0);
      
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.encode(byteArray0, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1937442018), (-1937442018));
      assertEquals("0:    dup_x1\n1:    <illegal opcode>\n2:    if_icmpge\t\t#2818\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n", string1);
      
      Utility.getSignature("5a df a2 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00");
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("Z$df$a2$L$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A$A", string2);
      
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantInvokeDynamic";
      stringArray0[1] = "L5a;";
      stringArray0[2] = "5a df a2 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantInvokeDynamic";
      stringArray0[4] = "org.apache.bcel.classfile.ConstantInvokeDynamic";
      stringArray0[5] = "0:    dup_x1\n1:    <illegal opcode>\n2:    if_icmpge\t\t#2818\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n";
      stringArray0[6] = "byte";
      stringArray0[7] = "Byte code error: ";
      String string3 = Utility.methodTypeToSignature("sVz<30S +S_BnAnn$f", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/ConstantInvokeDynamic;LL5a;;L5a;Lorg/apache/bcel/classfile/ConstantInvokeDynamic;Lorg/apache/bcel/classfile/ConstantInvokeDynamic;L0:;BLByte;)LsVz<30S;", string3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = 1352;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1352, 1352, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-76);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), 276, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "W3$a";
      try { 
        Utility.decode("W3$a", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility";
      String string1 = "byte";
      Utility.replace("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", "byte");
      String string2 = "*)W5*|xZ!fX$cUG;MLT";
      try { 
        Utility.typeOfSignature("*)W5*|xZ!fX$cUG;MLT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )W5*|xZ!fX$cUG;MLT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Q:oy>9D(Y";
      try { 
        Utility.typeOfSignature("Q:oy>9D(Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:oy>9D(Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)44;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, (-1510), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray(objectArray0, false, false);
      int int0 = 57;
      Utility.classOrInterface(57);
      Utility.compactClassName("java.lang.Object@b159540, java.lang.Object@2dde01c0, java.lang.Object@19b3e06e", true);
      Utility.compactClassName("java.lang.Object@b159540, java.lang.Object@2dde01c0, java.lang.Object@19b3e06e");
      Utility.accessToString(123);
      try { 
        Utility.methodSignatureArgumentTypes("k.kvT3+Fmu2HD I'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k.kvT3+Fmu2HD I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "1xx)j$CsM[";
      try { 
        Utility.typeOfSignature("1xx)j$CsM[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1xx)j$CsM[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "F";
      Utility.typeOfSignature("F");
      Utility.isJavaIdentifierPart('B');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "F";
      objectArray0[1] = (Object) "F";
      objectArray0[2] = (Object) "F";
      objectArray0[3] = (Object) "F";
      objectArray0[4] = (Object) "F";
      objectArray0[5] = (Object) "F";
      objectArray0[6] = (Object) "F";
      objectArray0[7] = (Object) "F";
      objectArray0[8] = (Object) "F";
      Utility.printArray(objectArray0);
      String string1 = ")=lhgO[i^yzIV<SypQh";
      try { 
        Utility.methodSignatureArgumentTypes(")=lhgO[i^yzIV<SypQh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )=lhgO[i^yzIV<SypQh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-6);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-1556.599F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-6), (int) (byte)10, false);
      assertEquals("0:    aastore\n1:    dstore_2\n2:    lconst_1\n3:    return\n4:    istore_0\n5:    dreturn\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ja\"?C6v1@9?]x");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.classOrInterface(1024);
      Utility.searchOpcode("class");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)28;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1813, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "\t\t%";
      Utility.compactClassName("\t\t%", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)66;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)85);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 138, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "3}+PCuks@";
      try { 
        Utility.typeOfSignature("3}+PCuks@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3}+PCuks@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">&wlFk;(!OF1C<R!h ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >&wlFk;(!OF1C<R!h 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((byte)49);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)49, (-2128));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-60));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.convertString("+U~_9/T|C{rynTrI");
      try { 
        Utility.typeOfSignature("+U~_9/T|C{rynTrI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U~_9/T|C{rynTrI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "A)7R>E0P+95";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.typeOfSignature("A)7R>E0P+95");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A)7R>E0P+95
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)108;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (-1288));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.compactClassName(">");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-89);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (int) (byte)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-5034);
      Utility.accessToString((-5034));
      Utility.getSignature("private protected final volatile abstract strictfp annotation enum");
      Utility.isJavaIdentifierPart('/');
      Utility.typeOfSignature("C4<'!Ya");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (-614));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.fillup("s/IU?YkEFKD'H3\"j)", (-759), false, '^');
      String string0 = "null";
      Utility.compactClassName("null", false);
      Utility.getSignature("s/IU?YkEFKD'H3\"j)");
      Utility.setBit((-759), (-759));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1225), (-759));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    <illegal opcode>
         // 2:    i2f
         // 3:    lstore_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("0XWfv)H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LineNumberTable");
      Utility.typeOfSignature("LineNumberTable");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LineNumberTable", "_&03", "_&03");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char char0 = 'H';
      Utility.isJavaIdentifierPart('H');
      Utility.isJavaIdentifierPart('[');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      String string0 = "LocalVariableTable";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LocalVariableTable");
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.classOrInterface(69);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.isSet(130, 130);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)4;
      byte byte0 = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)49;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)70, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 234, (-829));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(898, false);
      String string0 = "KRfaW\\Z<v49I";
      try { 
        Utility.typeOfSignature("KRfaWZ<v49I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KRfaWZ<v49I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#Lp3[\u0004soZS]SXQ";
      String string1 = Utility.methodTypeToSignature("#Lp3[\u0004soZS]SXQ", stringArray0);
      assertEquals("([L#Lp3;)[L#Lp3;", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.signatureToString("S$[j]@lk'HVf`");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)93;
      byte byte0 = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)91);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("n.X");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[K.k#lo;:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K.k#lo;:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-72);
      byteArray0[0] = (byte)83;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)47;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, 1320);
      assertEquals("5:    iconst_0\n6:    lconst_0\n7:    laload\n", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"java.lang.Object@5bbb7cc1\",");
      char char0 = 'p';
      Utility.format(58, (-2828), false, 'p');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "9^`J#}g~V)!I,D";
      try { 
        Utility.typeOfSignature("9^`J#}g~V)!I,D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9^`J#}g~V)!I,D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)6;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)6);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      constantMethodType1.copy();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(26666);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)82);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte)24);
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(3507);
      ConstantString constantString2 = new ConstantString(constantString1);
      constantArray0[2] = (Constant) constantString2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (-2179), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/?HVPngaDD.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /?HVPngaDD.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("if_acmpne", (String[]) null);
      Utility.methodSignatureToString("()Lif_acmpne;", "if_acmpne", "if_acmpne", false);
      int int0 = 190;
      Utility.accessToString(190);
      String string0 = "fp,v:K%hd";
      try { 
        Utility.methodSignatureArgumentTypes("fp,v:K%hd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fp,v:K%hd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)8;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("$ 2z4", ";GSsah#!(v2ae}rR");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf("anewarray", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      try { 
        Utility.methodSignatureArgumentTypes("29 e8 08", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29 e8 08
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("I5-HT", 4028, false, '=');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) "I5-HT";
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      String string1 = Utility.printArray(objectArray0);
      Utility.replace(string1, string0, "jsr_w");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-519), 200, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.ConstantInvokeDynamic", "invokedynamic", "lreturn");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)11;
      Utility.toHexString(byteArray0);
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1937442018), (-1937442018));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, 72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "M'Z&";
      try { 
        Utility.methodSignatureReturnType("M'Z&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'Z&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-25);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 255);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 84, (int) (byte) (-25));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("(e|)E7Wu/J{-uR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E7Wu/J{-uR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.signatureToString("ZlV&#g<L}D;fYG");
      try { 
        Utility.methodSignatureReturnType("b9b\".9!v2N9lp_]X>w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b9b\".9!v2N9lp_]X>w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr_w");
      Utility.format(598, 16, true, '%');
      Utility.accessToString(598, true);
      Utility.format(16, 147, false, '%');
      boolean boolean0 = true;
      Utility.format(3, 1207, true, '%');
      Utility.classOrInterface(80);
      MockPrintStream mockPrintStream0 = new MockPrintStream("class");
      mockPrintStream0.append((CharSequence) "598%%%%%%%%%%%%%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "598%%%%%%%%%%%%%");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      Utility.printArray((Object[]) null, false, true);
      try { 
        Utility.typeOfSignature("-2GH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2GH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)20;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    lstore_3
         // 2:    f2i
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.convertString("$VALUES");
      // Undeclared exception!
      try { 
        Utility.signatureToString("G885Ky1@@8Q|@Q&01");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G885Ky1@@8Q|@Q&01'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)53;
      Utility.toHexString(byteArray0);
      String string0 = "N7";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N7";
      stringArray0[1] = "N7";
      stringArray0[2] = "a7 68 35";
      stringArray0[3] = "a7 68 35";
      stringArray0[4] = "a7 68 35";
      stringArray0[5] = "N7";
      Utility.methodTypeToSignature("N7", stringArray0);
      Utility.compactClassName("N7", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-108);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte)93;
      byteArray1[5] = (byte)23;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.typeOfSignature("!ZV");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "!ZV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!ZV");
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("new", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(26666);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)20;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)82);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte)110);
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(3507);
      ConstantString constantString2 = new ConstantString(constantString1);
      constantArray0[2] = (Constant) constantString2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, (-2179), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(98);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-242));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("3h4h$c/fj4JNI&LF:3h4h$c.fj4JNI&LF:");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "interface";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      Utility.compactClassName("e<i@M!\u0005FCH|$", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)58;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "\"";
      Utility.replace("\"", "\"", "?");
      boolean boolean0 = true;
      Utility.fillup("int", 1369, true, '|');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4R");
      Utility.replace("G", "y,6C6NK[~R6A|", "");
      try { 
        Utility.typeOfSignature("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.classOrInterface(250);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)127;
      byteArray0[0] = (byte)127;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Utility.format(76, (-110), true, 'U');
      assertEquals("76", string0);
      
      boolean boolean0 = Utility.isSet(76, 1397);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "76";
      objectArray0[1] = (Object) "76";
      objectArray0[2] = (Object) "76";
      objectArray0[3] = (Object) "76";
      objectArray0[4] = (Object) "76";
      objectArray0[5] = (Object) "76";
      objectArray0[6] = (Object) "76";
      objectArray0[7] = (Object) "76";
      objectArray0[8] = (Object) "76";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{76, 76, 76, 76, 76, 76, 76, 76, 76}", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_0", string2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)98;
      byte byte0 = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      ConstantPool constantPool0 = null;
      int int0 = 4508;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4508, 520, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "pUkK~I";
      Utility.searchOpcode("pUkK~I");
      Utility.searchOpcode("pUkK~I");
      String string1 = "invokedynamic";
      Utility.getSignature("invokedynamic");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Linvokedynamic;";
      objectArray0[1] = (Object) "invokedynamic";
      objectArray0[2] = (Object) "Linvokedynamic;";
      objectArray0[3] = (Object) "invokedynamic";
      objectArray0[4] = (Object) "invokedynamic";
      objectArray0[5] = (Object) "Linvokedynamic;";
      objectArray0[6] = (Object) "Linvokedynamic;";
      objectArray0[7] = (Object) "invokedynamic";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)115, 4566, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.convertString("[TX~;c?U<oOo7");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[TX~;c?U<oOo7";
      stringArray0[1] = "[TX~;c?U<oOo7";
      stringArray0[2] = "[TX~;c?U<oOo7";
      stringArray0[3] = "[TX~;c?U<oOo7";
      stringArray0[4] = "[TX~;c?U<oOo7";
      stringArray0[5] = "[TX~;c?U<oOo7";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[TX~;c?U<oOo7", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [TX~;c?U<oOo7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Utility.format(11, 150, false, 'o');
      assertEquals("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11", string0);
      
      String string1 = Utility.accessToString(150);
      assertEquals("private protected final transient", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)105;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ba 69", string2);
      
      int int0 = Utility.setBit(183, (-625));
      assertEquals(32951, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11";
      stringArray0[1] = "oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11";
      stringArray0[2] = "private protected final transient";
      stringArray0[3] = "ba 69";
      stringArray0[4] = "private protected final transient";
      stringArray0[5] = "ba 69";
      String string3 = Utility.methodTypeToSignature("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11", stringArray0);
      assertEquals("(Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11;Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11;Lprivate;Lba;Lprivate;Lba;)Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo11;", string3);
      
      byte[] byteArray1 = new byte[0];
      String string4 = Utility.encode(byteArray1, false);
      assertEquals("", string4);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      String string5 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string5);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"java.lang.Object@5bbb7cc1\",");
      char char0 = 'p';
      Utility.format(58, (-2828), false, 'p');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-406);
      Utility.clearBit((-406), (-406));
      String string0 = "CONSTANT_Long";
      Utility.compactClassName("CONSTANT_Long");
      Utility.searchOpcode("CONSTANT_Long");
      Utility.methodSignatureReturnType("CONSTANT_Long");
      Utility.replace("CONSTANT_Long", "CONSTANT_Long", "char");
      Utility.replace("CONSTANT_Long", "char", "CONSTANT_Long");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CONSTANT_Long", (String) null, "Tt?n[BZP~`6*!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_Long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1525, 222);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.accessToString(5);
      Utility.compactClassName("\t\t");
      Utility.accessToString(5, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)32;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, (-1446408488), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-24);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), 112);
      assertEquals("0:    iconst_4\n1:    ladd\n2:    <illegal opcode>\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = (-1277);
      Utility.setBit(218, (-1277));
      String string0 = "7(Q)Xm4oN@o;w=";
      try { 
        Utility.methodSignatureReturnType("7(Q)Xm4oN@o;w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xm4oN@o;w='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)11;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "V";
      Utility.typeOfSignature("V");
      Utility.typeOfSignature("V");
      Utility.isSet((byte)73, 621);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("V", "V");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // V
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "2r<0WU";
      try { 
        Utility.typeOfSignature("2r<0WU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2r<0WU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.compactClassName("3h4h$c/fj4JNI&LF:", "3h4h$c/fj4JNI&LF:", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1215, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = Utility.fillup("Qm/'=ny84bz>XS[Uk", 255, true, '');
      assertEquals("Qm/'=ny84bz>XS[Uk", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.format(176, 176, true, 'v');
      Utility.compactClassName("M'");
      Utility.format(176, 176, false, 'P');
      try { 
        Utility.typeOfSignature("M'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      Utility.typeOfSignature("Invalid method signature: ");
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.accessToString(48);
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "P";
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 1320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      int int0 = 3;
      Utility.clearBit((-2606), 3);
      Utility.searchOpcode("40`kyq0x");
      Utility.compactClassName("40`kyq0x");
      try { 
        Utility.typeOfMethodSignature("(type=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (type=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`8(");
      Utility.compactClassName("y?");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-19);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-103);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$V_$5b$9f$H$ff$ed$99", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.format(91, (byte)91, false, 'K');
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK91", string1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.classOrInterface(8192);
      String string0 = "GgGj$";
      try { 
        Utility.typeOfSignature("GgGj$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GgGj$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.accessToString(97);
      Utility.isSet(97, 97);
      Utility.isJavaIdentifierPart(',');
      Utility.fillup("", 8, false, ',');
      try { 
        Utility.typeOfSignature(",,,,,,,,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,,,,,,,,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "4r-o!W|C=bZJ*@bX";
      try { 
        Utility.typeOfSignature("4r-o!W|C=bZJ*@bX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4r-o!W|C=bZJ*@bX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)76;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-23);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("72 4c 52 e9", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2504), 512, false);
      assertEquals("0:    frem\n1:    astore_1\n2:    dastore\n3:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.format(69, 69, false, 'B');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69";
      objectArray0[2] = (Object) "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69";
      objectArray0[3] = (Object) "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69";
      objectArray0[4] = (Object) "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69";
      Object object1 = new Object();
      objectArray0[5] = object1;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(1135);
      Utility.typeOfSignature("[0Z6ES&rT'");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Cy0E6QSx23", "94U3T8RqB@x#>L?_s+:", "{java.lang.Object@22c2ac49, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB69, java.lang.Object@30ec9255}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Cy0E6QSx23
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.compactClassName("+d#s", "+d#s", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)52;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      byteArray0[3] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaReader");
      Utility.classOrInterface(734);
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0z:'6%");
      Utility.format(255, 255, true, '[');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("255[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "fUH@cBn3^+5JBzE^_5");
      File file0 = MockFile.createTempFile("1YYk,7Cl.vtYUGT", "1YYk,7Cl.vtYUGT", (File) mockFile0);
      mockFile0.setReadOnly();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1YYk,7Cl.vtYUGT";
      stringArray0[1] = "E0>\"44G}[,bM83@Qp";
      stringArray0[2] = "";
      stringArray0[3] = "fUH@cBn3^+5JBzE^_5";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "fUH@cBn3^+5JBzE^_5";
      stringArray0[5] = "fUH@cBn3^+5JBzE^_5";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("fUH@cBn3^+5JBzE^_5", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[,bM83@Qp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.getSignature("KDGa`Dx3m^6");
      Utility.clearBit(31, 3281);
      // Undeclared exception!
      try { 
        Utility.signatureToString("KDGa`Dx3m^6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KDGa`Dx3m^6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.getSignature("Q(=k]y7glcys$zs7");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Q(=k]y7glcys$zs7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q(=k]y7glcys$zs7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "'^4*FA4grsU";
      stringArray0[2] = "";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1875, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "Unreachable default case reached!";
      Utility.compactClassName("Unreachable default case reached!", true);
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.getSignature("\tdefault = ");
      assertEquals("Ldefault;", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)97;
      byteArray1[4] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)103;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-11), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CXxZ9?23r{t[c~");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.format((-185), (-185), true, 'u');
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.replace("-185", "-185", "-185");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("FKwmZKn]=");
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "R>hrI4@\"VCpla(Z_w?~";
      try { 
        Utility.typeOfSignature("R>hrI4@\"VCpla(Z_w?~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R>hrI4@\"VCpla(Z_w?~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)123;
      byte byte0 = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      Utility.setBit((byte)3, 36);
      Utility.accessToString((int) (byte)112, false);
      try { 
        Utility.methodSignatureReturnType("final synchronized volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `final synchronized volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":8@Q6D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :8@Q6D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "Hlpr89[&RTH{";
      Utility.compactClassName("Hlpr89[&RTH{", "char", true);
      String string1 = "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hlpr89[&RTH{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER", false);
      String string2 = "nyZ=gR@b2 +,";
      // Undeclared exception!
      try { 
        Utility.signatureToString("nyZ=gR@b2 +,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nyZ=gR@b2 +,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "jsr_w";
      Utility.searchOpcode("jsr_w");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("jsr_w", "jsr_w");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jsr_w
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)2;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2036), 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fmul
         // 1:    ixor
         // 2:    dup
         // 3:    <illegal opcode>
         // 4:    astore_3
         // 5:    lstore_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "WBo(zjTO69I";
      try { 
        Utility.methodSignatureReturnType("WBo(zjTO69I", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WBo(zjTO69I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-38);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 712, (int) (byte)95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "&y80 I2<]";
      try { 
        Utility.typeOfSignature("&y80 I2<]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &y80 I2<]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "YsbN*T";
      try { 
        Utility.methodSignatureReturnType("YsbN*T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YsbN*T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.compactClassName("int", "class", true);
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString((-2473), true);
      assertEquals("public private protected final volatile abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.signatureToString("J\"x4/ yajrdFk`BT>");
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.format((-3234), (-3234), false, 'd');
      Utility.isSet((-3084), (-3084));
      try { 
        Utility.methodSignatureReturnType("['x44[bSj'_\"_WV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'x44[bSj'_\"_WV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Gd;y`tk<8m", "Gd;y`tk<8m", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Gd;y`tk<8m", "Gd;y`tk<8m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.accessToString(391);
      assertEquals("public private protected transient native", string0);
      
      String string1 = Utility.format(323, 323, true, '6');
      assertEquals("32366666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-13);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)91);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger((-957));
      constantArray0[1] = (Constant) constantInteger0;
      Constant constant0 = constantFloat0.copy();
      constantArray0[2] = constant0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-13), 391);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString(1164);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-1830), 211);
      assertEquals("0:    dup_x2\n1:    aload_2\n2:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.methodTypeToSignature(",v", (String[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.printArray((Object[]) null, false);
      int int0 = 84;
      Utility.classOrInterface(84);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.typeOfSignature("B8;Lzx%a*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "B8;Lzx%a*";
      objectArray0[1] = (Object) "B8;Lzx%a*";
      objectArray0[2] = (Object) "B8;Lzx%a*";
      objectArray0[3] = (Object) "B8;Lzx%a*";
      objectArray0[4] = (Object) "B8;Lzx%a*";
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("B8;Lzx%a*", stringArray0);
      Utility.signatureToString("B8;Lzx%a*");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      Constant[] constantArray0 = new Constant[8];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)8, 3128);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass((byte)8);
      constantArray0[1] = (Constant) constantClass0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "bG#_Uo9";
      stringArray0[1] = "impdep2";
      stringArray0[2] = "bG#_Uo9";
      stringArray0[3] = "bG#_Uo9";
      stringArray0[4] = "bG#_Uo9";
      stringArray0[5] = "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      String string0 = Utility.methodTypeToSignature("bG#_Uo9", stringArray0);
      assertEquals("(LbG#_Uo9;Limpdep2;LbG#_Uo9;LbG#_Uo9;LbG#_Uo9;LDont;)LbG#_Uo9;", string0);
      
      String string1 = Utility.format(83, (-192), true, '%');
      assertEquals("83", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true);
      assertEquals("{bG#_Uo9, impdep2, bG#_Uo9, bG#_Uo9, bG#_Uo9, Dont call getValueBoolean() on a non BOOLEAN ElementValue}", string2);
      
      String string3 = Utility.accessToString(241, true);
      assertEquals("public final volatile transient", string3);
      
      Utility.fillup("Dont call getValueBoolean() on a non BOOLEAN ElementValue", (-192), false, 'i');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "bG#_Uo9";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      objectArray0[3] = (Object) "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      objectArray0[4] = (Object) "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      objectArray0[5] = (Object) "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      String string4 = Utility.printArray(objectArray0);
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit(103, 103);
      Utility.replace("5eU;LO@63{Z0u~u:", "5eU;LO@63{Z0u~u:", "Dp.iWch:l'I'QO(EYR");
      Utility.methodSignatureReturnType("Dp.iWch:l'I'QO(EYR");
      try { 
        Utility.decode("5eU;LO@63{Z0u~u:", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.signatureToString("InnerClass(");
      Utility.methodSignatureReturnType("InnerClass(");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit((-1309), (-1309));
      Utility.setBit((-1309), 73);
      String string0 = "org.apache.commons.io.filefilter.PrefixFileFilter";
      String string1 = "dadd";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "org.apache.commons.io.filefilter.PrefixFileFilter", "dadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "]\\Gg@PMT[BmZ'`*5hb";
      String string1 = "h8R'E";
      Utility.replace("]Gg@PMT[BmZ'`*5hb", "h8R'E", "]Gg@PMT[BmZ'`*5hb");
      int int0 = 58;
      Utility.accessToString(58);
      boolean boolean0 = false;
      int int1 = 71;
      Attribute[] attributeArray0 = new Attribute[1];
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      Synthetic synthetic0 = new Synthetic(610, 148, byteArray0, (ConstantPool) null);
      Attribute attribute0 = synthetic0.copy((ConstantPool) null);
      // Undeclared exception!
      try { 
        attribute0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("{\"java.lang.Object@3db8521d\", \"java.lang.Object@50a454ec\", \"java.lang.Object@14b3a884\"}", true);
      Utility.typeOfSignature("Th(6B]3");
      // Undeclared exception!
      try { 
        Utility.signatureToString("{\"java.lang.Object@3db8521d\", \"java.lang.Object@50a454ec\", \"java.lang.Object@14b3a884\"}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{\"java.lang.Object@3db8521d\", \"java.lang.Object@50a454ec\", \"java.lang.Object@14b3a884\"}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isSet(171, 84);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)10;
      ConstantPool constantPool0 = null;
      int int0 = 87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "N4d-%c.V";
      Utility.searchOpcode("N4d-%c.V");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "N4d-%c.V";
      objectArray0[2] = (Object) "N4d-%c.V";
      objectArray0[3] = (Object) "N4d-%c.V";
      objectArray0[4] = (Object) "N4d-%c.V";
      objectArray0[5] = (Object) "N4d-%c.V";
      objectArray0[6] = (Object) "N4d-%c.V";
      objectArray0[7] = (Object) "N4d-%c.V";
      objectArray0[8] = (Object) "N4d-%c.V";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)112;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName(">");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString("'");
      Utility.isSet(140, 140);
      Utility.replace("'", "'", "_=UM");
      MockFile mockFile0 = new MockFile("new");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "new";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "new";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "new";
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, ";", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = '@';
      charArray0[2] = '.';
      charArray0[3] = 'l';
      charArray0[4] = 'w';
      mockPrintStream1.println(charArray0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      //  // Unstable assertion: assertEquals(153L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 310;
      Utility.classOrInterface(310);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "class";
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) null;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ")mHB&{n!k_lI", "invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.clearBit((-566), 253);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-68);
      int int0 = 171;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "V";
      Utility.convertString("V");
      Utility.signatureToString("V", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-92);
      Utility.toHexString(byteArray0);
      Utility.clearBit((-1042794580), 744);
      boolean boolean0 = false;
      Utility.accessToString(744, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray(objectArray0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("<Pco]1T\"E9@>.EHnP[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Pco]1T\"E9@>.EHnP[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("implements\t\t");
      Utility.format(1027, (short) (-1), false, '&');
      Utility.printArray((Object[]) null);
      Utility.searchOpcode("0<ZmDr>");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.classOrInterface(1984);
      Utility.compactClassName("a7)J*0E!DQ", "interface", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T*>+?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T*>+?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "monitorenter";
      boolean boolean0 = true;
      Utility.compactClassName("Gd;y`tk<8m", "monitorenter", true);
      Utility.methodTypeToSignature("ng$1", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.decode("()Lng$1;", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "OaB<c>f.%FrLF{";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("OaB<c>f.%FrLF{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OaB<c>f.%FrLF{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = " arg";
      Utility.getSignature(" arg");
      boolean boolean0 = true;
      int int0 = 97;
      int int1 = 2;
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((LocalVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("$");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.decode("$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]9g3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]9g3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "M~7ekvXQc8xS";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M~7ekvXQc8xS");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.$");
      Utility.setBit((-842), (-5862));
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pattern is missing'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.format((-185), (-185), true, 'u');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 13, (-1694), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      boolean boolean0 = true;
      boolean boolean1 = false;
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit(23, 23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      byteSequence0.read(byteArray0);
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)62;
      Utility.equals(byteArray0, byteArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("zDEsOx(\u0005vW#6", false);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "long";
      boolean boolean0 = true;
      try { 
        Utility.decode("long", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = 81;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? extends ");
      Utility.accessToString(81, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public final volatile";
      objectArray0[1] = (Object) "public final volatile";
      objectArray0[2] = (Object) "public final volatile";
      objectArray0[3] = (Object) "public final volatile";
      Utility.printArray(objectArray0, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public final volatile'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.convertString("\\");
      assertEquals("\\\\", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "2!.";
      Utility.methodTypeToSignature("2!.", stringArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(L2!/;)L2!/;";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.classOrInterface(156);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{class, null, null, class, null}", string1);
      
      String string2 = Utility.compactClassName("4C6op03AV!", false);
      assertEquals("4C6op03AV!", string2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "_w`*1{'";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("_w`*1{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _w`*1{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.StackMapEntry");
      String string0 = "lshl";
      Utility.methodTypeToSignature("lshl", (String[]) null);
      Utility.compactClassName("\b", false);
      Utility.compactClassName("\b", false);
      String string1 = ";";
      String string2 = "raM@<lEI";
      int int0 = 242;
      int int1 = 2013;
      DataInput dataInput0 = null;
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Utility.convertString("J\"x4/ yajrdFk`BT>");
      assertEquals("J\\\"x4/ yajrdFk`BT>", string0);
      
      byte byte0 = Utility.typeOfSignature("Dk@L=J*{^=+&Sm,#Je|");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.getSignature("short");
      boolean boolean0 = true;
      Utility.fillup("short", (-3975), true, 'h');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)6;
      byte byte0 = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-119);
      try { 
        MockURI.URI("short", "}4M5-;Ah", "}4M5-;Ah", "]!u@C4O,");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: short://}4M5-;Ah%7D4M5-;Ah#]!u@C4O,
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      stringArray0[6] = "short";
      stringArray0[7] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      boolean boolean0 = false;
      Utility.fillup("short", 15, false, 'C');
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.getSignature("?>...");
      Utility.setBit(12, 12);
      Utility.clearBit((-539), 4108);
      Utility.isSet((-4635), (-4635));
      boolean boolean0 = false;
      Utility.compactClassName("?>...", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = 75;
      Utility.clearBit(65536, 75);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.replace("2/wHI#S_6", "2/wHI#S_6", "]V>z#");
      Utility.compactClassName("]V>z#");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "2/wHI#S_6";
      objectArray0[1] = (Object) "]V>z#";
      objectArray0[2] = (Object) "]V>z#";
      objectArray0[3] = (Object) "]V>z#";
      objectArray0[4] = (Object) "2/wHI#S_6";
      objectArray0[5] = (Object) "]V>z#";
      objectArray0[6] = (Object) "]V>z#";
      objectArray0[7] = (Object) "]V>z#";
      Utility.printArray(objectArray0, true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      stringArray0[2] = "$";
      Utility.methodTypeToSignature("$", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("VLe*p.YJ2p!bia%8-T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VLe*p.YJ2p!bia%8-T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "OaB<c>f.%FrLF{";
      Utility.getSignature("OaB<c>f.%FrLF{");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("LOaB<c>f/%FrLF{;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LOaB<c>f/%FrLF{;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      Utility.isJavaIdentifierPart('u');
      Utility.convertString("lookupswitch");
      try { 
        Utility.methodSignatureReturnType("py|3.q+w(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `py|3.q+w('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      String string0 = "!0wkUz.J6BbH";
      try { 
        Utility.typeOfSignature("!0wkUz.J6BbH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0wkUz.J6BbH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.searchOpcode("^kS8PO($aN");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byte byte0 = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -53
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 883);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-66);
      bufferedOutputStream0.write(byteArray0);
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) bufferedOutputStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      byte[] byteArray1 = new byte[0];
      byteArrayOutputStream0.write(byteArray1);
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) byteArrayOutputStream0;
      objectArray0[8] = (Object) bufferedOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.classOrInterface(184);
      String string0 = "c^j(d_4ikr?sRWBwoV";
      try { 
        Utility.typeOfMethodSignature("c^j(d_4ikr?sRWBwoV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c^j(d_4ikr?sRWBwoV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*Ge]X2sMr6m@,1", "vG5X", "TMLS@p*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *Ge]X2sMr6m@,1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)10;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1239, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.isSet(4415, 409);
      Utility.isJavaIdentifierPart('v');
      Utility.compactClassName("", "", false);
      String string1 = "org.apache.bcel.classfile.AnnotationElementValue";
      boolean boolean0 = true;
      Utility.fillup("org.apache.bcel.classfile.AnnotationElementValue", 409, true, '^');
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getfield";
      stringArray0[1] = "getfield";
      stringArray0[2] = "getfield";
      stringArray0[3] = "getfield";
      stringArray0[4] = "getfield";
      stringArray0[5] = "getfield";
      Utility.methodTypeToSignature("getfield", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureToString("(Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;Lgetfield;)Lgetfield;", "invokedynamic", "getfield");
      // Undeclared exception!
      try { 
        Utility.signatureToString("'\"K&M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'\"K&M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.classOrInterface(1917);
      Utility.classOrInterface(1917);
      Utility.format((-3257), 216, false, 'x');
      Utility.accessToString(18);
      Utility.accessToString(1917, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "private final";
      stringArray0[1] = "public protected static final synchronized volatile native interface abstract";
      Utility.methodTypeToSignature("interface", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lprivate;Lpublic;)Linterface;", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(1029);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
