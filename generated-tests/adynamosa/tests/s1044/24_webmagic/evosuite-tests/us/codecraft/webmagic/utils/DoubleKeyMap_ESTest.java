/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:58:05 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Map<Object, HashMap<Object, String>>, String>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Map<Object, HashMap<Object, String>>, String>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      DoubleKeyMap<HashMap<Integer, Object>, Map<Object, HashMap<Object, String>>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Object, HashMap<Object, String>>, String>(hashMap0);
      HashMap<Map<Object, HashMap<Object, String>>, String> hashMap2 = new HashMap<Map<Object, HashMap<Object, String>>, String>();
      HashMap<Object, HashMap<Object, String>> hashMap3 = new HashMap<Object, HashMap<Object, String>>();
      hashMap2.put(hashMap3, "#es[*ql?B<c");
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove(hashMap1, (Map<Object, HashMap<Object, String>>) hashMap3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Map<Object, HashMap<Object, String>>, String>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Map<Object, HashMap<Object, String>>, String>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      DoubleKeyMap<HashMap<Integer, Object>, Map<Object, HashMap<Object, String>>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Object, HashMap<Object, String>>, String>(hashMap0);
      HashMap<Map<Object, HashMap<Object, String>>, String> hashMap2 = new HashMap<Map<Object, HashMap<Object, String>>, String>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Map<Object, HashMap<Object, String>>, String> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Object>();
      Integer integer0 = new Integer((-2457));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put(integer0, hashMap0, (Object) null);
      Map<HashMap<Integer, String>, Object> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, String, Object>();
      Map<HashMap<Object, Object>, Map<Object, Map<Object, HashMap<Object, String>>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<Object, Object>, Object, Map<Object, HashMap<Object, String>>> doubleKeyMap2 = new DoubleKeyMap<HashMap<Object, Object>, Object, Map<Object, HashMap<Object, String>>>(map0, class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Map<Object, HashMap<Object, String>> map1 = doubleKeyMap2.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.remove((String) null, (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = doubleKeyMap0.remove(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, String>();
      Map<HashMap<String, Integer>, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, String, Integer>(map0, class0);
      Map<String, Integer> map1 = doubleKeyMap1.remove((HashMap<String, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<String, Map<Integer, Integer>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, Integer>>>();
      DoubleKeyMap<Object, String, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Integer, Integer>>(hashMap0);
      Map<String, Map<Integer, Integer>> map0 = doubleKeyMap0.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put((String) null, "d", (String) null);
      Map<String, String> map0 = doubleKeyMap0.get((String) null);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>(hashMap0);
      Object object0 = new Object();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = doubleKeyMap0.put(object0, object0, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(hashMap0);
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, String>((Map<Map<Object, HashMap<Object, String>>, Map<Object, String>>) null);
      HashMap<Object, HashMap<Object, String>> hashMap1 = new HashMap<Object, HashMap<Object, String>>();
      String string0 = doubleKeyMap1.get((Map<Object, HashMap<Object, String>>) hashMap1, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<String, Object>>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, String, String>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-2457));
      HashMap<Integer, Map<HashMap<Integer, String>, Object>> hashMap0 = new HashMap<Integer, Map<HashMap<Integer, String>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Object>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, hashMap1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, String>((Map<Integer, Map<HashMap<Object, Object>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>();
      Integer integer0 = new Integer(3234);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put((Object) integer0, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.put((Object) integer0, hashMap0, integer0);
      assertEquals(3234, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Object, Map<String, HashMap<Object, Object>>>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, Map<String, HashMap<Object, Object>>>>();
      Map<Object, Map<String, HashMap<Object, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(map0, class0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap1.get((Object) null, "#xPQD5=wa");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Object, HashMap<Object, String>>>, Object, String>(hashMap0);
      HashMap<Object, Map<Object, HashMap<Object, String>>> hashMap1 = new HashMap<Object, Map<Object, HashMap<Object, String>>>();
      doubleKeyMap0.put(hashMap1, (Object) null, ">ptCZ/#");
      doubleKeyMap0.get(hashMap1, (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-4895));
      Object object0 = new Object();
      hashMap1.put(integer0, object0);
      hashMap0.put("DPYSDj[UoN]", hashMap1);
      doubleKeyMap0.remove("DPYSDj[UoN]", (Integer) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }
}
