/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:03:56 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.LongBinaryOperator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("'}?6J:Txo-rIO'_0jO", "'}?6J:Txo-rIO'_0jO");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.getOrDefault(typeUtils0, "oUljYVtp:6.'yv0d");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("oUljYVtp:6.'yv0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : oUljYVtp:6.'yv0d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = File.pathSeparator;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[12];
      StackTraceElement stackTraceElement0 = new StackTraceElement("aD%B", "java.til.concurrent.ConcurrentSkipListSet", "java.til.concurrent.ConcurrentSkipListSet", 198);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) internalError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "andDecrement", "Ljava.util.concurrent.ConcurrentSkipListMap", 33);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.util.concurrent.ConcurrentSkipListMap.andDecrement(Ljava.util.concurrent.ConcurrentSkipListMap:33)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Locale.getISOLanguages();
      TypeUtils.fnv1a_64("nqbb;:v4DS(IUJA");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.loadClass("\"Io*(");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals("class java.lang.Object", class0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap.newKeySet(893);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.loadClass("z@v=P`b~6iy$`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) concurrentHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class0 = TypeUtils.loadClass("Ljava.lang.AutoCloseable", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      Class<TimeUnit> class2 = TimeUnit.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, (Map<String, String>) null, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      Class<MockDateFormat> class3 = MockDateFormat.class;
      TypeUtils.isKotlin(class3);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}51Q2");
      TypeUtils.fnv1a_64_lower("");
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = null;
      typeArray0[1] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, type0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.loadClass("istoString", (ClassLoader) null);
      TypeUtils.getGenericParamType((Type) null);
      HashMap<MockCalendar, SQLTransactionRollbackException> hashMap0 = new HashMap<MockCalendar, SQLTransactionRollbackException>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "istoString", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("66GJI", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("66GJI", class0, class0, (Type) null, (Field) null, 2806, 26, 26);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      JSONObject jSONObject0 = new JSONObject();
      TypeUtils.decapitalize("VtC2?d");
      Class<Annotation> class0 = Annotation.class;
      Class<MockDate> class1 = MockDate.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.decapitalize("0BXXesnB");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<TimeZone> class0 = TimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.isKotlin(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      TypeUtils.isKotlin(class2);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      weakHashMap0.remove((Object) null, (Object) breakIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      weakHashMap0.put("N", "N");
      Class<NumberDeserializer> class3 = NumberDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.isNumber("8{]osQoA2T}");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(4);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("8{]osQoA2T}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 8{]osQoA2T}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      Class<VerifyError> class0 = VerifyError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isNumber("s)");
      assertTrue(boolean1 == boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.fnv1a_64_lower("WriteNullNumberAsZero");
      LinkedHashMap<Time, JobAttributes> linkedHashMap0 = new LinkedHashMap<Time, JobAttributes>();
      StackTraceElement stackTraceElement0 = new StackTraceElement("WriteNullNumberAsZero", "d4.|?uKE", "WriteNullNumberAsZero", (-157));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64("nqbb;:v4DS(IUJA");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("nqbb;:v4DS(IUJA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : nqbb;:v4DS(IUJA
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.isProxy(class0);
      Locale locale0 = Locale.PRC;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DateFormatSymbols@dfe35106
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "6.5W.1(<%b";
      TypeUtils.toLocale("6.5W.1(<%b");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getClassFromMapping("6.5W.1(<%b");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("6.5W.1(<%b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("wmt-16!J\"=Y[F", classLoader0, false);
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("wmt-16!J\"=Y[F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isNumber("s)");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.isNumber("zt");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isNumber("(-2o,l0DNvN1w ");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("(-2o,l0DNvN1w ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (-2o,l0DNvN1w 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getParserFeatures(class0);
      Long long0 = new Long(0L);
      Long long1 = new Long((-1521L));
      Long long2 = new Long(0L);
      ParserConfig parserConfig0 = new ParserConfig();
      ArrayList<IllegalAccessError> arrayList0 = new ArrayList<IllegalAccessError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "N={hMg{2ydN,=`";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("N={hMg{2ydN,=`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : N={hMg{2ydN,=`
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.fnv1a_64("DSTSavings");
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.getParserFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("'}?6J:Txo-rIO'_0jO", (String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        concurrentHashMap0.getOrDefault((Object) null, "build object error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(658L);
      TypeUtils.getClass((Type) class0);
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<Time, JSONObject> identityHashMap0 = new java.util.IdentityHashMap<Time, JSONObject>();
      TypeUtils.castToBigDecimal(identityHashMap0);
      Long long0 = new Long(658L);
      int int0 = Opcodes.GOTO;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "java.";
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isProxy(class0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.addAndGet(0L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(594L);
      atomicLong0.set((-451L));
      Class<Date> class1 = Date.class;
      atomicLong0.getAndAdd(0L);
      ParserConfig parserConfig0 = new ParserConfig();
      Date date0 = TypeUtils.cast((Object) atomicLong0, class1, parserConfig0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      TypeUtils.castToInt((Object) null);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
      
      Locale locale0 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autotypeaccept", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.decrementAndGet();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(illegalMonitorStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "java.java.util.Date";
      TypeUtils.getClassFromMapping("java.java.util.Date");
      TreeMap<Calendar, SQLWarning> treeMap0 = new TreeMap<Calendar, SQLWarning>();
      TypeUtils.castToInt((Object) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass((Class<?>) null, jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) point1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      ParserConfig parserConfig0 = ParserConfig.global;
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<SQLWarning> class0 = SQLWarning.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      SQLWarning sQLWarning0 = new SQLWarning();
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      JSONObject jSONObject0 = new JSONObject(true);
      Class<SQLWarning> class0 = SQLWarning.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLWarning sQLWarning0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertNull(sQLWarning0.getMessage());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "toJdbc";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("toJdbc", classLoader0);
      TypeUtils.getGenericParamType((Type) null);
      HashMap<MockCalendar, SQLTransactionRollbackException> hashMap0 = new HashMap<MockCalendar, SQLTransactionRollbackException>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", "[", concurrentHashMap0, illegalThreadStateException0);
      String string0 = "aD%B";
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.isKotlin(class0);
      ClassLoader classLoader0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[", (ClassLoader) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.loadClass("", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("java.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P6mcWO6xX8O");
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      linkedHashMap0.getOrDefault(mockIllegalStateException0, "Z5uPt? Mh~Pq1Rz");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Time time0 = new Time(0L);
      MockIllegalStateException mockIllegalStateException1 = new MockIllegalStateException(mockIllegalStateException0);
      TypeUtils.isHibernateInitialized(mockIllegalStateException1);
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("M*]PU/d?x Z_");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalStateException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      TypeUtils.isKotlin(class0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(timeUnit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.isNumber("zt");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      try { 
        javaBeanSerializer0.getFieldValuesMap("zt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      Class<Float> class0 = Float.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", classLoader0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("{ydR/IM", class0, class1, (Type) null, (Field) null, (-2560), (-2560), (-2560));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.fnv1a_64_lower("WriteNullNumberAsZero");
      LinkedHashMap<Time, JobAttributes> linkedHashMap0 = new LinkedHashMap<Time, JobAttributes>();
      StackTraceElement stackTraceElement0 = new StackTraceElement("WriteNullNumberAsZero", "WriteNullNumberAsZero", "WriteNullNumberAsZero", (-157));
      ParserConfig.getGlobalInstance();
      TypeUtils.createCollection(type0);
      Locale locale0 = Locale.GERMAN;
      Locale.forLanguageTag("fastjson.parser.autoTypeAccept");
      NumberFormat.getNumberInstance(locale0);
      NumberFormat.getPercentInstance(locale0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(locale1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : zh_CN
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.getOrDefault(class0, "h*x/#uzDSSB/(6");
      BiFunction<Object, Object, InternalError> biFunction0 = (BiFunction<Object, Object, InternalError>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.search(100L, (BiFunction<? super String, ? super String, ? extends InternalError>) biFunction0);
      Class<Timestamp> class1 = Timestamp.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) concurrentHashMap0);
      ClassLoader.getSystemClassLoader();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(93);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 93
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d(Sm5]AXp;=j/=Hy]", "vDUat~)~f'?QZC");
      Class<Double> class0 = Double.class;
      TypeUtils.isProxy(class0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      InternalError internalError0 = new InternalError("vDUat~)~f'?QZC", mockNullPointerException0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("vDUat~)~f'?QZC");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(negativeArraySizeException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToString(fileSystemHandling0);
      TypeUtils.isNumber("scanFieldBigInteger");
      Class<Float> class0 = Float.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.decapitalize("getgetFastMatchToken");
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class1);
      ArrayList<Exception> arrayList0 = new ArrayList<Exception>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(negativeArraySizeException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.keySet();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      properties0.put(linkedHashSet0, linkedHashSet0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.isHibernateInitialized(properties0);
      TypeUtils.fnv1a_64_lower("lRuvC};R+8Ie<xKIt6");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isProxy(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AtomicLong atomicLong0 = new AtomicLong((-451L));
      atomicLong0.set((-451L));
      LinkedHashMap<ImageCapabilities, Locale> linkedHashMap0 = new LinkedHashMap<ImageCapabilities, Locale>();
      TypeUtils.castToString(linkedHashMap0);
      SecurityException securityException0 = new SecurityException("java.util.LinkedHashMap@0000000001");
      Double double0 = new Double(1.0);
      TypeUtils.castToSqlDate(double0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.decapitalize("Ljavp. til.concurrentRmonc8rrentSkipListSet");
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      BigDecimal bigDecimal0 = new BigDecimal(1682);
      SecurityException securityException0 = new SecurityException("ljavp. til.concurrentRmonc8rrentSkipListSet");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getClassFromMapping("java.java.util.Date");
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      TypeUtils.isNumber("");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils.fnv1a_64("+'.70CT#G1\"tG");
      TypeUtils.castToSqlDate((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+'.70CT#G1\"tG");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("+'.70CT#G1\"tG", "'}?6J:Txo-rIO'_0jO");
      Map.Entry.comparingByValue();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<JSONObject, GridBagConstraints> hashMap0 = new HashMap<JSONObject, GridBagConstraints>();
      concurrentHashMap0.getOrDefault(hashMap0, "'}?6J:Txo-rIO'_0jO");
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.decapitalize("L");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClassFromMapping("not support@ type : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.isKotlin(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("fastjson.parser.deny", classLoader0, false);
      Point point0 = new Point();
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.isHibernateInitialized(parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "WriteNllNumbAsZeo";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("WriteNllNumbAsZeo");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WriteNllNumbAsZeo\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("java.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.isNumber(" ]aumo  ALq m");
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      // Undeclared exception!
      try { 
        jSONSerializer0.writeWithFormat(" ]aumo  ALq m", "org.springframework.security.web.savedrequest.SavedCookie");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(658L);
      Class<NumberFormat> class0 = NumberFormat.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Long long0 = new Long(658L);
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isProxy(class0);
      TypeUtils.isHibernateInitialized((Object) null);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      String string0 = "qHkdU";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("qHkdU", classLoader1);
      TypeUtils.getGenericParamType(class2);
      HashMap<MockCalendar, SQLTransactionRollbackException> hashMap0 = new HashMap<MockCalendar, SQLTransactionRollbackException>();
      ParserConfig.getGlobalInstance();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("aD%B", "aD%B", "aD%B", 198);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Method> class0 = Method.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      ConcurrentHashMap<Jdk8DateCodec, Jdk8DateCodec> concurrentHashMap0 = new ConcurrentHashMap<Jdk8DateCodec, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.isProxy(class0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.getGenericParamType(class0);
      TypeUtils.loadClass("z@v=P`b~6iy$`");
      ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      TypeUtils.decapitalize((String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BigDecimal bigDecimal0 = new BigDecimal(20);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap.newKeySet(329);
      TypeUtils.loadClass("srq[Z3");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, true);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.loadClass("istoString", (ClassLoader) null);
      TypeUtils.getGenericParamType((Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<ClassLoader> class0 = ClassLoader.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashtable0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("istoString");
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(stringIndexOutOfBoundsException0);
      Class<RenderingHints> class1 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(map0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.loadClass("java.til.concurrent.ConcurrentSkipListSet");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.decapitalize("Kb9mVaZ?p@`");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClassFromMapping("Kb9mVaZ?p@`");
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getClassFromMapping("java.java.util.Date");
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("java.java.util.Date");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(indexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.IndexOutOfBoundsException: java.java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      TypeUtils.isKotlin(class2);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TypeUtils.toLocale("b{,\"4N");
      TypeUtils.getCollectionItemType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class org.evosuite.runtime.mock.java.text.MockDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.addAndGet(0L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig.getGlobalInstance();
      TypeUtils.decapitalize("fastjson.parser.deny");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap1.forEach(biConsumer0);
      TypeUtils.isHibernateInitialized("scanLong");
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = classLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("float", classLoader2);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("C!<p!vA$j.rD2IB\"");
      System.setCurrentTimeMillis((-3981750379248218290L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("C!<p!vA$j.rD2IB\"", classLoader0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C!<p!vA$j.rD2IB\"");
      sQLFeatureNotSupportedException0.getStackTrace();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C!<p!vA$j.rD2IB\"");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C!<p!vA$j.rD2IB\"");
      sQLSyntaxErrorException0.setNextException(sQLTimeoutException0);
      sQLFeatureNotSupportedException0.setNextException(sQLSyntaxErrorException0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      SQLDataException sQLDataException0 = new SQLDataException("C!<p!vA$j.rD2IB\"", (Throwable) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      TypeUtils.castToDate((Object) null);
      TypeUtils.getCollectionItemClass((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(classLoader1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.mis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(class0);
      AtomicLong atomicLong0 = new AtomicLong(491L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      Class<InternalError> class1 = InternalError.class;
      TypeUtils.isKotlin(class1);
      LinkedHashMap<SQLWarning, Time> linkedHashMap0 = new LinkedHashMap<SQLWarning, Time>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.getClassFromMapping(",2y+(7de>=5H??x$");
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException(",2y+(7de>=5H??x$");
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = JSON.toJavaObject((JSON) jSONObject0, class0);
      assertNotNull(annotation0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<IllegalStateException, java.sql.Date> concurrentHashMap1 = new ConcurrentHashMap<IllegalStateException, java.sql.Date>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader.getSystemClassLoader();
      concurrentHashMap0.put("@type", ",txH2>We0B5b68 ");
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("zfVw%Xk({dYV]8");
      TypeUtils.castToLong((Object) null);
      Insets insets0 = new Insets(47, 55232, 466, 65);
      TypeUtils.castToShort((Object) null);
      String string0 = TypeUtils.decapitalize(",txH2>We0B5b68 ");
      assertEquals(",txH2>We0B5b68 ", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("can not cast to char, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"can not cast to char value : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getClassFromMapping("java.java.util.Date");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("java.java.util.Date");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isNumber("[");
      TypeUtils.castToSqlTime((Object) null);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      TypeUtils.isPath(class1);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Type[] typeArray0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ":+~Yob`", (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<BitSet> class1 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.decrementAndGet();
      atomicLong0.addAndGet(0L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      TypeUtils.castToString((Object) null);
      Class<?> class2 = TypeUtils.loadClass("`P2*}hz&F");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.computeGetters(class0, map0, false);
      TypeUtils.getSerializeFeatures(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "wOyc%ow+Zl";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("wOyc%ow+Zl");
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) choiceFormat0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("'}?6J:Txo-rIO'_0jO", "'}?6J:Txo-rIO'_0jO");
      Map.Entry.comparingByValue();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.getOrDefault(abstractMap_SimpleImmutableEntry0, "'}?6J:Txo-rIO'_0jO");
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      StackTraceElement stackTraceElement0 = new StackTraceElement("e*(dp*l(K?", "aD%B", "rlDwN:Mj1K", 198);
      Short short0 = new Short((short)2173);
      TypeUtils.castToTimestamp(short0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("e*(dp*l(K?", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.isProxy(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.getStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, parameterizedTypeImpl0);
      parameterizedTypeImpl1.getTypeName();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      UnaryOperator.identity();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ConcurrentHashMap<IllegalStateException, java.sql.Date> concurrentHashMap0 = new ConcurrentHashMap<IllegalStateException, java.sql.Date>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) concurrentHashMap0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      TypeUtils.isKotlin(class2);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      AtomicLong atomicLong0 = new AtomicLong((-2093064L));
      Long long0 = new Long((-2093064L));
      Long long1 = new Long((long) long0);
      atomicLong0.set((-1L));
      Long long2 = new Long((-1L));
      StackTraceElement stackTraceElement0 = new StackTraceElement("isWriteClassName", "gbj*YX~2Xz;ZD{d$", "toJdbc", (-1795));
      StackTraceElement stackTraceElement1 = new StackTraceElement("4=}B};Om~\"*U2*oNx", "isWriteClassName", "4=}B};Om~\"*U2*oNx", (-3111));
      StackTraceElement stackTraceElement2 = new StackTraceElement("toJdbc", "4=}B};Om~\"*U2*oNx", "ishashCode", 3415);
      TypeUtils.decapitalize("4=}B};Om~\"*U2*oNx");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Locale> class3 = Locale.class;
      TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) weakHashMap0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToFloat(long1);
      Class<SQLWarning> class4 = SQLWarning.class;
      TypeUtils.getSerializeFeatures(class4);
      TypeUtils.unwrapOptional(class2);
      Class<?> class5 = TypeUtils.getClassFromMapping("4=}B};Om~\"*U2*oNx");
      assertNull(class5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      TypeUtils.getClass((Type) class0);
      java.util.IdentityHashMap<Time, JSONObject> identityHashMap0 = new java.util.IdentityHashMap<Time, JSONObject>();
      TypeUtils.castToBigDecimal(identityHashMap0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("aD%B", "aD%B", "aD%B", 198);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(198, "Ljava.lang.AutoCloseable");
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      parserConfig0.addAccept("Ljava.lang.AutoCloseable");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Z5uPt? Mh~Pq1Qz", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.isProxy(class0);
      TypeUtils.loadClass("a8%f}dr8cW9Dje");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.decapitalize("toS");
      Class<StringCharacterIterator> class2 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.getClassFromMapping("toS");
      Locale locale0 = Locale.ITALY;
      Collator.getInstance(locale0);
      TypeUtils.castToTimestamp((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : it_IT
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Map<String, String> map0 = null;
      TypeUtils.castToInt((Object) null);
      AtomicLong atomicLong0 = new AtomicLong(658L);
      TypeUtils.getClass((Type) class0);
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<Time, JSONObject> identityHashMap0 = new java.util.IdentityHashMap<Time, JSONObject>();
      TypeUtils.castToSqlTime((Object) null);
      JSONObject jSONObject0 = new JSONObject(0, true);
      jSONObject0.getJSONObject("(K/~G{Mj%g.rTp_Taa");
      identityHashMap0.put((Time) null, (JSONObject) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isNumber("[");
      TypeUtils.castToSqlTime((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.isPath(class0);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      TypeUtils.isPath(class1);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Type[] typeArray0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      String string0 = "can not cast to char, value : ";
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("can not cast to char, value : ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.can not cast to char, value : 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[12];
      StackTraceElement stackTraceElement0 = new StackTraceElement("aD%B", "java.til.concurrent.ConcurrentSkipListSet", "java.til.concurrent.ConcurrentSkipListSet", 198);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement1 = new StackTraceElement("[", "getMetaClass", "M+9+:Lwse", (-2997));
      Time time0 = new Time((-4681L));
      TypeUtils.isHibernateInitialized("[");
      TypeUtils.clearClassMapping();
      Long long0 = new Long((-2997));
      Class<Double> class0 = Double.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(2457);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.til.concurrent.ConcurrentSkipListSet", illegalThreadStateException0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@cb17cc1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      String string0 = "";
      TypeUtils.decapitalize("");
      TypeUtils.isNumber("");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StringBuffer stringBuffer0 = new StringBuffer("t");
      // Undeclared exception!
      try { 
        choiceFormat0.format(1817L, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.getClassFromMapping(",2y+(7de>=5H??x$");
      concurrentHashMap0.put("&N~", ",2y+(7de>=5H??x$");
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException(",2y+(7de>=5H??x$");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {&N~=,2y+(7de>=5H??x$}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashSet<ThrowableDeserializer> linkedHashSet0 = new LinkedHashSet<ThrowableDeserializer>();
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig1 = ParserConfig.global;
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      linkedHashMap0.put("fastjson.parser.autoTypeAccept", ")ghDNG6Jk");
      linkedHashMap0.put("fastjson.parser.autoTypeAccept", "scanLong");
      parserConfig1.setAsmEnable(true);
      Dimension dimension0 = new Dimension(43, 3600000);
      TypeUtils.castToByte((Object) null);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) numberDeserializer0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.isNumber("java.til.concurrent.ConcurrentSkipListSet");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Properties properties0 = new Properties();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("Ljava.awt.Point");
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class1, hashMap0);
      noSuchFieldError0.getStackTrace();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      linkedHashMap0.put("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept");
      linkedHashMap0.put("WriteNonStringValueAsString", "jrG");
      Dimension dimension0 = new Dimension((-1001), (-3423));
      JobAttributes jobAttributes0 = new JobAttributes();
      Short short0 = new Short((short) (-632));
      TypeUtils.castToByte(short0);
      TypeUtils.toLocale("[float");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.configFromPropety(properties0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(122);
      PriorityQueue<JSONPDeserializer> priorityQueue0 = new PriorityQueue<JSONPDeserializer>();
      HashMap<IndexOutOfBoundsException, InstantiationError> hashMap0 = new HashMap<IndexOutOfBoundsException, InstantiationError>();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.getSerializeFeatures(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      ConcurrentHashMap<IllegalStateException, java.sql.Date> concurrentHashMap0 = new ConcurrentHashMap<IllegalStateException, java.sql.Date>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      Class<Boolean> class2 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@ceba5ccc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ",2y+(7de>=5H??x$";
      concurrentHashMap0.put(",2y+(7de>=5H??x$", ",2y+(7de>=5H??x$");
      TypeUtils.getClassFromMapping(",2y+(7de>=5H??x$");
      concurrentHashMap0.put("&N~", ",2y+(7de>=5H??x$");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {&N~=,2y+(7de>=5H??x$, ,2y+(7de>=5H??x$=,2y+(7de>=5H??x$}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      AtomicLong atomicLong0 = new AtomicLong(655L);
      atomicLong0.addAndGet(0L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)46;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<InternalError> class2 = InternalError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class0, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      parserConfig0.addAccept("iterator");
      parserConfig0.putDeserializer(class1, javaBeanDeserializer0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicLong0, (Type) javaBeanInfo0.clazz, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      AtomicLong atomicLong0 = new AtomicLong((-3750763034362895590L));
      atomicLong0.decrementAndGet();
      AtomicInteger atomicInteger0 = new AtomicInteger(90);
      TypeUtils.castToBoolean(atomicInteger0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        JSON.parseObject("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.loadClass("L");
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.decapitalize("L");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClassFromMapping("not support type : ");
      MockDate mockDate0 = new MockDate((-2397), (-2397), (-2397), (-2397), 12);
      Time time0 = TypeUtils.castToSqlTime(mockDate0);
      assertEquals("03:12:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.isNumber("8{]osQoA2T}");
      Class<Double> class0 = Double.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("8{]osQoA2T}", classLoader0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalAnd(false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isNumber("fastjson.parser.deny");
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class0, hashMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      UnaryOperator.identity();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.isGenericParamType(type1);
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap1, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<BigDecimal> class0 = BigDecimal.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$RkVOc0$+mP+Wnm1An";
      stringArray0[1] = "Rxz[{fXqn";
      stringArray0[2] = "FiA.{t=";
      stringArray0[3] = "java.lang.Class@0000000001";
      stringArray0[4] = "[C";
      stringArray0[5] = "1l";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      String string0 = "java.til.concurrent.ConcurrentSkipListSet";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement0 = new StackTraceElement("[", "getMetaClass", "M+9+:Lwse", (-2997));
      Time time0 = new Time(198);
      TypeUtils.isHibernateInitialized("[");
      Class<TimeUnit> class0 = TimeUnit.class;
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement0 = new StackTraceElement("[", "getMetaClass", "M+9+:Lwse", (-2997));
      Time time0 = new Time(198);
      TypeUtils.isHibernateInitialized("[");
      Class<TimeUnit> class0 = TimeUnit.class;
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.getGenericParamType(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.testdata.FileSystemHandling@65224eb3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("C!<p!vA$j.rD2IB\"");
      System.setCurrentTimeMillis((-3981750379248218290L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("~?dtr", true);
      Properties properties0 = new Properties();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      linkedHashMap0.put("hours", "C!<p!vA$j.rD2IB\"");
      linkedHashMap0.put("AZ~,pG'{rS{rJ{", (String) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.addAccept("QRWD");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      parserConfig0.putDeserializer(class0, numberDeserializer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(9);
      Integer integer0 = TypeUtils.castToInt(bigDecimal0);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.isNumber("8{]osQoA2T}");
      Class<Double> class0 = Double.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.getGenericParamType(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      StackTraceElement stackTraceElement0 = new StackTraceElement("C[9UkTT2,=QpJR6j@S~", "8{]osQoA2T}", (String) null, 741);
      Time time0 = new Time(4);
      SQLWarning sQLWarning0 = new SQLWarning("C[9UkTT2,=QpJR6j@S~");
      TypeUtils.isHibernateInitialized(sQLWarning0);
      TypeUtils.clearClassMapping();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(741);
      ParserConfig parserConfig1 = ParserConfig.global;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("fastjson.parser.autoTypeSupport");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("-RNJ#|i>?h^Hyp", sQLWarning0);
      typeNotPresentException0.getLocalizedMessage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }
}
