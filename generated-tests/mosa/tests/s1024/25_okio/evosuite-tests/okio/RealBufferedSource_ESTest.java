/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:33:58 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Set;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-640L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -640
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 37);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-1717986917));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-1628L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1628
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip((-1051L));
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(37);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-124), (long) (-1), (long) (byte) (-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1 toIndex=-124
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)1, (long) (byte)1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1 toIndex=-1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("*o~Q6C.lm", charset0);
      buffer0.writeInt(37);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.indexOfElement(byteString0);
      try { 
        realBufferedSource0.skip(37);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeInt(90);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      
      try { 
        realBufferedSource0.readByteArray(837L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(gzipSource0);
      
      gzipSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeInt((-16777216));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      ByteString[] byteStringArray0 = new ByteString[11];
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(11, options0.size());
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x61
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((-1L), byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 1, byteString0, 1, 1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertFalse(boolean0);
      
      String string0 = realBufferedSource0.readUtf8Line();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      ByteString byteString0 = realBufferedSource1.readByteString();
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(2L, byteString0, 1908874353, 1908874353);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOf((byte)55, 2147483647L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      long long1 = realBufferedSource0.indexOf((byte)55);
      assertTrue(long1 == long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.indexOf(byteString0, 0L);
      assertFalse(long1 == long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource1);
      
      byte[] byteArray0 = new byte[6];
      int int0 = realBufferedSource0.read(byteArray0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString(0L, charset0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(2238L, byteString0, (-1), 1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertFalse(boolean0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      realBufferedSource0.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      
      // Undeclared exception!
      try { 
        realBufferedSource2.readUtf8CodePoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeInt((-1));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)2;
      int int0 = realBufferedSource0.read(byteArray0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt(37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      short short0 = realBufferedSource0.readShortLe();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(13);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      
      int int0 = realBufferedSource1.readUtf8CodePoint();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource1);
      
      String string0 = realBufferedSource0.readUtf8(0L);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("", string0);
      assertNotNull(string0);
      
      realBufferedSource0.close();
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt(37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.read(buffer0, (long) 37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt((-1622));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=fffff9aa\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      try { 
        realBufferedSource0.skip(51L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeInt((-243));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(65533, int0);
      
      String string0 = hashingSource0.toString();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(string0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(70);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pipe pipe0 = new Pipe(2989L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.indexOf((byte)126, (long) (byte)126, (long) (byte)126);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource1.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(gzipSource0);
      
      gzipSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.skip(1633L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt(37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Inflater inflater0 = new Inflater();
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, inflater0.getAdler());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readAll(buffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: unknown compression method
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeInt(90);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      boolean boolean0 = realBufferedSource0.request(3L);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-32);
      hashingSource0.close();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteArray0[2] = (byte)97;
      int int1 = realBufferedSource0.read(byteArray0);
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, long0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.indexOf(byteString0, 1L);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals(2250L, byteString0, 72, (-3822));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      
      String string0 = realBufferedSource1.readUtf8Line();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (-3822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3822
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeInt((-1073741823));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, long0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer1, byteString0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(hashingSource1);
      
      ByteString byteString1 = hashingSource1.hash();
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(65533, int0);
      
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -167
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      String string0 = realBufferedSource0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("buffer([size=0])", string0);
      assertNotNull(string0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1789569706);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, long0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)45;
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.skip((-1051L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)42;
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(32L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer1.writeInt(10);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, long0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(6L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(50, int0);
      
      String string0 = realBufferedSource0.readUtf8LineStrict(6L);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals("0\u0000\u0000\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt(37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, int0);
      
      try { 
        realBufferedSource0.skip(12L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = true;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1L);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.close();
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      byte byte0 = (byte) (-71);
      long long0 = 4L;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(6, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105, (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray0);
      assertNotNull(byteString0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSource0.buffer, byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(6, byteString0.size());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertArrayEquals(new byte[] {(byte)105, (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray0);
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertEquals(6, byteString0.size());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertArrayEquals(new byte[] {(byte)105, (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray0);
      assertNotNull(byteString1);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer1, buffer0);
      assertEquals(6, byteString0.size());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertArrayEquals(new byte[] {(byte)105, (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray0);
      assertNotNull(hashingSource0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertSame(buffer1, buffer0);
      assertEquals(6, byteString0.size());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertArrayEquals(new byte[] {(byte)105, (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71), (byte) (-71)}, byteArray0);
      assertNotNull(byteString2);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString2, (long) (byte) (-71));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals((-1L), long0);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource2);
      
      boolean boolean0 = realBufferedSource2.rangeEquals(4L, byteString0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource0);
      assertNotSame(realBufferedSource2, realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 1482L;
      Pipe pipe0 = new Pipe(1482L);
      assertNotNull(pipe0);
      
      Source source0 = pipe0.source();
      assertNotNull(source0);
      
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.closed = false;
      Buffer buffer0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 1482L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeInt(37);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-3123L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.readFully(byteArray0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-3123L), long0);
  }
}
