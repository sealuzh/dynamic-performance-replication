/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:30:35 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https://tmp/foo.bar");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl0.resolve("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder1.encodedQuery("<wEXuJttgO");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("https://tmp/foo.bar", "https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      httpUrl1.queryParameterValues("https://tmp/foo.bar");
      HttpUrl.getChecked("https:/foo.bar");
      try { 
        MockURL.URL("b!\"/&)Bfx`3", "okhttp3.internal.Util", 6, ":");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: b!\"/&)bfx`3
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Number too large: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("Number too large: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("host == null");
      httpUrl_Builder2.addEncodedPathSegments("host == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('6');
      assertEquals(6, int0);
      
      String string0 = HttpUrl.canonicalize("\u2026]", "http", true, true, true, true);
      assertEquals("%E2%80%A6]", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        HttpUrl.getChecked("s0u}hpxyhmmvjquf");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for s0u}hpxyhmmvjquf
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("95a");
      String string0 = "ul5z:\"";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(";;1kt\"oST %}Id`pe9n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("https");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("95a", "95a");
      httpUrl_Builder0.addEncodedPathSegments(";;1kt\"oST %}Id`pe9n");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("https:]a%bs_c", "95a");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("?[gF");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("?[gF");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("95a");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.addQueryParameter("https:]a%bs_c", "okio.ByteStTang");
      httpUrl_Builder5.addPathSegments("https:]a%bs_c");
      httpUrl_Builder4.addEncodedPathSegment("a</LL$%{(=a:-fV");
      httpUrl_Builder3.reencodeForUri();
      httpUrl_Builder0.removePathSegment(0);
      HttpUrl.parse("okio.ByteStTang");
      HttpUrl.percentEncoded(":P}(b-g", 1234, 0);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("https:]a%bs_c", 1361, 56319, "https:]a%bs_c", false, false, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("http::");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("s.limit == s.pos");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedQueryParameter((String) null, "projects");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("iwOa/Zm6s");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "iwOa/Zm6s");
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      assertEquals("iwOa/Zm6s/iwOa/Zm6s/null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.removeAllQueryParameters("+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      httpUrl_Builder2.build();
      httpUrl_Builder2.query("https://tmp/foo.bar");
      HttpUrl.getChecked("https://tmp/foo.bar");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue((-1639376842));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/fo^o.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/fo^o.bar";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("https://tmp/fo^o.bar");
      HttpUrl httpUrl0 = HttpUrl.parse("https://tmp/fo^o.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/fo^o.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("$v");
      httpUrl_Builder3.fragment("https://tmp/fo^o.bar");
      String string0 = httpUrl_Builder2.toString();
      assertEquals("https://:$v@tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar", string0);
      
      HttpUrl httpUrl1 = HttpUrl.getChecked("https://:$v@tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar");
      HttpUrl.queryStringToNamesAndValues("%2e.");
      HttpUrl httpUrl2 = httpUrl_Builder0.build();
      boolean boolean0 = httpUrl1.equals(httpUrl2);
      assertTrue(boolean0);
      
      httpUrl0.username();
      assertEquals("https://tmp/fo%5Eo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("okio.GzipSource");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("\thR`u");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("%2e%2e");
      String string0 = "f/08%vq%T2-(";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment((-1), "f/08%vq%T2-(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "-YN <u~|PC1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("-YN <u~|PC1");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("-YN <u~|PC1");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("-YN <u~|PC1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: -YN <u~|PC1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "http::vvqwb(i:d=%7cp*hc'n#95a";
      HttpUrl.canonicalize("/", "http::vvqwb(i:d=%7cp*hc'n#95a", false, false, true, true);
      String string1 = null;
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "ID1ID2", 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("ID1ID2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ID1ID2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", "hBtps");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("hBtps");
      httpUrl0.queryParameterNames();
      httpUrl0.fragment();
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://http/#hBtps", uRI1.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-11);
      byteArray0[5] = (byte) (-29);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("+W(2DMn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "", (byte)57, (byte) (-11), true);
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder0.encodedQuery("+W(2DMn//;+ip");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder1.encodedUsername = "https://tmp/foo.bar";
      httpUrl_Builder1.encodedQuery("+W(2DMn//;+ip");
      boolean boolean0 = httpUrl0.isHttps();
      assertTrue(boolean0);
      
      httpUrl_Builder0.fragment("https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      HttpUrl httpUrl2 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl1.queryParameter("+W(2DMn//;+ip");
      assertEquals("https://https://tmp/foo.bar@tmp/foo.bar?+W(2DMn//;+ip#https://tmp/foo.bar", httpUrl1.toString());
      
      String string1 = httpUrl2.password();
      assertEquals("", string1);
      assertEquals(1, httpUrl2.pathSize());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URI uRI0 = MockURI.URI("https://tmp/foo.bar", "|VG^Nlx)?:F2", "unexpected encodedPath: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("okio.ByteString");
      assertEquals(1, httpUrl0.querySize());
      assertEquals("unexpected encodedPath: ", httpUrl0.fragment());
      assertEquals("https://tmp/foo.bar:%7CVG%5ENlx)?:F2#unexpected%20encodedPath:%20", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.queryStringToNamesAndValues("Cannot buffer entire body for content length: ");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Cannot buffer entire body for content length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Cannot buffer entire body for content length: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://some/fake/but/wellformed/url");
      HttpUrl.queryStringToNamesAndValues("+jqc)nun");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, "+jqc)nun", false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      HttpUrl.percentDecode("", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("zZV*X");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("9M'iE$dw2^YWPNT0~");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("");
      httpUrl_Builder5.setEncodedPathSegment(0, "zZV*X");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.decodeHexDigit('d');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("q''!KPZTA^Zcc6");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("mwQ}{]6j");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("https:foo.bar");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("https:foo.bar");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: https:foo.bar
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("&S|*|WXnG=");
      assertFalse(list0.contains("&S|*|WXnG="));
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "Afd\"OdMA}$e^6r[";
      try { 
        HttpUrl.getChecked("Afd\"OdMA}$e^6r[");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Afd\"OdMA}$e^6r[
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.decodeHexDigit(',');
      HttpUrl.decodeHexDigit('9');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl0.isHttps();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(116);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("c7^d}<#=`BuF2uf");
      httpUrl_Builder2.removeAllEncodedQueryParameters("c7^d}<#=`BuF2uf");
      httpUrl_Builder0.toString();
      try { 
        HttpUrl.getChecked("INVALID_HOST");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for INVALID_HOST
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("http::vvqwb(i:d=%7cp*hc'n#95a");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http::vvqwb(i:d=%7cp*hc'n#95a
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "x/,g_43wI9";
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.decodeHexDigit('d');
      HttpUrl.percentEncoded("..", 13, 13);
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, 61, 106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "mX";
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("0%7d");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.password("");
      httpUrl_Builder2.addEncodedPathSegment(".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("mX");
      httpUrl_Builder3.addEncodedQueryParameter("https://tmp/foo.bar", "%2e%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("[7n^%@=<h{y");
      assertEquals(2, list0.size());
      assertFalse(list0.contains("[7n^%@=<h{y"));
      
      HttpUrl.parse("[7n^%@=<h{y");
      int int0 = HttpUrl.decodeHexDigit('{');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https://tmp/foo.bar");
      httpUrl0.query();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("\u2026");
      httpUrl_Builder0.addEncodedPathSegment(".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("67.]oTM}RdxsIB*Y*");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("http", "Q%23-y%3Fi");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.fragment("%2e");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedUsername(" #v)8,0k;");
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "..";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(111, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = "\\k6:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("k6:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: k6:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("+jqc)nun");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("?#");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("INVALID_PORT");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("m%7f:zm", "+jqc)nun");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = HttpUrl.FORM_ENCODE_SET;
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURL.getHttpExample();
      URI uRI1 = MockURL.toURI(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockURI.normalize(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "http:", 2743, 0, "%2e", true, true, false, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("jd:'oys");
      assertNull(httpUrl1);
      
      httpUrl0.encodedPassword();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl0.redact();
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      HttpUrl.percentDecode((Buffer) null, "Expected leading [0-9a-fA-F] character but was 0x", 0, (-2432), true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("95Hg'~i&451]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 95Hg'~i&451]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("+onbLu");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("+onbLu");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("+onbLu");
      httpUrl_Builder0.encodedPassword("+onbLu");
      String string0 = "";
      httpUrl_Builder3.removeAllQueryParameters("");
      String string1 = "03]v&vG IFj6( Fx";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("03]v&vG IFj6( Fx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 03]v&vG IFj6( Fx
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(8192, "1/");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8192, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R)Je(cp:%}p_h>");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl0.resolve("R)Je(cp:%}p_h>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder0.addPathSegments("https://tmp/foo.bar");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("R)Je(cp:%}p_h>", "https://tmp/foo.bar");
      httpUrl_Builder1.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("https://tmp/foo.bar", (-1), (-3694), "", false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "95a";
      HttpUrl.queryStringToNamesAndValues("95a");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("https:]a%bs_c", "95a");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder1.parse(httpUrl0, "SS#WL1GS`#");
      httpUrl_Builder1.fragment("https://tmp/foo.bar");
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
      
      URL uRL0 = httpUrl0.url();
      HttpUrl.get(uRL0);
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      HttpUrl httpUrl1 = httpUrl0.resolve("Q%23-y%3Fi");
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder2.encodedQuery("+W(2 Mn//;+ip");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedQueryParameter("Q%23-y%3Fi", "https://tmp/foo.bar");
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      httpUrl1.redact();
      httpUrl2.encodedPathSegments();
      httpUrl2.queryParameter("w5CA^,-?i>w");
      HttpUrl httpUrl3 = httpUrl_Builder3.build();
      String string0 = httpUrl3.encodedPassword();
      assertEquals(2, httpUrl3.querySize());
      assertEquals("https://:9%3AC0@tmp/foo.bar/https:%2F%2Ftmp%2Ffoo.bar?+W(2%20Mn//;+ip&Q%23-y%3Fi=https://tmp/foo.bar#https://tmp/foo.bar", httpUrl3.toString());
      assertEquals("9:C0", httpUrl3.password());
      assertEquals("9%3AC0", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "ID1ID2";
      int int0 = 0;
      HttpUrl.percentDecode(buffer0, "ID1ID2", 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("ID1ID2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ID1ID2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "%2e%2e", 57, 52, "", false, true, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("3UQCsM~xUafC}ycP3gG");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "i2qwt1Jz";
      httpUrl_Builder0.encodedQuery("i2qwt1Jz");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("ht");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery((String) null);
      httpUrl_Builder2.addPathSegments("rYnMyT=");
      try { 
        HttpUrl.getChecked("rYnMyT=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for rYnMyT=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("i2qwt1Jz");
      httpUrl_Builder0.addEncodedPathSegments("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI1 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      HttpUrl.defaultPort(".%2e");
      httpUrl0.queryParameterValues("$9zNP:5");
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/q9v*[a%3e%60%2f~a8jzo", 81, (-2998), "JZGyvE)cfDG/9@*d:cP", false, false, false, false);
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/q9v*[a%3e%60%2f~a8jzo");
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals(7, int0);
      
      httpUrl0.newBuilder();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/q9v*[a%3e%60%2f~a8jzo", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.decodeHexDigit('!');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("?'/;N%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(116);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(1024, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R)Je(cp:%}p_h>");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl0.resolve("R)Je(cp:%}p_h>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder1.encodedQuery("<wEXuJttgO");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("R)Je(cp:%}p_h>", "https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      httpUrl_Builder1.addEncodedPathSegments("%2e");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(3741);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7483, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.decodeHexDigit('8');
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse(" \"#<>^`{|}");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      int int0 = 0;
      String string0 = ":@";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("95a");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("u?,sb;qq", (-4271), (-4271), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("okio.RealBufferedSink");
      String string0 = "N.Q-@EHZOF@nR";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("okio.RealBufferedSink", "N.Q-@EHZOF@nR");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("okio.RealBufferedSink", (String) null);
      httpUrl_Builder3.setQueryParameter("N.Q-@EHZOF@nR", "%2e.");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("N.Q-@EHZOF@nR");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "CZnnot buffer entire body for content length: ";
      HttpUrl.queryStringToNamesAndValues("CZnnot buffer entire body for content length: ");
      httpUrl_Builder0.removeAllQueryParameters("CZnnot buffer entire body for content length: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("CZnnot buffer entire body for content length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: CZnnot buffer entire body for content length: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder0.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder0.addEncodedQueryParameter("https://tmp/foo.bar", "https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegments("mo]7rd&U{");
      httpUrl_Builder0.setQueryParameter("https://tmp/foo.bar", "https://tmp/foo.bar");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(43, "L");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      HttpUrl.get(uRI1);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("^z>");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("2mcP!CTb7mNlp].3#", "llod +4$x+B");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("llod +4$x+B");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("^z>");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("llod +4$x+B");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addQueryParameter("^z>", "file:/");
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("Gx");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.defaultPort("");
      String string0 = HttpUrl.canonicalize("", "", false, false, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("XDR,kgV%L:A_");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.decodeHexDigit('@');
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "@+%60dz%04yvq", (-1), 2319, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("95a");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("95a");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("/95Hg'~i&451]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /95Hg'~i&451]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "Q%23-y%3Fi";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Q%23-y%3Fi");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.password("Jl7vt1g2e2%22@j");
      httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.addEncodedPathSegments("/");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder2.removeAllQueryParameters("Number too large: ");
      httpUrl_Builder1.addEncodedPathSegments("getsockname failed");
      httpUrl_Builder0.password("http:");
      httpUrl1.query();
      assertEquals("Jl7vt1g2e2%22@j", httpUrl1.password());
      assertEquals("https://:Jl7vt1g2e2%2522%40j@tmp/foo.bar//?https://tmp/foo.bar", httpUrl1.toString());
      
      httpUrl0.redact();
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(90);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        HttpUrl.getChecked("okio.HashingSource");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okio.HashingSource
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("");
      String string1 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername(".");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("]w/+jqC)NUn");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string1 = null;
      httpUrl_Builder0.encodedQuery("{");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.removeAllEncodedQueryParameters("-yn%20%3cu~%7cpc1");
      httpUrl_Builder4.query("FHCRC");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HttpUrl.canonicalize("", "]1X{$`F<6", false, false, false, false);
      // Undeclared exception!
      try { 
        HttpUrl.Builder.ParseResult.valueOf("-7wN=i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant okhttp3.HttpUrl.Builder.ParseResult.-7wN=i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder4.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder0.encodedUsername("Q%23-y%3Fi");
      String string0 = httpUrl_Builder3.toString();
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("W`)H");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter(" hex=", "~RRa<ACu`o~;D=");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query(" hex=");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("~RRa<ACu`o~;D=");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("http:/home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/q9v*[a%3e%60%2f~a8jzo");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.port(56);
      // Undeclared exception!
      try { 
        httpUrl_Builder5.addQueryParameter((String) null, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit(':');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("&11");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("&11");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "endIndex < beginIndex: ", 0, 0, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.URL("https:foo.bar");
      HttpUrl.get(uRL0);
      StringBuilder stringBuilder0 = new StringBuilder("https:foo.bar");
      StringBuilder stringBuilder1 = stringBuilder0.append(' ');
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder1, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("", "N#<9N~c");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("N#<9N~c");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.decodeHexDigit('*');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("|gNp~IjFQ'Tp0S3D(l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: |gNp~IjFQ'Tp0S3D(l
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "-YN <u~|PC1";
      httpUrl_Builder0.encodedUsername("-YN <u~|PC1");
      String string1 = "0KFqlB)\\<";
      String string2 = "";
      httpUrl_Builder0.addPathSegment("");
      String string3 = "ZK4";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("ZK4");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("", "ZK4");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("ZK4");
      httpUrl_Builder3.addQueryParameter("size < ", "size < ");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-15), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      httpUrl_Builder0.addEncodedPathSegment("");
      String string1 = "";
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 1542, 643, "rzS)%(a{", true, false, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.resolve(uRI0, uRI0);
      MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI;
      httpUrl0.newBuilder("^`{|}");
      String string1 = HttpUrl.QUERY_COMPONENT_ENCODE_SET;
      HttpUrl.queryStringToNamesAndValues(")");
      httpUrl0.scheme();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, ".", 1010, 1010, ".", false, true, false, false);
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URL uRL1 = MockURL.URL(uRL0, ".");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.decodeHexDigit('C');
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e%2e");
      httpUrl1.pathSize();
      HttpUrl.get(uRI0);
      boolean boolean0 = HttpUrl.percentEncoded("Ex\"s2]<;B*;p`r", 10, 12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("Q%23-y%3Fi");
      httpUrl_Builder2.build();
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      httpUrl1.resolve("https://tmp/foo.bar");
      StringBuilder stringBuilder0 = new StringBuilder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      HttpUrl.pathSegmentsToString(stringBuilder0, list0);
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      httpUrl_Builder2.reencodeForUri();
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName(100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "-YN <u~|PC1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("-YN <u~|PC1", "-YN <u~|PC1");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("-YN <u~|PC1");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("-YN <u~|PC1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: -YN <u~|PC1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('d');
      assertEquals(13, int0);
      
      int int1 = HttpUrl.defaultPort(".%2e");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("[7n^%@=<h{y");
      HttpUrl.canonicalize("[7n^%@=<h{y", "#.4;!Z|z?.D:", true, true, true, true);
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(".");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "i~";
      String string1 = "No%20deadline";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((Buffer) null, "i~", 39, 1024, "No%20deadline", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("feff");
      assertEquals(2, list0.size());
      assertTrue(list0.contains("feff"));
      
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      boolean boolean0 = HttpUrl.percentEncoded(":?!,5)w'0j',glBc6q", 0, 37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.getChecked("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl0.encodedQuery();
      int int0 = httpUrl0.port();
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("iwOa/Zm6s");
      assertTrue(list0.contains("iwOa/Zm6s"));
      
      int int0 = HttpUrl.decodeHexDigit('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.getChecked("http:/foo.bar");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("y-6o|(~J7y^=;)c6w");
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URI uRI1 = MockURL.toURI(uRL0);
      URI uRI2 = MockURI.resolve(uRI1, uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI2);
      httpUrl_Builder1.parse(httpUrl0, "https:foo.bar");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment((String) null);
      httpUrl_Builder1.encodedQuery("y-6o|(~J7y^=;)c6w");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedPathSegment("file:");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedFragment((String) null);
      httpUrl_Builder4.addQueryParameter("https:foo.bar", "http:/foo.bar");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedUsername("n j$]");
      httpUrl_Builder5.addEncodedPathSegment("n j$]");
      httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.addEncodedQueryParameter("vttps", (String) null);
      httpUrl_Builder6.build();
      httpUrl0.redact();
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      httpUrl1.encodedPathSegments();
      httpUrl1.resolve("-");
      String string0 = HttpUrl.PATH_SEGMENT_ENCODE_SET;
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "N2?eW9DCX|";
      try { 
        HttpUrl.getChecked("N2?eW9DCX|");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for N2?eW9DCX|
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/fo^o.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/fo^o.bar";
      httpUrl_Builder1.addPathSegment("https://tmp/fo^o.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/fo^o.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/fo^o.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      httpUrl0.queryParameter((String) null);
      assertEquals("https://tmp/fo%5Eo.bar", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "OhKPm/~p.<zW?U{-e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("OhKPm/~p.<zW?U{-e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("c>/DQ");
      httpUrl_Builder2.addEncodedPathSegments("c>/DQ");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("encodedPassword == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder4.addEncodedPathSegments("+W(2 Mn//;+ip");
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder1.encodedQueryNamesAndValues = list0;
      assertEquals(1, httpUrl_Builder1.encodedQueryNamesAndValues.size());
      
      httpUrl_Builder2.password("https://tmp/foo.bar");
      httpUrl0.fragment();
      httpUrl0.querySize();
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      
      httpUrl1.queryParameterNames();
      assertEquals("Q#-y?i", httpUrl1.username());
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar", httpUrl1.toString());
      
      httpUrl1.queryParameterValues((String) null);
      assertEquals("Number too large: ", httpUrl1.password());
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder2.encodedQuery("+W(2 Mn//;+ip");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("Q%23-y%3Fi", "https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      httpUrl0.redact();
      List<String> list0 = httpUrl1.encodedPathSegments();
      HttpUrl.parse("https://tmp/foo.bar");
      StringBuilder stringBuilder0 = new StringBuilder("https://tmp/foo.bar");
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(586);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1173, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("?LOii`&3SRP");
      assertNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("`DKT[waIi{ldIk+hq", true);
      assertEquals("`DKT[waIi{ldIk hq", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("pxd", "pxd");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("size < 8: ", "http:/");
      httpUrl_Builder0.encodedPassword("%3F%23");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("delegate == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("size < 8: ");
      String string0 = "//1R.>&Mz*!|$KQz>Z";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPath("//1R.>&Mz*!|$KQz>Z");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("%3F%23");
      httpUrl_Builder5.fragment("%3F%23");
      httpUrl_Builder3.addEncodedPathSegment("size < 8: ");
      httpUrl_Builder5.encodedPassword = "size < 8: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("http:/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: http:/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = HttpUrl.FORM_ENCODE_SET;
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURL.getHttpExample();
      URI uRI1 = MockURL.toURI(uRL0);
      MockURI.resolve(uRI0, uRI1);
      MockURI.normalize(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      httpUrl0.encodedPassword();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, "okio.buffer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = HttpUrl.percentDecode("UNSUPPORTED_SCHEME", true);
      assertEquals("UNSUPPORTED_SCHEME", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https://tmp/foo.bar";
      httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl0 = HttpUrl.parse("https://tmp/foo.bar");
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("un!(uZiX,@?*9S", "un!(uZiX,@?*9S");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("95Hg'~i&451]");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("95Hg'~i&451]", "4re");
      httpUrl_Builder2.encodedPassword = "95Hg'~i&451]";
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setPathSegment(0, "");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPath("hex == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: hex == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = HttpUrl.decodeHexDigit('q');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURL.getHttpExample();
      URI uRI1 = MockURL.toURI(uRL0);
      MockURI.resolve(uRI0, uRI1);
      MockURI.normalize(uRI1);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      
      HttpUrl.defaultPort("[");
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("x");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("x");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("){");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("/XgIh)T_Y<FFrkRV", "%2e.");
      httpUrl_Builder5.host("x");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "){", 2688, 97, false);
      httpUrl0.scheme();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI1 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      httpUrl_Builder1.setEncodedPathSegment(0, "+");
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      httpUrl0.encodedPassword();
      httpUrl0.querySize();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-709), 4134, (String) null, true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "95a";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "https:]a%bs_c";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("https:]a%bs_c", "95a");
      httpUrl_Builder1.reencodeForUri();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        HttpUrl.getChecked("https:]a%bs_c");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:]a%bs_c
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.decodeHexDigit('d');
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.decodeHexDigit('h');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("Q%23-y%3Fi");
      assertNotNull(httpUrl1);
      
      HttpUrl httpUrl2 = HttpUrl.getChecked("https://tmp/foo.bar");
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl3 = httpUrl1.resolve("https://tmp/foo.bar");
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("Q%23-y%3Fi", "https://tmp/foo.bar");
      HttpUrl httpUrl4 = httpUrl_Builder1.build();
      httpUrl2.redact();
      List<String> list0 = httpUrl4.encodedPathSegments();
      assertEquals(6, list0.size());
      assertTrue(list0.contains("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D"));
      
      httpUrl4.queryParameter("w5CA^,-?i>w");
      assertEquals("9:C0", httpUrl4.password());
      assertEquals("https://:9%3AC0@tmp/foo.bar/https://tmp/foo.bar/%20%22%23%3C%3E%5C%5E%60%7B%7C%7D?Q%23-y%3Fi=https://tmp/foo.bar#https://tmp/foo.bar", httpUrl4.toString());
      assertEquals("9%3AC0", httpUrl4.encodedPassword());
      
      httpUrl2.hashCode();
      assertEquals(443, httpUrl2.port());
      assertTrue(httpUrl2.equals((Object)httpUrl3));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("i2qwt1Jz");
      httpUrl_Builder0.addEncodedPathSegments("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      int int0 = HttpUrl.defaultPort("AH2");
      assertEquals((-1), int0);
      
      httpUrl0.queryParameterValues("");
      HttpUrl httpUrl1 = httpUrl0.resolve("AH2");
      assertEquals(80, httpUrl1.port());
      assertNotNull(httpUrl1);
      assertEquals("http://foo.bar/AH2", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = HttpUrl.decodeHexDigit('<');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("+");
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aFTPURI;
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://foo.bar/", uRI1.toString());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      httpUrl0.url();
      String string0 = httpUrl0.password();
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("95a");
      String string0 = HttpUrl.FORM_ENCODE_SET;
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURL.getHttpExample();
      URI uRI1 = MockURL.toURI(uRL0);
      URI uRI2 = MockURI.resolve(uRI0, uRI1);
      URI uRI3 = MockURI.normalize(uRI2);
      HttpUrl httpUrl0 = HttpUrl.get(uRI3);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter(">jVtlR(`:K=", "Ym?2D]J!Xn&@y-#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("Ym?2D]J!Xn&@y-#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword(">jVtlR(`:K=");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("Ym?2D]J!Xn&@y-#");
      httpUrl_Builder5.fragment("q%2523-y%253fi");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedQuery("0");
      httpUrl_Builder6.addPathSegments("0");
      try { 
        HttpUrl.getChecked("INVALID_HOST");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for INVALID_HOST
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = HttpUrl.decodeHexDigit('z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("c{lAQ3We.C1");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for c{lAQ3We.C1
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      String string0 = "Q%23-y%3Fi";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.password("+W(2 Mn//;+ip");
      String string1 = "fffe";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegment("fffe");
      httpUrl_Builder4.fragment("fffe");
      httpUrl_Builder0.addEncodedPathSegments("+W(2 Mn//;+ip");
      httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("\u2026", "\u2026");
      httpUrl_Builder1.encodedUsername("\u2026");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("%60'xykj!4n");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".W;w m9be: _Jbb$l", "@6L>8b[zFJzu|Or", 0, "$VALUES", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 93;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "95a";
      try { 
        HttpUrl.getChecked("95a");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 95a
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      HttpUrl.parse("iV}{wy");
      httpUrl0.isHttps();
      httpUrl0.querySize();
      HttpUrl.getChecked("https://tmp/foo.bar");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl1.encodedFragment();
      assertEquals("https://tmp/foo.bar/https://tmp/foo.bar#https://tmp/foo.bar", httpUrl1.toString());
      
      boolean boolean0 = httpUrl0.isHttps();
      assertTrue(boolean0);
      
      httpUrl0.newBuilder();
      assertEquals("tmp", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "<A.Y26 fniP[;_?");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("nonTiTV@[we\\");
      assertEquals("http://www.somefakebutwellformedurl.org/%3CA.Y26%20fniP[;_?", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/foo.bar";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("https://tmp/foo.bar", "https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("YQJ|/1ri~m.0g)v");
      httpUrl_Builder2.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      httpUrl1.encodedQuery();
      HttpUrl.canonicalize("https://tmp/foo.bar", "YQJ|/1ri~m.0g)v", true, true, false, false);
      httpUrl_Builder3.query("https://tmp/foo.bar");
      httpUrl_Builder2.addPathSegment("https://tmp/foo.bar");
      httpUrl0.encodedPathSegments();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("%3e");
      assertFalse(list0.contains("https://tmp/foo.bar"));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      String string0 = "+W(2 Mn//;+ip";
      HttpUrl.getChecked("https://tmp/foo.bar");
      EvoSuiteFile evoSuiteFile0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HttpUrl.getChecked("https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("https://tmp/foo.bar");
      boolean boolean0 = HttpUrl.percentEncoded("https://tmp/foo.bar", 3, 68);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("kn");
      try { 
        HttpUrl.getChecked("kn");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for kn
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("95a");
      assertEquals(2, list0.size());
      assertTrue(list0.contains("95a"));
      
      String string0 = HttpUrl.percentDecode("[]", false);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.decodeHexDigit('0');
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("YLCD`IJDcT*{;[4DemI", (-16777216), 1147, "%08$2VQ4)nup>7", false, true, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder4.encodedUsername = "foo.bar";
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder4.addEncodedPathSegments("+W(2 Mn//;+ip");
      httpUrl_Builder2.password("https://tmp/foo.bar");
      httpUrl1.query();
      httpUrl1.redact();
      httpUrl0.port();
      String string0 = httpUrl1.password();
      assertEquals("Number too large: ", string0);
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar#https://tmp/foo.bar", httpUrl1.toString());
      assertEquals("Number%20too%20large%3A%20", httpUrl1.encodedPassword());
      assertEquals("Q#-y?i", httpUrl1.username());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/fo^o.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/fo^o.bar";
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/fo^o.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/fo^o.bar");
      String string0 = httpUrl_Builder1.toString();
      assertEquals("https://tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar", string0);
      
      httpUrl_Builder0.addEncodedPathSegments("r0q {K 0L");
      HttpUrl httpUrl1 = HttpUrl.parse("https://tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar");
      assertEquals(443, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.defaultPort("YX=dn|");
      String string0 = "";
      int int0 = 1558;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", 1558, 40, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.decodeHexDigit('m');
      URL uRL0 = MockURL.getFtpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("irFk=K[C}wJ70", "irFk=K[C}wJ70");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("irFk=K[C}wJ70");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("irFk=K[C}wJ70", "irFk=K[C}wJ70");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("irFk=K[C}wJ70");
      httpUrl_Builder5.parse((HttpUrl) null, "[");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      HttpUrl.get(uRI1);
      String string0 = "taSL:w^'/1.qiVX";
      StringBuilder stringBuilder0 = new StringBuilder("taSL:w^'/1.qiVX");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1983660689), '|');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockURI.create("http:/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.parse("http:/foo.bar");
      httpUrl0.encodedPathSegments();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-869));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.queryStringToNamesAndValues("ID1ID2");
      HttpUrl.decodeHexDigit('=');
      String string0 = "okhttp3.RequestBody";
      try { 
        HttpUrl.getChecked("okhttp3.RequestBody");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okhttp3.RequestBody
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.resolve(uRI0, uRI0);
      MockURI.normalize(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedPassword();
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotNull(httpUrl1);
      
      String string0 = httpUrl0.redact();
      assertEquals("http://foo.bar/...", string0);
      
      String string1 = httpUrl0.encodedFragment();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertNull(string1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("");
      httpUrl_Builder1.fragment("ye{GK");
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("Ga-fH[S{~$08R1k>");
      String string0 = "n}";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Ga-fH[S{~$08R1k>", "n}", 10, "okio.SegmentedByteString", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("");
      String string0 = "ye{GK";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("ye{GK");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("ye{GK");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("rox");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-3925), "ye{GK");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.parse("!xEWk_;J");
      String string0 = HttpUrl.canonicalize("!xEWk_;J", 5, 5, "size < ", true, true, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("95a");
      assertTrue(list0.contains("95a"));
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        HttpUrl.getChecked("htts:]a%bs_c");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for htts:]a%bs_c
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("+W(2DMn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder2.removeAllQueryParameters("https://tmp/foo.bar");
      httpUrl_Builder1.scheme("http");
      HttpUrl httpUrl1 = httpUrl_Builder2.build();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("sink == null");
      assertFalse(list0.contains("sink == null"));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("sink == null");
      assertEquals("http://tmp:443/sink%20==%20null", httpUrl2.toString());
      assertEquals("http://tmp:443/foo.bar?%2BW(2DMn//;%2Bip#https://tmp/foo.bar", httpUrl1.toString());
      assertEquals(1, httpUrl2.pathSize());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(125, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("0%7d");
      HttpUrl.queryStringToNamesAndValues("0%7d");
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(325L);
      HttpUrl.canonicalize(buffer0, "%t>Vu/1~@Ay4KH!+D", 106, 106, "%t>Vu/1~@Ay4KH!+D", true, false, true, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.parse("~qlm5Zzc");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "r}ig";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("r}ig");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("cW");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("Er'%n6Y9)BpzX+C($");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: Er'%n6Y9)BpzX+C($
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "hU82+)/(v$RDJ";
      try { 
        HttpUrl.getChecked("hU82+)/(v$RDJ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for hU82+)/(v$RDJ
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("[https:foo.bar");
      HttpUrl.percentEncoded("%2e", 8, (-2539));
      String string0 = HttpUrl.canonicalize("::", "::", false, false, false, false);
      assertEquals("%3A%3A", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("fexf");
      HttpUrl.defaultPort("fexf");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("dOsls=eVA1f59J");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 2147483645
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("x");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("x");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("){");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("/XgIh)T_Y<FFrkRV", "%2e.");
      httpUrl_Builder5.host("x");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      MockURI.resolve(uRI0, uRI0);
      httpUrl0.equals(httpUrl_Builder4);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("!tv7O0Ld,K.8;", (-556), (-556), "vOE[pc-", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("username == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("+qY5QQ)xd%^");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("username == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("c6X`jzVmisRDh?[b", "source == this");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment("K.Q");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedPathSegment("K.Q");
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.isHttps();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.defaultPort("<z.[[GV8%&Z+?|_:Om");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      String string0 = HttpUrl.QUERY_ENCODE_SET;
      httpUrl0.encodedQuery();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1), " \"'<>#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.queryStringToNamesAndValues("R]iE.LL+,'");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder4.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      HttpUrl.Builder httpUrl_Builder5 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder3.build();
      String string0 = httpUrl1.redact();
      assertEquals("https://tmp/...", string0);
      
      httpUrl0.encodedPathSegments();
      httpUrl1.queryParameter("");
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar#https://tmp/foo.bar", httpUrl1.toString());
      assertEquals("Number%20too%20large%3A%20", httpUrl1.encodedPassword());
      assertEquals(5, httpUrl1.pathSize());
      assertEquals("Q#-y?i", httpUrl1.username());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl httpUrl2 = httpUrl_Builder2.build();
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl3 = httpUrl1.resolve("https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.password("9:C0");
      httpUrl3.encodedUsername();
      httpUrl3.queryParameter("https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl2.newBuilder("okio.Buffer");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      httpUrl_Builder5.effectivePort();
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("https://tmp/foo.bar");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: https://tmp/foo.bar
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(661);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder1, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl.percentDecode("8N1[{=pqF]Fw)V]6~a/", 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username(".");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("q9v*[a%3e%60%2f~a8jzo");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for q9v*[a%3e%60%2f~a8jzo
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.build();
      HttpUrl httpUrl1 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl1.redact();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      httpUrl0.resolve("https://tmp/foo.bar");
      httpUrl_Builder1.setEncodedQueryParameter("https:vqwb(i:d=%7cp*hcn#95a", "https:vqwb(i:d=%7cp*hcn#95a");
      String string0 = "9:C0";
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder1.build();
      httpUrl0.querySize();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath(":LUH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: :LUH
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("apfstoy_tp%7ctrr");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for apfstoy_tp%7ctrr
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/fo^o.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/fo^o.bar";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("https://tmp/fo^o.bar");
      HttpUrl.parse("Q%23-y%3Fi");
      httpUrl_Builder2.parse((HttpUrl) null, "https://tmp/fo^o.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https://tmp/fo^o.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("$v");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("https://tmp/fo^o.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl0 = httpUrl_Builder0.build();
      httpUrl_Builder4.parse(httpUrl0, "ridof sc_bK#X,]+|6.");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("unexpected encodedPath: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("unexpected encodedPath: ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment(" @yY4-E3ItN>U|L");
      httpUrl_Builder4.reencodeForUri();
      httpUrl_Builder2.removePathSegment(0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HttpUrl.decodeHexDigit('d');
      HttpUrl.decodeHexDigit('d');
      Buffer buffer0 = new Buffer();
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "", 13, 37, (String) null, false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo.?ar");
      httpUrl_Builder0.encodedQuery("aJ*_>&8Gi5");
      httpUrl_Builder0.parse(httpUrl0, "%1e%2e");
      assertEquals("http://foo./?ar", httpUrl0.toString());
      assertEquals(1, httpUrl0.querySize());
      
      int int0 = httpUrl0.port;
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https://tmp/foo.bar";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      String string1 = "Q%23-y%3Fi";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl.getChecked("https://tmp/foo.bar");
      Buffer buffer0 = new Buffer();
      int int0 = (-513);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "+W(2 Mn//;+ip", (-513), 6, "+W(2 Mn//;+ip", false, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "http:/foo.bar";
      URI uRI0 = MockURI.create("http:/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      int int0 = (-869);
      httpUrl0.encodedPathSegments();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-869));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HttpUrl.decodeHexDigit(',');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HttpUrl.decodeHexDigit('g');
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("", (-1), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.queryStringToNamesAndValues("R]iE.LL+,'");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(" \"#<>^`{|}");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter(" \"#<>^`{|}", "E,NI:r$j");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(4);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("E,NI:r$j");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl0.url();
      httpUrl0.redact();
      httpUrl_Builder0.setEncodedQueryParameter("https://tmp/foo.bar", "JdLGD,B s");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("foo.bar");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "x";
      HttpUrl.queryStringToNamesAndValues("x");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("x");
      httpUrl_Builder2.removeAllEncodedQueryParameters("x");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HttpUrl.decodeHexDigit('S');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Q%23-y%3Fi");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar?https://tmp/foo.bar", httpUrl1.toString());
      assertEquals("Number too large: ", httpUrl1.password());
      
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder4.addEncodedPathSegments("+W(2 Mn//;+ip");
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder1.encodedQueryNamesAndValues = list0;
      assertEquals(1, httpUrl_Builder1.encodedQueryNamesAndValues.size());
      
      httpUrl_Builder2.password("https://tmp/foo.bar");
      httpUrl0.fragment();
      httpUrl0.querySize();
      HttpUrl.defaultPort("+");
      httpUrl0.host();
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.URL(uRL0, "Unbalanced%20enter");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl0.newBuilder("exit");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[:9%20o%3FAS0row%5Cz8jZ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:9%20o%3FAS0row%5Cz8jZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:9%20o%3FAS0row%5Cz8jZ
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https://tmp/fo^o.bar";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("+W(2DMn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/fo^o.bar");
      String string1 = "y-6o|(~J7y^=;)c6w";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("y-6o|(~J7y^=;)c6w");
      httpUrl_Builder2.parse(httpUrl0, "https:foo.bar");
      httpUrl_Builder2.fragment("y-6o|(~J7y^=;)c6w");
      httpUrl_Builder1.addPathSegment("https://tmp/fo^o.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("unexpected encodedPath: ");
      httpUrl_Builder3.addQueryParameter("9:C0", "q<0&4)og1dnV%!");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("9:C0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 9:C0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("Q%23-y%3Fi");
      httpUrl_Builder2.build();
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl2 = httpUrl1.resolve("https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder4.removePathSegment(0);
      HttpUrl httpUrl3 = httpUrl_Builder1.build();
      assertEquals("https://:9%3AC0@tmp/https://tmp/foo.bar/%20%22%23%3C%3E%5C%5E%60%7B%7C%7D#https://tmp/foo.bar", httpUrl3.toString());
      assertEquals("9:C0", httpUrl3.password());
      
      URI uRI0 = httpUrl1.uri();
      assertEquals("https://tmp/Q%23-y%3Fi", uRI0.toString());
      
      httpUrl2.fragment();
      assertFalse(httpUrl2.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("%2e");
      HttpUrl.canonicalize("%2e", "encodedPathSegments == null", true, true, true, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("okhttp3.ResponseBody$1");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("%20%22%23%3C%3E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: %20%22%23%3C%3E
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.queryStringToNamesAndValues("n}");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("n}");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("n}");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("n}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: n}
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("buffer(");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("c;^$GRYJXoIUE");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("?c6+^+M%O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ?c6+^+M%O
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.queryStringToNamesAndValues("GkJ<|-AP");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("GkJ<|-AP");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("9_yc9!UZEODAa");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("Cz");
      httpUrl_Builder0.addQueryParameter("9_yc9!UZEODAa", "Cz");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("_");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder5.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\\^`{|}";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("^`{|}");
      int int0 = (-32);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -32
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HttpUrl.decodeHexDigit('!');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "htsv";
      HttpUrl.defaultPort("htsv");
      int int0 = 17;
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("htsv", (-1), 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      httpUrl_Builder2.build();
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl2 = httpUrl1.resolve("https://tmp/foo.bar");
      assertEquals(5, httpUrl1.pathSize());
      assertEquals(1, httpUrl2.pathSize());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder4.removePathSegment(0);
      HttpUrl httpUrl3 = httpUrl_Builder1.build();
      assertEquals("https://:9%3AC0@tmp/https://tmp/foo.bar/%20%22%23%3C%3E%5C%5E%60%7B%7C%7D#https://tmp/foo.bar", httpUrl3.toString());
      assertEquals("9:C0", httpUrl3.password());
      
      HttpUrl.percentDecode("%s: actual 0x%08x != expected 0x%08x", 0, 6, false);
      httpUrl0.querySize();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      
      httpUrl0.username();
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
      assertTrue(httpUrl0.equals((Object)httpUrl2));
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      httpUrl_Builder2.encodedFragment((String) null);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertEquals("https://:Number%20too%20large%3A%20@tmp/foo.bar", httpUrl1.toString());
      assertEquals("Number too large: ", httpUrl1.password());
      
      httpUrl0.pathSegments();
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("", (String) null);
      String string0 = "[";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: [
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("vttps:]a%rs_+");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-32);
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, (-32), (-32), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      httpUrl_Builder2.setQueryParameter("https://tmp/foo.bar", "e(cp:%%7Dp_");
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      httpUrl1.newBuilder();
      httpUrl1.encodedUsername();
      assertEquals(443, httpUrl1.port());
      assertEquals("https://Q%23-y%3Fi:+W(2%20Mn%2F%2F%3B+ip@tmp/foo.bar/https://tmp/foo.bar?https://tmp/foo.bar=e(cp:%25%257Dp_#https://tmp/foo.bar", httpUrl1.toString());
      assertEquals("+W(2 Mn//;+ip", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Q%23-y%3Fi");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder4.addEncodedPathSegments("+W(2 Mn//;+ip");
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder1.encodedQueryNamesAndValues = list0;
      assertEquals(1, httpUrl_Builder1.encodedQueryNamesAndValues.size());
      
      httpUrl_Builder2.password("https://tmp/foo.bar");
      String string0 = httpUrl0.fragment();
      assertNull(string0);
      
      httpUrl0.querySize();
      httpUrl1.queryParameterNames();
      assertEquals(443, httpUrl1.port());
      assertEquals("https://Q%23-y%3Fi:Number%20too%20large%3A%20@tmp/foo.bar/https://tmp/foo.bar?https://tmp/foo.bar", httpUrl1.toString());
      assertEquals("Q#-y?i", httpUrl1.username());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      try { 
        HttpUrl.getChecked("Z#Ay\\");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z#Ay\\
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("z8SM%oizp5%E");
      try { 
        HttpUrl.getChecked("z8SM%oizp5%E");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for z8SM%oizp5%E
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/foo.bar");
      assertEquals(1, httpUrl0.pathSize());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setQueryParameter("+W(2 Mn//;+ip", "https://tmp/foo.bar");
      HttpUrl.defaultPort("Q%23-y%3Fi");
      String string0 = httpUrl_Builder3.toString();
      assertEquals("https://tmp/foo.bar?https://tmp/foo.bar&%2BW(2%20Mn//;%2Bip=https://tmp/foo.bar#https://tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 990;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("::", 990, 990, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = HttpUrl.decodeHexDigit('~');
      int int1 = HttpUrl.defaultPort(";n%25");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1946L);
      String string0 = "%2e.";
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "%2e.", 1, 3476, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("$c/");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.encodedPath();
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 115, 115, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/fo^o.bar");
      httpUrl_Builder1.encodedFragment = "https://tmp/fo^o.bar";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("https://tmp/fo^o.bar");
      HttpUrl.parse("Q%23-y%3Fi");
      httpUrl_Builder2.parse((HttpUrl) null, "https://tmp/fo^o.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https://tmp/fo^o.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("$v");
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/fo^o.bar");
      String string0 = httpUrl_Builder2.toString();
      assertEquals("https://:$v@tmp/fo%5Eo.bar/https://tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar", string0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://:$v@tmp/fo%5Eo.bar/https://tmp/fo%5Eo.bar?https://tmp/fo^o.bar#https://tmp/fo^o.bar");
      assertEquals("$v", httpUrl0.password());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("5\"_h");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("5\"_h", "okio.Util");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("okio.Util");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "RIe#wXngkVK1:fN?";
      String string1 = "s0U}hPXyHMmVJuF";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("RIe#wXngkVK1:fN?");
      String string2 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("RIe#wXngkVK1:fN?", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HttpUrl.decodeHexDigit('a');
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertEquals(5, httpUrl_Builder_ParseResultArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", "\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(2897, "\r");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2897, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "95a";
      HttpUrl.queryStringToNamesAndValues("95a");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      HttpUrl.decodeHexDigit('!');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "?'/;N%";
      httpUrl_Builder0.encodedFragment("?'/;N%");
      httpUrl_Builder0.setQueryParameter("?'/;N%", "=;@wqm");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("?'/;N%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ?'/;N%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "g#y/?FM20cf>(";
      int int0 = 1158;
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("g#y/?FM20cf>(", (-2064), 1158);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("kn");
      HttpUrl httpUrl0 = HttpUrl.parse("kn");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = null;
      String string1 = "RIe#wXngkVK1:fN?";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("x");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("x");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("){");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("/XgIh)T_Y<FFrkRV", "%2e.");
      httpUrl_Builder5.host("x");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://foo.bar/", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      String string0 = httpUrl0.redact();
      assertEquals("https://tmp/...", string0);
      
      httpUrl_Builder0.addPathSegments("foo.bar");
      httpUrl0.encodedPath();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      
      int int0 = HttpUrl.defaultPort("i");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        HttpUrl.getChecked("joeeLzc-q@d");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for joeeLzc-q@d
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockURI.parseServerAuthority(uRI0);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "f}2@*JU!F+p6U:}2U1", 50, 128, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "O[{w28e;2V";
      HttpUrl.queryStringToNamesAndValues("O[{w28e;2V");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("(l`2C");
      httpUrl_Builder1.port(5458);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder2.encodedQuery("+W(2DMn//;+ip");
      boolean boolean0 = httpUrl0.isHttps();
      assertTrue(boolean0);
      
      httpUrl_Builder2.password("9:C0");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("Q%23-y%3Fi", "https://tmp/foo.bar");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      String string0 = httpUrl0.redact();
      assertEquals("https://tmp/...", string0);
      
      List<String> list0 = httpUrl1.encodedPathSegments();
      assertEquals(2, list0.size());
      
      httpUrl1.queryParameter("w5CA^,-?i>w");
      assertEquals("https://:9%3AC0@tmp/foo.bar/https:%2F%2Ftmp%2Ffoo.bar?+W(2DMn//;+ip&Q%23-y%3Fi=https://tmp/foo.bar#https://tmp/foo.bar", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
      assertEquals("9:C0", httpUrl1.password());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("BmgXS;,z-");
      assertTrue(list0.contains("BmgXS;,z-"));
      assertEquals(2, list0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R)Je(cp:%}p_h>");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      HttpUrl httpUrl1 = httpUrl0.resolve("R)Je(cp:%}p_h>");
      assertNotNull(httpUrl1);
      
      HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      httpUrl_Builder1.encodedQuery("<wEXuJttgO");
      httpUrl_Builder1.addEncodedPathSegment("https://tmp/foo.bar");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("R)Je(cp:%}p_h>", "https://tmp/foo.bar");
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      String string0 = httpUrl1.redact();
      assertEquals("https://tmp/...", string0);
      assertEquals("https://tmp/R)Je(cp:%%7Dp_h%3E", httpUrl1.toString());
      
      httpUrl2.queryParameterValues("https://tmp/foo.bar");
      assertEquals("https://tmp/foo.bar/https:%2F%2Ftmp%2Ffoo.bar?%3CwEXuJttgO&R)Je(cp:%}p_h%3E=https://tmp/foo.bar#https://tmp/foo.bar", httpUrl2.toString());
      
      HttpUrl httpUrl3 = HttpUrl.getChecked("https:/foo.bar");
      assertEquals("https://foo.bar/", httpUrl3.toString());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "https://tmp/foo.bar";
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      httpUrl0.resolve("Expected leading [0-9a-fA-F] character but was %#x");
      String string1 = "9:C0";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(68);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("N%23%3C9N~c");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("http::");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(1773);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(65, "charset == null");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("NY.ZY2K", "NY.ZY2K");
      String string0 = "|3pa .f";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("|3pa .f");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("|3pa .f");
      httpUrl_Builder2.addEncodedPathSegments("|3pa .f");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('d');
      assertEquals(13, int0);
      
      String string0 = HttpUrl.canonicalize("5d/*|", "|hU*zxZX[-b%m", true, false, false, true);
      assertEquals("5d/%2A%7C", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("C/$&D[AeP9j#5zNjB{j");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("F@i*LqsZ0dchU'Hb", "C/$&D[AeP9j#5zNjB{j");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("C/$&D[AeP9j#5zNjB{j");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = ">d  H5kF";
      String string1 = "okio.HashingSource";
      httpUrl_Builder3.query("okio.HashingSource");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedFragment(">d  H5kF");
      String string2 = "{/\"'5";
      httpUrl_Builder5.encodedUsername("{/\"'5");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 0, 0, (String) null, true, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<String> list0 = new LinkedList<String>();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"}bi)4Y_uq$RlCv");
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.queryStringToNamesAndValues("UTF-16BE");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("UTF-16BE", 127, 57, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      HttpUrl.decodeHexDigit('!');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("%Ok/R,u @44");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("blyF5uW|fI:2iQq^& U", "deadline reached");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password(">8[<vb");
      httpUrl_Builder5.addEncodedPathSegments("q54z");
      try { 
        HttpUrl.getChecked(">8[<vb");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for >8[<vb
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(224);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("", "http:");
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        HttpUrl.getChecked("vA");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for vA
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      MockURI.parseServerAuthority(uRI0);
      String string0 = "uL5Z:\"]a%BS_C";
      try { 
        HttpUrl.getChecked("uL5Z:\"]a%BS_C");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for uL5Z:\"]a%BS_C
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      HttpUrl.canonicalize("2 ,0ZT\"[h|MLYFI`", "%2B", false, true, false, false);
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("?'/;N%");
      httpUrl1.encodedUsername();
      int int0 = 1583;
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("2 ,0ZT\"[h|MLYFI`", 1583, 1583, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "";
      HttpUrl.queryStringToNamesAndValues("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::6:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::6:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "mX";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::9 o?AS0rowz8jZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::9 o?AS0rowz8jZ
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("O[{w28e;2V");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "username%20==%20null", (-2097), (-2097), "username%20==%20null", true, true, false, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("\"}bi)4Y_uq$RlCv");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "";
      HttpUrl.percentDecode("", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("]w/+jqC)NUn");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("FHCRC");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("");
      httpUrl_Builder5.setEncodedPathSegment(0, "]w/+jqC)NUn");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:]a%bs_c");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:]a%bs_c
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockURI.create("http:/foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("http:/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo.bar");
      String string0 = "%2e%2e";
      httpUrl_Builder1.parse(httpUrl0, "%2e%2e");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http:/foo.bar");
      httpUrl_Builder0.fragment("%2e%2e");
      httpUrl0.resolve("%2e%2e");
      try { 
        HttpUrl.getChecked("l3");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for l3
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("Ca.not buffer entire body for content length: ", "Ca.not buffer entire body for content length: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("https:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("Ca.not buffer entire body for content length: ");
      String string0 = "p`WkYJ@de2Z&";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("p`WkYJ@de2Z&");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("https:");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("Ca.not buffer entire body for content length: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Ca.not buffer entire body for content length: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder0.setEncodedQueryParameter("+W(2 Mn//;+ip", "http://some/fake/but/wellformed/url");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl0.redact();
      httpUrl_Builder0.addPathSegments("foo.bar");
      httpUrl0.query();
      assertEquals("https://tmp/foo.bar", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("hPtp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: hPtp
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.scheme("http");
      String string1 = "%2e%2e";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment((-1911478114), "%2e%2e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("F,waiiIqX\"LN.");
      assertEquals("http://http/#https", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/ID1ID2";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("/ID1ID2");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("/ID1ID2");
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder1.parse(httpUrl0, "\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath(",");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ,
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.queryStringToNamesAndValues("R]iE.LL+,'");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("@+`dz%04yvq");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("@+`dz%04yvq", "3JPhf");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("https");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "http:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("f/08%vq%T2-(");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("f/08%vq%T2-(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: f/08%vq%T2-(
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      HttpUrl.decodeHexDigit('j');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("data", "data");
      httpUrl_Builder1.encodedUsername("data");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HttpUrl.decodeHexDigit('\u0084');
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, (String) null, 1063, (-1), (String) null, false, false, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 68;
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(68, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder1.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      httpUrl_Builder2.addEncodedPathSegments("https://tmp/foo.bar");
      HttpUrl.parse("https://tmp/foo.bar");
      httpUrl_Builder1.build();
      String string0 = "https://tmp/foo.bar";
      HttpUrl httpUrl1 = HttpUrl.getChecked("https://tmp/foo.bar");
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl1.queryParameter("https:");
      httpUrl0.newBuilder("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("size < 8: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: size < 8: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("https://tmp/foo.bar");
      String string0 = httpUrl_Builder4.toString();
      assertEquals("https://tmp/foo.bar#https://tmp/foo.bar", string0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("okhttp3.ResponseBody$1", " \"#<>^`{|}");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedUsername("l$q");
      String string1 = httpUrl_Builder6.toString();
      assertEquals("https://l$q@tmp/foo.bar?okhttp3.ResponseBody$1=%20%22%23%3C%3E^`{|}#https://tmp/foo.bar", string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "okio.RealBufferedSink";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("okio.RealBufferedSink");
      String string1 = "N.Q-@EHZOF@nR";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("okio.RealBufferedSink", "N.Q-@EHZOF@nR");
      String string2 = null;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("okio.RealBufferedSink", (String) null);
      String string3 = "%2e.";
      httpUrl_Builder3.setQueryParameter("N.Q-@EHZOF@nR", "%2e.");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("N.Q-@EHZOF@nR");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https://tmp/foo.bar");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https://tmp/foo.bar");
      httpUrl_Builder0.encodedFragment = "https://tmp/foo.bar";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder3.build();
      httpUrl_Builder2.build();
      HttpUrl httpUrl1 = HttpUrl.getChecked("https://tmp/foo.bar");
      assertEquals(1, httpUrl1.pathSize());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder4.encodedUsername("Ut<G~");
      String string0 = httpUrl_Builder2.toString();
      assertEquals("https://Ut%3CG~@tmp/foo.bar/https://tmp/foo.bar#https://tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('j');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("\u2026");
      String string0 = HttpUrl.canonicalize("\u2026", "\u2026", true, true, true, false);
      assertEquals("%E2%80%A6", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      HttpUrl httpUrl0 = HttpUrl.parse("https://tmp/foo.bar");
      URL uRL0 = httpUrl0.url();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.URI("Q%23-y%3Fi");
      URI uRI2 = MockURI.resolve(uRI1, uRI1);
      MockURI.normalize(uRI2);
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      httpUrl0.encodedPassword();
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("+");
      httpUrl_Builder0.addPathSegments(">");
      HttpUrl httpUrl0 = HttpUrl.parse("%20%22%23%3C%3E%5C%5E%60%7B%7C%7D");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("[7n^%@=<h{y");
      HttpUrl.canonicalize("[7n^%@=<h{y", "#.4;!Z|z?.D:", true, true, true, true);
      HttpUrl.queryStringToNamesAndValues("[7n^%25@=<h{y");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("https");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.scheme("https");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("[7n^%25@=<h{y", "#.4;!Z|z?.D:");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("#.4;!Z|z?.D:");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals(uRI0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder1.removePathSegment(0);
      HttpUrl httpUrl1 = HttpUrl.parse("https");
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      HttpUrl.decodeHexDigit('\\');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("[]");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("://");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("://");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("]y+o~`8ahz]}3C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ]y+o~`8ahz]}3C
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HttpUrl.decodeHexDigit('J');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("UTF-16BE");
      String string0 = "%2e.";
      httpUrl_Builder1.addEncodedPathSegments("%2e.");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:%2F%2Ftmp%2Ffoo.bar");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:%2F%2Ftmp%2Ffoo.bar
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("performance", (-1073741822), (-1073741822), "performance", true, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.defaultPort("+jqc)nun");
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      HttpUrl.canonicalize(buffer0, "http:/", 38, 38, "+jqc)nun", false, false, false, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.decodeHexDigit('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("https://tmp/foo.bar");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q%23-y%3Fi");
      httpUrl_Builder1.encodedFragment = "+W(2 Mn//;+ip";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Q%23-y%3Fi");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https://tmp/foo.bar");
      httpUrl_Builder2.parse(httpUrl0, "https://tmp/foo.bar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+W(2 Mn//;+ip");
      httpUrl_Builder2.password("Number too large: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.addEncodedPathSegments("https://tmp/foo.bar");
      httpUrl_Builder2.encodedUsername = "Q%23-y%3Fi";
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllQueryParameters("Unexpected hex string: ");
      httpUrl_Builder4.addEncodedPathSegments("+W(2 Mn//;+ip");
      List<String> list0 = httpUrl0.encodedPathSegments();
      httpUrl_Builder1.encodedQueryNamesAndValues = list0;
      httpUrl_Builder2.password("https://tmp/foo.bar");
      httpUrl0.fragment();
      httpUrl1.querySize();
      httpUrl1.queryParameterNames();
      URL uRL0 = MockURL.getFtpExample();
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertNull(httpUrl2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("x");
      assertTrue(list0.contains("x"));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("x");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("){");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("/XgIh)T_Y<FFrkRV", "%2e.");
      httpUrl_Builder4.host("x");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.equals(httpUrl_Builder3);
      String string0 = httpUrl0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "^j#K'GDdF93'+Q\\";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("^j#K'GDdF93'+Q");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("^j#K'GDdF93'+Q");
      String string1 = "\n";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("\n", "@/?#");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(1835, "7N6K6c7=UW^i_S:s%i");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1835, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
