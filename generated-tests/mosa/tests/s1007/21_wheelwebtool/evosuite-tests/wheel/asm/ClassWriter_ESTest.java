/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:53:08 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@776f728e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.addUninitializedType("", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-647));
      int int0 = classWriter0.newMethod("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-854));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(2);
      int int0 = classWriter0.newField("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-440));
      Item item0 = classWriter0.newLong((-440));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Double double0 = new Double(0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "hs>mM", "hs>mM", "hs>mM", double0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-647));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-647), (-647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      classWriter0.visit(0, 0, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-451));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      int int0 = classWriter0.newMethod("SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(2, "", ")", "", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-492));
      classWriter0.toByteArray();
      Type type0 = Type.BOOLEAN_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 7316);
      classWriter0.toByteArray();
      classWriter0.newConst("wheel.asm.ClassWriter");
      System.setCurrentTimeMillis(4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConstItem(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("", false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.visit(0, 0, "", "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      classWriter0.visitSource("", "");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitOuterClass("", "", "");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(18);
      classWriter0.visitOuterClass("L", "Deprecated", (String) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(75);
      classWriter0.newNameType("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
      classWriter0.newNameType("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2070);
      classWriter0.newConst("Deprecated");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-905));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-905));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-7337));
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.addType("2|g)0u}Bh!S");
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.addType("2|g)0u}Bh!S");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5557));
      classWriter0.toByteArray();
      Float float0 = new Float((double) 1);
      classWriter0.newConst(float0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-443));
      classWriter0.visitSource((String) null, (String) null);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      Item[] itemArray0 = new Item[0];
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.addUninitializedType("n3Qzt:k/", Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(166);
      classWriter0.toByteArray();
      classWriter0.visitInnerClass("[]", "[]", "", 166);
      classWriter0.visitInnerClass("[]", "", "Ne]S~)%)zZ", 16);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-22));
      boolean boolean0 = ClassReader.RESIZE;
      Character character0 = Character.valueOf('2');
      classWriter0.newConstItem(character0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(256);
      classWriter0.visitField(28, "]_n\"C,}0SgapE", "]_n\"C,}0SgapE", "]_n\"C,}0SgapE", "]_n\"C,}0SgapE");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1195));
      Boolean boolean0 = Boolean.valueOf(true);
      classWriter0.newConst(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.toByteArray();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-we.u'wo!e";
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        classWriter0.visit(17, 1, "-we.u'wo!e", "-we.u'wo!e", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-330));
      classWriter0.newConstItem(integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.visitOuterClass("", (String) null, "wheel.asm.Edge");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3031);
      classWriter0.visitInnerClass("Deprecated", "Deprecated", "Deprecated", 1634);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2, 32, "", "", "", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      String[] stringArray0 = new String[2];
      classWriter0.visitOuterClass("Synthetic", "Synthetic", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      classWriter0.visit(42, 42, "Synthetic", "Synthetic", "Synthetic", stringArray0);
      classWriter0.newDouble(42);
      classWriter0.toByteArray();
      classWriter0.newDouble(42);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4102));
      Long long0 = new Long(0L);
      classWriter0.newConst(long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      classWriter0.visit((-383), (-1662), "L", (String) null, "", (String[]) null);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-470));
      classWriter0.toByteArray();
      Short short0 = new Short((short)1368);
      classWriter0.newConst(short0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3687));
      Byte byte0 = new Byte((byte)119);
      classWriter0.newConstItem(byte0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-647));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Type type0 = Type.getObjectType("iDNq8_ZNE+L> RVzt/b");
      classWriter0.newConstItem(type0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      classWriter0.newLong((-2169L));
      classWriter0.newLong((-2169L));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.invalidFrames = true;
      classWriter0.newFloat(0);
      classWriter0.newFloat(0);
      classWriter0.newDouble(1.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      classWriter0.threshold = 2118;
      boolean boolean0 = ClassReader.RESIZE;
      classWriter0.newConstItem("H%/W-OO<B");
      classWriter0.newConst("H%/W-OO<B");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-465));
      classWriter0.visitAnnotation("Y", false);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "wheel.asm.ClassWriter";
      String string1 = "o*y!=%E>";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 59);
      classWriter0.newMethod("o*y!=%E>", "", "", false);
      classReader0.accept((ClassVisitor) classWriter0, 644);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2029);
      classWriter0.newDouble(2029);
      String string0 = "";
      classWriter0.newFieldItem("", "", "");
      Item item0 = classWriter0.key3;
      Item item1 = classWriter0.key2;
      int int0 = (-2452);
      classWriter0.newInteger((-2452));
      Item item2 = classWriter0.key2;
      classWriter0.newFieldItem("", "", "");
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(59);
      String[] stringArray0 = new String[2];
      classWriter0.visitOuterClass("Synthetic", "Synthetic", "org.apache.commons.io.filefilter.CanWriteFileFilter");
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      classWriter0.visit(59, 59, "Synthetic", "Synthetic", "Synthetic", stringArray0);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visitAnnotation("", true);
      classWriter0.toByteArray();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777225);
      classWriter0.addUninitializedType("_)9YmPmA$$f'(ntN;", (-5339));
      String[] stringArray0 = new String[0];
      classWriter0.visitMethod(65535, "_)9YmPmA$$f'(ntN;", "_)9YmPmA$$f'(ntN;", "_)9YmPmA$$f'(ntN;", stringArray0);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2893);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2893);
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.newMethodItem("", "", "The filters must not be null", true);
      itemArray0[0] = item0;
      classWriter0.typeTable = itemArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "StackMap");
      classWriter0.addUninitializedType(")", 1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-451));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(59);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "wheel.asm.ClassWriter");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2463);
      classWriter0.visitInnerClass("Deprecated", "#Gb0NLb{", "org.apache.commons.io.FilenameUtils", 2463);
      classWriter0.visitSource("org.apache.commons.io.FilenameUtils", "EnclosingMethod");
      classWriter0.addUninitializedType("", 2463);
      classWriter0.addUninitializedType("", 2463);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      classWriter0.visit(6, (-3570), "", "", "", stringArray0);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(65);
      Attribute attribute0 = new Attribute("Signature");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-451));
      classWriter0.visitOuterClass("wheel.asm.ClassWriter", "Synthetic", "java/lang/Class");
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.filefilter.CanReadFileFilter");
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "org.apache.commons.io.filefilter.CanReadFileFilter");
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "java/lang/Object");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      classWriter0.newMethod("-={RN*os 9", "-={RN*os 9", "-={RN*os 9", true);
      classWriter0.addType("-={RN*os 9");
      classWriter0.newDouble(30);
      classWriter0.newMethodItem("-={RN*os 9", "-={RN*os 9", "-={RN*os 9", true);
  }
}
