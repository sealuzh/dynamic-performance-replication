/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 10:01:48 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Za4n8VW&Ql?dk%|.");
      assertEquals(8290254710278354249L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("927h~5qwGIU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[double", classLoader0, false);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockThread mockThread0 = new MockThread("java.awt.Color");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.awt.Color", classLoader0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[C");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.sql.SQLTransientException");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = TypeUtils.castToShort(short0);
      assertTrue(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double((-63.55822727));
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-63), (short)short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(0.0);
      Long long0 = TypeUtils.castToLong(float0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float((-932.7046058172065));
      Long long0 = TypeUtils.castToLong(float0);
      assertEquals((-932L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<NumberFormatException> class0 = NumberFormatException.class;
      NumberFormatException numberFormatException0 = TypeUtils.castToJavaBean((Object) hashtable0, class0);
      assertNull(numberFormatException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-3248));
      Float float0 = TypeUtils.castToFloat(atomicInteger0);
      assertEquals((-3248.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double((short)31);
      Double double1 = TypeUtils.castToDouble(double0);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("short", (ClassLoader) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockThread mockThread0 = new MockThread("java.util.OptionalLong");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      boolean boolean0 = TypeUtils.isHibernateInitialized(pageAttributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "toP", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<InstantiationError> class0 = InstantiationError.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "char", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("language", "language");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>((byte)52);
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Long> class0 = Long.TYPE;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Annotation> class0 = Annotation.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.put("gdK,khM!==Qc{&5G", (Field) null);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("localizedMessage", "=kGj3M$");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (JSONType) null, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, false, parserConfig0.propertyNamingStrategy);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) propertyProcessableDeserializer0.type, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockThread mockThread0 = new MockThread("java.util.OptionalLong");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      String string0 = TypeUtils.castToString(classLoader0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Insets insets0 = new Insets(5, 1232, (-1932735281), 22);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.awt.Insets[top=5,left=1232,bottom=-1932735281,right=22]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) timeUnit0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [checksum=0x10d0d814]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Class<OptionalCodec> class0 = OptionalCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) hashSet0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.text.MockDateFormat@6bf238d3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(classLoader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.mis\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(mockNullPointerException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, type0, type0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Type[] typeArray0 = new Type[7];
      Type type0 = TypeUtils.getCollectionItemType(typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, type0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Exception exception0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = TypeUtils.cast((Object) hashMap0, class0, (ParserConfig) null);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("org.springframework.security.web.savedrequest.DefaultSavedRequest", "tBO9Q%g-I|N&CI_");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Integer> class0 = Integer.TYPE;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        TypeUtils.getClass(typeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashtable0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, (Class<EnumDeserializer>) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.loadClass("java.time.ZoneId", classLoader0, false);
      Type[] typeArray0 = new Type[3];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bufferCapabilities0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, true, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) null, propertyNamingStrategy0, false, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("x");
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("(Ljava/lang/String;)V");
      assertEquals("(Ljava/lang/String;)V", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("EMPTY_THRWABLE_ARRAY");
      assertEquals("EMPTY_THRWABLE_ARRAY", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<BigInteger> class0 = BigInteger.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.math.BigInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      IllegalAccessException illegalAccessException0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals("java.lang.IllegalAccessException", illegalAccessException0.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "j", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "j", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getAnnotations
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("] _c]Ye1|}>a{uZKah");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("uSQA\"S<&a)$5dUha");
      assertEquals(5698543699778340751L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("#-8m`W;4y>.zH");
      assertEquals(7312304566661582176L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("B~b&~Jg_dF");
      assertEquals(127301481534544372L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("vBp75PgG0O][ACh#");
      assertEquals((-779412769359874241L), long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [J", class1.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [B", class1.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("VALUE_ALPHA_INTERPOLATION_DEFAULT").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [D", class1.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("m f)7xm").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Class<Short> class1 = Short.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0, false, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertEquals(1537, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Type type0 = TypeUtils.unwrapOptional(class1);
      Class class2 = (Class)TypeUtils.unwrapOptional(type0);
      assertEquals("class java.sql.SQLTransactionRollbackException", class2.toString());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl1);
      assertSame(type0, parameterizedTypeImpl1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Annotation> class0 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Collator> class0 = Collator.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TypeUtils.castToInt((Object) null);
      TypeUtils.castToInt((Object) null);
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.getCollectionItemType(class0);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<PropertyProcessable> class2 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class2);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(16, list0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.serializer.BooleanCodec", class0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.serializer.BooleanCodec -> java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "fastPathData");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar", classLoader0, true);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) class0;
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[0], typeArray0[0], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class javax.xml.datatype.XMLGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException sQLDataException0 = TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, (ParserConfig) null);
      assertEquals(0, sQLDataException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "o", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@749f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "B~b&~Jg_dF", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockDate mockDate0 = new MockDate((-1510), (-1273), (-1510), 58, 2192);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashSet<TimeUnit> hashSet0 = new HashSet<TimeUnit>();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Short short0 = new Short((short)31);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) short0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      EnumDeserializer enumDeserializer0 = TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      assertNull(enumDeserializer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("AM_PM_MASK");
      assertEquals("am_PM_MASK", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale(" Z;<b@<+>UeOviC1a;$");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("] _c]Ye1|}>a{uZKah");
      assertEquals("] _C]YE1|}>A{UZKAH", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = TypeUtils.cast((Object) "", class0, parserConfig0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<Long> class1 = Long.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : DAYS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0.classLoader, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.ASMClassLoader@7e6e3436
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      MockThread mockThread0 = new MockThread("oVHac_n+${0k");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<Byte> class0 = Byte.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLException sQLException0 = new SQLException("@Ghd4k&H-");
      InternalError internalError0 = new InternalError("@Ghd4k&H-", sQLException0);
      Class<Boolean> class0 = Boolean.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) internalError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.InternalError: @Ghd4k&H-
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("fastjson.parser.autoTypeSupport");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("fastjson.parser.autoTypeAccept", noSuchFieldError0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Exception exception0 = TypeUtils.cast((Object) typeNotPresentException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertFalse(exception0.equals((Object)typeNotPresentException0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "AM_P_MASK", (Class<NumberFormatException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = TypeUtils.castToInt(bigInteger0);
      Long long0 = TypeUtils.castToLong(integer0);
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Type[] typeArray0 = new Type[22];
      Boolean boolean0 = TypeUtils.castToBoolean(typeArray0[2]);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.text.MockDateFormat@2b1f3776
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("can not cast oracle.sql.TIMESTAMP to Date");
      assertEquals(30, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Integer integer0 = TypeUtils.castToInt(parserConfig0.fieldBased);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("nz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nz\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double((-63.55822727));
      Integer integer0 = TypeUtils.castToInt(double0);
      Integer integer1 = TypeUtils.castToInt(integer0);
      assertEquals((-63), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = TypeUtils.castToInt(bigInteger0);
      LinkedHashMap<Integer, IllegalThreadStateException> linkedHashMap0 = new LinkedHashMap<Integer, IllegalThreadStateException>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Integer integer1 = new Integer((-56));
      linkedHashMap0.put(integer1, illegalThreadStateException0);
      linkedHashMap0.put(integer0, illegalThreadStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {-56=java.lang.IllegalThreadStateException, 1=java.lang.IllegalThreadStateException}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : x
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("-*Q1p,u:(mi#!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+h<~_}HL<A\"5P&RXT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Float float0 = new Float((-122.418));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -122.418
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("IgnoreNonFieldGetter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : IgnoreNonFieldGetter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(497);
      Time time0 = TypeUtils.castToSqlTime(atomicInteger0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("/1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : /1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Short short0 = new Short((short)42);
      Date date0 = TypeUtils.castToSqlDate(short0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1601), (-1601), (-1), 3941, (-6231));
      Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Z*s;weSH7{lah6r-IB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Z*s;weSH7{lah6r-IB
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Short short0 = new Short((short)31186);
      java.util.Date date0 = TypeUtils.castToDate(short0);
      assertEquals("Thu Jan 01 00:00:31 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockDate mockDate0 = new MockDate(205, 0, (-1910365929));
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = TypeUtils.castToDouble(float0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Short short0 = new Short((short)31);
      Float float0 = TypeUtils.castToFloat(short0);
      assertEquals(31.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("-[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("g", "g");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("(Ljava/lang/String;)V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(Ljava/lang/String;)V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Short short0 = TypeUtils.castToShort(bigInteger0);
      assertEquals((short)10, (short)short0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "] _c]Ye1|}>a{uZKah", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : ] _c]Ye1|}>a{uZKah
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("j");
      assertEquals('j', (char)character0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("XrYY<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XrYY<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Byte byte0 = TypeUtils.castToByte(bigInteger0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("Superclass");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }
}
