/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:21:29 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.IntegerCodec;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.chrono.ThaiBuddhistEra;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("MIID%sV4-P%XB;");
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockIllegalArgumentException0);
      assertTrue(boolean0);
      
      Class<Float> class0 = Float.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Color");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("javwt.olor");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Rectngle", classLoader0, false);
      TypeUtils.castToString(classLoader0);
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.loadClass("]{]W5Yw5u");
      boolean boolean0 = TypeUtils.isNumber("7");
      assertTrue(boolean0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.isKotlin(class1);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      TypeUtils.isGenericParamType(class0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class3, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      boolean boolean0 = TypeUtils.isNumber("9gFv?");
      assertFalse(boolean0);
      
      Class<Float> class0 = Float.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.getClassFromMapping("isintValue");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      LinkedHashSet<Byte> linkedHashSet0 = new LinkedHashSet<Byte>();
      concurrentHashMap0.get(linkedHashSet0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToDate((Object) null);
      TypeUtils.getRawClass(class0);
      Class<InternalError> class1 = InternalError.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.deny", class1, class2, class1, (Field) null, 45, 0, (byte) (-78));
      parserConfig0.createFieldDeserializer((ParserConfig) null, javaBeanInfo0, fieldInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+_pS.@<");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAsmEnable(false);
      parserConfig0.addDeny("fastjson.parser.autoTypeSupport");
      TypeUtils.clearClassMapping();
      SQLDataException sQLDataException0 = new SQLDataException("fastjson.parser.deny", "u6;=0", 13);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLDataException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      identityHashMap0.computeIfAbsent("com.alibaba.fastjson.parser.JSONReaderScanner", function0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.JSONReaderScanner");
      assertNotNull(class0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.isPath(class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.isNumber("]{]W5Yw5u");
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("]{]W5Yw5u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.isNumber("/GL=sN*2'zg0_11GJ}");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("/GL=sN*2'zg0_11GJ}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/GL=sN*2'zg0_11GJ}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Calendar.getAvailableCalendarTypes();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "com.alibaba.fastjson.serializer.ClobSeriliazJ9");
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "can not cast to Date, value : ");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.put("can not cast to Date, value : ", "a&");
      String string0 = ParserConfig.DENY_PROPERTY;
      boolean boolean0 = TypeUtils.isHibernateInitialized(biFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.loadClass("jpE|q?6 9B4@");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("30hd4Jm@a");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      Class<SQLException> class1 = SQLException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.ITALIAN;
      BreakIterator.getWordInstance(locale0);
      boolean boolean2 = TypeUtils.isHibernateInitialized(propertyNamingStrategy0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.getClassFromMapping("isintValue");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.DENY_PROPERTY;
      linkedHashMap0.put("toString", "isintValue");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@678567e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.keySet();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "qeqF?N4Ms%)!BlqM=");
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "can not cast to Date, value : ");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("/q", biFunction0);
      linkedHashMap0.put("can not cast to Date, value : ", "_<&");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      TypeUtils.loadClass("qeqF?N4Ms%)!BlqM=");
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isPath(class0);
      String string0 = "org.springframework.security.web.savedrequest.DefaultSavedRequest";
      TypeUtils.toLocale("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Class<Locale> class1 = Locale.class;
      TypeUtils.isKotlin(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("org.springframework.security.web.savedrequest.DefaultSavedRequest");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.springframework.security.web.savedrequest.DefaultSavedRequest
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SecurityException> class0 = SecurityException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      TypeUtils.castToLong((Object) null);
      Class<ClassLoader> class1 = ClassLoader.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      MockFile mockFile0 = new MockFile("[boolean", "dr_");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockFile0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.text.MockDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.decapitalize("X'w~o3H[20T#kZoA");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("X'w~o3H[20T#kZoA", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. X'w~o3H[20T#kZoA
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Short> class0 = Short.TYPE;
      IntegerCodec integerCodec0 = new IntegerCodec();
      parserConfig0.putDeserializer(class0, integerCodec0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isHibernateInitialized((Object) null);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.from(thaiBuddhistEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDate from TemporalAccessor: BE of type java.time.chrono.ThaiBuddhistEra
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.isNumber("30hd4Jm@a");
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("_i");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToDate((Object) null);
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getRawClass(type0);
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Av%eelIW&Si`|WD");
      assertEquals(3966396792335635611L, long0);
      
      Constructor<MockJapaneseDate>[] constructorArray0 = (Constructor<MockJapaneseDate>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.isNumber("Av%eelIW&Si`|WD");
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      treeMap1.keySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Double> class0 = Double.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      stringIndexOutOfBoundsException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("<nk5bHJ9H");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("f`44C)", hashMap0);
      Class<Timestamp> class3 = Timestamp.class;
      FieldInfo fieldInfo0 = new FieldInfo("-}]u,", class2, class3, class0, (Field) null, 90, 90, 35);
      ParserConfig parserConfig0 = new ParserConfig(false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build(fieldInfo0.declaringClass, type0, propertyNamingStrategy0, true, true);
      DefaultFieldDeserializer defaultFieldDeserializer0 = new DefaultFieldDeserializer((ParserConfig) null, class1, fieldInfo0);
      Class<String> class4 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "-}]u,", class4, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      Class<Float> class0 = Float.TYPE;
      Hashtable<NoSuchFieldException, PropertyNamingStrategy> hashtable0 = new Hashtable<NoSuchFieldException, PropertyNamingStrategy>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertEquals("class [F", class1.toString());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      Class<Double> class2 = Double.TYPE;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Locale locale0 = TypeUtils.toLocale("D%$@*'n");
      assertEquals("", locale0.getCountry());
      
      Class<SQLWarning> class3 = SQLWarning.class;
      boolean boolean1 = TypeUtils.isKotlin(class3);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.isNumber("9gFv?");
      Class<Float> class0 = Float.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getClassFromMapping("9gFv?");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      TypeUtils typeUtils0 = new TypeUtils();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`N@FA&MV");
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("f`44C)", hashMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      byte[] byteArray0 = new byte[4];
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      TypeUtils.castToBytes(byteArray0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.entrySet();
      Class<Double> class0 = Double.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      long long0 = TypeUtils.fnv1a_64_lower("getSuppressed");
      assertEquals((-1502406654571303087L), long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      sQLException0.getLocalizedMessage();
      sQLException0.getLocalizedMessage();
      Class<Point> class0 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      String string0 = TypeUtils.decapitalize("lo");
      assertEquals("lo", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[J");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("z", false);
      ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      Class<?> class0 = TypeUtils.loadClass("[J", classLoader0, false);
      assertNotNull(class0);
      
      String string0 = TypeUtils.decapitalize("[J");
      assertEquals("[J", string0);
      
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.unwrapOptional(class0);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "[J");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = new MockThread(mockThread2, "[J");
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("[J", classLoader0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("C|NQsQab~D8gnp3", "C|NQsQab~D8gnp3");
      LinkedHashSet<RenderingHints> linkedHashSet0 = new LinkedHashSet<RenderingHints>();
      Class<Character> class0 = Character.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "r", (-1360L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass((String) null);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      identityHashMap0.clone();
      Function<Object, Method> function1 = (Function<Object, Method>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super String, ? extends Method>) function1);
      Class<Time> class0 = Time.class;
      TypeUtils.isProxy(class0);
      Character character0 = new Character('<');
      DataTruncation dataTruncation0 = new DataTruncation(144, true, true, (byte) (-49), 11);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(dataTruncation0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.sq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.isNumber("InternationalCurrencySymbol");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.unwrapOptional(class0);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "unclosed single-quote string");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = new MockThread(mockThread2, "unclosed single-quote string");
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("unclosed single-quote string", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("<nk5bHJ9H");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(class2);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      ParserConfig parserConfig0 = new ParserConfig();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", 0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.autoTypeSupport", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "can not cast to char, value : ", fieldArray0);
      linkedHashMap0.put("(=qZ<,[", (Field) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {(=qZ<,[=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.decapitalize("<nk5bHJ9H");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "<nk5bHJ9H", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("<nk5bHJ9H", class1, class0, class0, (Field) null, 0, 0, 54);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      beanContext0.getField();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.loadClass("'pE|q?6 9B4@");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SecurityException> class1 = SecurityException.class;
      Class<TimeUnit> class2 = TimeUnit.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class1, (PropertyNamingStrategy) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(javaBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.JavaBeanInfo@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<TimeUnit> class1 = TimeUnit.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      NumberFormatException numberFormatException0 = new NumberFormatException("org.hibernate.Hibernate");
      concurrentHashMap0.contains(serializeBeanInfo0);
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      Class<SQLDataException> class0 = SQLDataException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      Insets insets0 = new Insets((-4898), 24, 68, 0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-2768), (-4898), 23, (-1724677202), (-1724677202), 687, 24, 0, insets0, 6, 24);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<InstantiationError> class1 = InstantiationError.class;
      TypeUtils.cast((Object) weakHashMap0, class1, parserConfig0);
      Class<?> class2 = TypeUtils.getClassFromMapping("OFZm");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("andIncrement");
      InternalError internalError0 = new InternalError("getFastMatchToken");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      TypeUtils.castToString(sQLFeatureNotSupportedException0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.keySet();
      identityHashMap0.put("getEndInclusive", ".0XqhCA");
      String string0 = "m";
      TypeUtils.decapitalize("m");
      Byte byte0 = new Byte((byte)5);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Byte.toUnsignedLong((byte)42);
      Byte.toUnsignedInt((byte) (-106));
      Long long0 = new Long((byte)23);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.isNumber("7");
      float float0 = new Float((-1.0F));
      Class<IllegalStateException> class0 = IllegalStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Constructor<OutOfMemoryError>[] constructorArray0 = (Constructor<OutOfMemoryError>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      Class<Point> class1 = Point.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null);
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      sQLException0.getLocalizedMessage();
      sQLException0.getLocalizedMessage();
      Class<Point> class0 = Point.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.loadClass("jpE|q?6 9B4@");
      boolean boolean0 = TypeUtils.isNumber("8 p5cF");
      assertFalse(boolean0);
      
      Class<LinkageError> class0 = LinkageError.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "writeInt";
      TypeUtils.getClassFromMapping("writeInt");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      Point point0 = new Point(95, 25);
      Point point1 = new Point(point0);
      point1.translate(25, 25);
      Properties properties0 = new Properties();
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(point0, dimension0);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) rectangle1, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float.min((-1.3268018F), (-1.3268018F));
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Constructor<OutOfMemoryError>[] constructorArray0 = (Constructor<OutOfMemoryError>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.castToSqlDate((Object) null);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Byte.toUnsignedInt((byte) (-78));
      Class<Point> class0 = Point.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      URI uRI0 = MockURI.URI("fastjson.parser.autoTypeAccept", "java.awt.Point", "fastjson.parser.autoTypeSupport");
      MockURI.parseServerAuthority(uRI0);
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      byte[] byteArray0 = new byte[4];
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      TypeUtils.castToBytes(byteArray0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<?> class0 = TypeUtils.loadClass("getMetaClass");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      String string0 = "6e?LD#jaD";
      ParserConfig.getFieldFromCache("6e?LD#jaD", hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("DZLw`", (ClassLoader) aSMDeserializerFactory0.classLoader);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("6e?LD#jaD", class1, class2, (Type) null, (Field) null, (-1432), 2545, 45);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<BigDecimal> class3 = BigDecimal.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      JavaBeanInfo.build((Class<?>) class3, (Type) class0, propertyNamingStrategy1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<TimeZone> class0 = TimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) concurrentHashMap0, false, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ClassLoader> class0 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put(")ZwXhE7y7.']o", ")ZwXhE7y7.']o");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      Insets insets0 = new Insets(29, (byte) (-7), 687, 207);
      Class<Float> class1 = Float.TYPE;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      boolean boolean0 = TypeUtils.isNumber("9gFv?");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      
      boolean boolean2 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      HashMap<String, Field> hashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("rd0j>Qlw)_", hashMap0);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("O8");
      assertEquals(626015774474364338L, long0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Function.identity();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getSuppressed");
      SQLException sQLException0 = new SQLException();
      sQLException0.getLocalizedMessage();
      TypeUtils.castToSqlTime((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      String string0 = TypeUtils.decapitalize("JJlt.i0]G_y<ls");
      assertEquals("JJlt.i0]G_y<ls", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.loadClass("l");
      Class<Currency> class0 = Currency.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.castToBytes("l");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)treeMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      Class<Point> class1 = Point.class;
      Class<RenderingHints> class2 = RenderingHints.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy1);
      TypeUtils typeUtils0 = new TypeUtils();
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("fastjson.parser.deny");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : fastjson.p
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "_i";
      TypeUtils.fnv1a_64_lower("_i");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.replaceAll(biFunction0);
      String string1 = "q.7_#z32I";
      int[] intArray0 = new int[19];
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("_i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.KOREAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("S", locale0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockSimpleDateFormat0);
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockSimpleDateFormat0.get2DigitYearStart();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      locale0.getScript();
      TypeUtils.loadClass("", (ClassLoader) null, true);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      Class<NullPointerException> class0 = NullPointerException.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<Insets> class0 = Insets.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Method> function0 = (Function<Object, Method>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends Method>) function0);
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      TypeUtils.castToBigDecimal((Object) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(24180, 34, 34);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      TypeUtils.castToChar((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<TypeNotPresentException, StringCharacterIterator> identityHashMap0 = new java.util.IdentityHashMap<TypeNotPresentException, StringCharacterIterator>();
      Class<InstantiationError> class0 = InstantiationError.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "U[QS/3%k`~P/%rzl>", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "qeqY?N4M'%)!BlqM=");
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "can not cast to Date, value : ");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToShort((Object) null);
      Hashtable<NoSuchFieldException, PropertyNamingStrategy> hashtable0 = new Hashtable<NoSuchFieldException, PropertyNamingStrategy>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToBigDecimal(hashtable0);
      boolean boolean0 = TypeUtils.isNumber("F?E\"]'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "com.alibaba.fastjson.parser.JSONReaderScanner";
      Function<String, String> function0 = Function.identity();
      identityHashMap0.computeIfAbsent("com.alibaba.fastjson.parser.JSONReaderScanner", function0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      identityHashMap0.clone();
      Function<Object, Method> function1 = (Function<Object, Method>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super String, ? extends Method>) function1);
      byteArray0[2] = (byte)94;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.parser.JSONReaderScanner", hashMap0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TypeUtils.loadClass("com.alibaba.fastjson.parser.JSONReaderScanner");
      TypeUtils.castToInt((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("com.alibaba.fastjson.parser.JSONReaderScanner");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.toLocale("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<NumberFormatException> class0 = NumberFormatException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.isKotlin(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Float float0 = new Float((-1135.3481073623925));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1135.3481
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToByte("");
      TypeUtils.getClassFromMapping("");
      TypeUtils.toLocale("Ljava.awt.Point");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator((String) null, 101, 101, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-109);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      byteArray0[5] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InternalError internalError0 = new InternalError("CAUSE_CAPTION", (Throwable) null);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("(Ljava/lang/String;)V", hashtable0);
      ParserConfig.getFieldFromCache("CAUSE_CAPTION", hashtable0);
      Class<Rectangle> class0 = Rectangle.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "EMPTY_THROWABLE_ARRAY", fieldArray0);
      Class<LinkageError> class1 = LinkageError.class;
      FieldInfo fieldInfo0 = new FieldInfo("kky9x;q^O=ae", class1, class1, class0, (Field) null, (byte)5, (byte)73, 1405);
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      identityHashMap0.computeIfAbsent("com.alibaba.fastjson.parser.JSONReaderScanner", function0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      identityHashMap0.clone();
      Function<Object, Method> function1 = (Function<Object, Method>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.andThen((Function<? super String, ? extends Method>) function1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-49);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("com.alibaba.fastjson.parser.JSONReaderScanner");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.JSONReaderScanner
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.fnv1a_64_lower("unclosed single-quote string");
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("javax.persistence.ManyToMany", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "toString";
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.getClassFromMapping("toString");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      Byte byte0 = new Byte((byte) (-125));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("oracle.sql.DATE", parserConfig0);
      VerifyError verifyError0 = new VerifyError();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache(" G3bwA}z_wkME7", concurrentHashMap0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(concurrentHashMap0);
      linkedHashMap0.put("oracle.sql.DATE", (Field) null);
      ParserConfig.getFieldFromCache("fastjson.parser.deny", concurrentHashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus((String) null, false);
      ParserConfig parserConfig1 = new ParserConfig();
      ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
      parserConfig2.setDefaultClassLoader(classLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      TypeUtils typeUtils0 = new TypeUtils();
      Hashtable<NoSuchFieldException, PropertyNamingStrategy> hashtable1 = new Hashtable<NoSuchFieldException, PropertyNamingStrategy>();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Insets insets0 = new Insets(1891, 1891, 0, 563);
      BigDecimal bigDecimal0 = new BigDecimal((-39));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.deny", "fAwcy>p+rR.D%");
      Class<TimeUnit> class1 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLInvalidAuthorizationSpecException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.loadClass("]{]W5Yw5u");
      TypeUtils.isNumber("]{]W5Yw5u");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("]{]W5Yw5u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]{]W5Yw5u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]x\"j7U>+uk)OM");
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToByte((Object) null);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.getGenericParamType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDate localDate0 = MockLocalDate.now();
      Date date0 = Date.valueOf(localDate0);
      TypeUtils.castToSqlDate(date0);
      MockInstant.now();
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("getfillInStackTrace");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      TypeUtils.castToString(sQLInvalidAuthorizationSpecException0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("java.sql.SQLInvalidAuthorizationSpecException@0000000001", "java.sql.SQLInvalidAuthorizationSpecException@0000000001");
      Byte byte0 = new Byte((byte)13);
      Byte.toUnsignedLong((byte)5);
      Byte.toUnsignedInt((byte)3);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("({)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pYEp;qf");
      TypeUtils.fnv1a_64_lower("_i");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<BigDecimal> class0 = BigDecimal.class;
      Constructor<NumberFormat>[] constructorArray0 = (Constructor<NumberFormat>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("_i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : _i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = 'F';
      char char0 = '<';
      charArray0[1] = '<';
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<OptionalCodec> class0 = OptionalCodec.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "java.sql.SQLDataException@0000000001";
      String string1 = "QC?hWD~+X~{rj+";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("QC?hWD~+X~{rj+", "QC?hWD~+X~{rj+");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLRecoverableException: QC?hWD~+X~{rj+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Byte.toUnsignedInt((byte) (-78));
      TypeUtils.castToBoolean((Object) null);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      parserConfig0.clearDeserializers();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo(javaBeanInfo0.clazz, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils.isProxy(javaBeanInfo0.clazz);
      TypeUtils.isNumber("popContext");
      Integer integer0 = new Integer(0);
      Float float0 = TypeUtils.castToFloat(integer0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      assertEquals("", locale0.getVariant());
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isHibernateInitialized(class1);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getTimestamp(", class ");
      TypeUtils.castToFloat((Object) null);
      TypeUtils.decapitalize("c(S[;WCKFJ5eZ]");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      long long0 = TypeUtils.fnv1a_64_lower("Ibt");
      assertEquals(3139553306641723314L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      aSMDeserializerFactory0.classLoader.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      AtomicLong atomicLong0 = new AtomicLong((-3750763034362895579L));
      TypeUtils.castToInt(atomicLong0);
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.isNumber("]{]W5Y");
      Class<String> class0 = String.class;
      TypeUtils.cast((Object) "]{]W5Y", class0, (ParserConfig) null);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.getClass((Type) class1);
      byte[] byteArray0 = TypeUtils.castToBytes("]{]W5Y");
      assertArrayEquals(new byte[] {(byte)91, (byte) (-106)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '<';
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "org.springframework.remoting.support.RemoteInvocationResult");
      linkedHashMap0.put("{p(-1'b~/m}p]9dR>", "org.springframework.remoting.support.RemoteInvocationResult");
      linkedHashMap0.put("getMinimumFractionDigits", "qeF?N4Ms%)Bl2_M");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl0, parameterizedTypeImpl0);
      parameterizedTypeImpl1.getTypeName();
      parameterizedTypeImpl1.getTypeName();
      parameterizedTypeImpl1.getTypeName();
      TypeUtils.decapitalize("{p(-1'b~/m}p]9dR>");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "{p(-1'b~/m}p]9dR>", (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.getClassFromMapping("andIncrement");
      TypeUtils.castToDouble((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BCu8Om");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("gettoString", hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setDefaultClassLoader(classLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gettoString");
      Class<Point> class0 = Point.class;
      Class<Float> class1 = Float.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null);
      Hashtable<NoSuchFieldException, PropertyNamingStrategy> hashtable0 = new Hashtable<NoSuchFieldException, PropertyNamingStrategy>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemClass(type0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      ParserConfig parserConfig1 = new ParserConfig();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", weakHashMap0, sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException1);
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "wait";
      TypeUtils.getClassFromMapping("wait");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("wait");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.getClassFromMapping("isintValue");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getCollectionItemClass((Type) null);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      TypeUtils.decapitalize("'5}M9z9+hkyW9)0?%s");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("'5}M9z9+hkyW9)0?%s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : '5}M9z9+hkyW9)0?%s
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Hy9|\"4kc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Hy9|\"4kc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Collator> class1 = Collator.class;
      ParserConfig.parserAllFieldToCache(class1, hashMap0);
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyyMMddHHmmssSSSZ");
      Insets insets0 = new Insets(3363, 82, 10, 56);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(1069, 10, (-634), (-2884), 0.0, (-1.0), (-634), 0, insets0, (-634), 1069);
      ParserConfig parserConfig1 = new ParserConfig(true);
      ConcurrentHashMap<BatchUpdateException, ChoiceFormat> concurrentHashMap0 = new ConcurrentHashMap<BatchUpdateException, ChoiceFormat>();
      Class<InstantiationError> class2 = InstantiationError.class;
      TypeUtils.cast((Object) concurrentHashMap0, class2, parserConfig1);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, propertyNamingStrategy1, true);
      TypeUtils.decapitalize((String) null);
      TypeUtils.getCollectionItemType(class0);
      Date date0 = new Date((-1L));
      TypeUtils.castToTimestamp(date0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Byte.toUnsignedInt((byte) (-78));
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("0j>Qlw)_", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.deny", class1, class2, class1, (Field) null, 45, 0, (byte) (-78));
      javaBeanInfo0.creatorConstructorParameters = fieldInfo0.alternateNames;
      FieldDeserializer fieldDeserializer0 = parserConfig0.createFieldDeserializer((ParserConfig) null, javaBeanInfo0, fieldInfo0);
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashMap0);
      Class<SQLException> class3 = SQLException.class;
      FieldInfo fieldInfo1 = new FieldInfo("[floa", class3, fieldInfo0.fieldClass, fieldInfo0.declaringClass, (Field) null, (-1900), 178, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockMinguoDate> class4 = MockMinguoDate.class;
      BeanContext beanContext0 = new BeanContext(class4, fieldDeserializer0.fieldInfo);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.getGenericParamType(class3);
      Long long0 = new Long((-1796L));
      TypeUtils.castToByte(long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      ParserConfig parserConfig0 = new ParserConfig(false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("Hy9|\"4kc");
      noSuchFieldError0.getLocalizedMessage();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeAccept", "Hy9|\"4kc", (byte) (-78));
      noSuchFieldError0.initCause(sQLTimeoutException0);
      noSuchFieldError0.getLocalizedMessage();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Throwable throwable0 = mockIllegalStateException0.initCause(noSuchFieldError0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeSupport", throwable0);
      InternalError internalError0 = new InternalError("Hy9|\"4kc");
      String string0 = "com.alibaba.fastjson.JSONPathException";
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.alibaba.fastjson.JSONPathException");
      internalError0.printStackTrace((PrintStream) mockPrintStream0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("getgetHeight");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Hy9|\"4kc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Hy9|\"4kc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '<';
      Function.identity();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.alibaba.fastjson.parser.JSONReaderScanner");
      SQLException sQLException0 = new SQLException();
      sQLException0.getLocalizedMessage();
      TypeUtils.castToSqlTime((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.decapitalize((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("MIID%sV4-P%XB;");
      TypeUtils.isHibernateInitialized(mockIllegalArgumentException0);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<Object> class1 = Object.class;
      TypeUtils.castToJavaBean((Object) class0, class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      identityHashMap0.computeIfAbsent("Egt)PY6KNN_S,njP[{.", unaryOperator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isParvDseI{egerOnly");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("eEfjx(;", "Egt)PY6KNN_S,njP[{.");
      identityHashMap0.computeIfAbsent("Egt)PY6KNN_S,njP[{.", function0);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("Egt)PY6KNN_S,njP[{.");
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      TypeUtils.isPath(class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.isGenericParamType((Type) null);
      Locale locale0 = Locale.US;
      Currency currency0 = Currency.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(currency0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : USD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "qeqY?N4M'%)!BlqM=");
      linkedHashMap0.put("com.alibaba.fastjson.serializer.ClobSeriliazJ9", "can not cast to Date, value : ");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToShort((Object) null);
      Hashtable<NoSuchFieldException, PropertyNamingStrategy> hashtable0 = new Hashtable<NoSuchFieldException, PropertyNamingStrategy>();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      hashtable0.put(noSuchFieldException0, propertyNamingStrategy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TypeUtils.getParserFeatures(class0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = 39;
      intArray0[3] = 0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Method> class1 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("c(S[;WCKFJ5eZ]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.toLocale("c(S[;WCKFJ5eZ]");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isHibernateInitialized(class1);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = 39;
      intArray0[3] = 0;
      intArray0[4] = 12;
      intArray0[5] = 39;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      Class<Long> class2 = Long.class;
      TypeUtils.getKoltinConstructorParameters(class2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      System.setCurrentTimeMillis(1304L);
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.getGenericParamType(type0);
      TypeUtils.loadClass("gettoString");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.awt.GridBagConstraints@5fc10e65
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.loadClass("K07d/~y053~%t//+");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<Rectangle> class2 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.loadClass("K07d/~y053~%t//+");
      Properties properties0 = new Properties();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<HttpCookie> class3 = HttpCookie.class;
      TypeUtils.getSerializeFeatures(class3);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ez1_J|%>^YQ*$M");
      Class<ImageCapabilities> class4 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLIntegrityConstraintViolationException0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)22;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-54);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      AtomicInteger atomicInteger0 = new AtomicInteger(43);
      TypeUtils.castToTimestamp(atomicInteger0);
      java.util.IdentityHashMap<MockHijrahDate, PropertyNamingStrategy> identityHashMap0 = new java.util.IdentityHashMap<MockHijrahDate, PropertyNamingStrategy>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.getClassFromMapping("isintValue");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s(-%Rp#~2;^vi,cye!");
      TypeUtils.getCollectionItemClass((Type) null);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("0001-01-01T00:00:00+08:00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0001-01-01T00:00:00+08:00
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Calendar.getAvailableCalendarTypes();
      linkedHashMap0.values();
      linkedHashMap0.entrySet();
      linkedHashMap0.put("", "qeF?N4Ms%)Bl2_M");
      linkedHashMap0.put("", (String) null);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qeF?N4Ms%)Bl2_M");
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      Class<Insets> class1 = Insets.class;
      TypeUtils.getSerializeFeatures(class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Class<Byte> class2 = Byte.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.decapitalize("");
      TypeUtils.toLocale("istoString");
      TypeUtils.loadClass((String) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "fied_ser";
      TypeUtils.getClassFromMapping("fied_ser");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<InstantiationError> class0 = InstantiationError.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TreeSet<StackTraceElementDeserializer> treeSet0 = new TreeSet<StackTraceElementDeserializer>();
      TypeUtils.castToDate((Object) null);
      java.util.IdentityHashMap<Boolean, NumberFormatException> identityHashMap0 = new java.util.IdentityHashMap<Boolean, NumberFormatException>();
      TypeUtils.castToLong((Object) null);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      AtomicLong atomicLong0 = new AtomicLong((-1493L));
      TypeUtils.castToLong(atomicLong0);
  }
}
