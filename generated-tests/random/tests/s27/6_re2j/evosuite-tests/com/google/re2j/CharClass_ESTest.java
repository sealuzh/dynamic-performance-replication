/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:33:19 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 67640;
      intArray0[1] = 1;
      intArray0[2] = 127185;
      intArray0[3] = 4;
      intArray0[4] = 1326;
      intArray0[5] = 607;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {67640, 1, 127185, 4, 1326, 607}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 127185;
      intArray2[1] = 4;
      intArray2[2] = 1;
      intArray2[3] = 127185;
      intArray2[4] = 127185;
      intArray2[5] = 67640;
      intArray2[6] = 4;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {67640, 1, 127185, 4, 1326, 607}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2670;
      intArray0[1] = (-319);
      intArray0[2] = (-78);
      intArray0[3] = 119964;
      intArray0[4] = 1009;
      intArray0[5] = 110593;
      intArray0[6] = 1327;
      intArray0[7] = 93;
      intArray0[8] = 3600;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2670, (-319), (-78), 119964, 1009, 110593, 1327, 93, 3600}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-854);
      intArray0[1] = 1398;
      intArray0[2] = 1359;
      intArray0[3] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-854), 1398, 1359, 1114111}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-854), 1398, 1359, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1359);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-854), 1398, (-854), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(1114111, 65);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-854), 1398, (-854), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-854), 1398, (-854), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-854), 1114111, (-854), 1398}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass4.appendClassWithSign(intArray0, (-1));
      assertEquals(4, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-854), 1114111, (-854), 1398}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      
      String string0 = charClass6.toString();
      assertEquals(4, intArray0.length);
      assertEquals("[0xfffffcaa-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-854), 1114111, (-854), 1398}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-854), 1114111, (-854), 1398}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass1.appendClassWithSign(intArray0, 1398);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-854), 1114111, (-854), 1398}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-864);
      intArray0[1] = 2;
      intArray0[2] = 2453;
      intArray0[3] = (-2101903984);
      intArray0[4] = (-2134918176);
      intArray0[5] = 120077;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-864), 2, 2453, (-2101903984), (-2134918176), 120077}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-864), 2, 2453, (-2101903984), (-2134918176), 120077}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-864), 2, 2453, (-2101903984), (-2134918176), 120077}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-864), 2, 2453, (-2101903984), (-2134918176), 120077}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1646);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(1646, 1646);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      int[][] intArray1 = new int[1][9];
      // Undeclared exception!
      charClass3.appendTableWithSign(intArray1, (-11009137));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 309;
      intArray0[1] = 1239;
      intArray0[2] = 487;
      intArray0[3] = 2643;
      intArray0[4] = 66639;
      String string0 = CharClass.charClassToString(intArray0, (-1050));
      assertEquals(5, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {309, 1239, 487, 2643, 66639}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {309, 1239, 487, 2643, 66639}, intArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2643;
      intArray1[1] = 2643;
      intArray1[2] = 2643;
      intArray1[3] = 487;
      intArray1[4] = 487;
      intArray1[5] = 2643;
      intArray1[6] = 2643;
      intArray1[7] = 487;
      CharClass charClass1 = charClass0.appendClass(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {309, 1239, 487, 2643, 66639}, intArray0);
      assertArrayEquals(new int[] {2643, 2643, 2643, 487, 487, 2643, 2643, 487}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = charClass1.toArray();
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {309, 1239, 487, 2643, 66639}, intArray0);
      assertArrayEquals(new int[] {309, 1239, 487, 2643, 66639, 487, 2643}, intArray2);
      assertArrayEquals(new int[] {2643, 2643, 2643, 487, 487, 2643, 2643, 487}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = (-1803);
      intArray0[0] = (-1803);
      intArray0[1] = 925;
      int int1 = (-4503);
      intArray0[2] = (-4503);
      intArray0[3] = 66639;
      intArray0[4] = (-12);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(859, 3077);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[5][4];
      int[] intArray1 = new int[3];
      intArray1[0] = 859;
      intArray1[1] = 3077;
      intArray1[2] = 859;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 859;
      intArray2[1] = 859;
      intArray2[2] = 3077;
      intArray2[3] = 859;
      intArray2[4] = 738;
      intArray2[5] = 859;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 738;
      intArray3[1] = 859;
      intArray3[2] = 859;
      intArray3[3] = 738;
      intArray3[4] = 859;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 859;
      intArray4[1] = 859;
      intArray4[2] = 738;
      intArray4[3] = 859;
      intArray4[4] = 859;
      intArray4[5] = 3077;
      intArray4[6] = 3077;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 738;
      intArray5[1] = 738;
      intArray5[2] = 859;
      intArray5[3] = 859;
      intArray5[4] = 738;
      intArray5[5] = 859;
      intArray5[6] = 859;
      intArray5[7] = 859;
      intArray0[4] = intArray5;
      CharClass charClass3 = charClass2.appendTable(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendFoldedRange(3077, 1760);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign((int[][]) null, 8150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = CharClass.charClassToString((int[]) null, (-2148));
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 65;
      intArray2[1] = 0;
      intArray2[2] = 130;
      intArray2[3] = 789;
      intArray2[4] = 0;
      intArray2[5] = (-614);
      intArray2[6] = 1064;
      intArray2[7] = 64;
      intArray2[8] = 1558;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 65;
      intArray3[1] = 65;
      intArray3[2] = (-614);
      intArray3[3] = (-614);
      intArray3[4] = (-4436);
      intArray3[5] = 0;
      intArray3[6] = 1558;
      intArray3[7] = 964;
      intArray3[8] = (-614);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-4436);
      intArray4[1] = 1064;
      intArray4[2] = 0;
      intArray4[3] = 0;
      intArray4[4] = 0;
      intArray4[5] = (-614);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 0;
      intArray5[1] = 1558;
      intArray5[2] = 130;
      intArray5[3] = 1064;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3520;
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {3520, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1100);
      intArray0[1] = 2;
      intArray0[2] = 2227;
      intArray0[3] = 3288;
      intArray0[4] = 64;
      intArray0[5] = 2080;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1100), 2, 2227, 3288, 64, 2080}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1411);
      intArray2[1] = 64;
      intArray2[2] = 2080;
      intArray2[3] = (-1100);
      intArray2[4] = 2227;
      intArray2[5] = 64;
      intArray2[6] = 2227;
      intArray2[7] = 64;
      intArray2[8] = 93;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1411);
      intArray1[6] = intArray3;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(6, 6);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {6, 6, 6, 6}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[7][8];
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 6);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {6, 6, 6, 6}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {6, 6, 6, 6}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass6 = charClass5.appendLiteral(6, 6);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {6, 6, 6, 6}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[] intArray2 = charClass6.toArray();
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, 6, 6, 6}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-5290);
      intArray0[1] = (-2978);
      String string0 = CharClass.charClassToString(intArray0, (-2978));
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-5290), (-2978)}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-5290), (-2978)}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange((-5290), (-2250));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-5290), (-2250)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2249), 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-2249), 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      String string1 = charClass3.toString();
      assertEquals(2, intArray0.length);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {(-2249), 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.appendLiteral((-2250), 8115);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-2250), (-2250)}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1066;
      intArray0[1] = 64;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(68098, 68098);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendRange(64, 64);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.appendLiteral((-926), 1066);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      String string0 = charClass2.toString();
      assertEquals(2, intArray0.length);
      assertEquals("[0x42a-0x40 0x10a02 0x40 0xfffffc62]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      String string1 = charClass3.toString();
      assertEquals(2, intArray0.length);
      assertEquals("[0x42a-0x40 0x10a02 0x40 0xfffffc62]", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      
      CharClass charClass5 = charClass2.appendFoldedRange(68098, (-1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass5.appendFoldedRange(64, (-926));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass6.appendClassWithSign(intArray0, (-959));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      
      CharClass charClass8 = charClass5.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      
      CharClass charClass9 = charClass6.appendRange(3585, (-1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      
      int int0 = 2;
      int int1 = 6973;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 74864;
      intArray0[0] = 74864;
      int int1 = 1406;
      intArray0[1] = 1406;
      int int2 = 66639;
      intArray0[2] = 66639;
      int int3 = (-458);
      intArray0[3] = (-458);
      int int4 = (-641);
      intArray0[4] = (-641);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {74864, 1406, 66639, (-458), (-641)}, intArray0);
      
      int int5 = 2107;
      CharClass charClass1 = charClass0.appendRange(2107, (-458));
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {74864, 1406, 66639, (-458), (-641)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(5, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {74864, 1406, 66639, (-458), (-641)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1066;
      intArray0[1] = 64;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(68098, 68098);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendRange(64, 64);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.appendLiteral((-926), 1066);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      String string0 = charClass2.toString();
      assertEquals(2, intArray0.length);
      assertEquals("[0x42a-0x40 0x10a02 0x40 0xfffffc62]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      
      String string1 = charClass3.toString();
      assertEquals(2, intArray0.length);
      assertEquals("[0x42a-0x40 0x10a02 0x40 0xfffffc62]", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass5 = charClass2.appendFoldedRange(68098, (-1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass5.appendFoldedRange(64, (-926));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass6.appendClassWithSign(intArray0, (-959));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      
      CharClass charClass8 = charClass5.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      
      CharClass charClass9 = charClass0.appendLiteral(1114111, 3585);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {1066, 64}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      
      int int0 = 2;
      int int1 = 6973;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[2];
      intArray1[0] = (-1010);
      intArray1[1] = 1851;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1851;
      intArray2[1] = (-1010);
      intArray2[2] = 1851;
      intArray2[3] = 1851;
      intArray2[4] = 1851;
      intArray2[5] = (-1010);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1010);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 1851;
      int int0 = 2949;
      intArray4[1] = 2949;
      intArray4[2] = (-2416);
      intArray4[3] = (-1010);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 1851;
      intArray5[1] = (-1010);
      intArray5[2] = (-1010);
      intArray5[3] = (-963);
      intArray5[4] = (-1010);
      intArray5[5] = 2949;
      intArray5[6] = 1851;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-2416);
      intArray6[1] = 1851;
      intArray6[2] = (-2416);
      intArray6[3] = (-2416);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray4));
      
      intArray8[0] = 2949;
      intArray8[1] = 2949;
      intArray8[2] = (-1010);
      intArray8[3] = (-2416);
      intArray8[4] = 2949;
      intArray8[5] = (-990);
      intArray8[6] = (-963);
      intArray8[7] = (-1010);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[6];
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray3));
      
      intArray9[0] = 4;
      intArray9[1] = 2949;
      intArray9[2] = (-990);
      intArray9[3] = (-1010);
      intArray9[4] = 2949;
      intArray9[5] = (-2416);
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = (-183);
      intArray0[2] = (-3020);
      intArray0[3] = (-813);
      intArray0[4] = (-2068);
      intArray0[5] = 2110;
      intArray0[6] = 2112;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int0 = 869;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 869);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 755;
      CharClass charClass1 = charClass0.appendFoldedRange(755, 4807);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = new int[0];
      charClass1.cleanClass();
      charClass2.appendClassWithSign(intArray0, (-1413));
      int[][] intArray1 = new int[1][2];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass2.appendFoldedRange(755, 4807);
  }
}
