/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:17:59 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("lfEOOxBESavah^mV!G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("lfEOOxBESavah^mV!G", "lfEOOxBESavah^mV!G");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(215);
      PhantomJSDownloader phantomJSDownloader2 = new PhantomJSDownloader("HTTP request failed", "%zpd5P?^f9r");
      spider3.setDownloader(phantomJSDownloader2);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader1);
      String string0 = spider4.getUUID();
      assertNull(string0);
      
      Spider spider5 = spider4.downloader(phantomJSDownloader1);
      spider5.getCollectorPipeline();
      Spider spider6 = spider3.setSpawnUrl(true);
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2NzvHcvH^tDV%");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2NzvHcvH^tDV%";
      stringArray0[1] = "2NzvHcvH^tDV%";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("A'`izXUB");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      Spider spider4 = spider3.setSpawnUrl(true);
      spider4.isExitWhenComplete();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A'`izXUB";
      stringArray0[1] = ">0qU_)j<YP?6";
      stringArray0[2] = ">0qU_)j<YP?6";
      stringArray0[3] = ">0qU_)j<YP?6";
      stringArray0[4] = "A'`izXUB";
      stringArray0[5] = ">0qU_)j<YP?6";
      stringArray0[6] = ">0qU_)j<YP?6";
      stringArray0[7] = "A'`izXUB";
      stringArray0[8] = "A'`izXUB";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T|_Uh");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T|_Uh";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0=gzmedkp,RVQ<%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      spider1.setEmptySleepTime(5);
      String string0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4cF%E");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2NzvHcvH^tDV%");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.thread((ExecutorService) null, 31);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      request0.setMethod((String) null);
      requestArray0[0] = request1;
      Request request2 = request0.addCookie("_cycle_tried_times", "[>:y");
      requestArray0[1] = request2;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f_)N @2V4-nN7x^*.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.setExitWhenComplete(true);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("//title");
      Spider spider2 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = spider1.getStatus();
      int int0 = spider_Status0.getValue();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spider.Status.fromValue(2434);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!T ");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("html");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.setUUID("");
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f_)N @2V4-nN7x^*.";
      stringArray0[1] = "html";
      stringArray0[2] = "";
      stringArray0[3] = "A'`izXUB";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4~<d^;F83v8TFUh@");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4~<d^;F83v8TFUh@");
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      spider1.stop();
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request();
      spider1.getCollectorPipeline();
      spider1.runAsync();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.thread(3);
      spider2.setExecutorService((ExecutorService) null);
      Spider spider3 = new Spider(simplePageProcessor0);
      Spider spider4 = spider3.setExitWhenComplete(true);
      Spider spider5 = spider4.clearPipeline();
      Spider spider6 = spider5.setSpawnUrl(true);
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f_)N @2V4-nN7x^*.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider0.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "f_)N @2V4-nN7x^*.";
      stringArray0[2] = "f_)N @2V4-nN7x^*.";
      stringArray0[3] = "f_)N @2V4-nN7x^*.";
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Spider ");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[G", "$^mN|");
      spider2.downloader(phantomJSDownloader0);
      Request[] requestArray0 = new Request[1];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3J'kS8_.Or(ko");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.pipeline(multiPagePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("fi%NJyHG", "3J'kS8_.Or(ko");
      Spider spider4 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider5 = spider2.downloader(phantomJSDownloader0);
      fileCacheQueueScheduler0.poll(spider5);
      Request[] requestArray0 = new Request[0];
      Spider spider6 = spider0.addRequest(requestArray0);
      assertTrue(spider6.isExitWhenComplete());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>(2689, comparator0);
      spider4.getAll((Collection<String>) priorityBlockingQueue0);
      List<Request> list0 = spider5.getAll((Collection<String>) priorityBlockingQueue0);
      Spider spider7 = spider3.startRequest(list0);
      spider6.setPipelines((List<Pipeline>) null);
      spider5.getSpiderListeners();
      spider7.getThreadAlive();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.get("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("IHUHU/mM");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("IHUHU/mM", "IHUHU/mM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_zore";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      String string0 = spider0.getUUID();
      assertNull(string0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y7X)24i+x<Yk");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u^D>sqg0{]tI0", "Running");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      spider0.run();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("e42FqsAs8");
      Spider spider0 = new Spider(simplePageProcessor1);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.sleep(358);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      Page page0 = new Page();
      linkedList0.add("threadNum should be more than one!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J6ed^Eaoh`{H53lns r");
      Page page1 = page0.setSkip(false);
      page1.getTargetRequests();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A4!0g^]?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("A4!0g^]?");
      Spider spider2 = spider1.scheduler((Scheduler) null);
      spider1.startRequest((List<Request>) null);
      spider2.setScheduler((Scheduler) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A4!0g^]?";
      stringArray0[1] = "A4!0g^]?";
      stringArray0[2] = "A4!0g^]?";
      stringArray0[3] = "A4!0g^]?";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d:Yf]dkm");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      Page page0 = new Page();
      Page page1 = page0.setRawText("*/fw5!@<r'@\"D7l_");
      List<Request> list0 = page1.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.checkIfRunning();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("T|_Uh");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.stop();
      spider1.getStartTime();
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Page{request=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a+<");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("a+<");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 4, 2013, timeUnit1, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      BlockingQueue<Runnable> blockingQueue0 = threadPoolExecutor0.getQueue();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor1 = new ThreadPoolExecutor(4, 2013, 1L, timeUnit0, blockingQueue0, threadFactory1);
      Spider spider2 = spider1.thread((ExecutorService) threadPoolExecutor1, 31);
      Spider spider3 = spider2.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      spider4.extractAndAddRequests((Page) null, false);
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("IHUHU/mM");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<Request> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      Spider spider3 = spider2.startRequest(list0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider5.test(stringArray0);
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("g");
      spider0.getPageCount();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      Json json0 = new Json("g");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("IHUHU/mM");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Init", ")|h)B}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(56, threadFactory0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.run();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }
}
