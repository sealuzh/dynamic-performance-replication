/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:27:34 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("@a^9'B=4A>NCZXh*V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(7);
      compressedVector0.toCSV();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      String string0 = compressedVector0.toCSV();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1252, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt((-1339));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(7, 306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(13);
      compressedVector0.swapElements(180, 13);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(8, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 10.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(13);
      compressedVector0.swapElements(13, 13);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(21, 21);
      compressedVector0.setAll(21);
      compressedVector0.toCSV();
      compressedVector0.swapElements(21, 21);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 19;
      int[] intArray0 = new int[2];
      intArray0[0] = 19;
      intArray0[1] = Integer.MAX_VALUE;
      CompressedVector compressedVector0 = new CompressedVector(19, Integer.MAX_VALUE, doubleArray0, intArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      compressedVector0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        compressedVector0.nonZeroAt(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1252).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1252, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      compressedVector0.setAll(10);
      compressedVector0.nonZeroAt(10);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1550);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)6, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(10);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(10, compressedVector1.cardinality());
      assertEquals(10, compressedVector1.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(1, 1.0, (Random) mockRandom0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(54);
      assertNotNull(compressedVector0);
      assertEquals(54, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.getOrElse(10, 10);
      assertEquals(10.0, double0, 0.01);
      assertEquals(54, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(1097, (-1509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1509.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      
      compressedVector0.setAll(10);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(5, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1722);
      assertNotNull(compressedVector0);
      assertEquals(1722, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1722);
      assertEquals(1722, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1722, compressedVector0.cardinality());
      
      compressedVector0.sliceLeft(1722);
      int int0 = (-535);
      compressedVector0.swapElements(int0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(10);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(100.0, double0, 0.01);
      assertEquals(10, compressedVector0.length());
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(16, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-261), (double) (-261), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(39, 39);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(39, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(39);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(39, compressedVector0.cardinality());
      assertEquals(39, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply((double) 39);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(39, compressedVector0.cardinality());
      assertEquals(39, compressedVector0.length());
      assertEquals(39, compressedVector1.cardinality());
      assertEquals(39, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.zero(39);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(39, compressedVector2.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 13;
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 13.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = compressedVector1.sum();
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(13.0, double0, 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 13.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector1.setAll(2416.1866793908785);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 13.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector2 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertNull(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1337);
      assertNotNull(compressedVector0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.479431563201197E-4, compressedVector0.density(), 0.01);
      assertEquals(1337, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2045222521, 1613);
      assertNotNull(compressedVector0);
      assertEquals(2045222521, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1757);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(2045222521, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1757, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1513));
      assertNotNull(integer0);
      assertEquals((-1513), (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1716);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(180);
      assertNotNull(compressedVector0);
      assertEquals(180, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)180, Double.NEGATIVE_INFINITY, (double)2, (double)2, (-2765.1410719294)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.transform(vectorFunction0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(180, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(180, compressedVector1.length());
      assertEquals(180, compressedVector1.cardinality());
      
      CompressedVector compressedVector2 = new CompressedVector(180, 180);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(180, compressedVector2.length());
      
      boolean boolean0 = compressedVector2.nonZeroAt(1763);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(boolean0);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(180, compressedVector2.length());
      
      compressedVector1.set(3, 0.0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertEquals(180, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.9944444444444445, compressedVector1.density(), 0.01);
      assertEquals(180, compressedVector1.length());
      assertEquals(179, compressedVector1.cardinality());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)5;
      CompressedVector compressedVector3 = (CompressedVector)compressedVector1.copy();
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertEquals(180, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.9944444444444445, compressedVector1.density(), 0.01);
      assertEquals(180, compressedVector1.length());
      assertEquals(179, compressedVector1.cardinality());
      assertEquals(180, compressedVector3.length());
      assertEquals(0.9944444444444445, compressedVector3.density(), 0.01);
      assertEquals(179, compressedVector3.cardinality());
      
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-106);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-73);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(43, 43);
      assertNotNull(compressedVector0);
      assertEquals(43, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(43);
      assertEquals(43, compressedVector0.cardinality());
      assertEquals(43, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4, vectorFunction0);
      assertEquals(43, compressedVector0.length());
      assertEquals(42, compressedVector0.cardinality());
      assertEquals(0.9767441860465116, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1722, 1722);
      assertNotNull(compressedVector0);
      assertEquals(1722, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1722);
      assertEquals(1722, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1722, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(1703);
      assertTrue(boolean0);
      assertEquals(1722, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1722, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16, 16);
      assertNotNull(compressedVector0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(16);
      assertEquals(16, compressedVector0.length());
      assertEquals(16, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(16, compressedVector0.length());
      assertEquals(16, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(16, compressedVector1.length());
      assertEquals(16, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37, 37);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(37);
      assertEquals(37, compressedVector0.length());
      assertEquals(37, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(37, (-1));
      assertEquals(37, compressedVector0.length());
      assertEquals(37, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1714, 1714);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1714, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1714);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1714, compressedVector0.cardinality());
      assertEquals(1714, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-535));
      assertFalse(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1714, compressedVector0.cardinality());
      assertEquals(1714, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      
      compressedVector0.setAll(17);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(17, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(17, compressedVector1.length());
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(17);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(17, compressedVector1.length());
      assertEquals(17, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17, 17);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(17);
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17, (-909.0), (double)17, (double)17, (-214.79808)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(17, compressedVector1.length());
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copyOfLength(17);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(17, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(17, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(17, compressedVector1.length());
      assertEquals(17, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 749.019262969;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(749.019262969, 749.019262969, (-5012.760107849011)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(16);
      assertFalse(boolean0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertNotNull(sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      ((CompressedVector) sparseVector0).setAll((-429.7724381052684));
      assertNotSame(sparseVector0, compressedVector0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(3, sparseVector0.length());
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      assertNotNull(sparseVector1);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(sparseVector1, sparseVector0);
      assertFalse(sparseVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector1.equals((Object)sparseVector0));
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector1.density(), 0.01);
      assertEquals(0, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      compressedVector0.setAll((-3237.3327133224));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector0.equals((Object)sparseVector1));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 749.019262969, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(13);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(314);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(314, compressedVector1.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(13, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector1.setAll(13);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(314, compressedVector1.cardinality());
      assertEquals(314, compressedVector1.length());
      
      byte[] byteArray1 = compressedVector1.toBinary();
      assertNotNull(byteArray1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(314, compressedVector1.cardinality());
      assertEquals(314, compressedVector1.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector3 = CompressedVector.fromBinary(byteArray1);
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(314, compressedVector1.cardinality());
      assertEquals(314, compressedVector1.length());
      assertEquals(1.0, compressedVector3.density(), 0.01);
      assertEquals(314, compressedVector3.length());
      assertEquals(314, compressedVector3.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.setAll(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5);
      compressedVector0.setAll(5);
      Matrix matrix0 = compressedVector0.toDiagonalMatrix();
      Vector vector0 = compressedVector0.multiply(matrix0);
      compressedVector0.subtract(vector0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      compressedVector0.setAll(10);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(25);
      compressedVector0.setAll(25);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2676), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      compressedVector0.setAll(10);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(8, (-4223));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      compressedVector0.setAll(10);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(16, 16);
      compressedVector0.setAll(16);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-70), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(10, 10);
      compressedVector0.setAll(10);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-4223), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1263, 1263);
      compressedVector0.setAll(1263);
      compressedVector0.swapElements(19, 3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, (double[]) null, intArray0);
      compressedVector0.sliceLeft(2);
      compressedVector0.blankOfLength(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Byte byte0 = new Byte((byte)0);
      hashMap0.put((Integer) 2, byte0);
      // Undeclared exception!
      try { 
        Vector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3909);
      compressedVector0.setAll(3909);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(777, vectorFunction0);
      compressedVector0.swapElements(3909, 1693);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1722, 1722);
      compressedVector0.setAll(1722);
      compressedVector0.add((double) 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      compressedVector0.swapElements(1703, 2074);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3909);
      compressedVector0.setAll(3909);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2654, vectorFunction0);
      compressedVector0.swapElements((-995), 1717);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3909);
      compressedVector0.setAll(3909);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1717, vectorFunction0);
      compressedVector0.swapElements(2255, (-3039));
  }
}
