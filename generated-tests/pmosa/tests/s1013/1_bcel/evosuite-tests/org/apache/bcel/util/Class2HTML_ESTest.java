/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:17:46 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "[PVJ^o.Se,x$B{b|,-";
      ClassPath classPath0 = new ClassPath("[PVJ^o.Se,x$B{b|,-");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "[PVJ^o.Se,x$B{b|,-");
      Class2HTML.toHTML("[PVJ^o.Se,x$B{b|,-");
      classPath0.toString();
      // Undeclared exception!
      try { 
        Class2HTML.referenceClass(2068);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2068. Constant pool size is: 62
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.reflect.GenericDeclaration");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "java.lang.reflect.GenericDeclaration");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class2HTML.referenceType("m");
      Class2HTML.toHTML("</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\">\n<FRAME NAME=\"ConstantPool\" SRC=\"";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "->d";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "->d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class2HTML.toHTML("-zip");
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      classLoaderRepository0.getClassPath();
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "qXs{=Xvv$yRZYu]+");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-zip";
      stringArray0[1] = "-zip";
      stringArray0[2] = "qXs{=Xvv$yRZYu]+";
      stringArray0[3] = "v";
      stringArray0[4] = "-zip";
      stringArray0[5] = "qXs{=Xvv$yRZYu]+";
      stringArray0[6] = "-zip";
      stringArray0[7] = "-zip";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // -zip (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "-zAp";
      Class2HTML.toHTML("-zAp");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-zAp";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "-d";
      stringArray0[4] = "-d";
      stringArray0[5] = "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\"^\nGFRAME NAME=\"ConstaMtPool\" rRC=\"";
      stringArray0[6] = "</TITLE></HEAD>\n<FRAMESET BORDER=1 cols=\"30%,*\">\n<FRAMESET BORDER=1 rows=\"80%,*\"^\nGFRAME NAME=\"ConstaMtPool\" rRC=\"";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "-d";
      stringArray0[4] = "-d";
      stringArray0[5] = "-d";
      stringArray0[6] = "-d";
      stringArray0[7] = "/3?c^/@1iddn_^W#/";
      stringArray0[8] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      
      javaClass0.setClassName("crE#Gj+iOB");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "org.apache.commons.io.filefilter.RegexFileFilter");
      String string0 = Class2HTML.referenceType("Xk/*!{lV/c%t5");
      assertEquals("<A HREF=\"Xk/*!{lV/c%t5.html\" TARGET=_top>Xk.*!{lV.c%t5</A>", string0);
  }
}
