/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 23:53:46 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(1885.9475914);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(1885.9475914);
      Double double1 = new Double(1885.9475914);
      JSONObject jSONObject1 = new JSONObject();
      Double.max(1885.9475914, 1885.9475914);
      Double.max(0.0, 0.0);
      Float float0 = new Float((-1312.83F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float float1 = new Float((-1046.0F));
      JSONObject jSONObject2 = new JSONObject(float1, stringArray0);
      Double.sum(0.0, 1885.9475914);
      jSONObject0.optInt("0;Y", 13);
      Long.valueOf((long) 13);
      Byte byte0 = new Byte((byte)62);
      JSONObject.valueToString(double0, 1499, 45);
      JSONObject jSONObject3 = new JSONObject();
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\f", (-1L));
      jSONObject1.optInt("\f");
      JSONObject.valueToString(jSONObject0);
      jSONObject1.getInt("\f");
      Integer.getInteger("wheel.json.JSONObject@0000000001", 27);
      Integer integer0 = new Integer((-1548));
      Float float0 = new Float((-1.0));
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) float0);
      jSONObject2.getString("wheel.json.JSONObject@0000000001");
      Float.min(487.0F, (-1.0F));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("wheel.json.JSONObject@0000000001");
      Boolean boolean0 = new Boolean(true);
      JSONObject.doubleToString((-1.0F));
      Long long0 = new Long((-2234L));
      JSONObject.doubleToString((-1548));
      JSONObject.quote("isaddFirst");
      JSONObject jSONObject3 = jSONObject0.put("isaddFirst", (-5036L));
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject3.getBoolean("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\f", (-2224L));
      JSONObject.valueToString(jSONObject0);
      JSONObject.doubleToString(27);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wheel.json.JSONObject@0000000001";
      stringArray0[1] = "\f";
      stringArray0[2] = "wheel.json.JSONObject@0000000001";
      stringArray0[3] = "getvalueOf";
      stringArray0[4] = "27";
      int int0 = 91;
      jSONObject1.toString(65, 91);
      jSONObject1.optLong("\f");
      jSONObject0.optBoolean("getvalueOf");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 1.0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Long long0 = new Long(2146L);
      JSONTokener jSONTokener0 = new JSONTokener("{>#L3");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {>#L3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Long long0 = new Long(193L);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", long0);
      double double0 = jSONObject1.getDouble("null");
      assertEquals(193.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.doubleToString((-2099.1));
      Float float0 = new Float((-184.16946F));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      hashMap0.put((Object) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      jSONObject0.toString();
      jSONObject0.isNull("-2099.1");
      try { 
        jSONObject0.get("q{1$7-2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q{1$7-2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("", 123);
      Double double0 = new Double(0);
      Double.sum(0.0, 0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject.getNames((Object) "");
      jSONObject0.optInt("");
      jSONObject1.remove("");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Double double1 = new Double(0);
      JSONObject jSONObject3 = jSONObject2.putOpt("", double1);
      jSONObject1.toString(123);
      jSONObject2.optLong("K O26{\"6u@+Nh");
      jSONObject1.optBoolean(" of ");
      jSONObject1.opt("");
      Double.sum(0.0, 0.0);
      Float float0 = new Float((float) 0L);
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      jSONObject2.accumulate("0", jSONObject3);
      Integer integer0 = new Integer(16);
      jSONObject3.toString();
      JSONObject jSONObject4 = new JSONObject("K O26{\"6u@+Nh", stringArray0);
      Object object1 = JSONObject.NULL;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject.getNames(jSONObject0);
      Integer integer0 = new Integer(24);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "7S-8T_");
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optBoolean("wheel.json.JSONObject@0000000001");
      JSONObject.getNames(jSONObject1);
      JSONObject.quote("7S-8T_");
      JSONObject.getNames((Object) hashMap0);
      Boolean boolean0 = new Boolean(false);
      String string0 = "{}";
      try { 
        jSONObject1.getBoolean("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer(27);
      Integer integer2 = new Integer(24);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "dou");
      Integer.compare(1877, 27);
      jSONObject1.optBoolean("wheel.json.JSONObject@0000000001");
      JSONObject.getNames(jSONObject1);
      Object object0 = jSONObject0.opt("wheel.json.JSONObject@0000000001");
      Long long0 = Long.getLong("dou", (long) 1877);
      Long.getLong("Jodhm}5g'|*N", (long) 1877);
      jSONObject1.accumulate("istoArray", jSONObject0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) long0);
      String string0 = JSONObject.numberToString(long0);
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      jSONObject0.isNull("jhmvvAO");
      Float float0 = new Float((double) 0L);
      Float.min(38.426254F, 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean(true);
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("wheel.json.JSONObject@0000000001");
      Long long1 = new Long(0L);
      JSONObject.doubleToString(0L);
      jSONObject0.optJSONArray("");
      JSONObject.quote("5M;\"Yn(LR)i?/4?BpZV");
      boolean boolean1 = new Boolean(true);
      jSONObject2.put("\"5M;\"Yn(LR)i?/4?BpZV\"", 0L);
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONObject1.getJSONObject("A)~-N!zu 0$;yK3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A)~-N!zu 0$;yK3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = new Object();
      Float float0 = new Float((-0.4196426636748414));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "kTyP";
      JSONObject jSONObject1 = jSONObject0.put("kTyP", true);
      int int0 = 1877;
      Integer.compare(1877, 1877);
      jSONObject1.optBoolean("kTyP");
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "kTyP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = new Double(0);
      JSONObject.getNames((Object) double0);
      jSONObject0.optInt("");
      jSONObject1.remove("");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Double double1 = new Double(0);
      JSONObject jSONObject3 = jSONObject2.putOpt("", double1);
      jSONObject1.toString(0);
      long long0 = jSONObject2.optLong("K O26{\"6u@+Nh");
      jSONObject1.opt(": ");
      Float float0 = new Float((float) 0L);
      JSONObject.valueToString(float0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject2.accumulate("", object0);
      jSONObject1.length();
      jSONObject3.toString();
      jSONObject4.optLong("*&T)", 0L);
      assertEquals(2, jSONObject2.length());
      
      long long1 = jSONObject0.optLong("", 0L);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      JSONObject jSONObject2 = jSONObject1.append("{}", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject.getNames(jSONObject2);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(object0);
      jSONObject0.keys();
      Short short0 = new Short((short) (-1624));
      Integer integer0 = new Integer(1);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("'");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('y');
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.write(stringWriter0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.optString("'");
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap1);
      jSONObject2.getJSONObject("");
      JSONObject jSONObject3 = jSONObject0.put("vc~wI5,&>`NsWEGK2bP", true);
      assertNotSame(jSONObject3, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer(3997);
      Integer integer2 = new Integer(27);
      Integer integer3 = new Integer(24);
      Integer integer4 = new Integer(24);
      Double double0 = new Double(27);
      Integer.toUnsignedString(9);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "L");
      jSONObject1.optLong("-2647.374501.", (long) 3997);
      jSONObject1.toString(67, (-651));
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": \"java.lang.String@0000000003\"}");
      JSONObject.quote("o4&n]6bA\"l]");
      JSONObject.quote("] not found.");
      jSONObject1.put("Expected a ',' or '}'", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("Expected a ',' or '}'");
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmbvvAO", "jhmbvvAO");
      Double.isFinite(0.0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmbvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject0.accumulate("{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", double0);
      jSONObject2.toString();
      JSONObject jSONObject4 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("wheel.json.JSONObject@0000000001");
      jSONObject1.optString("Nb", "{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      Long long0 = Long.valueOf((-41L));
      Long.getLong("wheel.json.JSONObject@0000000001");
      JSONObject.valueToString(long0);
      jSONObject2.getInt("{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONArray0.optLong(0);
      jSONObject1.length();
      jSONObject0.optString("isdoubleToRawLongB4ts", "{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject.quote("{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject.quote("java.lang.Long@0000000014");
      JSONObject jSONObject5 = jSONObject3.put("Gt#|F#k]@", (Map) null);
      jSONObject4.optJSONObject("Nb");
      jSONObject5.getDouble("{\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      assertEquals(6, jSONObject3.length());
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      Iterator iterator0 = jSONObject2.keys();
      jSONObject2.optJSONArray("jhmvvAO");
      jSONObject1.optBoolean("getadd");
      JSONObject.valueToString(iterator0, 287, 120);
      Object object0 = new Object();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject0.toString(530, 123);
      jSONObject2.optJSONArray("f_jr?T");
      JSONObject.quote("wheel.json.JSONObject@0000000001");
      JSONObject.quote("\"");
      JSONObject jSONObject4 = jSONObject3.put("\"", (Map) null);
      assertSame(jSONObject4, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(object0);
      Short short0 = new Short((short)91);
      JSONObject jSONObject1 = new JSONObject(short0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.keys();
      jSONObject0.optJSONArray("\f");
      jSONObject1.optBoolean("\f");
      JSONObject.valueToString((Object) null, 1809, 1215);
      Object object1 = new Object();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString(1215, 13);
      jSONObject2.optJSONArray("t(O");
      JSONObject.quote("null");
      JSONObject.quote("\f");
      JSONObject jSONObject3 = jSONObject0.put("", (Map) null);
      assertSame(jSONObject0, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Boolean boolean0 = new Boolean("sum");
      String[] stringArray0 = new String[20];
      stringArray0[0] = "jhmvvAO";
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short) (-1803));
      JSONObject jSONObject4 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject0.toString(72, 72);
      Object object0 = new Object();
      JSONObject.numberToString(double0);
      jSONObject2.optLong("jhmvvAO");
      JSONTokener jSONTokener0 = new JSONTokener("sum");
      JSONObject jSONObject5 = new JSONObject("{\n                                                                                                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                                                                                                                                                \"java.lang.String@0000000009\": [\"java.lang.String@0000000009\"]\n                                                                        }");
      JSONObject.valueToString((Object) null, 48, 102);
      Object object1 = new Object();
      JSONObject jSONObject6 = new JSONObject(object1);
      JSONObject jSONObject7 = null;
      try {
        jSONObject7 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sum
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Pk";
      Collection<Integer> collection0 = null;
      JSONObject jSONObject1 = jSONObject0.put("Pk", (Collection) null);
      jSONObject0.getJSONArray("Pk");
      jSONObject1.optBoolean("val", false);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getBoolean("Pk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      stringWriter1.close();
      jSONObject1.write(stringWriter1);
      JSONObject.valueToString(jSONObject1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Collection) linkedList1);
      jSONObject2.toString((-2869), 42);
      Float float0 = new Float((float) (-2869));
      Float float1 = new Float((double) 0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float2 = new Float((double) 0);
      linkedList2.add(float2);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject2.toJSONArray(jSONArray0);
      assertNull(jSONArray2);
      
      Integer integer0 = new Integer((-2869));
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Collection) null);
      JSONObject jSONObject3 = jSONObject0.put("wheel.json.JSONObject@0000000001", (-1L));
      double double0 = jSONObject3.optDouble("wheel.json.JSONObject@0000000001");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer((-1548));
      Integer integer2 = new Integer(27);
      Integer integer3 = new Integer(24);
      Integer integer4 = new Integer(24);
      Double double0 = new Double(27);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "{");
      jSONObject1.optLong("wheel.json.JSONObject@0000000001", (long) (-1548));
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject@0000000001", false);
      Integer.compare(1877, 27);
      jSONObject1.optBoolean("wheel.json.JSONObject@0000000001");
      JSONObject.getNames(jSONObject1);
      jSONObject2.accumulate("#|", integer1);
      String string0 = JSONObject.doubleToString((-2647.374501));
      jSONObject0.optLong("#|", (-121L));
      JSONObject.doubleToString(27);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      String string1 = JSONObject.valueToString(integer3, 27, 128);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String[] stringArray0 = JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer((-1548));
      hashMap0.put("#|", integer1);
      hashMap0.put("wheel.json.JSONObject@0000000001", integer0);
      Integer integer2 = new Integer(27);
      Integer integer3 = new Integer(24);
      Integer integer4 = new Integer(24);
      Double double0 = new Double(27);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "wheel.json.JSONObject@0000000001");
      JSONObject jSONObject2 = jSONObject0.put("THfxK5Dwi7 rLxi=H", false);
      Integer.compare(1877, 27);
      jSONObject1.optBoolean("wheel.json.JSONObject@0000000001");
      Object object0 = JSONObject.NULL;
      Double double1 = new Double((-2647.374501));
      JSONObject jSONObject3 = new JSONObject(double1, stringArray0);
      jSONObject0.has("Expected '");
      JSONObject.numberToString(integer0);
      jSONObject2.opt("");
      try { 
        jSONObject1.getJSONObject("5d?}:z#1qC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5d?}:z#1qC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.isNull("B)|^T");
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long(0L);
      Float float0 = new Float((-886.43));
      Float.min(1.0F, 0.0F);
      JSONObject.quote("B)|^T");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Long long1 = new Long((-1120L));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("\"B)|^T\"");
      Object object0 = JSONObject.NULL;
      jSONObject0.has((String) null);
      JSONObject.numberToString(long0);
      jSONObject0.opt("\"\"B)|^T\"\"");
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", jSONObject0);
      JSONObject.getNames(jSONObject1);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      jSONObject1.getJSONObject("wheel.json.JSONObject@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      Float.max((-185.53055F), 1800.4093F);
      int int0 = 1854;
      Integer integer0 = new Integer(1854);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      Integer integer1 = new Integer(0);
      jSONObject2.keys();
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("oYf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of oYf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      int int0 = 27;
      Integer integer0 = new Integer(27);
      Integer integer1 = new Integer((-1548));
      hashMap0.put("#|", integer1);
      hashMap0.put("wheel.json.JSONObject@0000000001", integer0);
      Integer integer2 = new Integer(27);
      Integer integer3 = new Integer(24);
      Integer integer4 = new Integer(24);
      Double double0 = new Double(27);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) "{");
      JSONObject jSONObject2 = jSONObject0.put("THfxK5Dwi7 rLxi=H", false);
      Integer.compare(1877, 27);
      jSONObject1.optBoolean("wheel.json.JSONObject@0000000001");
      JSONObject.getNames(jSONObject1);
      jSONObject2.accumulate("#|", integer1);
      JSONObject.doubleToString((-2647.374501));
      jSONObject0.optLong("THfxK5Dwi7 rLxi=H", (-121L));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(".-Ubeahp9qHMh", (Object) null);
      jSONObject1.put("Xf +S_", (Object) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*&";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      hashMap0.put("*&", jSONObject2);
      jSONObject2.put(".-Ubeahp9qHMh", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("3_]7d\"w!}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3_]7d\\\"w!}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      jSONObject0.toString();
      String string0 = "";
      JSONObject jSONObject3 = jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optString("Nb", "");
      jSONObject2.getInt("");
      jSONArray0.optLong(0);
      jSONObject1.length();
      jSONObject0.optDouble("Nb");
      jSONObject0.optString("isdoubleToRawLongB4ts", "");
      jSONObject1.optBoolean("");
      JSONObject.numberToString(double0);
      jSONObject2.has("get");
      JSONObject jSONObject4 = jSONObject3.put("", true);
      jSONObject2.names();
      jSONObject4.names();
      jSONObject3.names();
      Object object0 = new Object();
      try { 
        jSONObject2.append("", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("AbQq*\"Jv,~k76", 1579L);
      jSONObject0.optDouble("AbQq*\"Jv,~k76");
      Integer integer0 = new Integer(87);
      JSONObject jSONObject2 = jSONObject1.putOpt("AbQq*\"Jv,~k76", integer0);
      JSONObject jSONObject3 = jSONObject2.accumulate("AbQq*\"Jv,~k76", "AbQq*\"Jv,~k76");
      jSONObject1.keys();
      jSONObject2.optDouble("Expected a ',' or ']'");
      try { 
        jSONObject3.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}", 0, 0);
      Writer writer0 = jSONArray0.write(stringWriter1);
      jSONObject1.write(writer0);
      JSONObject.valueToString(jSONObject1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Collection) linkedList1);
      jSONObject2.toString((-2869), 42);
      Float float0 = new Float((float) (-2869));
      Float float1 = new Float((double) 0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float2 = new Float((double) 0);
      linkedList2.add(float2);
      linkedList2.stream();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      Integer integer0 = new Integer((-2869));
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Collection) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject("{}", stringArray0);
      jSONObject3.toString(0, 35);
      Object object0 = new Object();
      JSONObject.numberToString(float2);
      jSONObject1.optLong((String) null);
      boolean boolean0 = jSONObject1.optBoolean("getcompare");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optString("Nb", "");
      Long long0 = Long.valueOf(1L);
      JSONObject.valueToString(long0);
      jSONObject2.getInt("");
      jSONArray0.optLong(0);
      jSONObject1.length();
      jSONObject0.optString("isdoubleToRawLongB4ts", "");
      jSONObject1.optBoolean("");
      JSONObject.numberToString(double0);
      jSONObject2.has("");
      JSONObject jSONObject4 = jSONObject3.put("", false);
      jSONObject2.names();
      jSONObject4.names();
      jSONObject3.names();
      try { 
        jSONObject3.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      jSONObject1.getJSONArray("jhmvvAO");
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "Nb";
      jSONObject1.optString("Nb", "");
      Long long0 = Long.valueOf(1L);
      JSONObject.valueToString(long0);
      jSONObject2.getInt("");
      jSONArray0.optLong(0);
      jSONObject1.length();
      jSONObject0.optString("isdoubleToRawLongB4ts", "");
      jSONObject2.toString(11, (-1234));
      jSONObject1.optBoolean("");
      jSONObject2.has("get");
      JSONObject jSONObject4 = jSONObject3.put("", true);
      jSONObject2.names();
      jSONObject4.names();
      jSONObject3.names();
      try { 
        jSONObject3.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) ",\n");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-721));
      hashMap0.put("isjoin", integer0);
      Integer integer1 = new Integer((-1816));
      Integer integer2 = new Integer((-1816));
      Integer integer3 = new Integer(2888);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "6idM.j2VXS6";
      jSONObject0.optBoolean("2lWb", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string1 = "0";
      jSONObject0.isNull("0");
      JSONObject jSONObject2 = jSONObject1.put("{", (Object) jSONObject0);
      jSONObject2.getLong("isjoin");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("", (-265L));
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject1.optBoolean("");
      Integer integer0 = new Integer((-1905));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.putIfAbsent("{", integer0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optBoolean("", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject2.isNull("getreplaceAll");
      jSONObject1.put("in", (Object) "Null key.");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", jSONObject1);
      jSONObject0.optLong("wheel.json.JSONObject@0000000001", (-2094L));
      jSONObject1.append("getisNaN", "wheel.json.JSONObject@0000000001");
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      linkedList0.add("wheel.json.JSONObject@0000000001");
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optBoolean("{}", false);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(jSONArray0);
      jSONObject3.optBoolean("ejnsu/Soi", false);
      jSONObject2.optJSONObject("wheel.json.JSONObject@0000000001");
      try { 
        jSONObject4.get("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.optString("Nb", "");
      Long long0 = Long.valueOf(1L);
      JSONObject.valueToString(long0);
      jSONObject2.getInt("");
      jSONArray0.optLong(0);
      jSONObject1.length();
      jSONObject0.optString("isdoubleToRawLongB4ts", "");
      jSONObject2.toString(11, (-1234));
      jSONObject1.optBoolean("");
      JSONObject.numberToString(double0);
      jSONObject2.has("get");
      JSONObject jSONObject4 = jSONObject3.put("", true);
      jSONObject2.names();
      jSONObject4.names();
      jSONObject3.names();
      try { 
        jSONObject3.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-999L));
      JSONObject.quote("?4q2/MXE@e+");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"?4q2/MXE@e+\"";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.isNull("B)|^T");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optBoolean("va", true);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.optBoolean("ejnsu/Soi", true);
      jSONObject0.toString(34);
      jSONObject0.optJSONObject("va");
      try { 
        jSONObject0.get("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-2647.374501));
      JSONObject.getNames((Object) "-2647.374501");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(27);
      hashMap0.put("-2647.374501", integer0);
      Integer integer1 = new Integer(27);
      Integer integer2 = new Integer(24);
      Integer integer3 = new Integer(24);
      hashMap0.putIfAbsent("{", integer0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optBoolean("6idM.j2VXS6", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.getInt("-2647.374501");
      hashMap0.entrySet();
      String string0 = "[";
      try { 
        jSONObject1.getLong("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = new Boolean("isoptString");
      JSONObject.valueToString("isoptString");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"java.lang.String@0000000001\"";
      stringArray0[1] = "isoptString";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject1);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(1485.3);
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.putOpt("\r", (Object) null);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('N');
      StringWriter stringWriter2 = stringWriter1.append('\"');
      jSONObject1.write(stringWriter2);
      JSONObject.quote("isoptString");
      Float float1 = new Float(1485.3);
      JSONObject jSONObject4 = new JSONObject((Object) "java.lang.Float@00000000070");
      Float float2 = new Float(0.0);
      JSONObject.quote("isoptString");
      jSONObject3.put("isoptString", false);
      try { 
        jSONObject0.getString("muXv%HJ<%vf>b:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"muXv%HJ<%vf>b:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('z');
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = jSONObject1.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      Object object0 = new Object();
      jSONObject0.putOpt("wheel.json.JSONObject@0000000001", jSONObject1);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject@0000000001");
      stringWriter1.append('H');
      // Undeclared exception!
      jSONObject0.write(stringWriter1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt((String) null, jSONObject1);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<JSONArray, Object> hashMap1 = new HashMap<JSONArray, Object>();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append('N');
      stringWriter0.append('\"');
      jSONObject0.write(stringWriter0);
      JSONObject.quote("java.lang.Float@00000000070");
      Float float0 = new Float((double) 0);
      JSONObject jSONObject2 = new JSONObject(float0);
      Float float1 = new Float((double) 0);
      JSONObject.quote("{}");
      jSONObject2.put("islongB@itsToDouble", false);
      assertEquals(4, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.doubleToString(1039.4917839207565);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(593);
      Integer integer1 = Integer.getInteger("-2647.3745010", integer0);
      hashMap0.put("1039.4917839207565", integer1);
      Integer integer2 = new Integer((-1668));
      Integer integer3 = new Integer((-1668));
      hashMap0.putIfAbsent("1039.4917839207565", integer3);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("1039.4917839207565", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("@BLmhiB", (Map) hashMap1);
      jSONObject1.length();
      JSONObject.valueToString(linkedList0, (-1668), 237);
      jSONObject0.toString(2, 593);
      jSONObject0.optBoolean("joi");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject.doubleToString(1039.7266907488543);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Integer integer1 = new Integer((-1668));
      hashMap0.putIfAbsent("1039.7266907488543", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = new Boolean(false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("}II");
      jSONArray0.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.putOpt("`Y{-?X8[r~Jjt", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      jSONObject0.toString(18, (-1954));
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "{}");
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", boolean0);
      jSONObject2.optLong("wheel.json.JSONObject@0000000001", (long) 0);
      jSONObject2.optInt("{}");
      jSONObject2.put("a1.0", (double) 0L);
      Integer integer0 = new Integer(0);
      Integer.compare(441, (-1954));
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject1.accumulate("{}", object0);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      String string0 = "ck";
      Integer integer0 = new Integer((-748));
      Integer integer1 = new Integer((-1515));
      Integer integer2 = Integer.getInteger("ck", integer1);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer3 = new Integer((-92));
      hashMap0.put("Mo", integer3);
      Integer integer4 = new Integer(930);
      Integer integer5 = new Integer((-1515));
      hashMap0.putIfAbsent("ck", integer2);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("ck", true);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.isNull("Mo");
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      String string0 = jSONObject0.toString(18, (-1945));
      assertEquals("{}", string0);
      
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", integer0);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertEquals(5, stringArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.accumulate("{}", "{}");
      jSONObject0.optLong("Missing value", 2975L);
      int int0 = jSONObject2.optInt("P");
      assertEquals(0, int0);
      
      JSONObject jSONObject3 = new JSONObject("{}");
      Integer integer1 = new Integer(0);
      Integer.compare(441, 47);
      Object object0 = JSONObject.NULL;
      jSONObject2.accumulate("T;KHt{}ZNuh(^J; _", "wheel.json.JSONObject@0000000001");
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-2647.374501));
      JSONObject.getNames(jSONObject0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(27);
      hashMap0.put("-2647.374501", integer0);
      Integer integer1 = new Integer(27);
      Integer integer2 = new Integer(24);
      Integer.getInteger("-2647.374501", (Integer) null);
      hashMap0.putIfAbsent("{", integer0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optBoolean("6idM.j2VXS6", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.isNull("6idM.j2VXS6");
      JSONObject jSONObject2 = jSONObject1.put("6idM.j2VXS6", (Object) integer1);
      long long0 = jSONObject2.getLong("{");
      assertEquals(27L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString((-2647.374501));
      assertEquals("-2647.374501", string0);
      
      JSONObject jSONObject1 = new JSONObject((Map) null);
      Double double0 = new Double((-2647.374501));
      jSONObject0.length();
      JSONObject.quote("?4q2/MXE@e+");
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.accumulate("%:uQep+^,Vi'!|W", "?4q2/MXE@e+");
      jSONObject0.optLong("%:uQep+^,Vi'!|W", 2321L);
      int int0 = jSONObject2.optInt("?4q2/MXE@e+");
      assertEquals(0, int0);
      
      JSONObject jSONObject3 = jSONObject0.put("wai", (double) 0);
      JSONObject jSONObject4 = new JSONObject((Map) null);
      double double1 = jSONObject4.optDouble("-2647.374501");
      assertEquals(Double.NaN, double1, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject3.put("java.lang.Long@0000000001.", (Collection) linkedList1);
      jSONObject0.getLong("wai");
      boolean boolean1 = jSONObject2.optBoolean("L");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject2);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject1.accumulate("|JqpEk}", jSONArray0);
      JSONObject.valueToString(jSONObject4);
      jSONObject4.optString("Nb", "");
      jSONObject2.getInt("");
      jSONArray0.optLong(0);
      jSONObject4.length();
      jSONObject4.optString("isdoubleToRawLongB4ts", "");
      jSONObject2.toString(11, (-1234));
      jSONObject1.optBoolean("");
      JSONObject.numberToString(double0);
      jSONObject2.has("get");
      jSONObject3.put("", true);
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(0);
      jSONObject0.toString(18, (-1945));
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "{}");
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", boolean0);
      jSONObject2.optLong("wheel.json.JSONObject@0000000001", (long) 0);
      jSONObject2.optInt("{}");
      jSONObject2.put("1.0", (double) 0L);
      Integer integer0 = new Integer(0);
      Integer.compare(441, (-1945));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject1.accumulate("{}", object0);
      assertEquals(3, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = new Boolean("jhmvvAO");
      Double.min(1.0, 1.0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(jSONObject1);
      jSONObject0.toString();
      jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.accumulate("|JqpEk}", jSONArray0);
      JSONObject.valueToString(jSONObject2);
      jSONObject2.optString("Nb", "");
      jSONObject1.getInt("");
      jSONObject2.length();
      jSONObject2.optString("isdoubleToRawLongB4ts", "");
      jSONObject1.toString(0, (-1234));
      jSONObject0.optBoolean("");
      JSONObject.numberToString(double0);
      jSONObject1.has("get");
      jSONObject1.optDouble("");
      jSONObject1.names();
      jSONObject2.toString();
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject.quote((String) null);
      jSONObject0.optString("ck", "cop");
      Integer integer1 = new Integer(43);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject2 = jSONObject0.put("2yqzB]4h+7&Tiq8%$'n", (Map) hashMap0);
      jSONObject2.keys();
      jSONObject2.optBoolean("\"\"", true);
      JSONObject.getNames((Object) null);
      try { 
        jSONObject1.getDouble("2yqzB]4h+7&Tiq8%$'n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2yqzB]4h+7&Tiq8%$'n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      JSONObject.valueToString("ck");
      jSONObject0.put("ck", (Collection) null);
      Float float0 = new Float((float) 0);
      JSONObject.valueToString("\"java.lang.String@0000000004\"");
      Object object1 = new Object();
      jSONObject0.putOpt("fo", object1);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("\"java.lang.String@0000000004\"");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('g');
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float.max(1851.4513F, 1851.4513F);
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("0");
      Object object0 = new Object();
      Double double0 = new Double(1851.4513F);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", "null");
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      boolean boolean1 = jSONObject1.isNull("0");
      assertEquals(9, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "|Kd\"q";
      JSONObject jSONObject1 = jSONObject0.append("|Kd\"q", "|Kd\"q");
      jSONObject1.optInt("|Kd\"q", 8192);
      Writer writer0 = null;
      JSONObject jSONObject2 = jSONObject0.accumulate("kF9wYK8.[", (Object) null);
      jSONObject2.toString();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1039.7266907488543);
      assertEquals("1039.7266907488543", string0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Integer integer1 = new Integer((-1668));
      hashMap0.putIfAbsent("1039.7266907488543", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("1039.7266907488543", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      boolean boolean1 = jSONObject0.isNull("1039.7266907488543");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "}:");
      jSONObject0.optJSONObject("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(object0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ck";
      stringArray0[1] = "ck";
      stringArray0[2] = "3";
      stringArray0[3] = "ck";
      stringArray0[4] = "ck";
      JSONObject jSONObject2 = new JSONObject("\"java.lang.String@0000000004\"", stringArray0);
      Object object1 = new Object();
      jSONObject1.accumulate("ck", jSONObject2);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Short short0 = new Short((short)8);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      jSONObject0.toString(506, (-1));
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "{\"java.lang.String@0000000004\": [java.lang.Short@0000000005]}");
      jSONObject1.optInt("", 34);
      Object object1 = JSONObject.NULL;
      try { 
        jSONObject1.getJSONArray("isnotifyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnotifyAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Integer integer1 = new Integer(1363);
      Integer integer2 = new Integer((-1668));
      hashMap0.putIfAbsent((String) null, integer2);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean((String) null, false);
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject.doubleToString(1039.7266907488543);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-86));
      JSONObject.valueToString(integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("1039.7266907488543", (Collection) null);
      Integer integer1 = new Integer(123);
      Integer integer2 = new Integer((-86));
      JSONObject jSONObject2 = jSONObject0.accumulate("java.lang.Integer@0000000001", integer2);
      JSONObject.valueToString(integer0);
      String string0 = ",\n";
      jSONObject2.optString("java.lang.Integer@0000000001", "java.lang.Integer@0000000001");
      try { 
        jSONObject1.getInt("1039.7266907488543");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1039.7266907488543\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.containsAll(linkedList1);
      linkedList0.addFirst("Em$");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.isNull("0");
      StringWriter stringWriter0 = new StringWriter(123);
      stringWriter0.append((CharSequence) "0");
      stringWriter0.append((CharSequence) "0");
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optString("0", "<%c!FzS[(SnfL");
      jSONObject0.toString(102, (-828));
      jSONObject0.optBoolean((String) null);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString((Object) null);
      Double.isFinite(0.0);
      jSONObject0.toString();
      jSONObject0.accumulate("", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject1.accumulate("|JqpEk}", jSONArray0);
      String string0 = JSONObject.valueToString(jSONObject3);
      jSONObject3.optString("Nb", "");
      jSONObject2.getInt("");
      jSONObject3.length();
      jSONObject3.optString("isdoubleToRawLongBits", "");
      jSONObject2.toString(11, (-1234));
      jSONObject1.optBoolean("");
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      int int0 = 18;
      Double double0 = new Double((-1816.503151));
      jSONObject0.length();
      JSONObject.quote("' and instead saw '");
      JSONObject jSONObject1 = jSONObject0.put("F!u;s(k}B'", 18);
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer((-23));
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      JSONObject.valueToString((Object) null);
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject0.optJSONArray("ck");
      try { 
        jSONObject0.getString("|burAJ'plD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|burAJ'plD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "ck";
      JSONObject.valueToString((Object) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("c", (Collection) linkedList0);
      Integer integer0 = new Integer(0);
      Short short0 = new Short((short)1);
      JSONObject jSONObject2 = jSONObject1.accumulate("ck", short0);
      JSONObject.valueToString(linkedList0);
      jSONObject2.optString("null", "[]");
      try { 
        jSONObject2.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = new Object();
      jSONObject0.accumulate("Expected a ',' or ']'", object0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      JSONObject.valueToString((Object) null);
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject0.optJSONArray("ck");
      try { 
        jSONObject0.getString("|burAJ'plD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|burAJ'plD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      int int0 = 9;
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer((-996));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      jSONObject0.names();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      jSONObject0.put("", (Collection) linkedList1);
      try { 
        jSONObject0.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-4892.44));
      try { 
        jSONObject1.get("op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"op\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      Integer integer0 = new Integer((-1945));
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      boolean boolean0 = jSONObject1.has("] is not a JSONObject.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(3);
      JSONObject.testValidity(integer0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Long long0 = new Long(3);
      try { 
        jSONObject0.put((String) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.remove("{}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.append(string0, string0);
      boolean boolean0 = jSONObject1.has(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)26, (byte)0);
      jSONObject0.append("istoBinaryString", byte0);
      JSONObject jSONObject1 = jSONObject0.put("CV-_Yed;(j+o", 0.0);
      JSONObject jSONObject2 = jSONObject1.put("CV-_Yed;(j+o", (int) (byte)0);
      JSONArray jSONArray0 = jSONObject2.names();
      JSONObject.getNames(jSONObject1);
      JSONObject.valueToString(byte0);
      Object object0 = jSONObject0.get("istoBinaryString");
      jSONObject0.get("istoBinaryString");
      jSONObject0.optLong("java.lang.Byte@0000000008");
      JSONObject jSONObject3 = jSONObject2.put("istoBinaryString", true);
      jSONObject3.putOpt("java.lang.Byte@0000000008", object0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.get("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.isNull((String) null);
      jSONObject0.toString();
      jSONObject0.optLong((String) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.put((String) null, 4836.004595);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte)3);
      JSONObject.valueToString(byte0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("t@orY:{F-+;:a|rH;", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString(18, (-1945));
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000001");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("%:uQep+^,Vi'!|W", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("%:uQep+^,Vi'!|W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%:uQep+^,Vi'!|W\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      String string0 = JSONObject.valueToString(jSONObject0);
      String string1 = jSONObject0.optString((String) null, "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 15, 46);
      JSONObject.doubleToString(0.0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("U_", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.valueToString(object0, 622, 622);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 4, 4);
      assertEquals("null", string0);
      
      String string1 = jSONObject0.toString();
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.quote("eq");
      assertEquals("\"eq\"", string1);
      
      long long0 = jSONObject0.optLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optDouble("sd?1jS<");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
      
      String string1 = JSONObject.valueToString(";L}V6q.MA,Y");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Bad value from toJSONString: ", "Bad value from toJSONString: ");
      jSONObject0.getString("Bad value from toJSONString: ");
      jSONObject0.toString();
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.containsAll(linkedList1);
      linkedList0.addFirst("Em$");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      
      boolean boolean0 = jSONObject0.isNull("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      String string0 = "\"M<as";
      stringArray0[0] = "\"M<as";
      stringArray0[1] = "1.0";
      stringArray0[2] = ",";
      stringArray0[3] = "qfGeu]$z";
      stringArray0[4] = "C&A}.mpq*Jw<t&";
      stringArray0[5] = "toS";
      stringArray0[6] = "TzZ|p";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.append("\"M<as", "qfGeu]$z");
      JSONObject.getNames((Object) ",");
      jSONObject0.optInt(",");
      jSONObject0.get("\"M<as");
      try { 
        jSONObject0.getJSONArray("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Byte byte0 = new Byte((byte)108);
      String[] stringArray0 = new String[0];
      Byte.compare((byte)108, (byte)108);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("}@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("wheel.json.JSONObject@0000000001", 0.0);
      jSONObject0.optString("ent");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(": ", ": ");
      jSONObject0.toString((-4686));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("getmin");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("\"getmin\"", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("JSONArray initial value should be a string or collection or array.");
      String string1 = "I}3yV";
      JSONObject jSONObject1 = jSONObject0.accumulate("I}3yV", "I}3yV");
      String string2 = "0^%)}qtpYD";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.iterator();
      jSONObject1.put("0^%)}qtpYD", (Collection) linkedList0);
      jSONObject0.optDouble("I}3yV");
      JSONObject.getNames((Object) jSONObject1);
      String string3 = null;
      long long0 = 0L;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", (-1088));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject.doubleToString((-2151.0));
      JSONObject.valueToString(hashMap0, (-1807), 42);
      try { 
        jSONObject0.getBoolean("-2151");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-2151\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "gE[Q0\"Ne^}]O^cx 5F");
      jSONObject0.toString(21);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>(23, 23);
      String string0 = null;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", 2212L);
      Float float0 = new Float(1.0);
      String string0 = jSONObject0.optString("'", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("(:kZ'fa", (Map) hashMap0);
      String string0 = jSONObject0.toString(488, (-3021));
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Long long0 = new Long((-14482067));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("] not found.");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Integer integer0 = Integer.valueOf(4);
      Integer.sum(4, 4);
      hashMap0.put((Object) null, integer0);
      jSONObject0.toString(865, 19);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("*Tbai</9d_!7r=is2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*Tbai<\\/9d_!7r=is2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(770.2817);
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.toString();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject.doubleToString(800.8416631411);
      Integer integer0 = new Integer(3737);
      JSONObject.getNames((Object) "\"java.lang.Object@0000000002\"");
      jSONObject0.opt((String) null);
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("/YP", (Collection) linkedList0);
      jSONObject0.toString(2209);
      jSONObject0.toString((-841));
      Boolean boolean0 = new Boolean(true);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      try { 
        jSONArray0.getJSONObject((-841));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-841] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.remove((Object) jSONArray0);
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("rev", 0L);
      Float float0 = new Float(1.0);
      Float.min(0L, 0.0F);
      Float float1 = new Float(1.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>(hashMap0);
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      JSONObject jSONObject0 = new JSONObject(double0);
      hashMap1.put(long0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>(hashMap0);
      Float.isFinite(0.0F);
      JSONObject.valueToString(hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(938);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[938] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("get");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optInt("./d!8Ve;Co!l'_xaD", 13);
      try { 
        jSONObject1.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Float float0 = new Float(Double.NaN);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-2260));
      assertEquals("{}", string0);
      
      Long long0 = new Long((-2260));
      JSONObject.numberToString(long0);
      JSONObject jSONObject1 = new JSONObject((Object) "java.lang.Long@0000000002");
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("}@", (-837.4));
      assertEquals((-837.4), double0, 0.01);
      
      jSONObject0.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Float float0 = new Float(Double.NaN);
      Float.max(0.0F, 0.0F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      JSONObject.numberToString(long0);
      jSONObject0.put("java.lang.Long@0000000002", 147.5);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Long@0000000002", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "1");
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(34, 2610);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), 693);
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or '}'", 101);
      int int0 = jSONObject2.optInt("Expected a ',' or '}'", 101);
      assertEquals(101, int0);
      
      String[] stringArray1 = new String[7];
      stringArray1[0] = "{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}";
      stringArray1[1] = "Expected a ',' or '}'";
      stringArray1[3] = "Expected a ',' or '}'";
      stringArray1[4] = "isvalueOf";
      stringArray1[5] = "{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}";
      stringArray1[6] = "Expected a ',' or '}'";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray1);
      JSONObject.valueToString(jSONObject3);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.poll();
      jSONObject2.put("isvalueOf", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      jSONObject0.put("JSONArray[", (Collection) linkedList0);
      String string0 = JSONObject.quote("47U#");
      assertEquals("\"47U#\"", string0);
      
      long long0 = jSONObject0.optLong("(35%I5-h,AQ", 2870L);
      assertEquals(2870L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      JSONObject.numberToString(float0);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("M.]Wn(]", (Object) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject1.toString(39, 2941);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)2);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.put((String) null, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(".}", (-3932.0));
      assertEquals((-3932.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.doubleToString(58.451);
      JSONObject jSONObject0 = new JSONObject((Object) "58.451");
      // Undeclared exception!
      jSONObject0.toString(4830);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AhBKL$z#[-[1Lx9`";
      stringArray0[2] = "AhBKL$z#[-[1Lx9`";
      stringArray0[3] = "AhBKL$z#[-[1Lx9`";
      stringArray0[4] = "AhBKL$z#[-[1Lx9`";
      stringArray0[5] = "AhBKL$z#[-[1Lx9`";
      stringArray0[6] = "AhBKL$z#[-[1Lx9`";
      stringArray0[7] = "AhBKL$z#[-[1Lx9`";
      stringArray0[8] = "AhBKL$z#[-[1Lx9`";
      JSONObject jSONObject0 = new JSONObject("AhBKL$z#[-[1Lx9`", stringArray0);
      long long0 = jSONObject0.optLong(stringArray0[1]);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 1736);
      jSONObject1.putOpt("false", "false");
      long long0 = jSONObject1.optLong("false");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.doubleToString(58.451);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getLong("58.451");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"58.451\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.doubleToString(58.451);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 1736);
      long long0 = jSONObject1.optLong("false");
      assertEquals(1736L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.doubleToString(58.451);
      assertEquals("58.451", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      jSONObject0.put("58.451", (Map) hashMap0);
      int int0 = jSONObject0.optInt("-67.6221350411.", 5);
      assertEquals(5, int0);
      
      jSONObject0.optString("58.451");
      long long0 = jSONObject0.optLong("wa");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(48);
      JSONObject.valueToString(stringWriter0, 48, 48);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"java.io.StringWriter@0000000002\"");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "\"java.io.StringWriter@0000000002\"", 12, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject.doubleToString(1039.7266907488543);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Integer integer1 = new Integer((-1668));
      hashMap0.putIfAbsent("1039.7266907488543", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("1039.7266907488543", false);
      JSONObject.getNames((Object) null);
      jSONObject0.getDouble("1039.7266907488543");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("1039.7266907488543");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.remove((Object) jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("] not found.", 2782.520342);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = "f$0vZ4G(C)Q,";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("f$0vZ4G(C)Q,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of f$0vZ4G(C)Q,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "Null pointer";
      String string1 = "YSV6(w\\oHls#8g";
      JSONObject.quote("YSV6(woHls#8g");
      JSONObject.valueToString("Null pointer");
      JSONObject jSONObject0 = new JSONObject((Object) "Null pointer");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-3766));
      assertEquals((-3766), int0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("LusQaTFOTW!K<K", (Collection) linkedList0);
      double double0 = jSONObject0.optDouble("LusQaTFOTW!K<K", 360.0);
      assertEquals(360.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      Integer integer0 = new Integer(97);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1066.559433);
      assertEquals("1066.559433", string0);
      
      Integer integer0 = new Integer((-533));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer(926);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap1.computeIfAbsent("1066.559433", function0);
      int int0 = Integer.max(926, 926);
      hashMap1.putIfAbsent("va", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = jSONObject0.get("va");
      assertTrue(object0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "{N}.6yc3_Zs1[[-y";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "[]";
      jSONObject0.optLong("[]", (-1924L));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("{N}.6yc3_Zs1[[-y", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("JSONArray[", (Collection) linkedList0);
      try { 
        Byte.decode("\"\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = JSONObject.doubleToString(58.451);
      assertEquals("58.451", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("{N}.6yp3_Zs1j[U-'");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(22);
      hashMap0.putIfAbsent("{N}.6yp3_Zs1j[U-'", integer0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("{N}.6yp3_Zs1j[U-'", (double) 22);
      jSONObject0.optBoolean("isreverseBytes", true);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ".";
      stringArray0[3] = "get";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString(47, 47);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.quote("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("JSONArray[", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "{N}.6yc3_Zs1j[-y";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Map) null);
      try { 
        Byte.decode("{N}.6yc3_Zs1j[-y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{N}.6yc3_Zs1j[-y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject.doubleToString((-799.89695));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Integer integer1 = new Integer((-1668));
      hashMap0.putIfAbsent("-799.89695", integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("-799.89695", false);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "is";
      JSONObject jSONObject0 = new JSONObject("is", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "is");
      jSONObject0.opt("is");
      StringWriter stringWriter1 = stringWriter0.append('$');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      hashMap0.computeIfAbsent("AVifX8f7", function0);
      Integer integer1 = new Integer((-1668));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("AVifX8f7", (-1.0));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ent", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "#U,5-MT[#;1zJDP`0");
      try { 
        jSONObject0.getString("#U,5-MT[#;1zJDP`0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#U,5-MT[#;1zJDP`0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double((-806.91));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.optDouble("zj%>o`");
      try { 
        jSONObject1.get("cGs<m_\"(I-jb}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cGs<m_\\\"(I-jb}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "is";
      stringArray0[2] = "is";
      JSONObject jSONObject0 = new JSONObject("is", stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Short short0 = new Short((short) (-1470));
      Short.toUnsignedInt((short)78);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      Byte.toUnsignedInt((byte)3);
      Byte.toUnsignedLong((byte)3);
      Byte.toUnsignedLong((byte)3);
      JSONObject.testValidity(byte0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "{N}.yO3_Zs1j[U-'";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("Missing value");
      try { 
        Byte.decode("{N}.yO3_Zs1j[U-'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{N}.yO3_Zs1j[U-'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "{N}.6yp30Zs1j[U-s";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("{N}.6yp30Zs1j[U-s");
      try { 
        Byte.decode("{N}.6yp30Zs1j[U-s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{N}.6yp30Zs1j[U-s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = "jhmvvAO";
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      jSONObject0.append("jhmvvAO", double1);
      JSONObject.valueToString((Object) null);
      Double.isFinite(0.0);
      jSONObject0.toString();
      jSONObject0.accumulate("", double1);
      int int0 = 0;
      jSONObject1.toString(0);
      try { 
        jSONObject0.getDouble("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\",\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\":java.lang.Boolean@0000000003,\\\"java.lang.String@0000000004\\\":java.lang.Boolean@0000000005,\\\"java.lang.String@0000000006\\\":\\\"java.lang.Class@0000000007\\\",\\\"java.lang.String@0000000009\\\":wheel.json.JSONArray@0000000008}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r=GISa*2+QA2J_&F`N";
      stringArray0[1] = ": ";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(": ", (Object) ": ");
      jSONObject0.toString((-864), (-864));
      jSONObject0.put("r=GISa*2+QA2J_&F`N", (-864));
      int int0 = jSONObject0.optInt(": ", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getparseFloat";
      JSONObject jSONObject1 = jSONObject0.append("getparseFloat", "getparseFloat");
      Double.isFinite((-1036.90648608));
      double double0 = 2797.16;
      Double.min(0.0, 2797.16);
      JSONObject jSONObject2 = jSONObject1.append("_#M8KUjUDCu|3#*UlzA", "_#M8KUjUDCu|3#*UlzA");
      JSONObject.valueToString(jSONObject2);
      Double.isFinite((-737.645781196243));
      jSONObject0.toString();
      jSONObject0.accumulate("pa", "{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002,\"java.lang.String@0000000005\":wheel.json.JSONArray@0000000004}");
      jSONObject1.toString(0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "7(?`#U)-E~yRG1=e";
      Integer integer0 = new Integer((-1668));
      hashMap0.putIfAbsent("7(?`#U)-E~yRG1=e", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject text must begin with '{'", "-1949.432383506");
      try { 
        jSONObject1.getBoolean("7(?`#U)-E~yRG1=e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7(?`#U)-E~yRG1=e\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Double double0 = new Double((-1.0));
      String string0 = null;
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      String string1 = "Y%,gL9<VDlRY/#";
      jSONObject0.remove("Y%,gL9<VDlRY/#");
      Long long0 = new Long(1697L);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("UDoZuru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of UDoZuru
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optDouble((String) null, 2846.6756351);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      int int0 = (-1685);
      int int1 = 4;
      JSONObject.quote("] not found.");
      jSONObject0.toString(10);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, (-313.0F));
      jSONObject0.optInt(".oYLdATD");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.put("va", (Map) hashMap0);
      String string0 = "Unterminated string";
      jSONObject0.optBoolean(")[Ud,/OY|f^%Sywhc", true);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getLong("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("", (-267L));
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      jSONObject0.optInt("", 0);
      jSONObject0.optDouble("", 0.0);
      String string1 = "WVS";
      String string2 = "wheel.json.JSONArray";
      jSONObject0.optLong("wheel.json.JSONArray");
      jSONObject0.optBoolean("WVS");
      String string3 = "@Qi>";
      try { 
        jSONObject0.getInt("@Qi>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@Qi>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r=GISa*2+QA2J_&F`N";
      stringArray0[1] = ": ";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-864), (-864));
      assertEquals("{}", string0);
      
      jSONObject0.put("+Y%~YIj`^bTjU5/` ,1", 1325);
      int int0 = jSONObject0.optInt(": ", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("Expected a ',' or '}'", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "Expected a ',' or '}'";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or '}'", (-1668L));
      jSONObject2.remove("{7@_Q*Z^kZh81xb,_");
      jSONObject1.optInt((String) null);
      jSONObject0.names();
      Object object0 = jSONObject1.remove("Z~g[<^RQIhKLHiXh");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ',' or '}'";
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("Expected a ',' or '}'", 13);
      jSONObject0.optDouble("Expected a ',' or '}'", 0.0);
      jSONObject0.optLong("wheel.json.JSONArray");
      jSONObject0.optBoolean("Expected a ',' or '}'");
      String string1 = "@Qi>";
      try { 
        jSONObject0.getInt("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString((Object) null);
      Double.isFinite(0.0);
      jSONObject0.toString();
      jSONObject0.accumulate("", double0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jhmvvAO";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("ismax", (-848));
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.names();
      jSONObject0.keys();
      Long long0 = new Long(16);
      String string0 = "Expected a ',' or ']'";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Expected a ',' or ']'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "{N}.6yp3_Zs1j[U-'";
      Long.divideUnsigned(0L, (-199L));
      Long long0 = new Long((-874L));
      Long long1 = Long.getLong("{N}.6yp3_Zs1j[U-'", long0);
      Long.sum(0L, 0L);
      Long.max(0L, 0L);
      JSONObject.valueToString(long1, 0, 92);
      String string1 = "pa";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of pa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), 693);
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or '}'", 101);
      jSONObject2.optInt("Expected a ',' or '}'", 101);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "IJo";
      stringArray0[3] = "Expected a ',' or '}'";
      stringArray0[4] = "isvalueOf";
      stringArray0[5] = "{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}";
      stringArray0[6] = "Expected a ',' or '}'";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject3);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.poll();
      jSONObject2.put("isvalueOf", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(165.9796412220211);
      String string0 = "";
      JSONObject.getNames((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '#';
      stringWriter0.write("");
      stringWriter0.write(charArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] not found.";
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      int int0 = 4;
      JSONObject.valueToString(jSONObject1, (-1685), (-2269));
      jSONObject1.toString((-1685), 4);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString(double0);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject jSONObject3 = jSONObject1.put("", 12);
      jSONObject2.names();
      jSONObject3.keys();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) "ha");
      String string0 = "p";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "{N}.6yp3_Zs1j[U-'";
      JSONObject jSONObject0 = new JSONObject((Object) "{N}.6yp3_Zs1j[U-'");
      JSONObject.getNames(jSONObject0);
      String string1 = "ck";
      Float float0 = new Float((-2406.277F));
      JSONObject.valueToString(float0);
      jSONObject0.put("java.lang.Float@0000000043", (Collection) null);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String string2 = "";
      try { 
        Byte.valueOf("ck");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ck\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2362));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = " YM9^6P19x?3OI";
      stringArray0[3] = "o";
      stringArray0[4] = ",";
      stringArray0[5] = "g";
      stringArray0[6] = "46|52txYi:y/fm*9";
      stringArray0[7] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("", (Object) jSONObject1);
      jSONObject2.remove("");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "{N}.6yp3_Zs1j[U-'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      hashMap0.putIfAbsent("7(?`#U)-E~yRG1=e", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("A JSONObject text must begin with '{'", "-1949.432383506");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", ",:K%yhi!zDg@fo!m-.u");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.getInt("acc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"acc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      jSONObject0.toString(0, 0);
      boolean boolean0 = jSONObject2.optBoolean("y/N,~jcxU&W,H");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-55.0902922));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfAbsent((String) null, function0);
      jSONObject0.remove((String) null);
      jSONObject0.optJSONArray("r:");
      try { 
        jSONObject0.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected a ',' or '}'";
      jSONObject0.put("Expected a ',' or '}'", (-1L));
      String string1 = "JSONArray[";
      try { 
        jSONObject0.getJSONArray("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Am>7G]Fz^O";
      jSONObject0.optBoolean("Am>7G]Fz^O", true);
      jSONObject0.put("3@MK(0tpTTiCYWsx'n", false);
      jSONObject0.keys();
      try { 
        jSONObject0.getDouble("Am>7G]Fz^O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Am>7G]Fz^O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r=GISa*2+QA2J_&F`N";
      stringArray0[1] = ": ";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("((XMOIqipwoRNX<0", 2355L);
      jSONObject1.remove(".");
      jSONObject0.optInt("Z~g[<^RQIhKLHiXh");
      jSONObject0.names();
      jSONObject0.remove("Z~g[<^RQIhKLHiXh");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "DcG3;2^3z ";
      JSONTokener jSONTokener0 = new JSONTokener("DcG3;2^3z ");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of DcG3;2^3z 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      Long.sum(197L, 0L);
      Long.max(0L, (-769L));
      JSONObject.valueToString(long1, 0, 0);
      jSONObject0.keys();
      String string0 = jSONObject0.toString(0, 2875);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Jf<?o]ss%A64k[F";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Jf<?o]ss%A64k[F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, (-313.0F));
      int int0 = jSONObject0.optInt(".oYLdATD");
      assertEquals(0, int0);
      
      jSONObject0.optJSONArray("wheel.json.JSONObject$1");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("wheel.json.JSONObject$1");
      assertEquals("\"wheel.json.JSONObject$1\"", string0);
      
      Long long0 = new Long(0);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      jSONObject1.toString((-1685), 4);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(":T~8op8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of :T~8op8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("", (-267L));
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",\n", ",\n");
      JSONObject.valueToString(",\n", (-825), (-825));
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = '\"';
      charArray0[4] = 'G';
      charArray0[5] = 'T';
      charArray0[6] = 'Q';
      charArray0[7] = '0';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, (-825), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
