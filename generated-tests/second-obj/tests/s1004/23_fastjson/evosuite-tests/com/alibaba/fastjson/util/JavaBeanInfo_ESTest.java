/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:11:39 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaBeanInfo_ESTest extends JavaBeanInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<?> class0 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, false);
      Class<String> class1 = String.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) null, (PropertyNamingStrategy) null, true, false);
      Constructor<AtomicLong>[] constructorArray0 = (Constructor<AtomicLong>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getDefaultConstructor(javaBeanInfo0.clazz, constructorArray0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Void> class0 = Void.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) null, (Type) class0, propertyNamingStrategy0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "fRQ";
      stringArray0[2] = "fRQ";
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("fRQ").when(jSONType0).typeKey();
      doReturn("fRQ").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getDefaultConstructor(javaBeanInfo0.builderClass, constructorArray0);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      FieldInfo fieldInfo0 = new FieldInfo("fRQ", class0, javaBeanInfo0.builderClass, javaBeanInfo0.clazz, (Field) null, 0, 0, 0);
      Class<Void> class1 = Void.TYPE;
      linkedList0.add(fieldInfo0);
      JavaBeanInfo.add(linkedList0, fieldInfo0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      Constructor<Method>[] constructorArray1 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 4);
      constructorArray1[0] = (Constructor<Method>) constructorArray1;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fRQ";
      stringArray0[1] = "fRQ";
      stringArray0[2] = "fRQ";
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("fRQ").when(jSONType0).typeKey();
      doReturn("fRQ").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getDefaultConstructor(javaBeanInfo0.builderClass, constructorArray0);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      FieldInfo fieldInfo0 = new FieldInfo("fRQ", class0, javaBeanInfo0.builderClass, javaBeanInfo0.clazz, (Field) null, 0, 0, 0);
      Class<Void> class1 = Void.TYPE;
      Class<String> class2 = String.class;
      FieldInfo fieldInfo1 = new FieldInfo("fRQ", class2, class1, fieldInfo0.fieldType, (Field) null, 0, 0, 33);
      Class<Void> class3 = Void.TYPE;
      linkedList0.add(fieldInfo1);
      fieldInfo0.compareTo(fieldInfo1);
      fieldInfo1.getDeclaredClass();
      JavaBeanInfo.add(linkedList0, fieldInfo0);
      Class<Object> class4 = Object.class;
      JavaBeanInfo.getBuilderClass(class4, javaBeanInfo0.jsonType);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fRQ";
      stringArray0[1] = "fRQ";
      stringArray0[2] = "fRQ";
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("fRQ").when(jSONType0).typeKey();
      doReturn("fRQ").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getDefaultConstructor(javaBeanInfo0.builderClass, constructorArray0);
      FieldInfo fieldInfo0 = new FieldInfo("fRQ", class0, javaBeanInfo0.builderClass, javaBeanInfo0.clazz, (Field) null, 0, 62, 62);
      Class<Void> class2 = Void.TYPE;
      Class<String> class3 = String.class;
      Class<Void> class4 = Void.class;
      FieldInfo fieldInfo1 = new FieldInfo("fRQ", class3, class4, fieldInfo0.fieldType, (Field) null, 62, 62, 62);
      Class<Void> class5 = Void.TYPE;
      linkedList0.add(fieldInfo1);
      fieldInfo0.compareTo(fieldInfo1);
      fieldInfo1.getDeclaredClass();
      JavaBeanInfo.add(linkedList0, fieldInfo0);
      JavaBeanInfo.getBuilderClass(class3, javaBeanInfo0.jsonType);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(jSONType0).orders();
      doReturn("").when(jSONType0).typeKey();
      doReturn("").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = null;
      try {
        javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("!>\"").when(jSONType0).typeKey();
      doReturn("").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType1).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType1);
      assertNotNull(class1);
      
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      Class<AtomicBoolean> class2 = AtomicBoolean.class;
      Class<AtomicInteger> class3 = AtomicInteger.class;
      FieldInfo fieldInfo0 = new FieldInfo("!>\"", class2, class3, class2, (Field) null, 0, 512, 512);
      boolean boolean0 = JavaBeanInfo.add(linkedList1, fieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<FieldInfo> class1 = FieldInfo.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      LinkedList<FieldInfo> linkedList2 = new LinkedList<FieldInfo>();
      Class<Object> class2 = Object.class;
      JavaBeanInfo javaBeanInfo1 = new JavaBeanInfo(class2, class0, javaBeanInfo0.creatorConstructor, javaBeanInfo0.creatorConstructor, (Method) null, (Method) null, (JSONType) null, linkedList1);
      LinkedList<FieldInfo> linkedList3 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList3.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fRQ";
      stringArray0[1] = "fRQ";
      stringArray0[2] = "fRQ";
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("fRQ", (String) null).when(jSONType0).typeKey();
      doReturn("fRQ", (String) null).when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getDefaultConstructor(javaBeanInfo0.builderClass, constructorArray0);
      FieldInfo fieldInfo0 = new FieldInfo("fRQ", class0, javaBeanInfo0.builderClass, javaBeanInfo0.clazz, (Field) null, 0, 70, 70);
      Class<Method> class2 = Method.class;
      Class<Object> class3 = Object.class;
      FieldInfo fieldInfo1 = new FieldInfo("fRQ", class2, class3, class1, (Field) null, 70, (-3213), 0);
      Class<Void> class4 = Void.TYPE;
      Class<Integer> class5 = Integer.class;
      FieldInfo.getFieldType(class5, class2, class0);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      linkedList1.add(fieldInfo1);
      boolean boolean0 = fieldInfo1.fieldTransient;
      JavaBeanInfo.add(linkedList1, fieldInfo0);
      Class<Annotation> class6 = Annotation.class;
      fieldInfo1.getAnnation(class6);
      JavaBeanInfo.getBuilderClass(fieldInfo0.fieldClass, javaBeanInfo0.jsonType);
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(fieldInfo0.fieldClass).when(jSONType1).builder();
      JavaBeanInfo.getBuilderClass(jSONType1);
      Class<Object> class7 = Object.class;
      JavaBeanInfo javaBeanInfo1 = null;
      try {
        javaBeanInfo1 = new JavaBeanInfo(class1, class7, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, javaBeanInfo0.jsonType, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }
}
