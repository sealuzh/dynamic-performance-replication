/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:35:57 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      char char0 = 'o';
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 2472);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match + - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a?W~c7oU]+>)46@h}_@");
      jSONScanner0.resetStringPosition();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S", 297);
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      jSONScanner0.nextToken(297);
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(18, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      jSONReaderScanner0.nextToken(142);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.setToken(34);
      jSONReaderScanner0.charAt(34);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s/c0`iDByN4aM_'[%Kh");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(59);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat(':');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.isEnabled(84);
      assertTrue(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('I');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(2358);
      assertNotNull(symbolTable0);
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, (SymbolTable) null, ' ');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '[';
      charArray0[2] = 'I';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      charArray0[5] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(678, 678);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.OptionalLong");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.sbuf = charArray0;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanDate('q');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      charArray0[2] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, (-3355));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-3355), jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '!', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanString('*');
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-3355), jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '!', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[2] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\"', '\u0000', 'a'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\"', '\u0000', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2T5PC1");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.pos = (-2932);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2932), jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r*G1MF!bRt?;");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('*', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'u';
      charArray0[1] = 'u';
      charArray0[1] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', 'u', 'u'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray1);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', 'u', 'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', 'u', 'u'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', 'u', 'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";RC>!<b1PN", 4736);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(4736, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : pos 0, json : ;RC>!<b1PN
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 26);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'=', 't'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(2073);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 26, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("R<I[nu<|", (-1452));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1452), jSONScanner0.getFeatures());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1452), jSONScanner0.getFeatures());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals("", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1452), jSONScanner0.getFeatures());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, (SymbolTable) null, 'Q');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1452), jSONScanner0.getFeatures());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.putChar('n');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(')');
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("feature");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      jSONScanner0.scanStringArray(list0, 'W');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      boolean boolean0 = jSONScanner0.scanBoolean('p');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'p';
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'p', '\u0000', 'p', 'p', 'p', 'p', 'p'}, charArray0);
      
      float float0 = jSONScanner0.scanFloat('p');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j", 5);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(5, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, true);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(4101, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      
      int int0 = (-2517);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 321, (-2070));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2070), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('h');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2070), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2070), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2070), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2070), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\\';
      SymbolTable symbolTable0 = new SymbolTable(572);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 572, 572);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(572, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\"', '\\', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('~');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('z');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('o');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      double double0 = jSONReaderScanner0.scanDouble('\u0000');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.scanInt('\u0000');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Date date0 = jSONReaderScanner0.scanDate('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1021, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(12, 4212);
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1021, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unclosed single-quote string");
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      int int1 = jSONReaderScanner0.scanInt('i');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2219, 2219);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2219, jSONReaderScanner0.getFeatures());
      assertEquals('O', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("x");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(pushbackReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('x', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      char char0 = jSONReaderScanner1.next();
      assertEquals('\u001A', char0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char char1 = '*';
      String string0 = jSONReaderScanner1.scanString('h');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Font", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(142);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("24<#Wx|l");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(byteArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 142, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S", 321);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(321, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = 'G';
      charArray0[2] = '\"';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(321, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(321, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(=1%Z", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("(=1%Z", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[1];
      UUID uUID0 = jSONReaderScanner0.scanUUID('r');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char char0 = jSONScanner0.next();
      assertEquals('=', char0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      float float0 = jSONScanner0.scanFloat('');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.putChar('y');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[2] = '\\';
      int int0 = 8064;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 8064);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '|';
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1067, (-554));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-554), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'f', '*'}, charArray0);
      
      Feature feature0 = Feature.IgnoreNotMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-554), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'f', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(16);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : <pos 0, json : <
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("feature");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable(1594);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals("feature", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(collection0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertArrayEquals(new char[] {'g'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("feature");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 170, 78);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("OkKI/3I,E}D.(", 170);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('O', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(170, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("OkKI/3I,E}D.(");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('O', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals('\u0000', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(78);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner2.scanSymbol(symbolTable0);
      assertEquals("OkKI", string0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('/', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-SnuC>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate(';');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'?'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-SnuC>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      JSONScanner jSONScanner0 = new JSONScanner("-SnuC>", 84);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.isEnabled(65279);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals("Sn", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512, 512);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(intArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.setToken(2816);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2816, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(59, 32);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2816, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2816, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2816, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(32, 59);
      assertTrue(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(512, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2816, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 785);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '[';
      charArray0[2] = 'I';
      charArray0[3] = '9';
      charArray0[4] = 'h';
      charArray0[5] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(intArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      jSONReaderScanner0.setToken(26);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars('I', 'I');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.token());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.token());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.token());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 0);
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.token());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '[', 'I', '9', 'h', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = ' ';
      charArray0[2] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', ' ', '7'}, charArray0);
      
      jSONReaderScanner0.nextToken((-316));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', ' ', '7'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', ' ', '7'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', ' ', '7'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2486), 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?i9wH", (-577));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-577), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-577), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode1);
      assertNotNull(list0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list1, list0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode2);
      assertNotNull(list2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list0.equals((Object)list1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      JSONScanner jSONScanner1 = new JSONScanner(" 7>0G,{D|e-");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      
      jSONScanner1.scanStringArray(list1, 'K');
      assertEquals((-1), jSONScanner1.matchStat);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(jSONScanner1, jSONScanner0);
      
      int int0 = jSONScanner1.matchStat();
      assertEquals((-1), int0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      boolean boolean0 = jSONScanner1.scanBoolean('+');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertNotSame(jSONScanner1, jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("zlogod", 70);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('z', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      
      Date date0 = jSONReaderScanner1.scanDate('*');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('z', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONReaderScanner1.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(intArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('z', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\\';
      int int0 = 123;
      SymbolTable symbolTable0 = new SymbolTable(123);
      assertNotNull(symbolTable0);
      
      int int1 = 4746;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4746);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\"', '\\', '\u0000'}, charArray0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'b');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\"', '\\', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\"', '\\', '\u0000'}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(96);
      assertEquals('\u001A', char0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\"', '\\', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pP;R:4");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      long long0 = jSONScanner0.scanLong('_');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      double double0 = jSONReaderScanner0.scanDouble('t');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      long long1 = jSONScanner0.scanLong('@');
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int1 = jSONReaderScanner0.scanInt('_');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.isEnabled(2);
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(572);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-1446212072), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s/c0`iDByN4aM_'[%Kh");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(59, 2441);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken((-316));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2486), 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u`@RDiV~UE >Z\"\"N");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.setToken(39);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      int int0 = 584;
      SymbolTable symbolTable0 = new SymbolTable(584);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 584);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(584, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int1 = 103;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 103);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      jSONReaderScanner1.scanEnum(class0, symbolTable0, 'g');
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature.AllowSingleQuotes is false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '.';
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      jSONReaderScanner0.lexError("4QwMPB1W7{bw", (Object[]) null);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.token = (-3285);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals((-3285), jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]F", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(34);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals("undefined", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONReaderScanner0.matchStat = 0;
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      Date date0 = jSONReaderScanner0.scanDate('N');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(7577903782L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SymbolTable symbolTable0 = new SymbolTable(43);
      assertNotNull(symbolTable0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("dq,)e+TH");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      charArray0[1] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 43);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('.');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken(95);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(17, jSONReaderScanner0.token());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(':', jSONReaderScanner0.getCurrent());
      
      int int0 = (-495);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-495), 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      int int0 = 20;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Feature.AllowSingleQuotes is false");
      assertFalse(boolean0);
      
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      int int1 = 84;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 84, (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner1.nextTokenWithChar('\"');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner1.scanLong('/');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 297;
      JSONScanner jSONScanner0 = new JSONScanner("OrderedField", 297);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(297, jSONScanner0.getFeatures());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[7];
      char char0 = '\"';
      charArray0[2] = '\"';
      SymbolTable symbolTable0 = new SymbolTable(297);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("2<{x\"`Vg3.48");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      
      jSONScanner0.scanStringArray(list1, '$');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('2', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      
      JSONScanner jSONScanner1 = new JSONScanner("1U/'D)qwnjU/)iOY");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      int int0 = jSONScanner1.matchStat();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      boolean boolean0 = jSONScanner1.scanBoolean('$');
      assertTrue(boolean0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotSame(jSONScanner1, jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 34;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("4QwMPB1W7{bw", objectArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = ']';
      charArray0[2] = '6';
      charArray0[3] = 'k';
      charArray0[4] = '-';
      charArray0[5] = ';';
      charArray0[6] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'_', ']', '6', 'k', '-', ';', '!'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'_', ']', '6', 'k', '-', ';', '!'}, charArray0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(collection0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'_', ']', '6', 'k', '-', ';', '!'}, charArray0);
      
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      Collection<String> collection1 = jSONReaderScanner0.scanFieldStringArray(charArray0, class1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'_', ']', '6', 'k', '-', ';', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(2024);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("-##");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONScanner0.scanStringArray(linkedList0, 'X');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, linkedList0.size());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(66);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      int int0 = 8064;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 8064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[2];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate(']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("=", (-1717));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1717), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('=', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isEnabled(37);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1717), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('=', jSONScanner0.getCurrent());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1717), jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanFalse();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1717), jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "float overflow : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'I', '4', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('i');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'I', '4', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-624));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('u', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2765);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken(16);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = 13;
      jSONScanner0.nextToken(13);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('r', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=1%Z");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7vSl", 128);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(7.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONScanner0.scanLong('\'');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      double double1 = jSONReaderScanner0.scanDouble('\'');
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(7, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      SymbolTable symbolTable0 = new SymbolTable(20);
      assertNotNull(symbolTable0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList0);
      assertNotNull(list1);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(list1, list0);
      
      jSONScanner0.scanStringArray(arrayList0, '9');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = jSONScanner0.scanBoolean('V');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = ' ';
      charArray0[2] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\\', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\\', ' ', '7'}, charArray0);
      
      jSONReaderScanner0.nextToken((-316));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\\', ' ', '7'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\\', ' ', '7'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\\', ' ', '7'}, charArray0);
      
      int int0 = (-2486);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2486), 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[2] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-SnuC>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '=', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = jSONReaderScanner0.isEnabled(52, 52);
      assertTrue(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float float0 = jSONReaderScanner0.scanFloat('&');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("j9P.@s}O>T=");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Font");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Font", 70);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.awt.Font", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      float float0 = jSONScanner0.scanFloat('*');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W?Yrlx");
      assertFalse(boolean0);
      
      jSONReaderScanner0.setToken((-1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      float float1 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      double double0 = jSONReaderScanner0.scanDouble('I');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONScanner0.scanLong('@');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double1 = jSONReaderScanner1.scanDouble('}');
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(double1, double0, 0.01);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("5");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('5', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("6Yi`T=", 78);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean5 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean5);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('6', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      
      System.setCurrentTimeMillis(0);
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('Y', jSONScanner0.getCurrent());
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(142);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.lexError("24<#Wx|l", (Object[]) null);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("g/Cc]h7/8s0{*Yq1QAy");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('g', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('g', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(intArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 1);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken(1);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(8, jSONScanner0.token());
      assertEquals(1, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = '@';
      charArray0[3] = 'D';
      charArray0[4] = 'c';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(8, jSONScanner0.token());
      assertEquals(1, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'e', 'e', '@', 'D', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.bp = 97;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'e', 'e', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('e');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((int) 'e');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("E@M[NBy=Gjz?", 1715);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1715, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('~');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1715, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('E', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1715, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      long long0 = jSONReaderScanner0.scanLong('k');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONScanner0.nextToken((-1553));
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.scanString('<');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 1);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(1);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '%';
      charArray0[2] = '@';
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      
      jSONScanner0.bp = 97;
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'e', '%', '@', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('Q');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.scanString('&');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'C';
      charArray0[2] = '|';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(9);
      assertNotNull(symbolTable0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null", 17);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(17, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(17, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'m', 'C', '|', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a9x!<|;~[;");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('a', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'K';
      charArray0[4] = ';';
      charArray0[5] = 'G';
      charArray0[6] = '\\';
      charArray0[7] = 'S';
      charArray0[8] = 'R';
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('a', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'=', 'p', 'p', 'K', ';', 'G', '\\', 'S', 'R'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(')');
      assertFalse(boolean0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[2] = 'E';
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("t|mR,H2");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(collection0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'9', '\u0000', 'E', '\u0000'}, charArray0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      
      jSONScanner0.scanStringArray(list0, 'q');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(list0.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotSame(list0, list1);
      
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.scanBoolean('E');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 34);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$zhjibe60");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setToken('D');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(68, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("DLd>Ogoy.AlXmT,B");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONScanner0.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("DLd>Ogoy.AlXmT,B");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('D', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('V');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      
      jSONScanner0.nextToken(86);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(9, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      
      JSONScanner jSONScanner3 = null;
      try {
        jSONScanner3 = new JSONScanner(charArray0, (-3029));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 170, 78);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("OkKI/3I,E}D.(", 170);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('O', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(170, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("OkKI/3I,E}D.(");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('O', jSONReaderScanner2.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 55);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('G');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('B');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("=0j", 36);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertEquals(36, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(36, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 25);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(25, jSONReaderScanner2.getFeatures());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner2.scanIdent();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(18, jSONReaderScanner2.token());
      assertEquals(25, jSONReaderScanner2.getFeatures());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) charArray0;
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigInteger0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(321);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(757770282L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), 3200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '|';
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) 'C');
      assertNotNull(bigDecimal0);
      assertEquals((short)67, bigDecimal0.shortValue());
      assertEquals((byte)67, bigDecimal0.byteValue());
      
      SymbolTable symbolTable0 = new SymbolTable(9);
      assertNotNull(symbolTable0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '|', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(byteArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new byte[] {(byte)122, (byte) (-70), (byte) (-24)}, byteArray0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 321, 321);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(321, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(321, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature.AllowSingleQuotes is false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '.';
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("?I/oh*");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('?', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      jSONReaderScanner1.close();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('?', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("writenulllistasempty");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFloat('D');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.isEnabled(4);
      assertTrue(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      long long0 = jSONScanner0.scanLong('D');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      Class<Integer> class0 = Integer.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, (SymbolTable) null, ']');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.TIMESTAMP");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oracle.sql.TIMESTAMP");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      
      String string0 = jSONScanner0.info();
      assertEquals("pos 0, json : oracle.sql.TIMESTAMP", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      assertNotNull(codingErrorAction0);
      assertEquals("REPORT", codingErrorAction0.toString());
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      assertNotNull(inputStreamReader0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, (byte)110);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      boolean boolean1 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('e');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      boolean boolean2 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertFalse(boolean2);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean3 = jSONScanner0.isEnabled(13);
      assertTrue(boolean3);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable((byte)110);
      assertNotNull(symbolTable0);
      
      int int0 = jSONScanner0.scanInt('u');
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1740));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1740), jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('P');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1740), jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      assertNotNull(codingErrorAction0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction0.toString());
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder1);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, charsetDecoder0);
      assertSame(charsetDecoder1, uTF8Decoder0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error", 534);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(534, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      jSONScanner0.scanStringArray(linkedHashSet0, '+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('+');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.nextToken(3);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(8, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null or new", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("error", 118);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(118, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('e', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S", 321);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(321, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(321, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.matchField2(charArray0);
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(321, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3VK1shMKtoPUHOATa");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('Q');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(321, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(20);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(321, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S", 49);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = jSONReaderScanner0.scanString('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", (-899));
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-899), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('7');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-899), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)58;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)106, (byte)13, (byte)0, (byte)5, (byte)5, (byte)58}, byteArray0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, (-985));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-985), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-899), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      float float1 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(float1, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-985), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[2] = 'E';
      charArray0[2] = 'q';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'9', '\u0000', 'q', '\u0000'}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = JSONLexerBase.isWhitespace('E');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-2090));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2090), jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      jSONReaderScanner0.nextToken(2021);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2090), jSONReaderScanner0.getFeatures());
      assertEquals(21, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'X';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2090), jSONReaderScanner0.getFeatures());
      assertEquals(21, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Snu?C>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-Snu?C>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("-Snu?C>");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('!');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(2355);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, (-720));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-720), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('*');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-720), jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(".");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('.', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(".", (-720));
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals((-720), jSONReaderScanner3.getFeatures());
      assertEquals('.', jSONReaderScanner3.getCurrent());
      assertEquals("", jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(".");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(93);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.resetStringPosition();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      Class<String> class0 = String.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, '~');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      assertFalse(symbolTable0.equals((Object)symbolTable1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotSame(symbolTable0, symbolTable1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.setToken(34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 23, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(8, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char1 = File.pathSeparatorChar;
      assertEquals(':', char1);
      assertTrue(char1 == char0);
      
      long long0 = jSONReaderScanner0.scanLong('2');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("(");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(8, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(8, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Luf;v~G'{#>+WTWNn");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('L', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      jSONScanner0.hasSpecial = true;
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      Locale locale0 = jSONReaderScanner1.getLocale();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(locale0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('L', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 34;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(142);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = jSONReaderScanner0.intValue();
      assertEquals(0, int1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1084518693));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Font", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Font", 70);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.scanInt(')');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TreeSet", 2787);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2787, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2787, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(22, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 439, 43);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(')', jSONReaderScanner2.getCurrent());
      assertEquals(43, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertArrayEquals(new char[] {')'}, charArray0);
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2787, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("4\"FXeZ:nF>V<btpZ0", 2);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.getFeatures());
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals('4', char0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '.';
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 69);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(69, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      int int0 = jSONReaderScanner0.token();
      assertEquals(2, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      
      double double0 = jSONScanner0.scanDouble('X');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(69, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'X';
      charArray1[1] = 'X';
      charArray1[2] = '.';
      charArray1[3] = '.';
      charArray1[4] = '.';
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(69, jSONScanner0.getFeatures());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      assertArrayEquals(new char[] {'X', 'X', '.', '.', '.'}, charArray1);
      
      long long0 = jSONReaderScanner0.scanLong('n');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      long long1 = jSONScanner0.scanFieldLong(charArray1);
      assertEquals(0L, long1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(69, jSONScanner0.getFeatures());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.'}, charArray0);
      assertArrayEquals(new char[] {'X', 'X', '.', '.', '.'}, charArray1);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[5];
      jSONScanner0.matchStat = (int) 'e';
      assertEquals(101, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      charArray0[1] = 'e';
      charArray0[2] = '@';
      jSONScanner0.scanNumber();
      assertEquals(101, jSONScanner0.matchStat);
      assertEquals(101, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '@';
      charArray1[2] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 909, 58);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'@', '\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      long long0 = jSONReaderScanner1.scanLong('@');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1876, 1876);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(",UTq", 796);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(796, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(796, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 14, 12);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      String string1 = jSONReaderScanner0.scanString('6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      jSONScanner0.nextToken(14);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(16, jSONScanner0.token());
      assertEquals(796, jSONScanner0.getFeatures());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-Snu?C>");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '!', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jSONReaderScanner0.isRef();
      assertFalse(boolean2);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean3 = jSONReaderScanner0.isRef();
      assertFalse(boolean3);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.setToken(46);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(46, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.charAt(142);
      assertEquals('\u0000', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(46, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("-Snu?C>");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      double double0 = jSONReaderScanner0.scanDouble('<');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(46, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long1 = jSONScanner0.scanLong('#');
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '6';
      charArray0[3] = 'k';
      charArray0[5] = ';';
      charArray0[6] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'_', '_', '6', 'k', '\u0000', ';', '!'}, charArray0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[3] = '6';
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "##SHz}!)Gc|");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("3G#yA9p");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('w');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken((int) 'j');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('G', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((String) null, (-2196));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken(142);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('B');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(142, 0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      SymbolTable symbolTable0 = new SymbolTable(34);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Z\"3rRok.Fv~f7fs");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      String string0 = jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'm');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Z\"3rRok.Fv~f7fs");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string1 = jSONReaderScanner0.scanFieldString(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1979));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1979), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONScanner1.putChar('B');
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1979), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long long0 = jSONScanner1.scanFieldSymbol(charArray1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1979), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-128);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-118), (byte) (-95), (byte)102, (byte) (-5), (byte) (-128)}, byteArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(2021);
      assertNotNull(symbolTable0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7 2;QLfBq~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("7 2;QLfBq~");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('s');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken((int) (byte)102);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7 2;QLfBq~");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.scanString('s');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kDTg$@vx<n'h&s]");
      assertFalse(boolean0);
      
      charArray0[0] = '/';
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('M');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      int int1 = (-1084518693);
      // Undeclared exception!
      jSONReaderScanner0.nextToken((-1084518693));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.lexError("24L#Wx|U", (Object[]) null);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("24L#Wx|U");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      
      boolean boolean0 = jSONReaderScanner1.isEnabled(34);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '\u001A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = "H/";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H/", 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = (-613);
      jSONReaderScanner0.nextToken((-613));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = '2';
      charArray0[2] = 'r';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'c', '2', 'r'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 124);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertArrayEquals(new char[] {'c', '2', 'r'}, charArray0);
      
      String string1 = jSONReaderScanner1.scanString('\\');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'c', '2', 'r'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(92);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('v', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(6, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.scanInt('!');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      int int1 = jSONScanner0.token();
      assertEquals(1, int1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('v', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(6, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.subString((-1), 845);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      assertNotNull(codingErrorAction0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("REPORT", codingErrorAction0.toString());
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("REPORT", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder1);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("REPORT", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertSame(charsetDecoder1, charsetDecoder0);
      
      CharsetDecoder charsetDecoder2 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder2);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals("REPORT", codingErrorAction0.toString());
      assertEquals("\uFFFD", charsetDecoder2.replacement());
      assertFalse(charsetDecoder2.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder2.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder2.maxCharsPerByte(), 0.01F);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(uTF8Decoder0, charsetDecoder2);
      assertSame(charsetDecoder2, charsetDecoder1);
      assertSame(charsetDecoder2, uTF8Decoder0);
      assertSame(charsetDecoder2, charsetDecoder0);
      
      JSONScanner jSONScanner0 = new JSONScanner("|Y[5c26E?yIwq:rc}`K");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('|', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONScanner0.scanStringArray(hashSet0, '~');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('|', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = 'T';
      charArray0[3] = '~';
      charArray0[4] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1022, 1022);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(1022, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'B', 'N', 'T', '~', 'B'}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(1022, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'B', 'N', 'T', '~', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = '\"';
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 34;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("cH]g");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";XX#&P.9Pk=i8G");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char0 = 'D';
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(1701);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('H', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(";XX#&P.9Pk=i8G", 3);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("{");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '*';
      charArray0[0] = '*';
      charArray0[1] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '*', '*');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      
      char char1 = 'j';
      Date date0 = jSONReaderScanner0.scanDate('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      
      char char2 = '\\';
      String string0 = jSONReaderScanner0.scanString('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(42, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('.', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.nextToken((-1));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.pos());
      assertEquals(25, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ')', ')');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("G<");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(11, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("G<");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      String string0 = linkedList0.pollLast();
      assertEquals("G<", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('0');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal1 = jSONScanner0.scanDecimal('0');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal2 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("true");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      
      BigDecimal bigDecimal3 = jSONScanner0.scanDecimal('M');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal3);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      float float0 = jSONScanner0.scanFloat('D');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      jSONScanner1.setToken((-1));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.token());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      jSONScanner1.nextToken(0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(6, jSONScanner1.token());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      float float1 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONScanner1.matchStat);
      assertEquals(float1, float0, 0.01F);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(6, jSONScanner1.token());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.nextToken((-1553));
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 34);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(34, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5,M\"!{.JKDYJH}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal1 = jSONScanner0.scanDecimal('<');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONScanner0.nextToken(92);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      BigDecimal bigDecimal2 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanLong('f');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ozPjy}5y?", 76);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(76, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('v');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(76, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, (byte)3);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner1.nextToken(3148);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("\"");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('\"', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      
      String string0 = jSONScanner0.info();
      assertEquals("pos 0, json : ", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean2 = jSONScanner0.isEnabled(2685);
      assertTrue(boolean2);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(1180);
      assertNotNull(symbolTable0);
      
      Date date0 = jSONScanner0.scanDate('');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      String string1 = jSONReaderScanner1.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(string1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner1.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(intArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean3 = jSONReaderScanner2.matchField(charArray0);
      assertFalse(boolean3);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('\"', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$mf1,T$", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("$mf1,T$");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(1496);
      assertNotNull(symbolTable0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$mf1,T$");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('g');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      char[] charArray0 = new char[1];
      long long1 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(long1 == long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("$mf1,T$");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('$', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.arrayCopy((-1), charArray1, (-1), 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = 65;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 65, 24);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(24, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(5);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = jSONScanner0.scanInt(']');
      assertEquals(0, int2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.TIMESTAMP");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('o', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oracle.sql.TIMESTAMP");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)110, (byte)110}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)110);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      long long1 = jSONReaderScanner1.scanFieldLong(charArray0);
      assertEquals(0L, long1);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(long1 == long0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      jSONScanner0.scanStringArray(linkedList1, '(');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('o', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 0, json : oracle.sql.TIMESTAMP
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      char[] charArray0 = new char[5];
      jSONScanner0.matchStat = (int) 'e';
      assertEquals(0, jSONScanner0.pos());
      assertEquals(101, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(101);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(101, jSONScanner0.matchStat);
      assertNull(string0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(101, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      charArray0[1] = 'e';
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(date0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', 'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[2] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'e';
      charArray1[2] = 'e';
      JSONScanner jSONScanner1 = new JSONScanner("g/Cc]h7/8s0{*Yq1QAy");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('g', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.hasSpecial = false;
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('g', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray1);
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('g', jSONScanner1.getCurrent());
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'e', '\u0000', 'e'}, charArray1);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(intArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j", 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('J');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('=', jSONScanner1.getCurrent());
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-608));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '\"';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = '\"';
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, (byte)3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) (byte) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean2 = jSONScanner0.scanBoolean('W');
      assertFalse(boolean2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]F", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("]F");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-9);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-35);
      jSONReaderScanner0.nextToken(16);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(15, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("]F");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(']', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      
      String string0 = jSONScanner0.info();
      assertEquals("pos 0, json : ]F", string0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean1 = jSONScanner0.isEnabled(3);
      assertTrue(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(10);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("] 6oAP ^:Q", 17, 0, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s/c0`iDByN4aM_'[%Kh");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 319, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("s/c0`iDByN4aM_'[%Kh");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('s', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 119);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner3.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner3.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-2), jSONReaderScanner3.matchStat());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = jSONScanner0.info();
      assertEquals("pos 0, json : ", string1);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONScanner0.isEnabled(224);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(319);
      assertNotNull(symbolTable0);
      
      int int0 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner1.nextToken(11);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1876, 1876);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      jSONReaderScanner0.nextToken(1783);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(66L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1783, 1876);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(1876, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      charArray1[1] = '6';
      charArray0[1] = 'j';
      charArray1[3] = '6';
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner1.setToken(1783);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(1783, jSONReaderScanner1.token());
      assertEquals(1876, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'6', 'j'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("hex");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('h', jSONScanner0.getCurrent());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONScanner0.scanStringArray(hashSet0, '6');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6', '6', '\u0000', '6'}, charArray1);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      boolean boolean1 = jSONScanner0.scanBoolean('j');
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('h', jSONScanner0.getCurrent());
      
      long long1 = jSONReaderScanner1.scanLong('\\');
      assertEquals(66L, long1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(long1 == long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(1783, jSONReaderScanner1.token());
      assertEquals(1876, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'6', 'j'}, charArray0);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '6';
      charArray2[1] = '6';
      charArray2[2] = '6';
      charArray2[3] = '\\';
      long long2 = jSONScanner0.scanFieldLong(charArray2);
      assertEquals(0L, long2);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'6', '6', '6', '\\'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, 107);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(107, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(107, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(107, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 55);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('G');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(55, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = Calendar.AM;
      assertEquals(0, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8SzA)6");
      assertFalse(boolean0);
      
      char char0 = 'D';
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('7');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.nextToken((-2524));
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8SzA)6", 2355);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2355, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      boolean boolean1 = jSONScanner0.scanBoolean('7');
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int1 = (-2);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2), 2758);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '|';
      JSONScanner jSONScanner0 = new JSONScanner("error parse null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'m', 'm', '|', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.nextToken(6);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('r', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONReaderScanner0.putChar('m');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null", (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error");
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = jSONScanner0.scanDecimal('m');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertEquals(1, jSONScanner0.token());
      assertEquals('r', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, '|');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)76;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-35), (byte)76}, byteArray0);
      
      Object[] objectArray0 = null;
      char char0 = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 1625);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1625, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1625, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (byte)10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kDTg$@vx<n'h&s]");
      assertFalse(boolean0);
      
      charArray0[0] = '/';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 70);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('/', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      boolean boolean2 = jSONReaderScanner2.isRef();
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      jSONReaderScanner2.setToken(59);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(59, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("'QI1Ttnvgmzzx2x~F");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONReaderScanner1.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jSONScanner0.scanStringArray(hashSet0, 'g');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      boolean boolean3 = jSONScanner0.scanBoolean(':');
      assertFalse(boolean3);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      long long1 = jSONReaderScanner1.scanLong('~');
      assertEquals(0L, long1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertTrue(long1 == long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(70, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1876, 1876);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      jSONReaderScanner0.nextToken(1783);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(66L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("en", string0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(set0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(set1);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotSame(locale0, locale1);
      assertSame(set1, set0);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      String string1 = jSONReaderScanner0.subString(49, 1876);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(66, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(string1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      jSONReaderScanner1.close();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
      
      boolean boolean3 = jSONReaderScanner1.isRef();
      assertFalse(boolean3);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(1876, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'6', '6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse null", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('r');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = ',';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      jSONReaderScanner1.features = 0;
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      
      charArray0[6] = 'O';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertArrayEquals(new char[] {'r', 'r', ',', 'r', 'r', 'r', 'O'}, charArray0);
      
      jSONReaderScanner2.scanNumber();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {'r', 'r', ',', 'r', 'r', 'r', 'O'}, charArray0);
      
      jSONReaderScanner0.nextToken(19);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("error parse null");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('e', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertArrayEquals(new char[] {'r', 'r', ',', 'r', 'r', 'r', 'O'}, charArray0);
      
      double double0 = jSONReaderScanner2.scanDouble('t');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {'r', 'r', ',', 'r', 'r', 'r', 'O'}, charArray0);
      
      String string1 = jSONScanner0.tokenName();
      assertEquals("Unknown", string1);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      long long0 = jSONScanner0.scanLong('w');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("set");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jSONScanner0.scanStringArray(hashSet0, 'w');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('E');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      long long1 = jSONReaderScanner0.scanLong('w');
      assertEquals(0L, long1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertTrue(long1 == long0);
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      
      Date date0 = jSONScanner1.scanFieldDate(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(date0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'r', 'r', ',', 'r', 'r', 'r', 'O'}, charArray0);
      
      jSONScanner1.resetStringPosition();
      assertEquals((-2), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotSame(jSONScanner1, jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('G');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('G');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("328#FWvMyPYHE*Wcq", 2);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1592, 2);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(2, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals('#', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      float[][] floatArray1 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = "g/Cc]h7/8s0{*Yq1QAy";
      JSONScanner jSONScanner0 = new JSONScanner("328#FWvMyPYHE*Wcq");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('3', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals('#', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONReaderScanner2.info();
      assertEquals("", string1);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(2, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 20, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+R*VV;'6!T1l/Yg");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[5];
      jSONReaderScanner0.sbuf = charArray0;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      JSONScanner jSONScanner0 = new JSONScanner("+R*VV;'6!T1l/Yg");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'m', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.setToken(716);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(716, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = jSONScanner0.isEOF();
      assertFalse(boolean3);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.putChar('X');
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextToken(605);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(23, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      boolean boolean4 = jSONScanner0.charArrayCompare(charArray0);
      assertFalse(boolean4);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(23, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X'}, charArray0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(23, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 94);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(94, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.config(feature0, true);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2142, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = ':';
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(2142, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(2142, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DisableCheckSpecialChar");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('c', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.nextToken(0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      Set<String> set0 = new HashSet<String>();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('U');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("DisableCheckSpecialChar", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('D', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      int int1 = jSONScanner1.indexOf('e', 46);
      assertEquals((-1), int1);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(int1 == int0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'g';
      charArray0[2] = 'm';
      charArray0[3] = '!';
      charArray0[4] = 'J';
      charArray0[5] = 'h';
      charArray0[6] = 'l';
      charArray0[7] = '(';
      charArray0[8] = 'z';
      int int0 = 127;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 10);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'V', 'g', 'm', '!', 'J', 'h', 'l', '(', 'z'}, charArray0);
      
      int int1 = jSONReaderScanner0.scanInt('W');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'V', 'g', 'm', '!', 'J', 'h', 'l', '(', 'z'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'V', 'g', 'm', '!', 'J', 'h', 'l', '(', 'z'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('V');
      assertFalse(boolean0);
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'V', 'g', 'm', '!', 'J', 'h', 'l', '(', 'z'}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=1%Z");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("(=1%Z");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(=1%Z", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanDouble('M');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONScanner0.scanLong('*');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      double double1 = jSONReaderScanner0.scanDouble('$');
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(10, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = JSONLexer.EOI;
      assertEquals('\u001A', char0);
      
      Object[] objectArray0 = null;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("24L#Wx|U", (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      long long0 = jSONReaderScanner1.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("24L#Wx|U", 34);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('j');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-1), charArray0, (-1), 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u;closejz.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("]F");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('v');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(32);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(15, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(15, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2775, 127);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(127, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('@');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("pP;R:4");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('p', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(127, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      jSONScanner0.nextToken((-1));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      SymbolTable symbolTable0 = new SymbolTable(5044);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner2.scanLong('@');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('p', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      Date date1 = jSONReaderScanner2.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(date1);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('p', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONReaderScanner0.nextToken(142);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.isRef();
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = '>';
      jSONReaderScanner0.putChar('>');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      
      jSONReaderScanner0.putChar('g');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      StringReader stringReader0 = new StringReader("_v[/fd");
      assertNotNull(stringReader0);
      
      int int0 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = jSONReaderScanner1.bytesValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotNull(byteArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      Set<String> set1 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set1);
      assertEquals(3, set1.size());
      assertFalse(set1.isEmpty());
      assertSame(set1, set0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      
      String string0 = jSONReaderScanner2.scanString('r');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextToken(321);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(757770282L, long0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(25, jSONReaderScanner0.token());
      assertEquals(8, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(long1 == long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(25, jSONReaderScanner0.token());
      assertEquals(8, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      String string0 = jSONScanner0.scanFieldString(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'P', 'P'}, charArray1);
      
      jSONScanner0.nextToken(2);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '&';
      charArray2[1] = 'P';
      charArray2[2] = 'P';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray2, (-608));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 78);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("OkKI/3I,E}D.(", 78);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('O', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(78, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("OkKI/3I,E}D.(");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('O', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol((SymbolTable) null, '6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.lexError("24L#Wx|U", (Object[]) null);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("24L#Wx|U");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("24L#Wx|U");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('2', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol((SymbolTable) null, '\u001A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      int int0 = 55;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("X/cyA`e[y1}", 49);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("X/cyA`e[y1}", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('X', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('/', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-2253));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-2253), bigDecimal0.shortValue());
      assertEquals((byte)51, bigDecimal0.byteValue());
      
      SymbolTable symbolTable0 = new SymbolTable(55);
      assertNotNull(symbolTable0);
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('`', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONScanner0.nextToken(36);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal1 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 278);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("@$Md");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('@', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      
      jSONReaderScanner3.scanNumber();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertEquals(2, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals('@', jSONReaderScanner3.getCurrent());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u;closejz.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u;closejz.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.setToken(15);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      int int0 = 100;
      char char1 = jSONReaderScanner0.charAt(100);
      assertEquals('\u0000', char1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(char1 == char0);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("u;closejz.str.lit");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      char char2 = jSONReaderScanner0.next();
      assertEquals(';', char2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)timeZone0.clone();
      assertNotNull(zoneInfo0);
      assertTrue(zoneInfo0.equals((Object)timeZone0));
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(zoneInfo0, timeZone0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo1);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertTrue(zoneInfo1.equals((Object)timeZone0));
      assertEquals("GMT", zoneInfo1.getID());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotSame(zoneInfo1, timeZone0);
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(timeZone0.equals((Object)zoneInfo0));
      assertTrue(timeZone0.equals((Object)zoneInfo1));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotSame(timeZone0, zoneInfo0);
      assertNotSame(timeZone0, zoneInfo1);
      
      ZoneInfo zoneInfo2 = (ZoneInfo)jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(zoneInfo2);
      assertTrue(zoneInfo2.equals((Object)zoneInfo1));
      assertTrue(zoneInfo2.equals((Object)zoneInfo0));
      assertEquals("GMT", zoneInfo2.getID());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotSame(zoneInfo2, zoneInfo1);
      assertNotSame(zoneInfo2, zoneInfo0);
      assertSame(zoneInfo2, timeZone0);
      
      int int1 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int2 = jSONReaderScanner0.pos();
      assertEquals(0, int2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ;
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) 'D');
      assertNotNull(bigDecimal0);
      assertEquals((short)68, bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("rdj");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('r', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      
      String string0 = jSONReaderScanner2.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('r', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONScanner0.stringVal();
      assertEquals("", string1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONScanner0.scanStringArray(linkedList0, 'e');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, linkedList0.size());
      
      int int0 = Calendar.DAY_OF_MONTH;
      assertEquals(5, int0);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("com.alibaba.fastjson.serializer.SerializerFeature", 0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('c', jSONReaderScanner3.getCurrent());
      
      float float1 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals(float1, float0, 0.01F);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger1 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger1);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONScanner0.getCalendar();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(calendar0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      assertNotNull(charsetDecoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      assertNotNull(codingErrorAction0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("REPORT", codingErrorAction0.toString());
      assertSame(uTF8Decoder0, charsetDecoder0);
      
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      assertNotNull(uTF8Decoder1);
      assertFalse(uTF8Decoder1.equals((Object)charsetDecoder0));
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder1.isAutoDetecting());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error", (-4));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error", (-4));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-4), jSONReaderScanner1.getFeatures());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.info();
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals("ident", string1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string1.equals((Object)string0));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jSONScanner0.scanStringArray(hashSet0, 'L');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      long long1 = jSONScanner0.scanLong('L');
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(long1 == long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      int int0 = jSONReaderScanner0.scanInt('L');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      long long2 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[0];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      assertNotNull(charsetDecoder0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      assertNotNull(codingErrorAction0);
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction0.toString());
      assertSame(uTF8Decoder0, charsetDecoder0);
      
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      assertNotNull(uTF8Decoder1);
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertFalse(uTF8Decoder1.equals((Object)charsetDecoder0));
      assertFalse(uTF8Decoder1.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error", (-4));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("float");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("float");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0, 62);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(62, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner3.scanIdent();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(18, jSONReaderScanner3.token());
      assertEquals(62, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("-yVg(eL]lwOK8LlMe");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(intArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray1 = jSONReaderScanner1.sub_chars(59, 62);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Calendar calendar0 = jSONReaderScanner3.getCalendar();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNull(calendar0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(18, jSONReaderScanner3.token());
      assertEquals(62, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature0, false);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char char0 = 'i';
      jSONScanner0.matchStat = (int) 'i';
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(105, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      SymbolTable symbolTable0 = new SymbolTable(105);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(105, jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(105, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setToken(105);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char1 = File.pathSeparatorChar;
      assertEquals(':', char1);
      assertFalse(char1 == char0);
      
      String string1 = jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'h');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(105, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("null");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      
      String string2 = jSONScanner1.scanSymbolWithSeperator(symbolTable0, '-');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(string2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      double double0 = jSONReaderScanner0.scanDouble('c');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner2 = new JSONScanner("illegal.char");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('i', jSONScanner2.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONScanner1.addSymbol(1592, 0, 47, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("new");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'H';
      charArray1[6] = '|';
      charArray1[2] = 'Q';
      charArray1[3] = 'T';
      charArray1[4] = 'H';
      charArray1[6] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      double double0 = jSONReaderScanner0.scanDouble('a');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      int int0 = jSONReaderScanner0.scanInt('g');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long1);
      assertTrue(long1 == long0);
      
      jSONScanner1.scanNumber();
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.setToken(34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DisableCheckSpecialChar");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("*s5TT");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean2 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('t');
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int1 = jSONScanner0.indexOf('t', 0);
      assertEquals((-1), int1);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('J');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("=0j", (-2556));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2556), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2556), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner1.setToken((-2556));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2556), jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2556), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("\u0000");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONScanner1.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(int1 == int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2556), jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-2556), jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(byteArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '6';
      charArray0[3] = 'k';
      charArray0[5] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'_', '_', '6', 'k', '\u0000', ';'}, charArray0);
      
      jSONReaderScanner0.putChar('_');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'_', '_', '6', 'k', '\u0000', ';'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'_', '_', '6', 'k', '\u0000', ';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "^TDFEQ|J-/do){s";
      JSONScanner jSONScanner0 = new JSONScanner("^TDFEQ|J-/do){s", 119);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('^', jSONScanner0.getCurrent());
      assertEquals(119, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 't';
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 2154);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'N'}, charArray1);
      
      String string1 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'N'}, charArray1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)76;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-35), (byte)76}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)10);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1Iqbq\"A:Bpj9 <2.", (-136));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-136), jSONReaderScanner1.getFeatures());
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals("", string0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-136), jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONScanner jSONScanner0 = new JSONScanner("1Iqbq\"A:Bpj9 <2.");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2118));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("\"D<J.3KXMk9C");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('v');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      JSONScanner jSONScanner1 = new JSONScanner("AllowSingleQuotes");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('A', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.nextToken((-1));
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('l', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      float[] floatArray1 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray1);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[6] = '|';
      char char0 = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'T';
      charArray0[4] = 'r';
      charArray0[5] = 'F';
      char char1 = '/';
      charArray0[6] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'H', '\u0000', 'Q', 'T', 'r', 'F', '/'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "null";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[1];
      char char0 = '~';
      UUID uUID0 = jSONReaderScanner0.scanUUID('~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(1632);
      assertNotNull(symbolTable0);
      
      char char1 = '7';
      UUID uUID1 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = 41;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('r');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      charArray0[2] = ',';
      charArray0[3] = 'r';
      charArray0[5] = 'r';
      jSONReaderScanner1.features = 0;
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      char char0 = 'Q';
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-883), 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(34);
      assertEquals('\u001A', char0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = null;
      char char1 = '-';
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("24L#Wx|U", (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      long long0 = jSONReaderScanner1.scanFieldLong(charArray0);
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.setToken(34);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(34, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(34, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error parse null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("2H/,xv");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('0');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean4 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean4);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      float float0 = jSONScanner0.scanFloat('D');
      assertEquals(2.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('2', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x}X1^~yW >(L", 101);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("S", 70);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_v[/fd", (-920));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-920), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      jSONScanner0.nextToken(4);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(70, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("S", 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('S', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals("", string0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-920), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      BigDecimal bigDecimal1 = new BigDecimal(95);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)95, bigDecimal1.shortValue());
      assertEquals((byte)95, bigDecimal1.byteValue());
      
      BigDecimal bigDecimal2 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal2);
      assertEquals(70, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      Number number0 = jSONScanner0.integerValue();
      assertEquals((short)0, number0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(70, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(70, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 4);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals('g', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(40);
      assertNotNull(symbolTable0);
      
      String[] stringArray0 = jSONScanner0.scanFieldStringArray(charArray0, 70, symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(stringArray0);
      assertEquals(70, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
      
      Date date0 = jSONReaderScanner3.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner3.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals('g', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner3.matchStat());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertArrayEquals(new char[] {'g', 'D', 'D', 'g', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{-[maaUirAX3[", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('{', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(12, jSONReaderScanner1.token());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EMPTY");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jSONScanner0.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Feature> linkedList1 = new LinkedList<Feature>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      jSONScanner0.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(long1 == long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":\"");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[5];
      jSONScanner0.matchStat = (int) 'i';
      assertEquals(0, jSONScanner0.token());
      assertEquals(105, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(105);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(105, jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(105, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.setToken(105);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("vKIO[IdZ(}UrZ");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed string : ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = jSONReaderScanner0.scanDate('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(105, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      
      jSONReaderScanner0.putChar('g');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner("$ref", 70);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('P');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      BigDecimal bigDecimal1 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      StringReader stringReader0 = new StringReader("_v[/fd");
      assertNotNull(stringReader0);
      
      int int0 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = jSONReaderScanner1.bytesValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotNull(byteArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, int1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(int1 == int0);
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      Set<String> set1 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(3, set1.size());
      assertSame(set1, set0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONScanner0.scanLong('3');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      
      int int2 = jSONReaderScanner0.scanInt('3');
      assertEquals(0, int2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 34);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      jSONScanner0.matchStat = (int) 'D';
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(68, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$zhjibe60");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      jSONReaderScanner0.setToken(30);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(30, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("Set", 30);
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('S', jSONScanner1.getCurrent());
      assertEquals(30, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[/fd", 78);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(78, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      JSONScanner jSONScanner2 = new JSONScanner("Set", 68);
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals('S', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(68, jSONScanner2.getFeatures());
      
      jSONScanner2.nextToken(9);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(21, jSONScanner2.token());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(68, jSONScanner2.getFeatures());
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[1];
      jSONScanner0.matchStat = (int) 'i';
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(105, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(105);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(105, jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(105, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.setToken(105);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("null", ':');
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(58, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      
      SymbolTable symbolTable1 = new SymbolTable(98);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable2 = new SymbolTable(105);
      assertNotNull(symbolTable2);
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable2, ':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
      assertFalse(symbolTable2.equals((Object)symbolTable0));
      assertFalse(symbolTable2.equals((Object)symbolTable1));
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotSame(symbolTable2, symbolTable0);
      assertNotSame(symbolTable2, symbolTable1);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("6ZN\"G");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals('6', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      boolean boolean1 = jSONScanner0.scanBoolean('i');
      assertFalse(boolean1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertTrue(boolean1 == boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      
      long long0 = jSONReaderScanner0.scanLong(':');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner3 = new JSONScanner("6ZN\"G");
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner3.pos());
      assertEquals(989, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('6', jSONScanner3.getCurrent());
      assertNull(jSONScanner3.stringDefaultValue());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.token());
      
      float[] floatArray0 = jSONScanner1.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(58, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 34);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 88);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(88, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      jSONReaderScanner0.putChar('=');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(88, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char char0 = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.putChar('s');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[1];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      assertNotNull(uTF8Decoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      assertNotNull(codingErrorAction0);
      assertEquals("IGNORE", codingErrorAction0.toString());
      
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      assertNotNull(charsetDecoder0);
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("IGNORE", codingErrorAction0.toString());
      assertEquals(1.0F, charsetDecoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder0.maxCharsPerByte(), 0.01F);
      assertFalse(charsetDecoder0.isAutoDetecting());
      assertEquals("\uFFFD", charsetDecoder0.replacement());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertSame(charsetDecoder0, uTF8Decoder0);
      
      CodingErrorAction codingErrorAction1 = uTF8Decoder0.malformedInputAction();
      assertNotNull(codingErrorAction1);
      assertFalse(codingErrorAction1.equals((Object)codingErrorAction0));
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction1.toString());
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertNotSame(codingErrorAction1, codingErrorAction0);
      
      CharsetDecoder charsetDecoder1 = uTF8Decoder0.onMalformedInput(codingErrorAction1);
      assertNotNull(charsetDecoder1);
      assertFalse(codingErrorAction1.equals((Object)codingErrorAction0));
      assertFalse(uTF8Decoder0.isAutoDetecting());
      assertEquals(1.0F, uTF8Decoder0.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder0.maxCharsPerByte(), 0.01F);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
      assertEquals("REPORT", codingErrorAction1.toString());
      assertEquals("\uFFFD", charsetDecoder1.replacement());
      assertFalse(charsetDecoder1.isAutoDetecting());
      assertEquals(1.0F, charsetDecoder1.averageCharsPerByte(), 0.01F);
      assertEquals(1.0F, charsetDecoder1.maxCharsPerByte(), 0.01F);
      assertSame(uTF8Decoder0, charsetDecoder1);
      assertSame(uTF8Decoder0, charsetDecoder0);
      assertNotSame(codingErrorAction1, codingErrorAction0);
      assertSame(charsetDecoder1, uTF8Decoder0);
      assertSame(charsetDecoder1, charsetDecoder0);
      
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      assertNotNull(uTF8Decoder1);
      assertFalse(uTF8Decoder1.equals((Object)uTF8Decoder0));
      assertFalse(uTF8Decoder1.equals((Object)charsetDecoder1));
      assertFalse(uTF8Decoder1.equals((Object)charsetDecoder0));
      assertFalse(uTF8Decoder1.isAutoDetecting());
      assertEquals("\uFFFD", uTF8Decoder1.replacement());
      assertEquals(1.0F, uTF8Decoder1.maxCharsPerByte(), 0.01F);
      assertEquals(1.0F, uTF8Decoder1.averageCharsPerByte(), 0.01F);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error", (-4));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(10);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("FvON]f:");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals((-4), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Feature.AllowSingleQuotes is false");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('F', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      jSONReaderScanner2.scanNumber();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('e', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(3, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      jSONReaderScanner1.nextToken(0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed.str.lit");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      jSONReaderScanner0.nextToken(299);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner0.setToken(39);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("Ah>vf) TW!>M");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONScanner0.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean3 = linkedList0.remove((Object) charArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>(hashSet0);
      assertNotNull(linkedList1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList1.size());
      
      boolean boolean4 = linkedList1.retainAll(linkedList0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      jSONScanner0.scanStringArray(hashSet0, '4');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0L, long1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(long1 == long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(39, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      
      jSONScanner0.nextToken(18);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('>', jSONScanner0.getCurrent());
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(39, 3810);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">9$McKRaV32g0A[`J");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(")qu)-A&-<IoI[CQjO");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("true", 0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      jSONReaderScanner2.locale = locale0;
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", jSONReaderScanner2.locale.getLanguage());
      assertEquals("CN", jSONReaderScanner2.locale.getCountry());
      assertEquals("zh_CN", jSONReaderScanner2.locale.toString());
      assertEquals("zho", jSONReaderScanner2.locale.getISO3Language());
      assertEquals("CHN", jSONReaderScanner2.locale.getISO3Country());
      assertEquals("", jSONReaderScanner2.locale.getVariant());
      
      boolean boolean0 = jSONReaderScanner3.isEnabled((-217));
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(date0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONReaderScanner2.scanIdent();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(7, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(byteArray0);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = jSONScanner0.scanISO8601DateIfMatch();
      assertFalse(boolean2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      
      float[] floatArray1 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray1);
      assertEquals(9, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 0, (-248));
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertNotNull(jSONReaderScanner4);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals((-248), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      jSONScanner0.matchStat = (int) 'i';
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(105, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(105);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(105, jSONScanner0.matchStat);
      assertNull(string0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(105, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.setToken(105);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("vKIO[IdZ(}UrZ");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      
      int int0 = 98;
      SymbolTable symbolTable1 = new SymbolTable(98);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      JSONScanner jSONScanner2 = new JSONScanner("vKIO[IdZ(}UrZ");
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('v', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      
      String string1 = "Yb4B919Q.Q99)'";
      JSONScanner jSONScanner3 = new JSONScanner("Yb4B919Q.Q99)'");
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals('Y', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(989, jSONScanner3.getFeatures());
      
      byte[] byteArray0 = jSONScanner1.bytesValue();
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(byteArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = (-393);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("BeanToArray", (-393));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-393), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanDouble(':');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(105, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      long long0 = jSONScanner1.scanLong(':');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner0);
      
      jSONScanner0.resetStringPosition();
      assertEquals(105, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(105, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      
      // Undeclared exception!
      try { 
        jSONScanner1.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      float float0 = jSONReaderScanner0.scanFloat('i');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      int int1 = jSONReaderScanner0.scanInt('i');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 148, 148);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(148, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('J');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(148, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(148, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(148, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(148, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.parser.JSONLexerBase");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("t");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "$");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(8, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      jSONScanner1.setTimeZone(simpleTimeZone0);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(8, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("$", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=$,offset=8,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('.');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      float float0 = jSONScanner0.scanFloat('>');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      jSONScanner0.setToken(148);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(148, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('=', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "unclo>sed.str.lit";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclo>sed.str.lit");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclo>sed.str.lit");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.setToken(39);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '}';
      charArray1[1] = 'I';
      charArray1[2] = 'R';
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
      assertEquals(39, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      int int0 = 20;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t", 20);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Feature.AllowCingleQCotes is false");
      assertFalse(boolean0);
      
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      int int1 = 84;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 84, (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner1.scanLong('/');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=1%Z");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7vSl", 128);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(7.0, double0, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      long long0 = jSONScanner0.scanLong('\'');
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      int int0 = Calendar.WEEK_OF_MONTH;
      assertEquals(4, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      double double1 = jSONReaderScanner0.scanDouble('\'');
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotEquals(double1, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(128, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      
      boolean boolean2 = jSONScanner0.scanBoolean('\'');
      assertFalse(boolean2);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('=', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j", 127);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('J');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner1 = new JSONScanner("\u0000");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jSONScanner1.scanStringArray(hashSet0, '\"');
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u0000', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigInteger bigInteger1 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = Calendar.DATE;
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      Date date0 = jSONReaderScanner0.scanDate(']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(127, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("=0j", 16384);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(16384, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('=', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 34);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      char char0 = '3';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$zhjibe60");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.setToken('D');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(68, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char1 = File.pathSeparatorChar;
      assertEquals(':', char1);
      assertFalse(char1 == char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("DLd>Ogoy.AlXmT,B");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int[] intArray0 = jSONScanner1.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(intArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('D', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8.6GwcxscS]W%N K7au", (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals('G', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(3, jSONReaderScanner1.token());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        pipedReader0.mark(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_v[/fd");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("$ref", 70);
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('P');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      BigDecimal bigDecimal1 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("=1");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('=', jSONScanner1.getCurrent());
      
      BigDecimal bigDecimal2 = jSONScanner0.scanDecimal('_');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      float float0 = jSONScanner1.scanFloat('.');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('=', jSONScanner1.getCurrent());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      jSONScanner0.setToken((-2025));
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals((-2025), jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('$', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(70, jSONScanner0.getFeatures());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      jSONScanner1.nextToken(0);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals('1', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      float float1 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(float1, float0, 0.01F);
      assertEquals('1', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      float float0 = jSONScanner0.scanFloat('3');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean0);
      
      jSONScanner0.matchStat = (int) 'D';
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(68, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      
      String string0 = jSONScanner0.scanString('L');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$zhjibe60");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.setToken(30);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(30, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[/fd", 78);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(78, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner("Set", (-1));
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('S', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      
      jSONScanner1.nextToken(8);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(21, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONScanner1.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      UUID uUID1 = jSONReaderScanner0.scanUUID('!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      Feature feature0 = Feature.InternFieldNames;
      boolean boolean2 = jSONScanner0.isEnabled(feature0);
      assertTrue(boolean2);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      
      boolean boolean3 = JSONScanner.checkDate('d', 'A', 'Q', ':', 'o', 'Z', 1202, 0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      int int1 = jSONReaderScanner0.scanInt('i');
      assertEquals(0, int1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(int1 == int0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char char1 = ')';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=0j");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('=', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0j");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      SymbolTable symbolTable0 = new SymbolTable(33);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.addSymbol(2531, 2531, 2531, symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('=', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DisableCheckSpecialChar");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean2 = jSONReaderScanner0.matchField(charArray0);
      assertTrue(boolean2);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable1 = new SymbolTable(4096);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">9$McKRaV32g0A[`J");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(")qu)-A&-<IoI[CQjO");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("true", 0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean1 = jSONScanner0.isEnabled(0);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      jSONReaderScanner3.setTimeZone((TimeZone) null);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONScanner0.stringVal();
      assertEquals("", string0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char char0 = jSONReaderScanner3.charAt(1228);
      assertEquals('\u0000', char0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      
      UUID uUID1 = jSONReaderScanner0.scanUUID('!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      
      int int0 = Calendar.MARCH;
      assertEquals(2, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", (-1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("null");
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('Z');
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNotSame(jSONScanner1, jSONScanner0);
      
      float float0 = jSONScanner0.scanFloat('.');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotSame(jSONScanner0, jSONScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("null", 2);
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(2, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      
      jSONScanner2.setToken(120);
      assertEquals(0, jSONScanner2.matchStat);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(120, jSONScanner2.token());
      assertEquals(2, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      
      JSONScanner jSONScanner3 = new JSONScanner("null", (-1));
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals('n', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals((-1), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.pos());
      assertFalse(jSONScanner3.isEOF());
      
      jSONScanner3.nextToken(1783);
      assertEquals(0, jSONScanner3.matchStat);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(8, jSONScanner3.token());
      assertTrue(jSONScanner3.isEOF());
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals((-1), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertNotSame(jSONScanner3, jSONScanner2);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      float float1 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertEquals(float1, float0, 0.01F);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertArrayEquals(new char[] {}, charArray0);
  }
}
