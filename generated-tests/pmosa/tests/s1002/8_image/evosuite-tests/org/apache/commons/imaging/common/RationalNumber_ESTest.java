/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:20:35 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-675L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-675L), 0L);
      rationalNumber0.toString();
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber0.floatValue();
      rationalNumber1.toString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-4327L), (-1L));
      rationalNumber2.toDisplayString();
      rationalNumber2.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0);
      String string0 = rationalNumber2.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(Integer.MAX_VALUE);
      assertEquals(1, rationalNumber3.divisor);
      
      rationalNumber2.toDisplayString();
      rationalNumber0.negate();
      RationalNumber.valueOf(1);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-2147483647), 0L);
      rationalNumber4.toString();
      rationalNumber0.toDisplayString();
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string1);
      
      rationalNumber0.toString();
      String string2 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string2);
      
      rationalNumber0.negate();
      RationalNumber.factoryMethod(1, 1);
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber5 = rationalNumber1.negate();
      long long0 = rationalNumber5.longValue();
      assertEquals((-2147483647L), long0);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1, 820L);
      rationalNumber5.floatValue();
      String string3 = rationalNumber4.toString();
      assertEquals("Invalid rational (1/0)", string3);
      
      RationalNumber rationalNumber7 = rationalNumber6.negate();
      assertEquals((-0.0012195122F), rationalNumber7.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber7.longValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.4122335446463694E-4);
      float float0 = rationalNumber0.floatValue();
      assertEquals(8291, rationalNumber0.divisor);
      assertEquals(2.4122543E-4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(493.5);
      assertEquals(987, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-322), (-1992));
      RationalNumber rationalNumber1 = RationalNumber.valueOf(220.9);
      long long0 = 0L;
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-322), 0L);
      rationalNumber0.toString();
      rationalNumber1.toDisplayString();
      rationalNumber1.toDisplayString();
      rationalNumber1.doubleValue();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1992));
      rationalNumber0.toString();
      rationalNumber3.toString();
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber2.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2019L));
      rationalNumber1.negate();
      RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(4224L, (-2019L));
      rationalNumber2.toDisplayString();
      rationalNumber2.toDisplayString();
      rationalNumber0.toDisplayString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.854368520071148E-6);
      String string0 = rationalNumber0.toString();
      assertEquals("1/539267 (0)", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(1.854368986049582E-6, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2600L), (-2600L));
      String string0 = rationalNumber0.toDisplayString();
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string1 = rationalNumber1.toString();
      assertEquals("-1", string1);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(185.14851238);
      rationalNumber3.floatValue();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(185.14851F);
      assertEquals((byte) (-71), rationalNumber4.byteValue());
      assertEquals(1650599, rationalNumber4.numerator);
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(1, (-751L));
      rationalNumber5.intValue();
      rationalNumber1.floatValue();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1, 1310L);
      rationalNumber5.intValue();
      rationalNumber2.toString();
      String string2 = rationalNumber6.toDisplayString();
      assertEquals("0.001", string2);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf((-1655.4106));
      assertEquals((-1655.4106F), rationalNumber7.floatValue(), 0.01F);
      
      String string3 = rationalNumber2.toString();
      assertTrue(string3.equals((Object)string0));
      
      rationalNumber2.doubleValue();
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod(10639L, 0);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber8.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(4294967313L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 4294967313, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 2147483659L);
      RationalNumber.valueOf(1073741829);
      RationalNumber rationalNumber1 = new RationalNumber(45, 1);
      String string0 = rationalNumber0.toString();
      assertEquals("-1073741824/1073741829 (-1)", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1);
      rationalNumber2.toDisplayString();
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertEquals((-1.0), rationalNumber3.doubleValue(), 0.01);
      
      RationalNumber.factoryMethod(1L, 1L);
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber4 = new RationalNumber(1073741791, (-3237));
      assertEquals((-331708.9252394192), rationalNumber4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483646684607E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0);
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(Integer.MAX_VALUE);
      String string0 = rationalNumber3.toString();
      assertEquals("2,147,483,647", string0);
      
      rationalNumber2.toDisplayString();
      rationalNumber0.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(1);
      assertEquals(1L, rationalNumber4.longValue());
      
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-2147483647), 0L);
      String string1 = rationalNumber5.toString();
      assertEquals("Invalid rational (1/0)", string1);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber0.toDisplayString();
      String string2 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string2);
      
      rationalNumber0.toString();
      rationalNumber0.toString();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1, 1);
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber7 = rationalNumber1.negate();
      rationalNumber7.longValue();
      rationalNumber1.floatValue();
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod(Integer.MAX_VALUE, 363L);
      assertEquals(363, rationalNumber8.divisor);
      assertEquals(5915932.91184573, rationalNumber8.doubleValue(), 0.01);
      
      String string3 = rationalNumber6.toString();
      assertEquals("1", string3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483646684607E9));
      rationalNumber0.negate();
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.0);
      String string0 = rationalNumber1.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 2147483648L);
      assertEquals((-4.6566128730773926E-10), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = new RationalNumber(1, 1);
      assertEquals(1.0, rationalNumber3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483649L), (-2147483649L));
      RationalNumber rationalNumber1 = new RationalNumber(1, 1);
      RationalNumber.factoryMethod(1, 1);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4294967293L, (-1L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("3", string0);
  }
}
