/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:37:11 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      int int0 = ByteString.codePointIndexToCharIndex("", 153);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(3816);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      Charset.defaultCharset();
      String string1 = byteString1.base64();
      assertEquals("47DEQpj8HBSa+/TImU+5JCeuQeREm5NMpJWZG1hSuFU=", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.sha1();
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString2.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString.codePointIndexToCharIndex("7_{K2N|nc>]I", 0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.lastIndexOf(byteString0);
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString.encodeString("fromIndex=%s toIndex=%s", charset0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("fromIndex=%s toIndex=%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: fromIndex=%s toIndex=%s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-20), 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.sha1();
      byteString0.md5();
      byteString0.base64();
      byteString0.sha1();
      Charset.defaultCharset();
      ByteString byteString1 = ByteString.decodeHex("");
      ByteString byteString2 = ByteString.encodeUtf8("_V[MsazycbQxe");
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteString3.toByteArray();
      ByteString.of(byteBuffer0);
      assertEquals("java.nio.HeapByteBufferR[pos=13 lim=13 cap=13]", byteBuffer0.toString());
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.toString();
      byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = ByteString.decodeBase64("[text=6]");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFile mockFile0 = new MockFile("ou@IbGsn<7", "3C<N,,I%Uf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)70;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hex();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteString0.EMPTY.lastIndexOf(byteArray1);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byteString0.toString();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byte[] byteArray2 = byteString1.internalArray();
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(3847);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)11;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.EMPTY.write(buffer0);
      Buffer buffer1 = new Buffer();
      ByteString byteString1 = byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring((int) (byte)90, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byteString0.toString();
      ByteString byteString1 = byteString0.sha1();
      byteString0.startsWith(byteArray0);
      byteString1.lastIndexOf(byteString0);
      // Undeclared exception!
      try { 
        byteString1.endsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.read(buffer_UnsafeCursor0.buffer, 4278190080L);
      boolean boolean0 = byteString0.rangeEquals((-1), (byte[]) null, (-1), 769);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.md5();
      byteString2.EMPTY.sha1();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      ByteString byteString3 = byteString1.sha1();
      boolean boolean0 = byteString3.equals(byteString1);
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = byteString2.compareTo(byteString1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pipe pipe0 = new Pipe(3847);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)11;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.sha1();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = byteString0.toString();
      assertEquals("[hex=6c4aec]", string0);
      
      int int1 = byteString0.compareTo(byteString1);
      assertEquals((-1), int1);
      
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">!SZ3w_<n<-5o%0:;LK");
      byteString0.lastIndexOf(byteString1, (-28));
      ByteString byteString2 = byteString1.sha256();
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(86, (int) (byte)98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(26)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)0, (-1040));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Q&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: Q
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("in == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      String string0 = byteString0.toString();
      assertEquals("[hex=ee]", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.sha1();
      int int1 = byteString0.lastIndexOf(byteString1);
      int int2 = byteString1.indexOf(byteArray0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      String string0 = byteString0.toString();
      assertEquals("[text=6]", string0);
      
      boolean boolean0 = byteString0.equals("[text=6]");
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      ByteString byteString0 = ByteString.decodeHex("");
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      byteString0.hashCode();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.sha512();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 0, 3847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=3847
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      String string0 = byteString1.utf8;
      String string1 = byteString0.toString();
      assertEquals("[hex=44444444]", string1);
      
      int int0 = byteString0.lastIndexOf(byteString1);
      byteString1.hmacSha256(byteString0);
      boolean boolean0 = byteString1.EMPTY.startsWith(byteString0);
      assertFalse(boolean0);
      
      int int1 = byteString1.indexOf(byteString0, 17);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      String string0 = byteString0.toString();
      assertEquals("[hex=44]", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.sha1();
      int int1 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int1);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.closed;
      HashingSource hashingSource0 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      ByteString byteString1 = ByteString.decodeBase64("ByNJ,v8#M F<^4K");
      assertNull(byteString1);
      
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)0;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring((int) (byte)0, (int) (byte)0);
      byteString1.equals(byteString0);
      byteString1.compareTo(byteString0);
      byteString0.startsWith(byteArray0);
      ByteString byteString2 = ByteString.encodeUtf8("unit == null");
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = " 6> ";
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" 6> ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.toString();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.sha1();
      String string0 = byteString1.base64Url();
      assertEquals("W6k8nbDP-T9StSHXQg5D9u2ieE8=", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-128);
      byteArray0[6] = (byte) (-20);
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      Pipe pipe0 = new Pipe(46L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.hmacSha256(source0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      HashingSource.sha1(gzipSource0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.hmacSha512(byteString0);
      ByteString byteString2 = ByteString.decodeBase64("fromIndex=%s toIndex=%s");
      assertNull(byteString2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString byteString3 = realBufferedSource0.readByteString(0L);
      int int0 = byteString0.compareTo(byteString3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring(3847);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString2.EMPTY.sha1();
      Pipe pipe0 = new Pipe(1301L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      byteString3.hashCode();
      ByteString byteString4 = byteString1.md5();
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString5 = byteString1.sha1();
      Object object0 = new Object();
      boolean boolean0 = byteString4.equals(object0);
      int int1 = byteString2.compareTo(byteString4);
      assertEquals(0, int1);
      assertFalse(byteString1.equals((Object)byteString5));
      
      boolean boolean1 = byteString0.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString6 = ByteString.encodeUtf8("source exhausted prematurely");
      assertEquals(28, byteString6.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.sha1();
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertFalse(boolean0);
      
      int int1 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.EMPTY.equals("");
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.EMPTY.sha1();
      byteString0.hmacSha1(byteString1);
      byteString0.hashCode();
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.sha1();
      byteString1.EMPTY.hashCode();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      int int1 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString1 = byteString0.sha1();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString2.size();
      int int1 = byteString2.indexOf(byteString0);
      assertEquals((-1), int1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString.of(byteArray0);
      ByteString.decodeBase64("");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        ByteString.read(dataInputStream0, (-2414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2414
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString.of(byteArray0);
      String string0 = "fromIndex=%s toIndex=%s";
      // Undeclared exception!
      try { 
        ByteString.encodeString("fromIndex=%s toIndex=%s", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byteString0.toString();
      byteString0.toString();
      byteString0.indexOf(byteArray0, (-1));
      byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.md5();
      byteString1.EMPTY.sha1();
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString2 = byteString0.sha1();
      byteString2.equals(byteString0);
      byteString0.sha256();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.md5();
      byteString2.EMPTY.sha1();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString3 = byteString1.sha1();
      byteString3.equals(byteString1);
      byteString0.sha256();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byteString1.toString();
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null, (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString2.EMPTY.sha1();
      Pipe pipe0 = new Pipe(1301L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer0 = new Buffer();
      ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink0.hash();
      hashingSink0.hash();
      byteString1.md5();
      byteString3.toAsciiLowercase();
      ByteString byteString4 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString.codePointIndexToCharIndex("x%;myy`\"'?*\"'c", 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, 1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-68);
      Pipe pipe0 = new Pipe((byte)120);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.hashCode();
      byteString0.indexOf(byteArray0, (-2307));
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = hashingSource0.hash();
      Object object0 = new Object();
      byteString1.EMPTY.equals(object0);
      byteString0.indexOf(byteString2, (int) (byte)120);
      byteString1.compareTo(byteString2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(dataInputStream0, (byte)120);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.md5();
      byteString1.base64();
      byteString2.sha1();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Bf5AV1MWbxJVWefJrFWGVPEHx+k=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: V
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring((int) (byte)0, (int) (byte)0);
      byteString1.startsWith(byteArray0);
      byteString0.endsWith(byteString1);
      byteString0.sha256();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.sha1();
      byteString0.EMPTY.endsWith(byteString1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString1.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString1 = byteString0.sha1();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      byteString1.toAsciiUppercase();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.lastIndexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString1 = byteString0.sha1();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      byteString1.toAsciiUppercase();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1), (-3546));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.toString();
      byteString1.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteString0.EMPTY.write(byteArrayOutputStream0);
      byteString0.EMPTY.equals("");
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.sha256();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Pipe pipe0 = new Pipe(3847);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }
}
