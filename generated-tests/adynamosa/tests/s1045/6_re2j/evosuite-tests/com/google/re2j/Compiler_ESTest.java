/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 01:38:08 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Compiler;
import com.google.re2j.Prog;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.min = 1206;
      regexp1.name = "\"O%$XiS9`-+!Ds9$L;";
      int[] intArray0 = new int[2];
      intArray0[0] = 1206;
      intArray0[1] = 0;
      regexp0.min = 1206;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp2 = new Regexp(regexp_Op2);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp1);
      regexp2.toString();
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp2);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Regexp regexp3 = new Regexp(regexp1);
      Compiler.compileRegexp(regexp2);
      Regexp regexp4 = new Regexp(regexp_Op2);
      Compiler.compileRegexp(regexp4);
      Prog prog1 = Compiler.compileRegexp(regexp4);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      regexp0.op = regexp_Op1;
      regexpArray0[3] = regexp0;
      regexpArray0[2] = regexp0;
      regexp1.max = 18;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.op = regexp_Op0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp.Op regexp_Op3 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op3);
      regexp2.flags = (-2762);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      Object object0 = new Object();
      regexp3.equals(regexp_Op2);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexp0.max = (-3381);
      regexpArray0[0] = regexp3;
      regexpArray0[4] = regexp0;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp4);
      Regexp regexp5 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      regexp1.reinit();
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op4 = Regexp.Op.LITERAL;
      Regexp regexp6 = new Regexp(regexp_Op4);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexpArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp.Op regexp_Op3 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op3);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      Object object0 = new Object();
      regexp0.equals("");
      regexp3.equals(regexp_Op2);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexp0.max = (-3381);
      regexpArray0[0] = regexp3;
      regexpArray0[4] = regexp0;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp4);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp4);
      Regexp regexp5 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op4 = Regexp.Op.LITERAL;
      Regexp regexp6 = new Regexp(regexp_Op4);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexpArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      regexpArray0[14] = regexp0;
      regexpArray0[1] = regexpArray0[0];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = 1206;
      regexp0.min = 1206;
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexp2.equals("V-");
      regexpArray1[4] = regexp2;
      regexpArray1[5] = regexp0;
      regexp0.subs = regexpArray1;
      regexp0.reinit();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp2);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      regexp0.op = regexp_Op1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp1.max = 18;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.op = regexp_Op0;
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      regexp0.max = 18;
      regexp1.name = "Nko";
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp2.equals(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1557);
      intArray0[1] = 60;
      intArray0[2] = (-1510);
      intArray0[3] = 1;
      intArray0[4] = 3330;
      intArray0[5] = 11;
      intArray0[6] = 2173;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      regexp0.flags = (-98);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.equals(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp.Op regexp_Op3 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op3);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      regexp2.reinit();
      Object object0 = new Object();
      regexp3.equals(regexp_Op2);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp0;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp4);
      Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp4);
      Compiler.compileRegexp(regexp1);
      Regexp regexp5 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp5);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op4 = Regexp.Op.QUEST;
      Regexp regexp6 = new Regexp(regexp_Op4);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = 1206;
      regexp0.min = 1206;
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray0[1] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexpArray1[4] = regexp2;
      regexpArray1[5] = regexp0;
      regexp0.subs = regexpArray1;
      int[] intArray0 = new int[2];
      intArray0[0] = 1206;
      intArray0[1] = 1206;
      regexp0.runes = intArray0;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.name = "";
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.op.isPseudo();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.toString();
      regexp1.cap = 1141;
      regexp0.flags = 480;
      regexp0.equals((Object) null);
      regexp1.min = 480;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      regexp1.op = regexp_Op0;
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[6];
      regexp0.runes = intArray0;
      intArray0[0] = 2291;
      int[] intArray1 = new int[2];
      intArray1[0] = 2291;
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexp0.subs = regexpArray0;
      regexp1.flags = 12;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Regexp[] regexpArray1 = new Regexp[1];
      regexpArray1[0] = regexp0;
      regexp1.subs = regexpArray1;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[15];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = 1206;
      regexp0.min = 1206;
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[4] = regexp0;
      regexpArray1[5] = regexp0;
      regexp0.reinit();
      regexp0.cap = 13;
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      regexp0.runes = intArray0;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Compiler.compileRegexp(regexp3);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp2.toString();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      regexp0.runes = intArray0;
      intArray0[0] = 2291;
      int[] intArray1 = new int[2];
      intArray1[0] = 2291;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1640);
      intArray0[1] = 0;
      intArray0[2] = 3591;
      intArray0[3] = 13;
      intArray0[4] = 5;
      intArray0[5] = 8;
      intArray0[6] = 3634;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.cap = 8;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = new Regexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp2);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexp0.reinit();
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.toString();
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexp1.max = 423;
      regexpArray0[4] = regexp0;
      regexp1.flags = 423;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      int[] intArray0 = new int[2];
      intArray0[0] = 423;
      intArray0[1] = 423;
      regexp0.runes = intArray0;
      regexpArray0[7] = regexp0;
      regexp1.max = 423;
      regexp0.subs = regexpArray0;
      regexp0.max = 423;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.reinit();
      Compiler.compileRegexp(regexp1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = 1230;
      regexp0.min = 1230;
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray1[3] = regexp0;
      regexpArray1[4] = regexp0;
      regexpArray1[5] = regexp0;
      regexp0.subs = regexpArray1;
      regexp0.reinit();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      regexp0.runes = intArray0;
      regexp0.name = "";
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.name = "";
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[0];
      regexp1.toString();
      regexp1.cap = 1141;
      regexp0.runes = intArray0;
      regexp0.flags = 480;
      regexp0.equals((Object) null);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      regexp1.op = regexp_Op2;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 20;
      regexp0.flags = (-2227);
      regexp0.cap = (-2131);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.max = 509;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[0];
      regexp1.toString();
      regexp1.cap = 1141;
      regexp0.runes = intArray0;
      regexp0.flags = 480;
      regexp0.equals((Object) null);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.EMPTY_MATCH;
      regexp1.op = regexp_Op2;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      regexp0.runes = intArray0;
      intArray0[0] = 2291;
      int[] intArray1 = new int[2];
      intArray1[0] = 2291;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      regexp0.runes = intArray0;
      intArray0[0] = 2291;
      int[] intArray1 = new int[2];
      intArray1[0] = 2291;
      regexp0.reinit();
      intArray1[1] = 2224;
      regexp0.runes = intArray1;
      regexp0.reinit();
      intArray0[1] = 2224;
      intArray0[2] = (-168);
      intArray0[3] = 0;
      intArray0[4] = 13;
      intArray0[5] = (-3319);
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1581;
      intArray0[1] = 38;
      intArray0[2] = 1775;
      intArray0[3] = (-1877);
      intArray0[4] = (-984);
      intArray0[5] = 8;
      intArray0[6] = 0;
      regexp0.name = "IrMRbMwGfBY";
      intArray0[7] = 416;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      regexp0.cap = (-313);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.cap = (-313);
      regexp2.flags = 2244;
      Prog prog0 = Compiler.compileRegexp(regexp2);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp2;
      regexp2.flags = 1063;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[1];
      intArray0[0] = 918;
      regexp1.runes = intArray0;
      regexp1.equals("");
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = null;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Regexp regexp3 = new Regexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp3);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int[] intArray0 = new int[1];
      regexp0.subs = null;
      intArray0[0] = 14;
      regexp0.runes = intArray0;
      regexp0.runes = null;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.runes = intArray0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.equals(object0);
      regexp0.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 3051;
      regexp0.equals(regexp_Op0);
      regexp0.subs = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 369;
      Object object0 = new Object();
      int[] intArray0 = new int[6];
      intArray0[0] = 3051;
      intArray0[1] = 369;
      intArray0[2] = 3051;
      intArray0[3] = 369;
      intArray0[4] = 369;
      intArray0[5] = 369;
      regexp1.runes = intArray0;
      Object object1 = new Object();
      regexp1.flags = 369;
      regexp1.equals(object1);
      regexp1.equals(object0);
      regexp1.equals("?-)tq.6=G?m4^u?");
      regexp1.min = 369;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp regexp0 = null;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[0];
      regexp1.toString();
      regexp1.cap = 1141;
      regexp0.runes = intArray0;
      regexp0.flags = 480;
      regexp0.cap = 1598;
      regexp0.equals((Object) null);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.EMPTY_MATCH;
      regexp1.op = regexp_Op2;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }
}
