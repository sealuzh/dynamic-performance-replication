/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:17:39 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3979, 3979, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(1286, vectorFunction0);
      cCSMatrix0.blankOfShape(3979, 3979);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 804);
      cCSMatrix0.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(203, 203, matrixFunction0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(804, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1508, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 760;
      MockRandom mockRandom0 = new MockRandom(760);
      // Undeclared exception!
      try { 
        CCSMatrix.random(760, 760, (double) 760, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-2250), 0, (double) (-2250), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.copyOfColumns(0);
      cCSMatrix0.iteratorOfColumn(0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.copyOfColumns(0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("No rows or columns selected.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 3151;
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(710, 1978.04809982);
      cCSMatrix0.getRow(710);
      int[] intArray0 = new int[7];
      intArray0[0] = 710;
      intArray0[1] = 710;
      intArray0[2] = 710;
      intArray0[3] = 710;
      intArray0[4] = 710;
      intArray0[5] = 710;
      intArray0[6] = 710;
      int[] intArray1 = new int[8];
      intArray1[0] = 710;
      intArray1[1] = 710;
      intArray1[2] = 710;
      intArray1[3] = 710;
      intArray1[4] = 710;
      intArray1[5] = 710;
      intArray1[6] = 710;
      intArray1[7] = 710;
      cCSMatrix0.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2684, 2684);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-567.0785914136609);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1799.81574735;
      doubleArray1[5] = 931.72622707;
      doubleArray1[6] = 30.28534076379;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 30.28534076379;
      doubleArray2[1] = 1799.81574735;
      doubleArray2[2] = (-567.0785914136609);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1799.81574735;
      doubleArray2[5] = 1799.81574735;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 30.28534076379;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 30.28534076379;
      doubleArray3[5] = 1799.81574735;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-260.38));
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-3324.68705);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-3324.68705);
      doubleArray5[2] = (-3324.68705);
      doubleArray5[3] = (-3324.68705);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-3324.68705);
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-3324.68705);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-3324.68705);
      doubleArray0[6] = doubleArray7;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 545;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(545, 545);
      double double0 = cCSMatrix0.min();
      double double1 = cCSMatrix0.maxInColumn(545);
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow(int1, vectorFunction0);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      Matrix matrix0 = null;
      cCSMatrix0.multiply(matrix0);
      doubleArray0[0] = doubleArray1;
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      int int2 = (-1185);
      DenseVector denseVector0 = DenseVector.unit(int2);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      String string0 = "sFWN-Qb";
      SparseVector sparseVector1 = SparseVector.fromMatrixMarket(string0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector1, sparseVector1);
      cCSMatrix0.setColumn(int1, vector0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = double0;
      doubleArray2[1] = double1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = double0;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = (double) int0;
      doubleArray3[4] = double0;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      int int3 = Integer.MAX_VALUE;
      cCSMatrix1.nonZeroIteratorOfColumn(int3);
      int int4 = 0;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int4, int1);
      int int5 = 4;
      cCSMatrix2.maxInColumn(int5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0.0);
      cCSMatrix0.rank();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.getRow(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(0, 765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 765
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.transpose();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(1114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1114
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2435.2593361678496;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(32, 0, doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2684);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      int int0 = (-722);
      Matrix matrix0 = cCSMatrix0.removeRow(int0);
      matrix0.toSparseMatrix();
      int int1 = 2;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumn(int1, vectorAccumulator1);
      cCSMatrix0.subtract(matrix0);
      int int2 = (-1);
      cCSMatrix0.copyOfShape(int2, int2);
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1155, 1155, 1155);
      cCSMatrix0.nonZeroAt(974, 974);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(331);
      cCSMatrix0.nonZeroAt((-3127), 14);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.multiplyByItsTranspose();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(2661);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2661
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom(0L);
      CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (-0.42528802742714533), (Random) mockRandom0);
      cCSMatrix0.getRow(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.getRow(3);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3);
      cCSMatrix1.setAll(3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.setAll((-1783.11));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.copyOfColumns(0);
      cCSMatrix0.iteratorOfColumn(0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 0, 0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(545, 545);
      cCSMatrix0.min();
      double double0 = new Integer(545);
      cCSMatrix0.columnMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(0, vectorFunction0);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      Matrix matrix0 = null;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.multiply(matrix0);
      doubleArray0[0] = doubleArray1;
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      int int0 = (-1185);
      DenseVector.unit(int0);
      int int1 = 3;
      cCSMatrix0.getRow(int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(23);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.eachInColumn(7, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(9, 1126, (double) 0L, (Random) mockRandom0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 540, 0.5, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix.fromCSV("");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 32;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      cCSMatrix0.copyOfShape(3, 3);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      CCSMatrix.zero(3, 23, 3);
      cCSMatrix0.copyOfShape(3, 3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.sum();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn((-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.toBinary();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.apply(matrixMatrixOperation0, matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1631, 1631);
      cCSMatrix0.iteratorOrNonZeroColumns();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.FORWARD_BACK_SUBSTITUTION;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      String string0 = "4#Po";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      CCSMatrix.zero(3, 23, 3);
      CCSMatrix cCSMatrix1 = new CCSMatrix(23, 23, 23);
      cCSMatrix1.maxInColumn(1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("");
      cCSMatrix0.getRow(1549);
      CCSMatrix.identity(3);
      cCSMatrix1.setAll(1549);
      cCSMatrix1.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(233, 3, mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2645, 2645);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 23;
      int int1 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.setColumn(2, (-372.011397574742));
      cCSMatrix0.transform(matrixFunction0);
      int int2 = (-4670);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      ColumnMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      cCSMatrix0.setAll((-944.4707));
      int int1 = (-562);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(0, (double) 0);
      DenseVector denseVector0 = DenseVector.zero(2);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DenseVector.zero(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(4270, 1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1483;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1483, 1483, 5);
      cCSMatrix0.transformColumn(5, (VectorFunction) null);
      int int1 = 3;
      cCSMatrix0.set(int1, int1, int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      int int1 = 2;
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(2, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 3;
      VectorProcedure vectorProcedure0 = null;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 13.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(4, 2, matrixFunction0);
      cCSMatrix0.copyOfShape(536870911, 1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(475);
      cCSMatrix0.min();
      cCSMatrix0.minInColumn(475);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(3019);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3019
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3979, 3979, 3979);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2294, 2294);
      cCSMatrix1.euclideanNorm();
      cCSMatrix1.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(3, 2, matrixFunction0);
      cCSMatrix0.getRow(3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 620.3594354151;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 620.3594354151;
      int int0 = 1487;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1487, 620.3594354151);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray3 = cCSMatrix0.foldColumns(vectorAccumulator0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray2);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      cCSMatrix0.multiply(matrix0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector.fromArray(doubleArray3);
      cCSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1028);
      cCSMatrix1.copyOfShape(1625, 3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(4, 1, 4);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1631, 1631);
      cCSMatrix0.minInColumn(32);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3979, 3979, 3979);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)27;
      int[] intArray0 = new int[4];
      intArray0[0] = 3142;
      intArray0[1] = 3979;
      intArray0[2] = (int) (byte)27;
      intArray0[3] = (int) (byte)62;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3979, 3979, 3979);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)3;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn((byte)3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2686, 2686);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      org.evosuite.runtime.Random.setNextRandom(2686);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2.0);
      DenseVector denseVector0 = DenseVector.zero(2);
      cCSMatrix0.setColumn(0, (Vector) denseVector0);
      cCSMatrix0.min();
      cCSMatrix0.setAll(2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, 2127.391406, 2127.391406, (-1537.588770574), 97.58).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.setColumn(2, (-372.011397574742));
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.maxInColumn(2);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      cCSMatrix0.rank();
      cCSMatrix0.copyOfShape(9, 9);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((-370), 9);
      cCSMatrix1.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix(32, 19, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(23);
      cCSMatrix0.copyOfShape(48, 23);
      cCSMatrix1.copyOfShape(3, 4);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      Integer integer0 = new Integer((-4));
      cCSMatrix0.equals((Object) integer0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setColumn(2, (-385.06981808163323));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 23);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Vector vector0 = cCSMatrix0.toColumnVector();
      cCSMatrix0.multiply(vector0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix.diagonal(4, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 17;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, 996.44189);
      cCSMatrix0.blank();
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 996.44189;
      doubleArray0[1] = (double) 17;
      doubleArray0[2] = (double) 17;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = 996.44189;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.apply(matrixVectorOperation0, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      MatrixVectorOperation<Double> matrixVectorOperation0 = (MatrixVectorOperation<Double>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      BasicVector basicVector0 = (BasicVector)DenseVector.unit(3882);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) basicVector0, (ColumnMajorSparseMatrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        cCSMatrix1.apply(matrixVectorOperation0, (Vector) compressedVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(14, 14);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      ooPlaceMatricesMultiplication0.partiallyApply((ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn((-2628), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2628
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.maxInColumn(0);
      DenseVector.unit(23);
      cCSMatrix0.getRow(0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 2);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 3, 23);
      Integer integer0 = new Integer((-4));
      cCSMatrix0.equals((Object) integer0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setColumn(2, (-385.06981808163323));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 23);
      sparseVector0.toColumnMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, rowMajorSparseMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '15' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(121);
      cCSMatrix0.setColumn(37, (double) 37);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 1443;
      SparseVector.fromMap(hashMap0, int0);
      int int1 = 2719;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix1.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int2 = 1016;
      int int3 = 1230;
      Matrix matrix1 = Matrix.unit(int2, int3);
      CCSMatrix.block(cCSMatrix1, matrix1, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      cCSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(7, 7, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(2, 980224425, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 980224425
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(14, 7, matrixFunction0);
      cCSMatrix0.blank();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction1);
      MatrixFunction matrixFunction2 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(17, 48, matrixFunction2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.blank();
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(7, 10, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(14);
      cCSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)14).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(7, 7, matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(13, 13, matrixFunction1);
  }
}
