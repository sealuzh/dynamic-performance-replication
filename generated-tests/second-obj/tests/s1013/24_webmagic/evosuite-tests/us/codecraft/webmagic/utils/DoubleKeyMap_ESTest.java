/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:41:42 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(integer0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      doubleKeyMap1.remove(object0);
      doubleKeyMap1.remove(object0, "Bb|!9-J~H7?KD`6{");
      DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>> doubleKeyMap2 = new DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>>();
      HashMap<Object, Map<String, Object>> hashMap2 = new HashMap<Object, Map<String, Object>>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Map<String, Object>) null, (Map<Object, Map<String, Object>>) hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      doubleKeyMap0.put(object0, ":kJ4$.5=br}op2ThD;", ":kJ4$.5=br}op2ThD;");
      String string0 = doubleKeyMap0.put(object0, (String) null, "Y Z[S`<6N{$C{zH");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Integer integer1 = new Integer((-279));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Integer, Map<Map<String, Object>, Integer>> hashMap1 = new HashMap<Integer, Map<Map<String, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>(hashMap1, class0);
      Integer integer2 = new Integer((-279));
      Integer integer3 = new Integer((-279));
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer4 = new Integer(0);
      String string0 = "S,";
      HashMap<String, Map<String, Integer>> hashMap2 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap2 = new DoubleKeyMap<String, String, Integer>(hashMap2);
      String string1 = "";
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      hashMap2.put("", hashMap3);
      doubleKeyMap2.remove("", "S,");
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>();
      int int0 = (-273);
      Integer integer0 = new Integer((-273));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(integer0, (Map<String, Object>) hashMap0, integer0);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((-842));
      doubleKeyMap1.put((Integer) null, integer2, "4-,_Cu<B&+kl/");
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleKeyMap0).when(biFunction0).apply(anyString() , any());
      hashMap0.compute("", biFunction0);
      doubleKeyMap1.get(integer1, integer0);
      Integer integer3 = new Integer(0);
      doubleKeyMap1.remove((Integer) null, integer3);
      HashMap<String, Map<Integer, Object>> hashMap1 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(hashMap1);
      doubleKeyMap2.newMap();
      Class<Map> class0 = Map.class;
      Integer integer4 = new Integer((-273));
      DoubleKeyMap<Object, Map<String, Object>, Integer> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, Map<String, Object>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, Map<Integer, Map<String, Object>>> hashMap0 = new HashMap<Integer, Map<Integer, Map<String, Object>>>();
      DoubleKeyMap<Integer, Integer, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<String, Object>>(hashMap0);
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<String, Object>> hashMap1 = new HashMap<Integer, Map<String, Object>>(1);
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.get(integer0, integer0);
      HashMap<Integer, Map<Integer, Object>> hashMap2 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>(hashMap2);
      Object object0 = new Object();
      doubleKeyMap1.put(integer0, integer0, object0);
      HashMap<Object, Map<String, String>> hashMap3 = null;
      try {
        hashMap3 = new HashMap<Object, Map<String, String>>((-3360), (-3360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3360
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
