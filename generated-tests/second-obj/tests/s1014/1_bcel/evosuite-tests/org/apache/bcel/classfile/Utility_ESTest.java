/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:41:03 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("=H|cQZL,]a3}\u0007[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=H|cQZL,]a3}\u0007[#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "(BtGAEc|.@V~y-IkK6z{";
      try { 
        Utility.methodSignatureArgumentTypes("(BtGAEc|.@V~y-IkK6z{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tGAEc|.@V~y-IkK6z{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("EH|cQZL,~da}\b[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EH|cQZL,~da}\b[#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.compactClassName(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("SyntheticRepository could not load ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SyntheticRepository could not load 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.format((-3006), 199, false, ']');
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]-3006", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.format(170, (-2354), true, 'P');
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(67, 778, true, 'P');
      assertEquals("67PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? extends ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)8;
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = Utility.clearBit((-5969), 500);
      assertEquals((-1054545), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.compactClassName(";_hSC{X\"gG=(");
      assertEquals(";_hSC{X\"gG=(", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("[", false);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Utility.isSet(59, 1084);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[4] = (byte) (-53);
      String string0 = Utility.classOrInterface((byte) (-63));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("ifnull");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ifnull", string1);
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("(type=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = Utility.isSet((-508), 2481);
      assertTrue(boolean0);
      
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.signatureToString("ZuS],,})is{:3,R'");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.classOrInterface(159);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("^j%&u7P+%,]:;P", "goto", "class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^j%&u7P+%,]:;P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(50, 50);
      assertEquals(262194, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("2ZB$`xH{t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2ZB$`xH{t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      assertEquals((byte)66, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("B", string0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal type>", string2);
      assertNotNull(string2);
      
      String string3 = Utility.getSignature("<illegal type>");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L<illegal;", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(65);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Pattern.quote((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[12];
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.signatureToString("ZuS],,})is{:3,R'");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(227, (-22));
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("ZuS],,})is{:3,R'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZuS],,})is{:3,R\\'", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[2];
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Inv(alid signature: ");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null, false, true);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.classOrInterface(97);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      String string1 = Pattern.quote("gh#i|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\Qgh#i|\\E", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("Ul_~2hy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ul_~2hy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "<clinit>";
      short short0 = Utility.searchOpcode("<clinit>");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ooops, what primitive type is ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ooops, what primitive type is '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(type=", "static", "qc?[E}go0~`,As.l8,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `type='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      String string0 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(S)S", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureToString("(S)S", "short", "int", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int short short(short arg1)", string1);
      assertNotNull(string1);
      
      String string2 = Utility.replace("short", "fstore_0", "short");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("short", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.compactClassName("z=aA2tT;Z|\"i5W,", false);
      assertEquals("z=aA2tT;Z|\"i5W,", string0);
      assertNotNull(string0);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertEquals((byte)122, byte0);
      
      String string1 = Utility.compactClassName("z=aA2tT;Z|\"i5W,");
      assertTrue(string1.equals((Object)string0));
      assertEquals("z=aA2tT;Z|\"i5W,", string1);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("m!EwoPbR;1bv_");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("m!EwoPbR;1bv_", string2);
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("StackMap");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("short", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.replace("void", "void", "void");
      assertEquals("void", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code error: ");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      constantPool1.setConstantPool((Constant[]) null);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      int int0 = Utility.clearBit((byte) (-85), 2010);
      assertEquals((-67108949), int0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Byte code error: ", "invokedynamic", "static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-120);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$88$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$88$A$A$A$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("$A$A$A$88$A$A$A$A$A", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f6$f6$f6$f6$f6$f6", string0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = Utility.decode("$f6$f6$f6$f6$f6$f6", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("$f6$f6$f6$f6$f6$f6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$f6$f6$f6$f6$f6$f6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("=H|cQZL,]a3}\u0007[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)13;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PQc4[f{<[;X_+G";
      stringArray0[1] = "(BtGA.@V~y-IK6z{";
      stringArray0[3] = "(BtGA.@V~y-IK6z{";
      stringArray0[4] = ".E$F},yE#tR~wlR";
      stringArray0[5] = "(BtGA.@V~y-IK6z{";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(BtGA.@V~y-IK6z{", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f{<[;X_+G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1172), (-1172));
      assertEquals("0:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byteArray0[1] = (byte)39;
      String string0 = Utility.classOrInterface((byte)39);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte)39, (byte)39, (byte)39, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteSequence0);
      
      boolean boolean2 = byteSequence0.readBoolean();
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte)39, (byte)39, (byte)39, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("dload_1", string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte)39, (byte)39, (byte)39, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string1);
      
      boolean boolean3 = Utility.isJavaIdentifierPart(']');
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertEquals((byte)122, byte0);
      
      String string0 = Utility.compactClassName("\tdefault = ");
      assertEquals("\tdefault = ", string0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("35 00", string1);
      assertArrayEquals(new byte[] {(byte)53, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      int int0 = Utility.clearBit(40, (byte)122);
      assertEquals(40, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("saload", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)53, (byte)0}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)39;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 85, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, 3197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Utility.clearBit(78, 1250);
      assertEquals(74, int0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[nGsG", "instanceof", "multianewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [nGsG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inba@i/ typeA ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inba@i/ typeA ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("Inba@i/ typeA ");
      assertEquals((byte)10, byte0);
      
      String string0 = Pattern.quote("Inba@i/ typeA ");
      assertEquals("\\QInba@i/ typeA \\E", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("Inba@i/ typeA ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Inba@i/ typeA 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4!_sdLyhk[#;j/-Hf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4!_sdLyhk[#;j/-Hf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte byte0 = ElementValue.ENUM_CONSTANT;
      assertEquals((byte)101, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.convertString("dQ#;N;@+O/w=$U=LI.");
      assertEquals("dQ#;N;@+O/w=$U=LI.", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertEquals((byte)122, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, (int) (byte)122, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("35 00 35 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("35 00 35 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 35 00 35 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[kTlA/+P7\"CkT\".<-DW");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-91);
      String string0 = Utility.convertString("[kTlA/+P7\"CkT\".<-DW");
      assertEquals("[kTlA/+P7\\\"CkT\\\".<-DW", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}<$z'Y R";
      stringArray0[1] = "}<$z'Y R";
      String string0 = Utility.methodTypeToSignature("}<$z'Y R", stringArray0);
      assertEquals("(L}<$z'Y;L}<$z'Y;)L}<$z'Y;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("}<$z'Y R", false);
      assertArrayEquals(new byte[] {(byte)125, (byte)60, (byte)45, (byte)39, (byte)89, (byte)32, (byte)82}, byteArray0);
      assertNotNull(byteArray0);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}<$z'Y R, }<$z'Y R}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.methodTypeToSignature("goto_w", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(L}<$z'Y;L}<$z'Y;)Lgoto_w;", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.methodSignatureReturnType("Inv(alid signature: ");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      String string1 = Utility.getSignature("'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L';", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TijTeeBK:DI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TijTeeBK:DI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)26;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a5 1a 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("Z4R.6!)K|mdzO_- ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K|mdzO_- '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature(" yo}caF\"7s", stringArray0);
      assertEquals("()Lyo}caF\"7s;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(" yo}caF\"7s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` yo}caF\"7s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("ifnonnull", (String[]) null);
      assertEquals("()Lifnonnull;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("()Lifnonnull;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ifnonnull", string1);
      assertNotNull(string1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.compactClassName(">\t", ">\t", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "lookupswitch";
      stringArray0[2] = ">\t";
      stringArray0[3] = "\t\t<";
      String string1 = Utility.methodTypeToSignature("6-", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L;Llookupswitch;L>;L<;)L6-;", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L;Llookupswitch;L>;L<;)L6-;", ">\t", "2Sc}V'`%<w ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L;Llookupswitch;L>;L<;)L6-;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      String string0 = Utility.methodTypeToSignature("if_icmple", (String[]) null);
      assertEquals("()Lif_icmple;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
      
      String string1 = Utility.classOrInterface((byte)18);
      assertEquals("class", string1);
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      try { 
        Utility.methodSignatureReturnType("Wyv", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wyv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("lookupswitch", stringArray0);
      assertEquals("()Llookupswitch;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureToString("()Llookupswitch;", "L<;V", "()Llookupswitch;", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()Llookupswitch; lookupswitch L<;V()", string1);
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(74);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      String string3 = Pattern.quote("()Llookupswitch;");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\Q()Llookupswitch;\\E", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = Constants.ILLEGAL_TYPE;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("<illegal type>", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      String string0 = Utility.compactClassName("UG(P", "", true);
      assertEquals("UG(P", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-81), false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dreturn\n", string1);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('q');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfSignature("0:    dreturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)121;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)45, (byte)61, (byte)121, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(97);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      String string2 = Pattern.quote("Ooops, what primitive type is ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\QOoops, what primitive type is \\E", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = Constants.ILLEGAL_TYPE;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<illegal type>", string3);
      assertNotNull(string3);
      
      try { 
        Utility.typeOfSignature("A/#J7dN w~]X]&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/#J7dN w~]X]&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("<clinit>", (String[]) null);
      assertEquals("()L<clinit>;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()L<clinit>;", " |On6\"T]3]<", "tbIJnXu", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)103;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1e 00 0b 67 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)30, (byte)0, (byte)11, (byte)103, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit((-334), (byte)8);
      assertEquals((-334), int0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("1e 00 0b 67 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1e 00 0b 67 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-67);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      assertEquals((byte)66, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("B", string0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<illegal type>", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("int", "I", "int");
      assertFalse(string1.equals((Object)string0));
      assertEquals("int", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = Utility.clearBit((byte) (-85), (-2348));
      assertEquals((-1048661), int0);
      
      try { 
        Utility.typeOfSignature(">nz2#\"#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >nz2#\"#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.signatureToString("F\"jzb=H5R+'YZ");
      assertEquals("float", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("F\"jzb=H5R+'YZ");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)40;
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)103;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit((-334), (byte)53);
      assertEquals((-2097486), int0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = "$S/r=]k_~MD.JoGb7";
      try { 
        Utility.typeOfSignature("$S/r=]k_~MD.JoGb7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $S/r=]k_~MD.JoGb7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)40;
      byteArray0[4] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-74), (byte)40, (byte)0, (byte) (-74), (byte)0, (byte) (-74), (byte)43}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-74), (byte)40, (byte)0, (byte) (-74), (byte)0, (byte) (-74), (byte)43}, byteArray0);
      assertNotNull(string0);
      
      byteSequence0.mark((byte)40);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-74), (byte)40, (byte)0, (byte) (-74), (byte)0, (byte) (-74), (byte)43}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Utility.setBit((byte)40, (byte) (-74));
      assertEquals(4194344, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("newarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `newarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 92;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(92, (-1271));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-1271), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(92, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertNotNull(constantInterfaceMethodref1);
      
      constantInterfaceMethodref0.setNameAndTypeIndex(92);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals(92, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(",:[/e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,:[/e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.compactClassName("EH|cQZL,~da}\b[#", true);
      assertEquals("EH|cQZL,~da}\b[#", string0);
      assertNotNull(string0);
      
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      assertEquals((byte)66, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Pattern.quote("arraylength");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\Qarraylength\\E", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("H?L6w@MAZ bE$WQJWL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H?L6w@MAZ bE$WQJWL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "=eZ!sdhnT#5;ej/-Hf";
      try { 
        Utility.typeOfSignature("=eZ!sdhnT#5;ej/-Hf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =eZ!sdhnT#5;ej/-Hf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = (byte) (-64);
      try { 
        Utility.typeOfSignature("@ic,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ic,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)36;
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.compactClassName("float", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2646, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      short short0 = Utility.searchOpcode("ag-CDb`s%^L3~Dg");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("S[sk");
      assertEquals((byte)9, byte0);
      
      int int0 = Utility.setBit((byte)9, (short) (-1));
      assertEquals((-2147483639), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("ag-CDb`s%^L3~Dg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ag-CDb`s%^L3~Dg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep2");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)18;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      try { 
        Utility.typeOfSignature(" &@]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  &@]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3056, (int) (byte) (-91), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("newarray", false);
      assertArrayEquals(new byte[] {(byte)110, (byte)101, (byte)119, (byte)97, (byte)114, (byte)114, (byte)97, (byte)121}, byteArray0);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (-4160), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "srt";
      String string0 = Utility.methodTypeToSignature("srt", stringArray0);
      assertEquals("(Lsrt;)Lsrt;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Lsrt;)Lsrt;");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("j}xl](yC(qJ-");
      assertEquals("j}xl](yC(qJ-", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("j}xl](yC(qJ-", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-63);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1489, 68, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-118), 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("Ooops, what primitive type is0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ooops, what primitive type is0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = "6]fTu&di(\"=`So4'-!R";
      try { 
        Utility.typeOfSignature("6]fTu&di(\"=`So4'-!R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6]fTu&di(\"=`So4'-!R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_Fieldref");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.signatureToString("CONSTANT_Fieldref");
      assertFalse(string1.equals((Object)string0));
      assertEquals("char", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[14];
      String string2 = Utility.classOrInterface((byte)5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      int int0 = Utility.setBit((-1336), 91);
      assertEquals((-1336), int0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(14, constantPool0.getLength());
      assertNotNull(constantPool0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("*/rIp5Rz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /rIp5Rz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), 122, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertEquals((byte)122, byte0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("35", string0);
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(40, (byte)122);
      assertEquals(40, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("saload", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("The strHgs must not be null", "-/^m2]9xMR\"qaT", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The strHgs must not be null", string2);
      assertNotNull(string2);
      
      int int1 = Utility.clearBit((byte)122, 40);
      assertFalse(int1 == int0);
      assertEquals(122, int1);
      
      try { 
        Utility.typeOfSignature("E nu=9JJ'T_@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E nu=9JJ'T_@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "[Y sG&Yen& P/U)`i0e";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[Y sG&Yen& P/U)`i0e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y sG&Yen& P/U)`i0e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("35 00 35 00 00 00 00", string0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Utility.typeOfSignature("D8M@Ns)ls^t }3");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "srt";
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5304, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep2");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)18;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte)18;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (-2919));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("monitorexit", false);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)40, 93);
      assertEquals(40, constantFieldref0.getClassIndex());
      assertEquals(93, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool3);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals("ldiv", string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool3.getLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = 2630;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 225, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-85);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byte byte1 = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte) (-85), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-121);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray1[1] = (byte)116;
      int int0 = byteSequence0.readUnsignedByte();
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(171, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte) (-85), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)116, (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-85));
      assertEquals((-85.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertEquals((-85.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-85.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      
      String string0 = Utility.methodTypeToSignature("Visiting non-standard PMGClass object", (String[]) null);
      assertEquals("()LVisiting;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("Visiting non-standard PMGClass object");
      assertFalse(string1.equals((Object)string0));
      assertEquals("void", string1);
      assertNotNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.classOrInterface(42);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)98;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("iload_3", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string1);
      
      int int0 = Utility.clearBit(69, (-4257));
      assertEquals(69, int0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fadd", string2);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "'";
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.signatureToString("Ja4Fx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("long", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1259), 188);
      assertEquals("0:    nop\n1:    nop\n2:    l2d\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-118)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byte byte1 = (byte)30;
      byteArray0[3] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2i", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("l2i", "-Sy^BYIOQ9V", "IlU./|kk=ka.Q2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte)61, (byte)45, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte)61, (byte)45, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte)61, (byte)45, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("aload_3", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)45, (byte)61, (byte)45, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfMethodSignature("nillegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nillegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-86);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bx");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Bx");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.convertString("Bx");
      assertEquals("Bx", string0);
      assertNotNull(string0);
      
      String string1 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureArgumentTypes("Bx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Bx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[kTlA/+P7\"CkT\".<-DW");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)74;
      byteArray0[0] = (byte)74;
      byte byte0 = Utility.typeOfSignature("[kTlA/+P7\"CkT\".<-DW");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YWr,{v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YWr,{v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q%Y]QXO#n4d>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q%Y]QXO#n4d>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-124), (byte)85, (byte)75, (byte)35, (byte) (-66), (byte)3}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = Utility.clearBit(45, 80);
      assertEquals(45, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 276, 887);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = Utility.isSet(417, 417);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2254), (-2254), false);
      assertEquals("0:    aload_1\n", string0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)11;
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte)46;
      ConstantPool constantPool0 = null;
      int int0 = 935;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1616, 935);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dQ#;N;@+O/w=$U=LI.", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.getSignature(",");
      assertEquals("L,;", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('m');
      assertTrue(boolean0);
      
      String string2 = Signature.translate("L,;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3770, 1506);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15692. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(92, (-1271));
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(92, constantInterfaceMethodref1.getClassIndex());
      assertNotNull(constantInterfaceMethodref1);
      
      constantInterfaceMethodref0.setNameAndTypeIndex(92);
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertFalse(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals(92, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, 978, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-110), (byte)64, (byte) (-64), (byte)4, (byte) (-121), (byte)123}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-64), (-1703));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-1703), constantMethodHandle0.getReferenceIndex());
      assertEquals((-64), constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-110), (byte)64, (byte) (-64), (byte)4, (byte) (-121), (byte)123}, byteArray0);
      assertNotNull(byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, (int) (byte)123, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("dQ#;N;@+O/w=LI.", false);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 323, 725, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("L$GaQXSlW$tv", false);
      assertArrayEquals(new byte[] {(byte)76, (byte)6, (byte)97, (byte)81, (byte)88, (byte)83, (byte)108, (byte)87, (byte)39, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte)6, (byte)97, (byte)81, (byte)88, (byte)83, (byte)108, (byte)87, (byte)39, (byte)118}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)76, (byte)6, (byte)97, (byte)81, (byte)88, (byte)83, (byte)108, (byte)87, (byte)39, (byte)118}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = Utility.clearBit(2316, 2316);
      assertEquals(2316, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)125;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)81, (byte)60, (byte)125}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, 33, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ifnull", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3852), 178);
      assertEquals("0:    lmul\n1:    fsub\n2:    fdiv\n3:    lneg\n4:    idiv\n5:    idiv\n", string0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('k');
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.compactClassName("?>...", "ifnull", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?>...", string1);
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      
      try { 
        Utility.typeOfSignature("!7]GS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7]GS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short short0 = Utility.searchOpcode("ag-CDb`s%^L3~Dg");
      assertEquals((short) (-1), short0);
      
      String string2 = "7n[BZ5Q0e2g^OXG";
      try { 
        Utility.typeOfSignature("7n[BZ5Q0e2g^OXG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7n[BZ5Q0e2g^OXG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Pattern.quote("(BtA.@VyIK6z{");
      assertEquals("\\Q(BtA.@VyIK6z{\\E", string0);
      assertNotNull(string0);
      
      String string1 = Pattern.quote("(BtA.@VyIK6z{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\Q(BtA.@VyIK6z{\\E", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)68, (byte)80, (byte)80}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("lastore", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)68, (byte)80, (byte)80}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("Q(BtA.@VyIK6z{E", "-/^m2]9xMR\"qaT", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Q(BtA.@VyIK6z{E", string3);
      assertNotNull(string3);
      
      int int0 = Utility.clearBit((byte)80, 97);
      assertEquals(80, int0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)68, (byte)80, (byte)80}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      boolean boolean0 = Utility.isSet((-1855), 1471);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2ZB$`xH{t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2ZB$`xH{t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)82;
      byteArray0[5] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, (int) (byte)82, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "[8) f";
      // Undeclared exception!
      try { 
        Utility.getSignature("[8) f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [8) f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 271);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = (byte)68;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      constantPool0.setConstantPool((Constant[]) null);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 190, 190, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P=q0T7:JVjliRWK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P=q0T7:JVjliRWK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[12];
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(12, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(12, constantPool0.getLength());
      assertEquals(12, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1624), (int) (byte)66, false);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool3);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lstore_3\n", string1);
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("*e[K']P.zN'c^P4~");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.classOrInterface((-1624));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("class", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-83);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83)}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte) (-83);
      byteArray1[6] = (byte) (-83);
      byteArray1[7] = (byte) (-83);
      byteArray1[8] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte) (-16), (byte)33, (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-16)}, byteArray1);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83)}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("lreturn", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte) (-16), (byte)33, (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-16)}, byteArray1);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.compactClassName("instanceof", "instanceof", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)33}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lload_3", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)33}, byteArray0);
      assertNotNull(string1);
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.compactClassName(", class=", ", class=", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(2607, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private protected static strictfp", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(92, (-1271));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      constantInterfaceMethodref0.setNameAndTypeIndex(92);
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals(92, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1349, (-444));
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1349, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-444), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(1349, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-8.863277097653645));
      assertEquals((-8.863277097653645), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(92);
      assertEquals(92.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool4.getLength());
      assertNotNull(constantPool4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, 40, 1317, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inva1id type: ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      try { 
        Utility.typeOfSignature("8[<:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8[<:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.convertString(" fields:\n");
      assertEquals(" fields:\\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-25);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 8, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-60);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-60), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), 56);
      assertEquals("0:    sipush\t\t-15360\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-60), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-60), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0:    sipush\t\t-15360\n3:    nop\n4:    nop\n";
      stringArray0[1] = "0:    sipush\t\t-15360\n3:    nop\n4:    nop\n";
      stringArray0[2] = "0:    sipush\t\t-15360\n3:    nop\n4:    nop\n";
      stringArray0[3] = "O";
      stringArray0[4] = "double";
      stringArray0[5] = "O";
      stringArray0[6] = "O";
      stringArray0[7] = "O";
      stringArray0[8] = "O";
      String string1 = Utility.methodTypeToSignature("O", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L0:;L0:;L0:;LO;DLO;LO;LO;LO;)LO;", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7CLzN^,", "float");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,/float", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("float", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,/float", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("float", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "7CLzN^,";
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,/float", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("float", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      
      objectArray0[4] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/7CLzN^,/float", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("float", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)12;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)36;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)0}, byteArray1);
      
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("7CLzN^,", "float", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7CLzN^,", string1);
      assertNotNull(string1);
      
      String string2 = Utility.printArray(objectArray0, true, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = Utility.clearBit(16384, (byte)12);
      assertEquals(16384, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = Utility.clearBit(69, (-4257));
      assertEquals(69, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("iload_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string0);
      
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      assertFalse(int1 == int0);
      assertEquals(256, int1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = Utility.typeOfSignature("TzjmY>IxF");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char char0 = '~';
      try { 
        Utility.methodSignatureReturnType("Unexpected element value kind in annotation: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unexpected element value kind in annotation: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-94);
      int int0 = 1619;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1619, (int) (byte) (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.convertString("int");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-78);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)97, (byte)13, (byte)48, (byte)0, (byte) (-85), (byte) (-78)}, byteArray0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("L5-%'NXORg");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.setBit((short) (-1), (short) (-1));
      assertEquals((-1), int0);
      
      try { 
        Utility.methodSignatureReturnType("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      assertNotNull(stringArray0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = "XUt0}'%w";
      try { 
        Utility.typeOfSignature("XUt0}'%w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XUt0}'%w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)98, (byte)98}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)98, (byte)98}, byteArray0);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature(":sa^U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :sa^U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = (byte) (-55);
      try { 
        Utility.typeOfSignature("%@  BN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %@  BN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dup2_x1", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      int int1 = Utility.clearBit(60, (-4257));
      assertFalse(int1 == int0);
      assertEquals(60, int1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "BBY\\}Ed7j^tryV^2";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BBY}Ed7j^tryV^2", "dup2_x1", "9s`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BBY}Ed7j^tryV^2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.MULTILINE;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V]es_FLc}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("V]es_FLc}");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "static";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-1);
      Constant[] constantArray0 = new Constant[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(dataInputStream0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(16705, constantMethodref0.getClassIndex());
      assertEquals(4690, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(16705, constantMethodref0.getClassIndex());
      assertEquals(4690, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(4690, constantMethodref1.getNameAndTypeIndex());
      assertEquals(16705, constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(constantMethodref1);
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("lstore_2", string0);
      assertEquals(10, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-64);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-64), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 200, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)40;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("_$u", string0);
      assertArrayEquals(new byte[] {(byte)95, (byte)40}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 133;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)40, 133);
      assertEquals(40, constantFieldref0.getClassIndex());
      assertEquals(133, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      boolean boolean1 = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 14, (int) (byte)40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)74;
      byteArray0[0] = (byte)74;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)74, (byte) (-91), (byte)74, (byte)0, (byte) (-91)}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)74, (byte) (-91), (byte)74, (byte)0, (byte) (-91)}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type: ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(161, int0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean3 = byteSequence0.readBoolean();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (int) (byte) (-95), true);
      assertEquals("0:    if_icmplt\t\t#-24159\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95)}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    if_icmplt\t\t#-24159\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    if_icmplt\t\t#-24159
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.compactClassName("z=aA2tT;Z|\"i5W,", false);
      assertEquals("z=aA2tT;Z|\"i5W,", string0);
      assertNotNull(string0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[3];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z=aA2tT;Z|\"i5W,");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)46;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)31, 134, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("MRp@'jR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MRp@'jR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = (byte)40;
      String string0 = "Qtd/wLSkg7:+z-HbjU";
      try { 
        Utility.methodSignatureReturnType("Qtd/wLSkg7:+z-HbjU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qtd/wLSkg7:+z-HbjU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)27;
      byteArray0[8] = (byte)16;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)20, (byte)68, (byte) (-79)}, byteArray1);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0F));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      String string0 = constantDouble0.toString();
      assertEquals("CONSTANT_Double[6](bytes = -1.0)", string0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      assertFalse(boolean0);
      
      String string1 = Utility.methodTypeToSignature("CONSTANT_Double[6](bytes = -1.0)", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()[LCONSTANT_Double;", string1);
      assertNotNull(string1);
      
      ConstantDouble constantDouble1 = (ConstantDouble)constantDouble0.copy();
      assertNotSame(constantDouble0, constantDouble1);
      assertNotSame(constantDouble1, constantDouble0);
      assertTrue(constantDouble1.equals((Object)constantDouble0));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-1.0), constantDouble0.getBytes(), 0.01);
      assertEquals((-1.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      
      ClassPath classPath0 = new ClassPath("Q2t9[xI4:#Wv3;#U");
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "Q2t9[xI4:#Wv3;#U");
      assertTrue(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      try { 
        classPath1.getInputStream("v~a6(<W^|m#_", "()[LCONSTANT_Double;");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: v~a6(<W^|m#_()[LCONSTANT_Double;
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " is no interface");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, 106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nj(C'76H{a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nj(C'76H{a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      int int0 = Utility.clearBit((byte) (-85), 2359);
      assertEquals((-8388693), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-85), 154);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[4] = (byte) (-53);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-1190));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, (-464));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      int int0 = Utility.clearBit((byte) (-85), 2359);
      assertEquals((-8388693), int0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2528, (int) (byte)75, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), 41);
      assertEquals("0:    iconst_m1\n1:    dcmpg\n2:    l2f\n3:    fcmpg\n4:    ladd\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-104), (byte) (-119), (byte) (-106), (byte)97}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")\t");
      assertNotNull(mockFileOutputStream0);
      
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("W|:6nxt5=y=:: h", false);
      assertNotNull(byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1619, 935);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = false;
      ConstantPool constantPool0 = null;
      String string0 = Utility.convertString(")\t");
      assertEquals(")\t", string0);
      assertNotNull(string0);
      
      int int0 = 70;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "sr_t";
      String[] stringArray0 = new String[20];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("sr_t");
      assertTrue(string1.equals((Object)string0));
      assertEquals("sr_t", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 290, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-51);
      byteArray0[7] = (byte) (-79);
      Constant[] constantArray0 = null;
      Integer integer0 = new Integer((-3180));
      assertEquals((-3180), (int)integer0);
      assertNotNull(integer0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)83, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.convertString("orv.apache.oommon.wo.filefilterRegexFieFilter");
      assertEquals("orv.apache.oommon.wo.filefilterRegexFieFilter", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#5J{t/UxF^a\"-I");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "orv.apache.oommon.wo.filefilterRegexFieFilter");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Utility.classOrInterface(6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "srt";
      String string0 = Utility.methodTypeToSignature("srt", stringArray0);
      assertEquals("(Lsrt;)Lsrt;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Lsrt;)Lsrt;");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("j}xl](yC(qJ-");
      assertFalse(mockFile0.exists());
      assertEquals("j}xl](yC(qJ-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("j}xl](yC(qJ-", mockFile0.toString());
      assertNotNull(mockFile0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (-1331), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.classOrInterface((-1271));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-60);
      byteArray0[1] = (byte) (-48);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[7] = (byte) (-19);
      byteArray0[5] = (byte)58;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.convertString("interface");
      assertTrue(string1.equals((Object)string0));
      assertEquals("interface", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 2799;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2799, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Utility.setBit((-4545), (byte)80);
      assertEquals((-4545), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), true);
      assertEquals("0:    bipush\t\t16\n", string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-16);
      byteArray0[5] = (byte) (-111);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2316, (-578));
      assertEquals(2316, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-578), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals(2316, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-578), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(2316, constantInterfaceMethodref1.getClassIndex());
      assertEquals((-578), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ifnull\t\t#0", string1);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('=');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      try { 
        constantPool0.getConstantString((-578), (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -578. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 144, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = Utility.clearBit(175, 175);
      assertEquals(175, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "V";
      byte[] byteArray0 = Utility.decode("V", false);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1591.0);
      assertEquals(1591.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "cbP=*G(94+$";
      MockFile mockFile0 = new MockFile("cbP=*G(94+$");
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("cbP=*G(94+$", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("cbP=*G(94+$", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 182, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte) (-74), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1476, 237, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.convertString(" fields:\n");
      assertEquals(" fields:\\n", string0);
      assertNotNull(string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<init>", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[7];
      MockFile mockFile0 = new MockFile(" fields:\n", "?X%Fqe]+H]r_V>");
      assertEquals("?X%Fqe]+H]r_V>", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ fields:\n", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ fields:\n/?X%Fqe]+H]r_V>", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte) (-104);
      String string2 = Utility.signatureToString("D9TcdH pdf ?{D", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("double", string2);
      assertNotNull(string2);
      
      byte[] byteArray1 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte) (-104), (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = Utility.convertString(" fields:\n");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" fields:\\n", string3);
      assertNotNull(string3);
      
      boolean boolean2 = true;
      String string4 = Utility.printArray((Object[]) constantArray0, true);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{null, null, null, null, null, null, null}", string4);
      assertNotNull(string4);
      
      try { 
        Utility.typeOfMethodSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        Utility.typeOfSignature("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = Utility.isSet(417, 417);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("<illegal opcode>");
      assertEquals((short)203, short0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokestatic");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)72;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1332), (-1271));
      assertEquals((-1332), constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "l[qs0_lJgA- ]tF`}", false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertNotNull(string1);
      
      Constant[] constantArray0 = new Constant[13];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<illegal opcode>";
      stringArray0[0] = "<illegal opcode>";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "<illegal opcode>";
      stringArray0[5] = "<illegal opcode>";
      stringArray0[6] = "l[qs0_lJgA- ]tF`}";
      stringArray0[7] = "$l$8b$I$A$A$A$A$A$A$A";
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, (int) (short)203, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "ZuS],,})is{:3,R'";
      byte[] byteArray0 = Utility.decode("ZuS],,})is{:3,R'", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("java.lang., ", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), 48);
      assertEquals("0:    fmul\n1:    ladd\n2:    fneg\n3:    ladd\n4:    iaload\n5:    idiv\n6:    ladd\n7:    fdiv\n8:    dsub\n9:    iaload\n10:   aload_2\n11:   lload_2\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.compactClassName("v", "v", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "static";
      stringArray0[2] = "v";
      stringArray0[3] = "static";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(byteSequence0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(dataInputStream0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      assertEquals(16730, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(4690, constantMethodref0.getNameAndTypeIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals(16730, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(4690, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(16730, constantMethodref1.getClassIndex());
      assertEquals(4690, constantMethodref1.getNameAndTypeIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)18, (byte)82, (byte) (-66), (byte) (-1)}, byteArray0);
      assertNotNull(constantMethodref1);
      
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantString constantString0 = new ConstantString((byte) (-66));
      assertEquals((-66), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)90, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 82. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inva1id type: ");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      int int0 = 194;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 194, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-4);
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-4)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      byte byte1 = (byte) (-114);
      ConstantPool constantPool1 = null;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1445), 1416);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    lshr\n1:    <illegal opcode>\n", string2);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-4)}, byteArray0);
      assertNotNull(string2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("vAbvGAGGw>}DOnr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vAbvGAGGw>}DOnr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type: ");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      String string0 = "\"";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockFile mockFile0 = new MockFile("Invalid type: ", "int");
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Invalid type: /int", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Invalid type: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("int", mockFile0.getName());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid type: ");
      assertNotNull(mockPrintStream0);
      
      String string1 = mockFile0.getCanonicalPath();
      assertFalse(string1.equals((Object)string0));
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Invalid type: /int", string1);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Invalid type: /int", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Invalid type: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("int", mockFile0.getName());
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)11;
      Integer integer0 = new Integer((byte)11);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      String string2 = "PRWq}SxX!Hzux}'";
      try { 
        Utility.typeOfSignature("PRWq}SxX!Hzux}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PRWq}SxX!Hzux}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = Utility.clearBit(69, 84);
      assertEquals(69, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("ixor", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-82);
      Integer integer0 = new Integer((byte) (-82));
      assertEquals((-82), (int)integer0);
      assertNotNull(integer0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-82));
      assertEquals((-82.0), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 94, (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 156, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)9;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(92, (-1271));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.copy();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals(92, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals((-1271), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[7] = (byte) (-19);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 327, (int) (byte)0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[12];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(12, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(12, constantPool0.getLength());
      assertEquals(12, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)8;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2686), (int) (byte)8);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    fload\t\t%8\n", string1);
      assertEquals(12, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)23, (byte)8}, byteArray0);
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)23, (byte)8}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0:    fload\t\t%8\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(12, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(12, constantPool0.getLength());
      assertEquals(12, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      try { 
        Utility.typeOfSignature("#>o8T;SFNyP1Q.Nw<I5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #>o8T;SFNyP1Q.Nw<I5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte byte0 = Constants.T_ARRAY;
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-69);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%@  BN");
      assertFalse(boolean0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-69), (byte) (-69));
      assertEquals((-69), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-69), constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2238, (-2013), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47958. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "&(\"jTV+jV";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("&(\"jTV+jV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &(\"jTV+jV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.signatureToString("ZuS],,})is{:3,R'");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte byte0 = Utility.typeOfSignature("ZuS],,})is{:3,R'");
      assertEquals((byte)4, byte0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = Utility.clearBit((-4841), (-592));
      assertEquals((-70377), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-679), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("-)M]:2C'dMZI%bo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -)M]:2C'dMZI%bo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5030, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-92);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-92)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-92)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2111, (-1703));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-1703), constantMethodHandle0.getReferenceIndex());
      assertEquals(2111, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)42, (byte) (-92)}, byteArray0);
      assertNotNull(byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3725, (-835), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte) (-85), (byte) (-85), (byte)0, (byte) (-85)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-121), 991);
      assertEquals((-121), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(991, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte) (-85), (byte) (-85), (byte)0, (byte) (-85)}, byteArray0);
      assertNotNull(byteSequence1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 991, 160, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Utility.compactClassName("v", "v", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "v";
      stringArray0[3] = "";
      String string1 = Utility.methodTypeToSignature("v", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L;L;Lv;L;)Lv;", string1);
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureToString("(L;L;Lv;L;)Lv;", "v", "", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("v v( arg1,  arg2, v arg3,  arg4)", string2);
      assertNotNull(string2);
      
      int int0 = Utility.setBit(518, 518);
      assertEquals(582, int0);
      
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-71);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 16384, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(92, (-1271));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = (ConstantInterfaceMethodref)constantInterfaceMethodref0.clone();
      assertNotSame(constantInterfaceMethodref0, constantInterfaceMethodref1);
      assertNotSame(constantInterfaceMethodref1, constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(92, constantInterfaceMethodref1.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals((-1271), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref1);
      
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertTrue(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertTrue(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref0));
      assertTrue(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref1));
      assertEquals(92, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-1271), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1271), constantInterfaceMethodref2.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref2.getTag());
      assertEquals(92, constantInterfaceMethodref2.getClassIndex());
      assertNotNull(constantInterfaceMethodref2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(92);
      assertEquals("protected static final volatile", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-60);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[7] = (byte) (-19);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte)33;
      MockFile mockFile0 = new MockFile("WoA|-Y1`sns:D_");
      assertEquals("WoA|-Y1`sns:D_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("WoA|-Y1`sns:D_", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertEquals("WoA|-Y1`sns:D_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("WoA|-Y1`sns:D_", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "protected static final volatile", objectArray0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("WoA|-Y1`sns:D_", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("WoA|-Y1`sns:D_", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertNotNull(mockPrintWriter1);
      
      String string1 = Utility.compactClassName("%9%EweOO", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%9%EweOO", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 327, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vAbvGAGGw>}DOnr");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = (byte)18;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)18, (byte)18}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (-5779), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "s";
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, (int) (byte)19, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = (byte)51;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3055, (int) (byte) (-91), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-85);
      String string0 = Utility.convertString(":");
      assertEquals(":", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((byte)11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(30.553177973299142);
      assertEquals(30.553177973299142, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = Constants.ITEM_Integer;
      assertEquals((byte)1, byte0);
      
      byte byte1 = Constants.CONSTANT_Fieldref;
      assertFalse(byte1 == byte0);
      assertEquals((byte)9, byte1);
      
      String string0 = "RuntimeVisibleAnnotations";
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      String string0 = "~$";
      byte[] byteArray0 = Utility.decode("~$", false);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)68, 89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-107);
      String string0 = ";5=mCdT+";
      short short0 = Utility.searchOpcode(";5=mCdT+");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)26, (byte)26, (byte) (-107), (byte)26, (byte) (-107)}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.getSignature(";5=mCdT+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L;5=mCdT+;", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? extends ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)8;
      String string1 = constantPool0.toString();
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-2699), (int) (byte)8);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    fload_0\n1:    iconst_5\n", string2);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)34, (byte)8}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Constants.ILLEGAL_OPCODE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<illegal opcode>", string3);
      assertNotNull(string3);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      constantPool0.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(1, constantPool0.getLength());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string4 = Utility.printArray((Object[]) constantArray0, false, true);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("null", string4);
      assertNotNull(string4);
      
      String string5 = Utility.convertString("<illegal opcode>");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("<illegal opcode>", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bx");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = Utility.decode("vFGO", false);
      assertArrayEquals(new byte[] {(byte)118, (byte)70, (byte)71, (byte)79}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = "goto_w";
      String string1 = Utility.getSignature("goto_w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lgoto_w;", string1);
      assertNotNull(string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      ConstantClass constantClass0 = new ConstantClass(3770);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(3770, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(3770, constantClass0.getNameIndex());
      assertEquals(3770, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertNotNull(constantClass1);
      
      int int0 = 2097;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3770, 2097);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, 106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      String string0 = "dQ#;N\\;@+O/w=$U=LI.";
      Integer integer0 = new Integer((-2055));
      assertEquals((-2055), (int)integer0);
      assertNotNull(integer0);
      
      ConstantDouble constantDouble0 = new ConstantDouble((-2055));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-2055.0), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(164, (byte)8);
      assertEquals(164, constantNameAndType0.getNameIndex());
      assertEquals(8, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)30;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = Utility.clearBit(199, 181);
      assertEquals(199, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[2] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = Utility.clearBit(69, 84);
      assertEquals(69, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("lor", string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1619, 935);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-104);
      byteArray0[6] = (byte)84;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)84;
      byteArray0[6] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2057, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      String string0 = Utility.compactClassName("H.$I&ASTn[/n6{WC", true);
      assertEquals("H.$I&ASTn[.n6{WC", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("H.$I&ASTn[.n6{WC", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H.$I&ASTn[.n6{WC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h/W|:6nxt5=y=:: h");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)0;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("faload", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((byte) (-58), (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.convertString("orv.apache.oommon.wo.filefilterRegexFieFilter");
      assertEquals("orv.apache.oommon.wo.filefilterRegexFieFilter", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1054), (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    daload
         // 1:    nop
         // 2:    bipush\t\t16
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h/W|:6nxt5=y=:: h");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)0;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = Utility.decode("W|:6nxt5=y=:: h", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      MockFile mockFile0 = new MockFile("W|:6nxt5=y=:: h");
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertEquals("W|:6nxt5=y=:: h", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("W|:6nxt5=y=:: h", mockFile0.toString());
      assertNotNull(mockFile0);
      
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.encode(byteArray1, false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("W$7c$3a$7f6nxt5$3dy$3d$3a$3a$mh", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-104), (int) (byte)48, false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    pop\n1:    iushr\n2:    astore\t\t%127\n4:    istore\t\t%110\n6:    ishl\n7:    ineg\n8:    saload\n9:    istore_2\n10:   lshl\n11:   istore_2\n12:   astore\t\t%58\n14:   lload_2\n15:   imul\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      
      byte[] byteArray2 = Utility.decode("0:    pop\n1:    iushr\n2:    astore\t\t%127\n4:    istore\t\t%110\n6:    ishl\n7:    ineg\n8:    saload\n9:    istore_2\n10:   lshl\n11:   istore_2\n12:   astore\t\t%58\n14:   lload_2\n15:   imul\n", false);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      String string2 = Utility.convertString("0:    pop\n1:    iushr\n2:    astore\t\t%127\n4:    istore\t\t%110\n6:    ishl\n7:    ineg\n8:    saload\n9:    istore_2\n10:   lshl\n11:   istore_2\n12:   astore\t\t%58\n14:   lload_2\n15:   imul\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    pop\\n1:    iushr\\n2:    astore\t\t%127\\n4:    istore\t\t%110\\n6:    ishl\\n7:    ineg\\n8:    saload\\n9:    istore_2\\n10:   lshl\\n11:   istore_2\\n12:   astore\t\t%58\\n14:   lload_2\\n15:   imul\\n", string2);
      assertNotNull(string2);
      
      boolean boolean3 = Utility.isJavaIdentifierPart('p');
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      // Undeclared exception!
      Utility.codeToString(byteArray2, constantPool0, (int) (byte)0, 143, false);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = ElementValue.ENUM_CONSTANT;
      assertEquals((byte)101, byte0);
      
      byte[] byteArray0 = Utility.decode("dQ#;N;@+O/w=$U=LI.", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("dQ$p$3bN$3b$40$xO$_w$3d$U$3dLI$$", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.decode("dQ$p$3bN$5c$3b$40$xO$_w$3d$U$3dLI$$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.compactClassName("z=aA2tT;Z|\"i5W,", false);
      assertEquals("z=aA2tT;Z|\"i5W,", string0);
      assertNotNull(string0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("W|:6nxt5=y=:: h", false);
      assertNotNull(byteArray0);
      
      MockFile mockFile0 = new MockFile("W|:6nxt5=y=:: h", "W|:6nxt5=y=:: h");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h/W|:6nxt5=y=:: h", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("W|:6nxt5=y=:: h", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(false);
      assertFalse(boolean0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/W|:6nxt5=y=:: h/W|:6nxt5=y=:: h", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals("W|:6nxt5=y=:: h", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string1);
      assertNotNull(string1);
      
      byte[] byteArray1 = Utility.decode("<init>", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertNotNull(byteArray1);
      
      String string2 = Utility.codeToString(byteArray1, constantPool0, (-1448), (int) (byte) (-104), true);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    istore_1\n1:    lmul\n2:    fdiv\n3:    lmul\n4:    ineg\n5:    istore_3\n", string2);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertNotNull(string2);
      
      String string3 = Utility.convertString("0:    istore_1\n1:    lmul\n2:    fdiv\n3:    lmul\n4:    ineg\n5:    istore_3\n");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0:    istore_1\\n1:    lmul\\n2:    fdiv\\n3:    lmul\\n4:    ineg\\n5:    istore_3\\n", string3);
      assertNotNull(string3);
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)60, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('p');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = Utility.convertString("<init>");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("<init>", string4);
      assertNotNull(string4);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("0:    istore_1\n1:    lmul\n2:    fdiv\n3:    lmul\n4:    ineg\n5:    istore_3\n", "z}c1H<I%IdMpE_1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"z}c1H<I%IdMpE_1\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String[] stringArray0 = Constants.TYPE_NAMES;
      assertNotNull(stringArray0);
      
      String string0 = "dW_d{;!";
      String string1 = Utility.convertString("dW_d{;!");
      assertTrue(string1.equals((Object)string0));
      assertEquals("dW_d{;!", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("ZXqG}]($<.5O/", false);
      assertNotNull(byteArray0);
      
      int int0 = 146;
      int int1 = 182;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 146, 182, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3056, 1715, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XTijTeeKD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XTijTeeKD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String string0 = "orv.apache.oommon.wo.filefilterRegexFieFilter";
      String string1 = Utility.convertString("orv.apache.oommon.wo.filefilterRegexFieFilter");
      assertTrue(string1.equals((Object)string0));
      assertEquals("orv.apache.oommon.wo.filefilterRegexFieFilter", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[4] = (byte)68;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      String string0 = Utility.convertString("EpcZ<n`ZU");
      assertEquals("EpcZ<n`ZU", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface(182);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      String string2 = Utility.convertString("0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      String string3 = Utility.encode(byteArray0, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("$3f$3f$3f", string3);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)63}, byteArray0);
      assertNotNull(string3);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (-1784));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[2] = (byte) (-119);
      byteArray0[1] = (byte)112;
      byteArray0[4] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), 57);
      assertEquals("0:    dmul\n1:    irem\n2:    l2f\n3:    nop\n4:    dcmpg\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)107, (byte)112, (byte) (-119), (byte)0, (byte) (-104)}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        constantPool0.getConstant(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-64);
      byteArray0[0] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 129, (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = "\"}oKC}ps'cu";
      byte[] byteArray1 = Utility.decode("\"}oKC}ps'cu", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"}oKC}ps'cu");
      assertFalse(boolean0);
      
      String string1 = "java.lang.Short";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Short");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 32, (int) (byte) (-126), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[5] = (byte) (-64);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    d2i\n1:    ifle\t\t#-28991\n4:    i2s\n", string1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-98), (byte) (-114), (byte) (-64), (byte) (-109)}, byteArray1);
      assertNotNull(string1);
      
      int int0 = Utility.clearBit(182, (byte) (-98));
      assertEquals(182, int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-115);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-123);
      int int0 = (-1179);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 935, (-1179));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D%eLNQ33r");
      assertFalse(boolean0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(13147222, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rt";
      String string0 = Utility.methodTypeToSignature("rt", stringArray0);
      assertEquals("(Lrt;)Lrt;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureToString("(Lrt;)Lrt;", "rt", "rt", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rt rt rt(rt arg1)", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)116;
      byte byte0 = Utility.typeOfMethodSignature("(Lrt;)Lrt;");
      assertEquals((byte)14, byte0);
      
      boolean boolean1 = true;
      String string2 = Utility.compactClassName("VWM2x^Y6f[", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VWM2x^Y6f[", string2);
      assertNotNull(string2);
      
      short short0 = Utility.searchOpcode("java.lang.v");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.compactClassName("]-v1T,Nd@7xpB,^!v", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("java.lang.v", "]-v1T,Nd@7xpB,^!v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"]-v1T,Nd@7xpB,^!v\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)48, (byte) (-103), (byte) (-86), (byte)20, (byte)91}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = Utility.clearBit(48, 169);
      assertEquals(48, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1297, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vAbvGAGGw>}DOnr");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vAbvGAGGw>}DOnr");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)22, (byte)22, (byte)3}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      int int0 = Utility.clearBit((byte)22, (byte)3);
      assertEquals(22, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 160, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)123;
      boolean boolean0 = true;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)78, (byte)105, (byte) (-99), (byte)123}, byteArray0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      int int0 = 93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vAbvGAGGw>}DOnr");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.compactClassName("G", true);
      assertEquals("G", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("lor");
      assertEquals((short)129, short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte)75;
      int int0 = 10;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (int) (byte)75, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (-485), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rt";
      String string0 = Utility.methodTypeToSignature("rt", stringArray0);
      assertEquals("(Lrt;)Lrt;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureToString("(Lrt;)Lrt;", "rt", "rt", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rt rt rt(rt arg1)", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      String string2 = Utility.classOrInterface((byte)116);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2068), 182);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0:    d2f\n1:    d2f\n2:    ineg\n3:    ineg\n4:    ineg\n", string3);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte)116, (byte)116, (byte)116}, byteArray0);
      assertNotNull(string3);
      
      String string4 = Utility.accessToString((int) (byte) (-112), true);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("final transient native abstract strictfp synthetic annotation enum", string4);
      assertNotNull(string4);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('V');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bx");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      int int1 = 182;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = Utility.clearBit((-1271), (-1271));
      assertEquals((-1783), int0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-86);
      String string0 = Pattern.quote("Bx");
      assertEquals("\\QBx\\E", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1783), (-1783));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)78;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), (int) (byte)59, false);
      assertEquals("0:    <illegal opcode>\n1:    istore_0\n2:    astore_3\n3:    if_icmpgt\t\t#15166\n6:    i2d\n7:    i2d\n8:    astore_3\n", string0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)59, (byte)78, (byte) (-93), (byte)59, (byte)59, (byte) (-121), (byte) (-121), (byte)78}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 161);
      assertTrue(string1.equals((Object)string0));
      assertEquals("0:    <illegal opcode>\n1:    istore_0\n2:    astore_3\n3:    if_icmpgt\t\t#15166\n6:    i2d\n7:    i2d\n8:    astore_3\n", string1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)59, (byte)78, (byte) (-93), (byte)59, (byte)59, (byte) (-121), (byte) (-121), (byte)78}, byteArray0);
      assertNotNull(string1);
      
      int int0 = Utility.clearBit(171, (byte) (-93));
      assertEquals(163, int0);
      
      String string2 = "Om\\%iV^(4!L#hF";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<]P?XIY", "Om%iV^(4!L#hF", "Om%iV^(4!L#hF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <]P?XIY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inba@i/ typeA ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Inba@i/ typeA ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("Inba@i/ typeA ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Inba@i/ typeA ", true);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("Inba@i/ typeA ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)10, (byte) (-81), (byte)10, (byte)10, (byte)10, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("nop", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)10, (byte)10, (byte) (-81), (byte)10, (byte)10, (byte)10, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("GM]:BH4\"V|hasl3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GM]:BH4\"V|hasl3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
