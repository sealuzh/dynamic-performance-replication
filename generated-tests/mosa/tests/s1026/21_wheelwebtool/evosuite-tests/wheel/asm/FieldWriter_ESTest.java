/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:44:46 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1185), "", "", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 37, "rK", "rK", "", fieldWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "vc_3u8-f1yJq", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2039);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ";a\"", ";a\"", ";a\"", ";a\"");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute(";a\"");
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1185), "", "", "", "");
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2039);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "Ps\"", "Ps\"", "Ps\"", "Ps\"");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitAnnotation("e\"|0Mi8,zzCqW|m", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector1 = new ByteVector(1);
      fieldWriter0.put(byteVector1);
      assertNotSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1185), "", "", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      classWriter0.newUTF8("The array of names must not be null");
      classWriter0.version = 37;
      classWriter0.thisName = "glW 2LyUj";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1185), "", "", "", "");
      classWriter0.toByteArray();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      System.setCurrentTimeMillis(1);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByteArray((byte[]) null, 37, 1);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      classWriter0.version = 37;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Y8D$h";
      stringArray0[2] = "";
      stringArray0[3] = "The array of names must not be null";
      stringArray0[4] = "L!@e+mmUZ\"tf7ki.)";
      stringArray0[5] = "";
      stringArray0[6] = "";
      classWriter0.visit(2526, 2526, "", "", "J4) YJRRmx,pU$ 7j", stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1185), "", "", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }
}
