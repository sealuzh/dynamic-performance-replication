/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:49:30 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">Utk?m");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, (-946));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token0.kind);
      assertEquals((-946), token0.beginColumn);
      assertEquals((-946), token0.endColumn);
      assertEquals(5, token0.endLine);
      assertEquals(5, token0.beginLine);
      assertEquals((-946), simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals((-946), simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals((-946), simpleCharStream0.getEndColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 4486);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4486. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3(A+zJ#8x");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3488), (-3488));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3488), simpleCharStream0.getEndColumn());
      assertEquals((-3488), simpleCharStream0.getBeginLine());
      assertEquals((-3488), simpleCharStream0.getBeginColumn());
      assertEquals((-3488), simpleCharStream0.getLine());
      assertEquals((-3488), simpleCharStream0.getColumn());
      assertEquals((-3488), simpleCharStream0.getEndLine());
      assertEquals('3', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3488), simpleCharStream0.getEndColumn());
      assertEquals((-3488), simpleCharStream0.getBeginLine());
      assertEquals((-3488), simpleCharStream0.getBeginColumn());
      assertEquals((-3488), simpleCharStream0.getLine());
      assertEquals((-3488), simpleCharStream0.getColumn());
      assertEquals((-3488), simpleCharStream0.getEndLine());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3488), simpleCharStream0.getEndColumn());
      assertEquals((-3488), simpleCharStream0.getBeginLine());
      assertEquals((-3488), simpleCharStream0.getBeginColumn());
      assertEquals((-3488), simpleCharStream0.getLine());
      assertEquals((-3488), simpleCharStream0.getColumn());
      assertEquals((-3488), simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBa");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 108, 108);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 108. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c)z)9H4+OWIg");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-2288));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2288. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("local-name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1899, (-2092));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-30);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79, (byte)97, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 273, (byte)84);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)79, (byte)97, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)79, (byte)97, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, byteArray0.length);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(273, token0.endLine);
      assertEquals(84, token0.beginColumn);
      assertEquals(85, token0.endColumn);
      assertEquals(273, token0.beginLine);
      assertEquals(78, token0.kind);
      assertArrayEquals(new byte[] {(byte)79, (byte)97, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(273, simpleCharStream0.getLine());
      assertEquals(273, simpleCharStream0.getBeginLine());
      assertEquals(84, simpleCharStream0.getBeginColumn());
      assertEquals(85, simpleCharStream0.getEndColumn());
      assertEquals(273, simpleCharStream0.getEndLine());
      assertEquals(85, simpleCharStream0.getColumn());
      assertEquals("Oa", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"//\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1094, 1094);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, token0.kind);
      assertEquals(1094, token0.endLine);
      assertEquals(1097, token0.endColumn);
      assertEquals(1094, token0.beginLine);
      assertEquals(1094, token0.beginColumn);
      assertEquals(1094, simpleCharStream0.getBeginLine());
      assertEquals(1094, simpleCharStream0.getBeginColumn());
      assertEquals(1094, simpleCharStream0.getLine());
      assertEquals(1094, simpleCharStream0.getEndLine());
      assertEquals(1097, simpleCharStream0.getColumn());
      assertEquals(1097, simpleCharStream0.getEndColumn());
      assertEquals("\"//\"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("4", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("concat");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-520), 56);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals((-520), token0.beginLine);
      assertEquals(56, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals((-520), token0.endLine);
      assertEquals(57, token0.kind);
      assertEquals((-520), simpleCharStream0.getBeginLine());
      assertEquals(56, simpleCharStream0.getBeginColumn());
      assertEquals((-520), simpleCharStream0.getLine());
      assertEquals(61, simpleCharStream0.getColumn());
      assertEquals((-520), simpleCharStream0.getEndLine());
      assertEquals(61, simpleCharStream0.getEndColumn());
      assertEquals("concat", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("starts-with");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 784, 784, 784);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(58, token0.kind);
      assertEquals(784, token0.beginColumn);
      assertEquals(784, token0.beginLine);
      assertEquals(794, token0.endColumn);
      assertEquals(784, token0.endLine);
      assertEquals(794, simpleCharStream0.getEndColumn());
      assertEquals(784, simpleCharStream0.getEndLine());
      assertEquals(794, simpleCharStream0.getColumn());
      assertEquals(784, simpleCharStream0.getLine());
      assertEquals(784, simpleCharStream0.getBeginLine());
      assertEquals(784, simpleCharStream0.getBeginColumn());
      assertEquals("starts-with", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1552), (-1552));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1552), token0.endLine);
      assertEquals((-1552), token0.beginColumn);
      assertEquals((-1552), token0.beginLine);
      assertEquals(30, token0.kind);
      assertEquals((-1550), token0.endColumn);
      assertEquals((-1552), simpleCharStream0.getLine());
      assertEquals((-1550), simpleCharStream0.getEndColumn());
      assertEquals((-1550), simpleCharStream0.getColumn());
      assertEquals((-1552), simpleCharStream0.getBeginColumn());
      assertEquals((-1552), simpleCharStream0.getEndLine());
      assertEquals((-1552), simpleCharStream0.getBeginLine());
      assertEquals("div", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)97;
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)97, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 273, (byte)84);
      assertEquals(5, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)99, (byte)97, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(5, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)99, (byte)97, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, byteArray0.length);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(85, token0.endColumn);
      assertEquals(273, token0.endLine);
      assertEquals(84, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(273, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)99, (byte)97, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(84, simpleCharStream0.getBeginColumn());
      assertEquals(273, simpleCharStream0.getLine());
      assertEquals(85, simpleCharStream0.getEndColumn());
      assertEquals(273, simpleCharStream0.getBeginLine());
      assertEquals(85, simpleCharStream0.getColumn());
      assertEquals(273, simpleCharStream0.getEndLine());
      assertEquals("ca", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"..\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2100), 88);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(83, token0.kind);
      assertEquals((-2100), token0.beginLine);
      assertEquals(88, token0.beginColumn);
      assertEquals((-2100), token0.endLine);
      assertEquals(89, token0.endColumn);
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals((-2100), simpleCharStream0.getLine());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals((-2100), simpleCharStream0.getEndLine());
      assertEquals(88, simpleCharStream0.getBeginColumn());
      assertEquals((-2100), simpleCharStream0.getBeginLine());
      assertEquals("..", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 38, 38, 38);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader1 = new StringReader("|n@M}V:4`S");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(8, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("|", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@{_&>f`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 112, column 112.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" yP@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("yP", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("yP", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("translate");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3550), 2015);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2023, token0.endColumn);
      assertEquals((-3550), token0.endLine);
      assertEquals(65, token0.kind);
      assertEquals(2015, token0.beginColumn);
      assertEquals((-3550), token0.beginLine);
      assertEquals((-3550), simpleCharStream0.getLine());
      assertEquals((-3550), simpleCharStream0.getBeginLine());
      assertEquals(2023, simpleCharStream0.getColumn());
      assertEquals(2023, simpleCharStream0.getEndColumn());
      assertEquals((-3550), simpleCharStream0.getEndLine());
      assertEquals(2015, simpleCharStream0.getBeginColumn());
      assertEquals("translate", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-1988));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1988. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(fileDescriptor0.valid());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("sum", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(14, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(64, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("normalize-space", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"attribute::\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'a', 't', 't', 'r'}, charArray0);
      assertEquals(5, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("ibute", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 72);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("h", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(18, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(19, token0.endColumn);
      assertEquals(45, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("following-sibling::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("descendant::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 92, 769);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(92, token0.beginLine);
      assertEquals(43, token0.kind);
      assertEquals(92, token0.endLine);
      assertEquals(780, token0.endColumn);
      assertEquals(769, token0.beginColumn);
      assertEquals(780, simpleCharStream0.getColumn());
      assertEquals(92, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getEndLine());
      assertEquals(769, simpleCharStream0.getBeginColumn());
      assertEquals(780, simpleCharStream0.getEndColumn());
      assertEquals(92, simpleCharStream0.getLine());
      assertEquals("descendant::", token0.toString());
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(780, simpleCharStream0.getColumn());
      assertEquals(92, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getEndLine());
      assertEquals(769, simpleCharStream0.getBeginColumn());
      assertEquals(780, simpleCharStream0.getEndColumn());
      assertEquals(92, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancestor::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1, (-427), 1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-418), token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals((-427), token0.beginColumn);
      assertEquals(38, token0.kind);
      assertEquals((-427), simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals((-418), simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals((-418), simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ancestor::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^),>X|:X5\"4I");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\b");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 104, 104);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 104, column 105.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Af[3WUF,$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")XOD,g_5Tdq{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 28, 28, 22);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(28, token0.beginLine);
      assertEquals(28, token0.endLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(81, token0.kind);
      assertEquals(28, token0.endColumn);
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getLine());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getBeginLine());
      assertEquals(28, simpleCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(31, token1.endColumn);
      assertEquals(29, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(28, token1.endLine);
      assertEquals(28, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(28, simpleCharStream0.getLine());
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getBeginLine());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getEndLine());
      assertEquals("XOD", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 72);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("W", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 64, Integer.MAX_VALUE, (byte)80);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(64, token0.endLine);
      assertEquals(64, token0.beginLine);
      assertEquals(78, token0.kind);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndColumn());
      assertEquals(64, simpleCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginColumn());
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBa");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 108, 108);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(108, token0.beginColumn);
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.endLine);
      assertEquals(110, token0.endColumn);
      assertEquals(110, simpleCharStream0.getEndColumn());
      assertEquals(108, simpleCharStream0.getLine());
      assertEquals(108, simpleCharStream0.getBeginColumn());
      assertEquals(110, simpleCharStream0.getColumn());
      assertEquals(108, simpleCharStream0.getEndLine());
      assertEquals(108, simpleCharStream0.getBeginLine());
      assertEquals("QBa", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P?H7 &");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("P", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M(U/Y+^{MDTm.y,)[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 113, 40);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(113, token0.endLine);
      assertEquals(40, token0.beginColumn);
      assertEquals(113, token0.beginLine);
      assertEquals(40, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(113, simpleCharStream0.getLine());
      assertEquals(113, simpleCharStream0.getBeginLine());
      assertEquals(40, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getEndLine());
      assertEquals(40, simpleCharStream0.getColumn());
      assertEquals(40, simpleCharStream0.getEndColumn());
      assertEquals("M", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals("Lexical", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fl,UAYqp6gS");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 403, 85);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(403, token0.endLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(403, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(86, token0.endColumn);
      assertEquals(403, simpleCharStream0.getEndLine());
      assertEquals(403, simpleCharStream0.getLine());
      assertEquals(86, simpleCharStream0.getEndColumn());
      assertEquals(403, simpleCharStream0.getBeginLine());
      assertEquals(86, simpleCharStream0.getColumn());
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals("Fl", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-D/$tnDHn.2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 6, 69);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      long long0 = stringReader0.skip(6);
      assertEquals(6L, long0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(73, token0.endColumn);
      assertEquals(6, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(69, token0.beginColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(69, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals("DHn.2", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token1.endLine);
      assertEquals(6, token1.beginLine);
      assertEquals(73, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(73, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(73, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(73, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kBRRF");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 751, 751);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(751, simpleCharStream0.getColumn());
      assertEquals(751, simpleCharStream0.getEndColumn());
      assertEquals(751, simpleCharStream0.getLine());
      assertEquals(751, simpleCharStream0.getBeginColumn());
      assertEquals(751, simpleCharStream0.getEndLine());
      assertEquals(751, simpleCharStream0.getBeginLine());
      assertEquals('k', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(751, simpleCharStream0.getColumn());
      assertEquals(751, simpleCharStream0.getEndColumn());
      assertEquals(751, simpleCharStream0.getLine());
      assertEquals(751, simpleCharStream0.getBeginColumn());
      assertEquals(751, simpleCharStream0.getEndLine());
      assertEquals(751, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(751, token0.endLine);
      assertEquals(755, token0.endColumn);
      assertEquals(751, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(752, token0.beginColumn);
      assertEquals(755, simpleCharStream0.getEndColumn());
      assertEquals(751, simpleCharStream0.getLine());
      assertEquals(752, simpleCharStream0.getBeginColumn());
      assertEquals(751, simpleCharStream0.getEndLine());
      assertEquals(755, simpleCharStream0.getColumn());
      assertEquals(751, simpleCharStream0.getBeginLine());
      assertEquals("BRRF", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2134, 2134);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(2134, token0.endColumn);
      assertEquals(2134, token0.beginLine);
      assertEquals(2134, token0.beginColumn);
      assertEquals(86, token0.kind);
      assertEquals(2134, token0.endLine);
      assertEquals(2134, simpleCharStream0.getLine());
      assertEquals(2134, simpleCharStream0.getBeginLine());
      assertEquals(2134, simpleCharStream0.getBeginColumn());
      assertEquals(2134, simpleCharStream0.getColumn());
      assertEquals(2134, simpleCharStream0.getEndColumn());
      assertEquals(2134, simpleCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":U;VC(&?&ec#");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 68, (-3675), 45);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(79, token0.kind);
      assertEquals(68, token0.beginLine);
      assertEquals(68, token0.endLine);
      assertEquals((-3675), token0.endColumn);
      assertEquals((-3675), token0.beginColumn);
      assertEquals((-3675), simpleCharStream0.getEndColumn());
      assertEquals(68, simpleCharStream0.getBeginLine());
      assertEquals(68, simpleCharStream0.getLine());
      assertEquals((-3675), simpleCharStream0.getColumn());
      assertEquals((-3675), simpleCharStream0.getBeginColumn());
      assertEquals(68, simpleCharStream0.getEndLine());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8kzF-.mH 0VCV%&hq");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 13, 13, 13);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals("8", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7nPf(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4, 4, 1617);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",SBux");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-871), 1219, 718);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1219, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1219, token0.beginColumn);
      assertEquals((-871), token0.beginLine);
      assertEquals((-871), token0.endLine);
      assertEquals((-871), simpleCharStream0.getBeginLine());
      assertEquals(1219, simpleCharStream0.getColumn());
      assertEquals(1219, simpleCharStream0.getBeginColumn());
      assertEquals((-871), simpleCharStream0.getEndLine());
      assertEquals(1219, simpleCharStream0.getEndColumn());
      assertEquals((-871), simpleCharStream0.getLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-+>Io5p6dGmo");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(9, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*D");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'L3]CIsgA^+R^SR");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 37, 37, 37);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 37, column 53.  Encountered: <EOF> after : \"\\'L\\u007f3]CIsgA^+R^SR\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N#bpp^H/^E6");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("N", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"div\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("\"div\"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!0.W->G");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"0\" (48), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(l#9~jsrT76sB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("l", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 102);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 102, 3645);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader(".&%|[5yrl~[F~hJ");
      assertNotNull(stringReader0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 3645, 3645, 2342);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3645, token0.beginLine);
      assertEquals(3645, token0.endLine);
      assertEquals(82, token0.kind);
      assertEquals(3645, token0.endColumn);
      assertEquals(3645, token0.beginColumn);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3645, simpleCharStream0.getEndColumn());
      assertEquals(3645, simpleCharStream0.getBeginLine());
      assertEquals(3645, simpleCharStream0.getEndLine());
      assertEquals(3645, simpleCharStream0.getLine());
      assertEquals(3645, simpleCharStream0.getColumn());
      assertEquals(3645, simpleCharStream0.getBeginColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3645, column 3646.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ADq7goK76M>(zT?");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(10, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals("ADq7goK76M", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(11, token1.endColumn);
      assertEquals(15, token1.kind);
      assertEquals(11, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(">", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(12, token2.endColumn);
      assertEquals(12, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(80, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals("(", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9V>S");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("V", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(15, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(">", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(78, token3.kind);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals("S", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1Z");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, Integer.MAX_VALUE, 24);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.endColumn);
      assertEquals(24, simpleCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getColumn());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.TokenMgrError");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(48, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(49, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(49, simpleCharStream0.getColumn());
      assertEquals(49, simpleCharStream0.getEndColumn());
      assertEquals("org.apache.commons.jxpath.ri.parser.TokenMgrError", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      File file0 = MockFile.createTempFile("opu&I!XuDAX", "opu&I!XuDAX");
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("opu&I!XuDAX0opu&I!XuDAX", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/opu&I!XuDAX0opu&I!XuDAX", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("opu&I!XuDAX0opu&I!XuDAX", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/opu&I!XuDAX0opu&I!XuDAX", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b`\"!");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2162), 81);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }
}
