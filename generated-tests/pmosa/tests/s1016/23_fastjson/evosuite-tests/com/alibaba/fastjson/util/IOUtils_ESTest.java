/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:55:28 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = null;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8((char[]) null, (-2144797185), (-2144797185), byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.firstIdentifier('5');
      IOUtils.isIdent('5');
      IOUtils.isIdent('5');
      IOUtils.isIdent('5');
      IOUtils.loadPropertiesFromFile();
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("6(x,|[P8M<y9#n1H,");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      uTF8Decoder0.decodeLoop(byteBuffer0, charBuffer0);
      // Undeclared exception!
      try { 
        uTF8Decoder0.flush(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = RESET, new state = FLUSHED
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.firstIdentifier('5');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 13, 3559);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.isIdent('J');
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('M');
      assertTrue(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("+2");
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.decodeBase64("P1@4j*o4W>V}M]^d]p<");
      IOUtils.stringSize(85L);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      IOUtils.isValidJsonpQueryParam("");
      int int0 = (-1735);
      char[] charArray0 = new char[3];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = 'D';
      charArray0[1] = 'D';
      char char2 = 'I';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, (-1735), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1736
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      String string1 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize((-799L));
      // Undeclared exception!
      try { 
        IOUtils.getChars((-799L), 1, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-886), (-886), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -887
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-32);
      char[] charArray0 = new char[8];
      char char0 = 'k';
      charArray0[0] = 'k';
      charArray0[1] = '-';
      charArray0[2] = 'Y';
      charArray0[3] = 'S';
      charArray0[4] = '!';
      charArray0[5] = ';';
      charArray0[6] = 'p';
      charArray0[7] = '<';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-32), (-32), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.getStringProperty("UTF-8");
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      int int0 = IOUtils.stringSize((-768));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "N";
      IOUtils.getStringProperty("N");
      int int0 = (-3837);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("V@]D[ku`!?Ip", 12, (-3837));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 11, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.getStringProperty("8pjY)[0P]2O");
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fastjson.compatibleWithFieldName");
      IOUtils.close(mockPrintWriter0);
      int int0 = IOUtils.stringSize(42L);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("~{Mj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      String string0 = "fastjson.compatibleWithFieldName";
      IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithFieldName");
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '/';
      charArray0[2] = '\"';
      charArray0[3] = 'K';
      charArray0[4] = 'Z';
      int int0 = (-1515);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-1515), (-1515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3031
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 296, (-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -666
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.close(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray1, 1, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = IOUtils.decodeBase64("com.alibaba.fastjson.util.IOUtils", (int) (byte)0, (int) (byte)5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("*KJ3G(_#;?E");
      assertArrayEquals(new byte[] {(byte)40, (byte) (-99), (byte) (-58), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4)}, byteArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 13, 13);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-53), (byte)99, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-70), (byte) (-40), (byte) (-91)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.stringSize((-1412));
      String string0 = "read string from reader error";
      IOUtils.isValidJsonpQueryParam("read string from reader error");
      // Undeclared exception!
      try { 
        IOUtils.decode((CharsetDecoder) null, (ByteBuffer) null, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'W';
      charArray0[2] = 's';
      charArray0[3] = '(';
      charArray0[4] = 'W';
      charArray0[5] = 'o';
      IOUtils.decodeBase64(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("U", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("E");
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils.firstIdentifier('5');
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = '#';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = '+';
      charArray0[7] = 'W';
      IOUtils.decodeUTF8((byte[]) null, 5560, (byte) (-2), charArray0);
      IOUtils.isIdent('W');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 5560, 5560);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5560
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 12, 224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 235
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte) (-7);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '!';
      charArray0[2] = '|';
      charArray0[3] = ']';
      charArray0[4] = '.';
      charArray0[5] = 'v';
      IOUtils.decodeUTF8(byteArray0, (byte)5, (byte)5, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("4S! t#O9Zn)]*", (int) (byte) (-105), (-2242));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-1);
      char[] charArray0 = new char[15];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 7, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = IOUtils.stringSize(10000L);
      assertEquals(5, int0);
      
      IOUtils.getChars(84, 5, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '8', '4', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[23];
      IOUtils.getChars((-20), 7, charArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = IOUtils.stringSize((-46L));
      char[] charArray0 = new char[2];
      IOUtils.getChars(1, 1, charArray0);
      byte[] byteArray0 = new byte[8];
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.close();
      IOUtils.close((Closeable) null);
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = '7';
      charArray0[2] = '3';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray1, (byte)74, (byte)74, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.stringSize(13);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("o*Uz");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(4, charBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = ']';
      charArray0[4] = 'a';
      charArray0[5] = 'c';
      charArray0[6] = 'H';
      charArray0[7] = 'k';
      IOUtils.decodeBase64(charArray0, 4, 4);
      IOUtils.decodeBase64("~{Mj");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[5] = 'd';
      charArray0[8] = 'd';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 5, 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-35)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      String string1 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(100L);
      IOUtils.getChars((long) (byte)42, (int) (byte)42, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(2907L, 63, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      IOUtils.readAll(stringReader0);
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      IOUtils.close(stringReader0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      IOUtils.readAll(stringReader0);
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithJavaBean");
      assertTrue(boolean0);
      
      boolean boolean1 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'W';
      charArray0[4] = 's';
      charArray0[3] = '(';
      charArray0[4] = 'W';
      charArray0[5] = 'o';
      IOUtils.decodeBase64(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-45), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = '\u0000';
      IOUtils.getChars((byte)1, (int) (byte)1, charArray0);
      int int0 = IOUtils.stringSize((long) (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("`", string0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("read string from reader error");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils.stringSize(10000L);
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'H';
      charArray0[2] = ']';
      charArray0[3] = 'o';
      IOUtils.getChars((byte)86, 5, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(10000L, 407, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 406
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[8] = (byte) (-59);
      char[] charArray0 = new char[4];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)8, (byte)8, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) (byte) (-59));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[10];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[5] = 'd';
      charArray0[7] = 'd';
      IOUtils.decodeBase64(charArray0, 5, 4);
      IOUtils.stringSize(4);
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      char char0 = '(';
      char char1 = 'W';
      char char2 = 'o';
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'W';
      charArray0[2] = 'o';
      int int0 = 2;
      IOUtils.decodeBase64(charArray0, 1, 2);
      int int1 = 60;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-51), 60, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = IOUtils.stringSize((-46L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0081';
      IOUtils.getChars(1, 1, charArray0);
      byte[] byteArray0 = new byte[8];
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertEquals(2, int1);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-127), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('}');
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("a8wi\">=");
      assertArrayEquals(new byte[] {(byte)107, (byte) (-52), (byte)34, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize((-39L));
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0081';
      charArray0[1] = '\u0081';
      IOUtils.getChars(1, 1, charArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 398, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.til.UTF8coder", 13, 13);
      IOUtils.decodeBase64("com.alibaba.fastjson.til.UTF8coder", 13, 7);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.til.UTF8coder", 3, 3);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u010C');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\u010C';
      byte[] byteArray0 = IOUtils.decodeBase64("", (int) '\u010C', 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IOUtils.isIdent('\u0111');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize(0L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-19);
      char[] charArray0 = new char[7];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 15, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-9);
      char[] charArray0 = new char[7];
      IOUtils.decodeUTF8(byteArray0, (byte)0, 15, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 15, 15, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '=';
      charArray0[2] = '9';
      charArray0[3] = 't';
      charArray0[4] = 'm';
      charArray0[5] = 'P';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[6] = 'l';
      charArray0[7] = 'f';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[7] = (byte) (-30);
      char[] charArray0 = new char[5];
      int int0 = IOUtils.decodeUTF8(byteArray0, 6, 6, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize(1000L);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-64);
      char[] charArray0 = new char[5];
      IOUtils.decodeUTF8(byteArray0, 6, 866, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      char[] charArray0 = new char[7];
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) (byte)0);
      assertEquals(1, int1);
      
      byte[] byteArray1 = IOUtils.decodeBase64("qK9EI");
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-81), (byte)68}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-13);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '^';
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      charArray0[4] = 'H';
      charArray0[6] = '0';
      charArray0[7] = 'g';
      charArray0[8] = 'x';
      IOUtils.stringSize((long) (byte) (-65));
      IOUtils.stringSize((long) 1);
      IOUtils.decodeUTF8(byteArray0, 1, 3073, charArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-61);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '^';
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      charArray0[4] = 'H';
      charArray0[5] = 'g';
      charArray0[6] = '0';
      charArray0[7] = 'g';
      charArray0[8] = 'x';
      int int0 = IOUtils.stringSize((long) (byte) (-65));
      assertEquals(1, int0);
      
      int int1 = IOUtils.stringSize((long) 1);
      assertEquals(1, int1);
      
      int int2 = IOUtils.decodeUTF8(byteArray0, 1, 3073, charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'1', '^', 'g', 'm', 'H', 'g', '0', 'g', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-61);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)3, (byte)3, charArray0);
      assertEquals((-1), int0);
  }
}
