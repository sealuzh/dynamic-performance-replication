/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:19:40 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2994);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(9, 9);
      assertEquals(9, cRSMatrix1.cardinality());
      assertEquals(0.1111111111111111, cRSMatrix1.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(2994, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4, 4, 4);
      cRSMatrix0.getColumn(4);
      cRSMatrix0.min();
      int int1 = 6;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(6);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(rowMajorSparseMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-732.6348608);
      doubleArray1[1] = (-2830.520751930924);
      doubleArray1[2] = (-1097.0);
      doubleArray1[3] = (-406.4775158577);
      doubleArray1[4] = 1053.1;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rank();
      int int0 = 276;
      cRSMatrix0.product();
      cRSMatrix0.subtract((double) 1);
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 276
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1);
      double double0 = rowMajorSparseMatrix0.sum();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, rowMajorSparseMatrix0.columns());
      
      double double1 = cRSMatrix0.min();
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, double1, 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(2, cRSMatrix1.rows());
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(48, 48);
      cRSMatrix0.spliterator();
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      matrix0.maxInColumn(2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn((-808), vectorProcedure0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1979.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 541;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(541, 1302.0998445286);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      cRSMatrix0.setRow(314, 1302.0998445286);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      cRSMatrix0.product();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 16);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1061);
      cRSMatrix0.minInRow(10);
      int int0 = (-1819);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-1819), (-1819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1819x-1819
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 6;
      int int1 = 7;
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 7);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      CRSMatrix cRSMatrix1 = new CRSMatrix(7, 7);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3;
      int int1 = 1833;
      MockRandom mockRandom0 = new MockRandom(3327L);
      mockRandom0.setSeed(3);
      mockRandom0.nextGaussian();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(3, 1833, 1.0, (Random) mockRandom0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 854;
      int int1 = 97;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(854, 97, 854);
      cRSMatrix0.multiplyByItsTranspose();
      int int2 = 869;
      int int3 = (-1803);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(854, 869, (-1803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1803.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 6;
      int int1 = 7;
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 7);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      Matrix matrix1 = cRSMatrix0.copyOfRows(6);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1333;
      doubleArray0[1] = (double) 96;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = (double) 337;
      doubleArray0[4] = (double) 1333;
      doubleArray0[5] = (double) 1333;
      int[] intArray0 = new int[1];
      intArray0[0] = 337;
      CRSMatrix cRSMatrix0 = new CRSMatrix(96, 337, 1333, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(96, 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3217, 3217);
      cRSMatrix0.maxInRow(3);
      Matrix matrix0 = cRSMatrix0.copyOfShape(309, 3);
      assertEquals(3, matrix0.columns());
      assertEquals(309, matrix0.rows());
      
      cRSMatrix0.rowMajorIterator();
      double double0 = cRSMatrix0.getOrElse(311, 311, 2573.20617901);
      assertEquals(2573.20617901, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(10, 1654, 0.5, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(11, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(12, 12, 12);
      cRSMatrix0.setAll(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      cRSMatrix0.iteratorOfRow(13);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(225, byteArray0.length);
      assertEquals(13, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(331, 331);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 3107.1;
      doubleArray2[1] = (double) 331;
      doubleArray2[2] = (double) 13;
      doubleArray2[3] = (double) 13;
      doubleArray2[4] = (double) 331;
      doubleArray2[5] = (double) 331;
      doubleArray2[6] = (double) 13;
      doubleArray2[7] = (double) 331;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 3107.1;
      doubleArray3[1] = (double) 331;
      doubleArray3[2] = 3107.1;
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 23;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.select(intArray0, intArray0);
      assertEquals(331.0, cRSMatrix2.max(), 0.01);
      assertEquals(2, cRSMatrix2.cardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1600, 3175.16439309323);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(17);
      assertEquals(6.25E-4, compressedVector0.density(), 0.01);
      assertEquals(1600, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1097.0);
      doubleArray1[2] = (-61.3899);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 307.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 307.0;
      doubleArray2[1] = 307.0;
      doubleArray2[2] = 307.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-1097.0);
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-1097.0);
      doubleArray3[2] = (-61.3899);
      doubleArray3[3] = 307.0;
      doubleArray3[4] = 307.0;
      doubleArray3[5] = 307.0;
      doubleArray3[6] = 307.0;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.min();
      assertEquals(15, cRSMatrix0.cardinality());
      assertEquals((-1097.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      cRSMatrix0.setAll(0);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = 1;
      cRSMatrix0.nonZeroIteratorOfColumn(1);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      cRSMatrix0.setRow(0, (Vector) denseVector0);
      cRSMatrix0.toString();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3023.69544466514;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(545, 0, doubleArray0);
      cRSMatrix0.slice((-77), (-705), (-77), (-705));
      assertEquals(545, cRSMatrix0.rows());
      
      double double0 = cRSMatrix0.minInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.rowMajorIterator();
      assertEquals(1090, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-56.263640997552);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (-2053.7394);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-56.263640997552);
      doubleArray2[1] = (-2053.7394);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = (-2053.7394);
      doubleArray2[4] = 0.5;
      doubleArray2[5] = (-56.263640997552);
      doubleArray2[6] = (-56.263640997552);
      doubleArray2[7] = (-56.263640997552);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 100.0;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = 0.5;
      doubleArray3[4] = (-2053.7394);
      doubleArray3[5] = 100.0;
      doubleArray3[6] = (-2053.7394);
      doubleArray3[7] = (-2053.7394);
      doubleArray3[8] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 100.0;
      doubleArray4[2] = 1800.67;
      doubleArray4[3] = 0.5;
      doubleArray4[4] = 0.5;
      doubleArray4[5] = 100.0;
      doubleArray4[6] = 0.5;
      doubleArray4[7] = (-2053.7394);
      doubleArray4[8] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-2053.7394);
      doubleArray5[1] = (-2053.7394);
      doubleArray5[2] = (-2053.7394);
      doubleArray5[3] = 1800.67;
      doubleArray5[4] = (-56.263640997552);
      doubleArray5[5] = 0.5;
      doubleArray5[6] = (-56.263640997552);
      doubleArray5[7] = 3220.9937865;
      doubleArray5[8] = 94.16;
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(10, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      cRSMatrix0.swapColumns(1, 1);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, cRSMatrix0, matrix0);
      byte[] byteArray0 = cRSMatrix1.toBinary();
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1979, 1979, 562);
      cRSMatrix0.nonZeroColumnMajorIterator();
      cRSMatrix0.eachNonZeroInRow(1891, (VectorProcedure) null);
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1979;
      doubleArray1[1] = (double) 1891;
      doubleArray1[2] = (double) 1979;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1979;
      doubleArray2[1] = (double) 1979;
      doubleArray2[2] = (double) 562;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 562;
      doubleArray3[1] = (double) 1979;
      doubleArray3[2] = (double) 1979;
      doubleArray3[3] = (double) 1979;
      doubleArray3[4] = (double) 1979;
      doubleArray3[5] = (double) 1979;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 562;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 1891;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 562;
      doubleArray5[3] = (double) 1891;
      doubleArray5[4] = (double) 562;
      doubleArray5[5] = (double) 1979;
      doubleArray5[6] = 844.11;
      doubleArray5[7] = 731.9;
      doubleArray5[8] = (double) 562;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 257.46338;
      doubleArray6[1] = 731.9;
      doubleArray6[2] = (double) 1979;
      doubleArray6[3] = (double) 1979;
      doubleArray6[4] = (double) 1979;
      doubleArray6[5] = 844.11;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 726;
      int int1 = 1164;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(726, 1164);
      double[][] doubleArray0 = new double[2][4];
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1165' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.multiply((-1291.55038017));
      RowMajorSparseMatrix.fromCSV("");
      cRSMatrix0.setAll(1140.3959);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2071;
      doubleArray0[1] = (double) (-394);
      doubleArray0[2] = (double) 2071;
      doubleArray0[3] = 1140.3959;
      doubleArray0[4] = 1140.3959;
      doubleArray0[5] = (-1291.55038017);
      doubleArray0[6] = 1140.3959;
      doubleArray0[7] = (double) 2071;
      doubleArray0[8] = (-1291.55038017);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(2071, (-394), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2071x-394
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.shuffle();
      cRSMatrix0.rotate();
      cRSMatrix0.add((double) 2);
      cRSMatrix0.nonZeroIteratorOfRow(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1193;
      int int1 = 6;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1193, 6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(6, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-255), (-255), (-255));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-255' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3925, 3925, 3925);
      double double0 = cRSMatrix0.minInRow(974);
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = cRSMatrix0.blankOfShape(3243, 6);
      assertEquals(3925, cRSMatrix0.rows());
      assertEquals(3243, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom((-167L));
      CRSMatrix cRSMatrix1 = CRSMatrix.random(3243, 974, 0.0, (Random) mockRandom0);
      assertEquals(3243, cRSMatrix1.cardinality());
      assertEquals(0.001026694045174538, cRSMatrix1.density(), 0.01);
      assertEquals(0.9, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2643;
      int int1 = 1512;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2643, 1512);
      int[] intArray0 = new int[9];
      intArray0[0] = 2643;
      intArray0[1] = 1512;
      intArray0[2] = 2643;
      intArray0[3] = 1512;
      intArray0[4] = 1512;
      intArray0[5] = 2643;
      cRSMatrix0.toRowMajorSparseMatrix();
      intArray0[6] = 2643;
      intArray0[7] = 1512;
      intArray0[8] = 1512;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2643' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2523, 2523, 2523);
      boolean boolean0 = cRSMatrix0.nonZeroAt(9, 34);
      assertFalse(boolean0);
      assertEquals(2523, cRSMatrix0.rows());
      assertEquals(2523, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(925);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2366;
      doubleArray0[1] = (double) 925;
      doubleArray0[2] = (double) 925;
      doubleArray0[3] = (-1479.797995218551);
      doubleArray0[4] = 1667.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 925;
      intArray0[1] = 897;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2366, 925, 925, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = 1702.74344588;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = 1702.74344588;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = 1702.74344588;
      doubleArray3[2] = 1702.74344588;
      doubleArray3[3] = 1702.74344588;
      doubleArray3[4] = (double) 3;
      doubleArray3[5] = (double) 3;
      doubleArray3[6] = 1702.74344588;
      doubleArray3[7] = 1702.74344588;
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1380;
      double double0 = (-3080.3329531655);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1380, (-3080.3329531655));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 16;
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-6);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1800, 1805.0937640688);
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2649.50326723);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2649.50326723);
      doubleArray2[1] = (-2649.50326723);
      doubleArray2[2] = (-2649.50326723);
      doubleArray2[3] = (-2649.50326723);
      doubleArray2[4] = (-2649.50326723);
      doubleArray2[5] = (-2649.50326723);
      doubleArray2[6] = (-2649.50326723);
      doubleArray2[7] = (-2649.50326723);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1546.12;
      doubleArray3[1] = (-2904.885721853285);
      doubleArray3[2] = (-2649.50326723);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1884.8460103771772;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (-2649.50326723);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 1884.8460103771772;
      doubleArray5[2] = (-2649.50326723);
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(97, byteArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 192;
      doubleArray0[1] = (double) 192;
      doubleArray0[2] = (double) 192;
      doubleArray0[3] = (-299.312613605166);
      doubleArray0[4] = (double) 48;
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = 192;
      intArray0[2] = 192;
      intArray0[3] = 48;
      intArray0[4] = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(192, 48, 192, doubleArray0, intArray0, intArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(192, 4);
      cRSMatrix1.infinityNorm();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)192, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(18, 2146193868);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [18..3][2146193868..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1182);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1182;
      doubleArray2[1] = (double) 1182;
      doubleArray2[2] = (double) 1182;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 1182;
      doubleArray2[5] = (double) 1182;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 1182;
      doubleArray3[1] = (double) 1182;
      doubleArray3[2] = (double) 1182;
      doubleArray3[3] = (double) 1182;
      doubleArray3[4] = (double) 1182;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 1182;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = (double) 1182;
      doubleArray5[4] = (double) 1182;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 189.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1.0;
      doubleArray7[2] = (double) 1182;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 189.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 189.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 189.0;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 189.0;
      doubleArray8[3] = (double) 1182;
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      cRSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1601, 1601);
      Iterator<Integer> iterator0 = cRSMatrix0.iteratorOfNonZeroRows();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-56.263640997552);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (-2053.7394);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-56.263640997552);
      doubleArray2[1] = (-2053.7394);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = (-2053.7394);
      doubleArray2[4] = 0.5;
      doubleArray2[5] = (-56.263640997552);
      doubleArray2[6] = (-56.263640997552);
      doubleArray2[7] = (-56.263640997552);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 100.0;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = 0.5;
      doubleArray3[4] = (-2053.7394);
      doubleArray3[5] = 100.0;
      doubleArray3[6] = (-2053.7394);
      doubleArray3[7] = (-2053.7394);
      doubleArray3[8] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 100.0;
      doubleArray4[2] = 1800.67;
      doubleArray4[3] = 0.5;
      doubleArray4[4] = 0.5;
      doubleArray4[5] = 100.0;
      doubleArray4[6] = 0.5;
      doubleArray4[7] = (-2053.7394);
      doubleArray4[8] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-2053.7394);
      doubleArray5[1] = (-2053.7394);
      doubleArray5[2] = (-2053.7394);
      doubleArray5[3] = 1800.67;
      doubleArray5[4] = (-56.263640997552);
      doubleArray5[5] = 0.5;
      doubleArray5[6] = (-56.263640997552);
      doubleArray5[7] = 3220.9937865;
      doubleArray5[8] = 94.16;
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-966.0);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.doubles((-1.0), 1113.7111200158895);
      mockRandom0.nextBoolean();
      mockRandom0.nextBoolean();
      CRSMatrix.random(13, 1966, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1966, 0, (double) 13, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 192;
      doubleArray0[1] = (double) 192;
      doubleArray0[2] = (double) 192;
      doubleArray0[3] = (-299.312613605166);
      doubleArray0[4] = (double) 48;
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = 192;
      intArray0[2] = 192;
      intArray0[3] = 48;
      intArray0[4] = 48;
      CRSMatrix cRSMatrix0 = new CRSMatrix(192, 48, 192, doubleArray0, intArray0, intArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(192, 4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("No rows or columns selected.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 3;
      org.evosuite.runtime.Random.setNextRandom(3);
      CRSMatrix.diagonal(3, 3);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("YYmP&69>ZX?\"25P@d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(642L);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-852), (-598), 1.1102230246251565E-14, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 5, 5, doubleArray0, intArray0, intArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix.diagonal(21, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 21;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(10, 10, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)4;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(8, 8, doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1796;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1796, 1796);
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-362.942732064087);
      doubleArray0[4] = (-1112.670192519);
      doubleArray0[5] = (-1826.9817232119);
      doubleArray0[6] = (double) 1;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1431655765;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1, doubleArray0, intArray0, intArray0);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      int int1 = (-5598);
      MockRandom mockRandom0 = new MockRandom((-1869L));
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1, (-5598), (double) (-5598), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 7;
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(7, 1.0, (Random) mockRandom0);
      int int1 = (-2971);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-2971), (-1932735282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2971x-1932735282
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 0, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1501;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      String string0 = "Column '";
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("Column '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 2359;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2359, 2359);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1658;
      int int1 = (-2209);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(1658, (-2209), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1658x-2209
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(48, 0.964);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 3;
      double double0 = (-2479.016600739);
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(3, (-2479.016600739), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -22311.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      Matrix matrix0 = cRSMatrix0.hadamardProduct(cRSMatrix1);
      cRSMatrix0.rowMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-732.6348608);
      doubleArray1[1] = (-2830.520751930924);
      doubleArray1[2] = (-1097.0);
      doubleArray1[3] = (-406.4775158577);
      doubleArray1[4] = 1053.1;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rank();
      int int0 = 276;
      cRSMatrix0.product();
      cRSMatrix0.subtract((double) 1);
      int int1 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, (-2154.3366), 1380.9430914, (-840.542139257129), (-732.6348608)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(0, vectorFunction0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cRSMatrix0.getColumn(276);
      int int2 = (-539);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(276, (-539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 276
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13, 13);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 1783;
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-325), 1783);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -325x1783
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-518.0793);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.equals(matrix0, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
