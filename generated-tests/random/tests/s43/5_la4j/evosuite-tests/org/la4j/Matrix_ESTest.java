/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:17:06 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 14;
      int int1 = 3;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(14, 3);
      Matrix matrix0 = denseMatrix0.shuffle();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      int int2 = 5;
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 3, 7, 7, 3, 5, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3, 7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 47;
      Matrix matrix0 = Matrix.zero(47, 47);
      Matrix matrix1 = matrix0.copyOfColumns(47);
      matrix0.infinityNorm();
      Matrix matrix2 = Matrix.identity(47);
      int int1 = (-1487);
      matrix0.equals(matrix2, 2582.084964777642);
      matrix1.sum();
      // Undeclared exception!
      try { 
        matrix2.insertColumn((-1487), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..46
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "%%MatrixMarket matrix coordinawe real general ";
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinawe real general ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown format: coordinawe.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int int0 = (-682);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-100.0);
      doubleArray1[1] = (double) (-682);
      matrix0.toSparseMatrix();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-682), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(610);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 610;
      doubleArray1[1] = (double) 610;
      doubleArray1[2] = (double) 610;
      doubleArray1[3] = (double) 610;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 610;
      doubleArray2[1] = (double) 610;
      doubleArray2[2] = (double) 610;
      doubleArray2[3] = (double) 610;
      doubleArray2[4] = (double) 610;
      doubleArray2[5] = (double) 610;
      doubleArray2[6] = (double) 610;
      doubleArray2[7] = (double) 610;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 610;
      doubleArray3[1] = 895.8145396;
      doubleArray3[2] = 3458.281751;
      doubleArray3[3] = (double) 610;
      doubleArray3[4] = (double) 610;
      doubleArray3[5] = (double) 610;
      doubleArray3[6] = (double) 610;
      doubleArray3[7] = (double) 610;
      doubleArray3[8] = (double) 610;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 2934, 33, 2934, 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2934, 33
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.swapColumns(2, 2);
      matrix0.blankOfRows(2);
      Matrix matrix1 = matrix0.add(960.2310159657);
      MockRandom mockRandom0 = new MockRandom((-1712L));
      Matrix.randomSymmetric(2, mockRandom0);
      matrix1.equals(matrix0, 960.2310159657);
      // Undeclared exception!
      try { 
        matrix0.eachInRow(2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("\n");
      sparseMatrix0.rank();
      Matrix matrix0 = sparseMatrix0.subtract(0.0);
      sparseMatrix0.equals((Object) matrix0);
      matrix0.add(0.0);
      // Undeclared exception!
      try { 
        matrix0.swapRows((-1717986917), 1326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1717986917
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 884);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      int int0 = (-1621);
      matrix0.swapRows((-1621), (-1621));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn(884, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '884' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      int int0 = 6;
      Matrix matrix1 = matrix0.copyOfColumns(6);
      matrix1.rowMajorIterator();
      matrix1.min();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(0, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-1), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(948, 1974.0286765534584);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, 17, Integer.MAX_VALUE, 948, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 17, 2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1282;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1282);
      int[] intArray0 = new int[2];
      intArray0[0] = 1282;
      int int1 = 48;
      intArray0[1] = 48;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2);
      sparseMatrix0.determinant();
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = 0.0;
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = 2777.515616517754;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 2777.515616517754;
      doubleArray5[6] = 2777.515616517754;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 2;
      doubleArray6[1] = 2777.515616517754;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 2;
      doubleArray6[4] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (double) 2;
      doubleArray7[2] = 1750.2;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (double) 2;
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn(3608);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Matrix matrix1 = matrix0.shuffle();
      // Undeclared exception!
      try { 
        matrix1.removeRow((-3015));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(944, 37);
      matrix0.rows();
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 6;
      int int1 = 298;
      Matrix matrix0 = Matrix.unit(6, 298);
      Matrix matrix1 = Matrix.identity(6);
      matrix0.iterator();
      matrix0.equals((Object) matrix1);
      int int2 = (-278);
      int int3 = (-4398);
      // Undeclared exception!
      try { 
        matrix1.setColumn((-278), (double) 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-278' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      Matrix matrix0 = denseMatrix0.divide(10);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      numberFormat0.setMinimumFractionDigits(10);
      matrix0.toCSV(numberFormat0);
      matrix0.setAll((-1337.9084656783305));
      sparseMatrix0.rank();
      Matrix matrix1 = denseMatrix0.multiply((Matrix) sparseMatrix0);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix1.swapColumns(10, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(7, 1288.5346459636);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, 7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 7, 7, 192, (-286), (-286), 2387);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -286x2387
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      matrix0.toSparseMatrix();
      matrix0.determinant();
      SparseMatrix.identity(1123);
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        matrix0.setColumn(1, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(19, 19, 19);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, (-3151), 19, 19, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -3151, 19
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2, 1227);
      denseMatrix0.equals((Object) null);
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn((-626));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      columnMajorSparseMatrix0.multiply(Double.POSITIVE_INFINITY);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      columnMajorSparseMatrix0.copy();
      int[] intArray0 = new int[9];
      columnMajorSparseMatrix0.nonZeroColumnMajorIterator();
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      columnMajorSparseMatrix0.subtract((double) 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[2];
      DenseVector denseVector0 = DenseVector.zero(1993);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1993, (-84.7));
      // Undeclared exception!
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.3104088370251575E-11;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2.3104088370251575E-11;
      doubleArray2[1] = 41.69182933371;
      doubleArray2[2] = 2.3104088370251575E-11;
      doubleArray2[3] = 2.3104088370251575E-11;
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.toMatrixMarket();
      Matrix matrix0 = Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n2 1\n0.000\n0.000\n");
      denseMatrix0.toString();
      DenseMatrix.zero(454, 454);
      Matrix matrix1 = matrix0.divide(2.3104088370251575E-11);
      // Undeclared exception!
      try { 
        matrix1.maxInColumn(494);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 6;
      DenseVector denseVector0 = DenseVector.zero(6);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(6, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.rowMajorIterator();
      int int0 = 4;
      // Undeclared exception!
      try { 
        matrix0.insertRow(4, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.divide(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = matrix0.foldRows(vectorAccumulator0);
      matrix0.eachInColumn((-1151), (VectorProcedure) null);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      Integer integer0 = new Integer(118);
      linkedList0.push(integer0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      denseVector0.fold(vectorAccumulator1);
      Random.setNextRandom(4157);
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DenseMatrix.from2DArray(doubleArray1);
      matrix0.iterator();
      denseMatrix0.determinant();
      int int0 = 9;
      // Undeclared exception!
      try { 
        matrix1.set(118, 9, (-1151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3357, 168.7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      columnMajorSparseMatrix0.transformRow(37, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2330.8428549);
      doubleArray1[1] = 363.430847;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2078.39681432);
      double double0 = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 64.00000000000001;
      doubleArray1[6] = (-164.7564273);
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = matrix0.removeLastColumn();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 64.00000000000001);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1203);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix1.setRow(8, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 6.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 64.00000000000001;
      doubleArray1[1] = (-52.0);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 5.684341886080803E-12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 5.684341886080803E-12;
      doubleArray2[1] = 64.00000000000001;
      doubleArray2[2] = 5.684341886080803E-12;
      doubleArray2[3] = 5.684341886080803E-12;
      doubleArray2[4] = 5.684341886080803E-12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 64.00000000000001;
      doubleArray3[1] = (-52.0);
      doubleArray3[2] = 1684.736;
      doubleArray3[3] = 64.00000000000001;
      doubleArray3[4] = 5.684341886080803E-12;
      doubleArray3[5] = 5.684341886080803E-12;
      doubleArray3[6] = (-52.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 64.00000000000001;
      doubleArray4[1] = 1684.736;
      doubleArray4[2] = 1684.736;
      doubleArray4[3] = 1684.736;
      doubleArray4[4] = 64.00000000000001;
      doubleArray4[5] = 869.63851072;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = 64.00000000000001;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = denseMatrix0.rotate();
      assertEquals(4, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.from2DArray(doubleArray0);
      int int0 = Integer.MAX_VALUE;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.transformRow(Integer.MAX_VALUE, vectorFunction0);
      basic2DMatrix1.power(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1964.0;
      doubleArray1[1] = 1964.0;
      doubleArray1[2] = 1964.0;
      doubleArray1[3] = 2230.37129;
      doubleArray1[4] = (-3055.8);
      doubleArray1[5] = 91.49056307635723;
      doubleArray1[6] = 2488.173;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2230.37129;
      doubleArray2[3] = 1964.0;
      doubleArray2[4] = 91.49056307635723;
      doubleArray2[5] = 91.49056307635723;
      doubleArray2[6] = 91.49056307635723;
      doubleArray2[7] = 1964.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 2230.37129;
      doubleArray3[1] = 91.49056307635723;
      doubleArray3[2] = 2230.37129;
      doubleArray3[3] = (-3055.8);
      doubleArray3[4] = 2230.37129;
      doubleArray3[5] = (-3055.8);
      doubleArray3[6] = 1964.0;
      doubleArray3[7] = 1964.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 1964.0;
      doubleArray4[2] = 1964.0;
      doubleArray4[3] = 2488.173;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-3055.8);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 3562.2239860107697;
      doubleArray5[1] = 1964.0;
      doubleArray5[2] = 2230.37129;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-3055.8);
      doubleArray6[1] = (-3055.8);
      doubleArray6[2] = 2488.173;
      doubleArray6[3] = 2488.173;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 3562.2239860107697;
      doubleArray6[6] = (-3055.8);
      doubleArray6[7] = Double.POSITIVE_INFINITY;
      doubleArray6[8] = 91.49056307635723;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 1964.0;
      doubleArray7[1] = (-3055.8);
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3658.0299238523;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 280.3280656824;
      doubleArray0[3] = 5.684341886080803E-12;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 1946, 9);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 1946);
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1946;
      doubleArray1[1] = (double) 1946;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 9;
      doubleArray2[1] = (double) 1946;
      doubleArray2[2] = (double) 1946;
      doubleArray2[3] = (-103.2757);
      doubleArray2[4] = (double) 9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 1946;
      doubleArray3[1] = (-103.2757);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1308.978);
      doubleArray3[4] = (double) 1946;
      doubleArray3[5] = (double) 9;
      doubleArray3[6] = (double) 1946;
      doubleArray3[7] = (double) 9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-103.2757);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 9;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) 1946;
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = (-1308.978);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (double) 9;
      doubleArray6[1] = (double) 9;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 9;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-1308.978);
      doubleArray6[6] = (-103.2757);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = (double) 9;
      doubleArray7[2] = (double) 9;
      doubleArray7[3] = (double) 9;
      doubleArray7[4] = (-1308.978);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-1308.978);
      doubleArray8[1] = (double) 9;
      doubleArray8[2] = (double) 9;
      doubleArray0[7] = doubleArray8;
      Matrix.from2DArray(doubleArray0);
      int int1 = 2;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, (-1406), 1, 1213, (-425), 1213, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1213, -425
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 32;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(32, 32);
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      rowMajorSparseMatrix0.transpose();
      Matrix matrix1 = matrix0.removeLastColumn();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0, "mky", "mky");
      int int1 = (-2101792505);
      // Undeclared exception!
      try { 
        matrix1.copyOfRows((-2101792505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2101792505x31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3068);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(4808, mockRandom0);
      // Undeclared exception!
      try { 
        sparseMatrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 4808 does not equal to 3068.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 2, 2);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      int int0 = 2135;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapColumns(2135, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2135' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 514;
      int int1 = 820;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(514, 820);
      columnMajorSparseMatrix0.swapColumns((-2437), (-2437));
      // Undeclared exception!
      columnMajorSparseMatrix0.sliceTopLeft(514, 514);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      double double0 = 2828.88;
      denseMatrix0.setRow((-2111), 2828.88);
      ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      int int1 = (-889);
      int int2 = 1519;
      // Undeclared exception!
      try { 
        Matrix.unit((-889), (-889));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1964.0;
      doubleArray2[1] = (-1136.612);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1136.612);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1964.0;
      doubleArray4[2] = (-1136.612);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1964.0;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, sparseMatrix0);
      int int0 = (-3810);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-3810));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-3810
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1626, 130);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      Matrix.constant(130, 1584, 1.0);
      // Undeclared exception!
      rowMajorSparseMatrix0.equals((Object) matrix0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      matrix0.transpose();
      Matrix matrix1 = matrix0.subtract(100.0);
      matrix1.equals((Object) columnMajorSparseMatrix0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      matrix1.toSparseMatrix();
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(99, 99);
      matrix0.euclideanNorm();
      matrix0.divide(99);
      int int0 = (-1914);
      // Undeclared exception!
      try { 
        matrix0.power((-1914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1914.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 9, 9);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.iteratorOfRow(9);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 14;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(14, 2.0);
      double double0 = 631.9475;
      denseMatrix0.setAll(631.9475);
      SparseMatrix sparseMatrix0 = null;
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(16, 1036);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [16..0][1036..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1964.0;
      doubleArray0[1] = 2183.362;
      doubleArray0[2] = (-1081.733965415982);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.constant(5, 1964.0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      String string0 = matrix0.toCSV(numberFormat0);
      assertEquals("     3,857,296,      3,857,296,      3,857,296,      3,857,296,      3,857,296\n 4,288,122.968,  4,288,122.968,  4,288,122.968,  4,288,122.968,  4,288,122.968\n-2,124,525.508, -2,124,525.508, -2,124,525.508, -2,124,525.508, -2,124,525.508\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(959, 959);
      matrix0.rows();
      Locale locale0 = Locale.ITALIAN;
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      matrix0.power(959);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(944, 37);
      matrix0.rows();
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        matrix0.power(944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 944 does not equal to 37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 48);
      rowMajorSparseMatrix0.maxInColumn(0);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfColumns(48);
      Matrix matrix1 = matrix0.power(0);
      int int2 = 320;
      // Undeclared exception!
      try { 
        matrix1.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(7);
      int int1 = 1048;
      denseMatrix0.min();
      // Undeclared exception!
      try { 
        denseMatrix0.set(1048, 7, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (-1446.0);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(37, 37, doubleArray0);
      int int0 = 1433;
      Integer integer0 = new Integer(1433);
      denseMatrix0.equals((Object) integer0);
      denseMatrix0.equals((Object) integer0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      // Undeclared exception!
      try { 
        SparseMatrix.diagonal((-3641), (-52.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-1676));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(16, 16);
      Matrix matrix1 = matrix0.removeColumn(0);
      assertEquals(16, matrix1.rows());
      assertEquals(15, matrix1.columns());
      
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, (-1), 14, 14, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 14x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 966;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 966;
      Random.setNextRandom(0);
      Matrix matrix0 = Matrix.unit(1578, 1578);
      // Undeclared exception!
      matrix0.mkString("", "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(141);
      Matrix matrix0 = columnMajorSparseMatrix0.add(1070.749155509231);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 16, 2374);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 16 rows and 2374 cols at 0, 0 in a 141x141 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.iterator();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(1496L, 1611, 2680);
      DenseVector.random(1515, mockRandom0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2, 2);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1515;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Double double0 = ooPlaceInnerProduct0.apply(sparseVector0, sparseVector0);
      linkedList0.add(double0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x0 does not equal to 2x2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1614;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1614);
      // Undeclared exception!
      columnMajorSparseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(69, 69, 69);
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 69;
      doubleArray1[1] = (double) 69;
      doubleArray1[2] = (double) 69;
      doubleArray1[3] = (double) 69;
      doubleArray1[4] = (double) 69;
      doubleArray1[5] = 5.684341886080803E-12;
      doubleArray1[6] = (double) 69;
      doubleArray1[7] = (double) 69;
      doubleArray1[8] = (double) 69;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      
      Matrix matrix0 = denseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(69, matrix0.columns());
      
      Matrix matrix1 = denseMatrix0.blankOfRows(0);
      assertEquals(0, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 4;
      Matrix matrix0 = Matrix.constant(4, 4, 0.0);
      matrix0.product();
      Matrix matrix1 = matrix0.shuffle();
      matrix1.rank();
      // Undeclared exception!
      try { 
        matrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RowMajorSparseMatrix.zero(32, 5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(465, 233.31);
      Matrix matrix1 = matrix0.copyOfColumns(465);
      assertEquals(0.0, matrix1.min(), 0.01);
      assertEquals(465, matrix1.columns());
      assertEquals(465, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2757.6;
      doubleArray1[1] = (-663.6231217644);
      doubleArray1[2] = 1964.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1505.32760689574);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1505.32760689574);
      doubleArray2[1] = 1964.0;
      doubleArray2[2] = 1964.0;
      doubleArray2[3] = 2757.6;
      doubleArray2[4] = (-1505.32760689574);
      doubleArray2[5] = (-663.6231217644);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1964.0;
      doubleArray3[1] = 2757.6;
      doubleArray3[2] = 2757.6;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 462.08;
      doubleArray4[1] = (-663.6231217644);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1964.0;
      doubleArray5[1] = 2757.6;
      doubleArray5[2] = 2757.6;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1964.0;
      doubleArray5[5] = (-663.6231217644);
      doubleArray5[6] = (-1505.32760689574);
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.setRow((-1368), (-2198.3908053553932));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(529, 6);
      // Undeclared exception!
      try { 
        sparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[0][0];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.rank();
      // Undeclared exception!
      try { 
        matrix0.blankOfShape(0, (-1930));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(31, 1201);
      String string0 = rowMajorSparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n31 1201 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 9);
      DenseVector denseVector0 = DenseVector.unit(8);
      denseMatrix0.insertColumn(8, denseVector0);
      denseMatrix0.transpose();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      // Undeclared exception!
      try { 
        denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      
      Matrix matrix0 = rowMajorSparseMatrix0.multiply((Matrix) columnMajorSparseMatrix0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      matrix0.mkString(numberFormat0, "", "");
      Matrix matrix1 = rowMajorSparseMatrix0.multiply(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix1.foldRows(vectorAccumulator0);
      rowMajorSparseMatrix0.iterator();
      Matrix matrix2 = columnMajorSparseMatrix0.copyOfRows(2);
      assertEquals(0, matrix2.columns());
      assertEquals(2, matrix2.rows());
      
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator1);
      assertTrue(rowMajorSparseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 750;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(750, 1391.681082981);
      int int1 = 5;
      // Undeclared exception!
      rowMajorSparseMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.randomSymmetric(16, mockRandom0);
      basic2DMatrix0.toCSV();
      ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect(16, 16);
      mockRandom0.nextInt();
      mockRandom0.longs();
      // Undeclared exception!
      basic2DMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 2880;
      int int1 = 4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2880, 4, 2880);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.apply((RowMajorSparseMatrix) null, columnMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 48;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(48, 850, 48);
      int int1 = 3;
      SparseMatrix.zero(3, 48);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3977);
      columnMajorSparseMatrix0.iteratorOfRow((-1351));
      SparseVector sparseVector0 = SparseVector.zero(2751, 1446);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(2853, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2751. Should be: 3977.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "4";
      Matrix.fromCSV("4");
      int int0 = 329;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("I}n#K6#9_,X*52bxg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix.fromCSV("          ");
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      int int0 = (-1735);
      MockRandom mockRandom0 = new MockRandom((-736));
      int int1 = 277;
      mockRandom0.ints((-1735), 277);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random((-1735), (-736), (double) (-736), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(32, 0.0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.norm();
      matrix0.multiply((double) 32);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(1411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 37;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(37, 37);
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 37;
      Matrix matrix0 = Matrix.unit(37, 37);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 37;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(53);
      denseMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 53 rows and 53 cols at 0, 0 in a 37x37 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 5, 0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.divide((-996.9993779));
      assertEquals(0, matrix1.columns());
      
      matrix0.toBinary();
      assertTrue(matrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 1000;
      doubleArray0[2] = (double) 1000;
      doubleArray0[3] = (double) 1000;
      doubleArray0[4] = (double) 1000;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1000, 1000, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1000);
      // Undeclared exception!
      rowMajorSparseMatrix0.kroneckerProduct(denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Random.setNextRandom((-1676));
      Matrix matrix0 = Matrix.diagonal(4603, 4603);
      matrix0.max();
      matrix0.subtract(329.0);
      // Undeclared exception!
      matrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 966;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 966;
      doubleArray0[7] = (double) 9;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(966, 9, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.max();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedList0.addFirst(integer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseVector0.update(vectorFunction0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.multiply(0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix1.update(matrixFunction0);
      DenseMatrix denseMatrix0 = matrix1.toDenseMatrix();
      matrix0.setAll(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      denseMatrix0.foldColumns(vectorAccumulator0);
      matrix0.sum();
      int int0 = (-1879048191);
      // Undeclared exception!
      try { 
        denseMatrix0.set(Integer.MAX_VALUE, (-1879048191), 100.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1249;
      double double0 = 2109.839;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1249, 2109.839);
      DenseMatrix.unit(1249, 1249);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.eachNonZero(matrixProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 37;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(37, 37);
      denseMatrix0.subtract((double) 37);
      denseMatrix0.iteratorOfRow(37);
      // Undeclared exception!
      denseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 329.4;
      doubleArray2[1] = 1000.6885012;
      doubleArray2[2] = (-1587.60505);
      doubleArray2[3] = 88.0998384661;
      doubleArray2[4] = (-1156.29871988041);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 42.76;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1156.29871988041);
      doubleArray3[2] = 1000.6885012;
      doubleArray3[3] = (-1156.29871988041);
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 7;
      int int1 = 622;
      Matrix matrix0 = Matrix.zero(7, 622);
      int int2 = 3;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.longs((long) 7, (-2834L), (long) 3);
      // Undeclared exception!
      try { 
        matrix0.transformRow(7, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 107;
      doubleArray0[2] = (double) 107;
      doubleArray0[3] = (double) 107;
      Matrix matrix0 = Matrix.from1DArray(10, 107, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(107, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(916, 916);
      matrix0.slice(916, 916, 916, 2020);
      // Undeclared exception!
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2592.077185729;
      doubleArray0[1] = (-393.55);
      doubleArray0[2] = 1964.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-907.2422561757);
      doubleArray0[5] = 100.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(Integer.MAX_VALUE, (-1522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..2147483647][0..-1522].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 2411;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2411, 2411, 2411);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.toRowVector();
      matrix0.transformColumn(7, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.random(2411, (-3384), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1438.248445;
      doubleArray1[1] = 214.13803692674;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 179.7498839809652;
      doubleArray1[4] = (-2037.440861590861);
      doubleArray1[5] = (-907.3);
      doubleArray1[6] = 2213.7251948;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 2213.7251948;
      doubleArray2[2] = (-2037.440861590861);
      doubleArray2[3] = (-907.3);
      doubleArray2[4] = (-907.3);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-907.3);
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      double double0 = sparseMatrix0.minInColumn(6);
      assertEquals((-907.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(335);
      // Undeclared exception!
      rowMajorSparseMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1914.355646);
      doubleArray1[1] = 1744.1579544356;
      doubleArray1[2] = 64.00000000000001;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.1102230246251565E-14;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (-584.9421266);
      doubleArray1[8] = 37.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn((-1994091957));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1994091957' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-306);
      int int1 = 7;
      // Undeclared exception!
      try { 
        Matrix.zero((-306), 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3, 3);
      inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3);
      rowMajorSparseMatrix0.toString();
      int int0 = 17;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(3, 3, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 4;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.setAll((-2971.859773973));
      matrix0.rank();
      linkedList0.stream();
      // Undeclared exception!
      try { 
        sparseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 4x4 does not equal to 1x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 4;
      int int1 = (-635);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(4, (-635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 4x-635
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 2924.3374;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(788, 2924.3374);
      sparseMatrix0.trace();
      Matrix matrix0 = sparseMatrix0.copyOfRows(788);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2924.3374;
      doubleArray1[1] = (double) 788;
      doubleArray1[2] = 2924.3374;
      doubleArray1[3] = 2924.3374;
      doubleArray1[4] = 2924.3374;
      doubleArray1[5] = 2304377.871200027;
      doubleArray1[6] = 2924.3374;
      doubleArray1[7] = 2924.3374;
      doubleArray1[8] = (double) 788;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 788;
      doubleArray2[1] = 2924.3374;
      doubleArray2[2] = 2304377.871200027;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
      matrix0.columnMajorIterator();
      // Undeclared exception!
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 922.644262765;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2989.17052952681);
      doubleArray1[5] = (-3719.0);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.identity((-1313));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, 16);
      int int1 = (-80);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow((-80), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-80' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2840, 2840);
      double double0 = denseMatrix0.maxInRow(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2840, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 911.2177908387221;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3198.0;
      doubleArray1[4] = 2105.97787;
      doubleArray1[5] = (-2286.897128);
      doubleArray0[0] = doubleArray1;
      SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = Matrix.zero(1240, 353);
      // Undeclared exception!
      matrix0.power(3266);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 10;
      double double0 = 100.0;
      Matrix matrix0 = Matrix.constant(10, 10, 100.0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(3, 3);
      matrix0.manhattanNorm();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, (-1493.758715974732));
      DenseMatrix denseMatrix0 = DenseMatrix.identity(3);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      Matrix matrix2 = matrix0.add(matrix1);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix2.setRow(3, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-1431655764);
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        Matrix.random((-1431655764), (-1431655764), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 2620.110649249;
      doubleArray0[3] = 14.540808842;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1474;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(1474, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (java.util.Random) mockRandom0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int0 = matrix0.columns();
      assertEquals(0, int0);
      
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(4084, 4084, 4084);
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 4084;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 4084;
      doubleArray1[3] = (double) 4084;
      doubleArray1[4] = (double) 4084;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 4084;
      doubleArray2[1] = (double) 4084;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) 4084;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 4084;
      doubleArray3[1] = (double) 4084;
      doubleArray3[2] = (double) 4084;
      doubleArray3[3] = (double) 4084;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (double) 4084;
      doubleArray3[6] = (double) 4084;
      doubleArray3[7] = (double) 4084;
      doubleArray3[8] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (double) 4084;
      doubleArray4[2] = (double) 4084;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-288.5);
      doubleArray4[5] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 4084;
      doubleArray5[1] = (double) 4084;
      doubleArray5[2] = (-288.5);
      doubleArray5[3] = (-288.5);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (double) 4084;
      doubleArray5[6] = (double) 4084;
      doubleArray5[7] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (double) 4084;
      doubleArray6[2] = (-288.5);
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      matrix0.toRowVector();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("8u|`OW&");
      // Undeclared exception!
      matrix0.toMatrixMarket((NumberFormat) choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 4;
      Matrix.unit(4, 4);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int1 = 7;
      int int2 = 1690;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      DenseMatrix.random(7, 1690, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("8u|`OW&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(2851, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3285);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2660.813091699847);
      doubleArray0[3] = (double) (-3285);
      doubleArray0[4] = (double) (-1062);
      doubleArray0[5] = (double) (-3285);
      doubleArray0[6] = (double) (-3285);
      doubleArray0[7] = (double) (-1062);
      doubleArray0[8] = (double) (-1062);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray((-3285), (-1062), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3285x-1062
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("org.la4j.iterator.CursorToRowMajorMatrixIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1665;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1665);
      rowMajorSparseMatrix0.toSparseMatrix();
      // Undeclared exception!
      rowMajorSparseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      sparseMatrix0.nonZeroIterator();
      String string0 = sparseMatrix0.toCSV((NumberFormat) null);
      assertEquals("", string0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(0, sparseMatrix0.columns());
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(0, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1234.299897590322);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1234.299897590322);
      doubleArray2[1] = (-1234.299897590322);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-1234.299897590322);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.5;
      doubleArray8[2] = 7.105427357601002E-13;
      doubleArray8[3] = (-1234.299897590322);
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1234.299897590322);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (-1234.299897590322);
      doubleArray8[8] = (-1234.299897590322);
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) null, denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      Matrix matrix0 = denseMatrix0.divide(10);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix0.toCSV(numberFormat0);
      matrix0.setAll((-1337.9084656783305));
      sparseMatrix0.rank();
      CCSMatrix cCSMatrix0 = (CCSMatrix)denseMatrix0.multiply((Matrix) sparseMatrix0);
      // Undeclared exception!
      try { 
        ((Matrix)cCSMatrix0).fail("r>aW6(k[#2zT6E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // r>aW6(k[#2zT6E
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(4927);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(4927, 0.0, (java.util.Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.insert((Matrix) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 255;
      Matrix matrix0 = Matrix.diagonal(255, 255);
      matrix0.toColumnVector();
      // Undeclared exception!
      matrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 17);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(17, 17);
      sparseMatrix0.setColumn(8, (double) 8);
      columnMajorSparseMatrix0.nonZeroRowMajorIterator();
      columnMajorSparseMatrix0.equals((Matrix) sparseMatrix0, (-3174.07374));
      columnMajorSparseMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.updateAt(368, 3, matrixFunction0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      columnMajorSparseMatrix0.toCSV(numberFormat0);
  }
}
