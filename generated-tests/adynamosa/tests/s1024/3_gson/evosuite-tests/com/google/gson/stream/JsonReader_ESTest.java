/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 13:25:24 GMT 2019
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "t{O]X;WZ";
      StringReader stringReader0 = new StringReader("t{O]X;WZ");
      StringReader stringReader1 = new StringReader("t{O]X;WZ");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 5 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected ':'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      jsonReader0.nextString();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "x;TG>aUm|\\0lGry~4";
      StringReader stringReader0 = new StringReader("x;TG>aUm|\u0000lGry~4");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("x;TG>aUm|\u0000lGry~4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      stringReader0.read();
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      JsonReader jsonReader4 = new JsonReader(stringReader1);
      JsonReader jsonReader5 = new JsonReader(stringReader0);
      try { 
        jsonReader1.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")]}'\n");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip(2L);
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      stringReader0.mark(8);
      int int0 = jsonReader0.peeked;
      jsonReader0.hasNext();
      stringReader0.read();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "RO-X;WZ";
      StringReader stringReader0 = new StringReader("RO-X;WZ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      jsonReader0.nextString();
      stringReader0.mark(65);
      int int0 = jsonReader0.peeked;
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")]}'\n");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.peeked;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = ")]}'\n";
      StringReader stringReader0 = new StringReader(")]}'\n");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip((-7L));
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      stringReader0.mark(8);
      jsonReader0.skipValue();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 2 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("01]:]2W4]aTM&O");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~\"Sq!ZlF@5");
      char[] charArray0 = new char[1];
      stringReader0.skip((-1059L));
      stringReader0.skip((-111L));
      charArray0[0] = 'Z';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1;
      stringReader0.markSupported();
      jsonReader0.peek();
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.googl8.g\"on.stream.Js[Tokej");
      boolean boolean0 = true;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.peeked;
      jsonReader0.skipValue();
      stringReader0.mark(0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 32 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EUL:");
      stringReader0.skip(2);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      String string0 = "\\XivisA_}r]jzG%F";
      stringReader0.read(charArray0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" path ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.isLenient();
      jsonReader0.peeked = 14;
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'x;TG>aUm|\u0000l.ryT4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      jsonReader0.getPath();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 18 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      String string0 = "";
      StringReader stringReader1 = new StringReader("");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 2;
      StringReader stringReader1 = new StringReader("");
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "com.gogl8gson.streamJsonToken";
      StringReader stringReader0 = new StringReader("com.gogl8gson.streamJsonToken");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      stringReader0.skip(1969L);
      jsonReader0.peeked = 12;
      jsonReader0.peek();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "END_DOCUMENT";
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1;
      int int0 = jsonReader0.peeked;
      jsonReader0.toString();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "]gCE&2XCV";
      StringReader stringReader0 = new StringReader("]gCE&2XCV");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = 14;
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "END_DOCUMENT";
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1;
      int int0 = jsonReader0.peeked;
      jsonReader0.beginObject();
      jsonReader0.toString();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "END_DOCUMENT";
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1;
      int int0 = jsonReader0.peeked;
      jsonReader0.beginObject();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.gogl.gson.streamJsonToken");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      jsonReader0.peeked = 12;
      boolean boolean0 = false;
      jsonReader0.setLenient(false);
      StringReader stringReader1 = new StringReader(":4Z^S$");
      StringReader stringReader2 = new StringReader("c");
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      jsonReader0.peek();
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      JsonReader jsonReader3 = new JsonReader(stringReader2);
      try { 
        jsonReader3.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 11;
      jsonReader0.setLenient(false);
      jsonReader0.peek();
      stringReader0.skip(11);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1-Fr.nBY~xH10U");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qD]NaJG(c{&4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.toString();
      stringReader0.skip(0L);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      jsonReader0.skipValue();
      stringReader0.read();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      try { 
        jsonReader2.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!](?}=/R");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader2.setLenient(true);
      stringReader0.reset();
      int int0 = jsonReader0.peeked;
      // Undeclared exception!
      try { 
        jsonReader2.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "com.google.gson.stream.JsonToken";
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      jsonReader0.peeked = 12;
      int int0 = jsonReader0.peeked;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      jsonReader0.peek();
      stringReader0.reset();
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      jsonReader0.peeked = 12;
      int int0 = jsonReader0.peeked;
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 13;
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")Cc>");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("t'mo4Ch\bDfb");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      stringReader1.read();
      jsonReader1.setLenient(true);
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      StringReader stringReader1 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = 13;
      stringReader0.markSupported();
      stringReader0.ready();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      stringReader1.skip(13);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[(2*|`:uWI-");
      StringReader stringReader1 = new StringReader("*/");
      stringReader1.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      StringReader stringReader2 = new StringReader("]Z");
      stringReader2.ready();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-97hb0<uO^NV:I`");
      boolean boolean0 = false;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "l";
      StringReader stringReader0 = new StringReader("l");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      jsonReader0.peeked = 4;
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("22[;-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("22[;-");
      StringReader stringReader2 = new StringReader("$g8gn5wp1S.T");
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      stringReader1.markSupported();
      jsonReader0.setLenient(true);
      jsonReader2.peek();
      jsonReader0.skipValue();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]CO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      jsonReader0.getPath();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      jsonReader0.endArray();
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'A';
      charArray0[2] = 'c';
      charArray0[3] = '7';
      charArray0[4] = '?';
      charArray0[5] = '@';
      charArray0[6] = '7';
      charArray0[7] = '<';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("[]CO");
      stringReader0.skip(1L);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qD &^E??X1");
      StringReader stringReader1 = new StringReader("]OE&f2XCV");
      StringReader stringReader2 = new StringReader("[3eBLxTXp_F0|8(E");
      JsonReader jsonReader0 = new JsonReader(stringReader2);
      stringReader1.markSupported();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 18 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[;Ca");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      StringReader stringReader1 = new StringReader("Expected END_ARRAY but was ");
      stringReader0.markSupported();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7neI?}(&bf-rQ,5");
      stringReader0.markSupported();
      stringReader0.skip(524);
      stringReader0.mark(524);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2206);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[s&H>");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.toString();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!(2*|T:uWI-");
      StringReader stringReader1 = new StringReader("!(2*|T:uWI-");
      StringReader stringReader2 = new StringReader("!(2*|T:uWI-");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0083';
      stringReader1.mark(11);
      stringReader1.read(charArray0);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[.(2|`:uW-");
      StringReader stringReader1 = new StringReader("(F}9q8+dVniFzM}.:M");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[.(2|`:uW-");
      StringReader stringReader1 = new StringReader("(F}9q8+dVniFzM}.:M");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      jsonReader0.setLenient(true);
      jsonReader0.isLenient();
      jsonReader0.peek();
      jsonReader0.nextString();
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dC~*N@vf_j }]");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("dC~*N@vf_j }]");
      StringReader stringReader2 = new StringReader("{\"*|:\"4I6");
      StringReader stringReader3 = new StringReader("{\"*|:\"4I6");
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("dC~*N@vf_j }]");
      stringReader1.ready();
      StringReader stringReader5 = new StringReader("{\"*|:\"4I6");
      StringReader stringReader6 = new StringReader("{\"*|:\"4I6");
      JsonReader jsonReader1 = new JsonReader(stringReader3);
      jsonReader1.beginObject();
      jsonReader0.getPath();
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]CO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      StringReader stringReader1 = new StringReader("Expected END_ARRAY but was ");
      stringReader0.markSupported();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      stringReader1.reset();
      // Undeclared exception!
      jsonReader0.skipValue();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&H>");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      stringReader0.read();
      jsonReader0.peeked = (-1);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&H>");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      stringReader0.read();
      jsonReader0.peeked = (-1);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!(2*|T:uWI-");
      StringReader stringReader1 = new StringReader("!(2*|T:uWI-");
      StringReader stringReader2 = new StringReader("!(2*|T:uWI-");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      jsonReader0.toString();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EN'_D_DOCUMEZT");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-9);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2129);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.markSupported();
      stringReader0.skip(9223372036854775800L);
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" UL4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip(0L);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader(" UL4");
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OlN|',lnNE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.skip((-9223372036854775808L));
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '(';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.ready();
      stringReader0.read(charBuffer0);
      jsonReader0.peek();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.skip((-9223372036854775808L));
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[(2*|`:uWI-");
      StringReader stringReader1 = new StringReader("*/");
      stringReader1.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]CO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      String string0 = jsonReader0.getPath();
      assertEquals("$[0]", string0);
      
      stringReader0.skip(10L);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.ready();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = 16;
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]OE&f2XCV");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = (-17);
      StringReader stringReader1 = new StringReader("]OE&f2XCV");
      StringReader stringReader2 = new StringReader("null");
      int int0 = jsonReader0.peeked;
      jsonReader0.setLenient(false);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("Expected a string but was ");
      StringReader stringReader2 = new StringReader("Expected a string but was ");
      StringReader stringReader3 = new StringReader("Expected a string but was ");
      jsonReader0.setLenient(false);
      JsonReader jsonReader1 = new JsonReader(stringReader3);
      jsonReader1.setLenient(true);
      jsonReader1.skipValue();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STPING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = (-2);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]OE&f2XCV");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.ready();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("com.google.gson.stream.JsonToken");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = 16;
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.ready();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = 16;
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]CO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.mark(58);
      jsonReader0.beginArray();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_ARRAY at line 1 column 3 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J[2wdu");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.ready();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextDouble();
      stringReader0.reset();
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[(2*|`:uWI-");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.beginArray();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("56{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{U%F|/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(false);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[(2*|`:uWI-");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      char[] charArray0 = new char[13];
      jsonReader0.peeked = (-17);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\")X$DB;7hG8UW},w&V");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 19 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected value");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peeked = (-2857);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#[(2*|`:uWI-");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1+Xr");
      StringReader stringReader1 = new StringReader("1+Xr");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      StringReader stringReader2 = new StringReader("lJX3bn8HE+");
      stringReader2.markSupported();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      jsonReader1.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[]CO");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{U%F|/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      stringReader0.skip(0L);
      jsonReader0.nextBoolean();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7.>D");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      stringReader0.ready();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = 16;
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-]/7?{");
      StringReader stringReader1 = new StringReader("-]/7?{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/j<?");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("");
      jsonReader0.setLenient(true);
      StringReader stringReader2 = new StringReader("/j<?");
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      StringReader stringReader3 = new StringReader("/j<?");
      JsonReader jsonReader2 = new JsonReader(stringReader3);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 45;
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STPING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 8;
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c%|)({");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 g6Wh3(5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextLong();
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.nextString();
      jsonReader0.skipValue();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      try { 
        jsonReader2.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      jsonReader0.peeked = 3;
      jsonReader0.peek();
      jsonReader0.beginArray();
      jsonReader0.toString();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("Unterminated array");
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      jsonReader0.peeked = 3;
      jsonReader0.peek();
      jsonReader0.beginArray();
      jsonReader0.toString();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("Unterminated array");
      JsonReader jsonReader4 = new JsonReader(stringReader0);
      try { 
        jsonReader3.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7;^)");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'s}EAG`s.P[a`2q");
      StringReader stringReader1 = new StringReader("'s}EAG`s.P[a`2q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      CharBuffer.wrap((CharSequence) "$");
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("]OE&f2XCV");
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("false");
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '{';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      stringReader2.read(charArray0);
      JsonReader jsonReader2 = new JsonReader(stringReader2);
      stringReader2.read(charArray0);
      // Undeclared exception!
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      stringReader0.reset();
      String string0 = "9#g+4DJ:d0|";
      StringReader stringReader1 = new StringReader("9#g+4DJ:d0|");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]OE&f2XCV");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      StringReader stringReader1 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader2 = new StringReader("FALSE");
      StringReader stringReader3 = new StringReader("k^ {[&J|h");
      stringReader3.reset();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      JsonReader jsonReader2 = new JsonReader(stringReader3);
      String string0 = jsonReader2.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      
      JsonReader jsonReader3 = new JsonReader(stringReader2);
      JsonReader jsonReader4 = new JsonReader(stringReader0);
      StringReader stringReader4 = new StringReader("");
      JsonReader jsonReader5 = new JsonReader(stringReader0);
      jsonReader3.peeked = 5;
      StringReader stringReader5 = new StringReader("JsonReader at line 1 column 1 path $");
      JsonReader jsonReader6 = new JsonReader(stringReader5);
      jsonReader1.skipValue();
      boolean boolean0 = jsonReader3.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "'s}EAG`s.P[a`2q";
      StringReader stringReader0 = new StringReader("'s}EAG`s.P[a`2q");
      StringReader stringReader1 = new StringReader("'s}EAG`s.P[a`2q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      CharBuffer.wrap((CharSequence) "$");
      int int0 = jsonReader0.peeked;
      StringReader stringReader2 = new StringReader("+RE7_W6z=:mVx 3]_");
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 16 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dC~*N@vf_j }]");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      StringReader stringReader1 = new StringReader("dC~*N@vf_j }]");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      jsonReader0.nextString();
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/j<?");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dC~*N@vf_j }]");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.toString();
      StringReader stringReader1 = new StringReader("dC~*N@vf_j }]");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      StringReader stringReader2 = new StringReader("NULL");
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      JsonReader jsonReader3 = new JsonReader(stringReader1);
      jsonReader0.skipValue();
      assertNotSame(jsonReader0, jsonReader1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "Expectd END_OBJECT but was ";
      StringReader stringReader0 = new StringReader("Expectd END_OBJECT but was ");
      StringReader stringReader1 = new StringReader("FE$j(#h9l]^gxB");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      CharBuffer.wrap((CharSequence) "Expectd END_OBJECT but was ");
      int int0 = jsonReader0.peeked;
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      jsonReader2.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]OE&f2XCV");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.peeked = 8;
      jsonReader0.setLenient(true);
      jsonReader0.peek();
      jsonReader0.hasNext();
      jsonReader0.toString();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 g6Wh3(5");
      StringReader stringReader1 = new StringReader("0 g6Wh3(5");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      stringReader1.ready();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      jsonReader0.nextDouble();
      jsonReader1.toString();
      try { 
        jsonReader1.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "STRING";
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 10;
      jsonReader0.skipValue();
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expectd END_OBJECT but was ");
      StringReader stringReader1 = new StringReader("+RE7_W6z=:mVx 3]_");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      CharBuffer.wrap((CharSequence) "Expectd END_OBJECT but was ");
      int int0 = jsonReader0.peeked;
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      jsonReader2.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "Expected END_OBJECT but was ";
      StringReader stringReader0 = new StringReader("Expected END_OBJECT but was ");
      StringReader stringReader1 = new StringReader("+RE7_W6z=:mVx 3]_");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      char[] charArray0 = new char[13];
      jsonReader0.peeked = (-17);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader0 = new StringReader("com.google.gson.internal.JsonReaderInternalAccess");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("{5{ERz}[; .p");
      StringReader stringReader2 = new StringReader("4@>S)MD'#cBC");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 g6Wh3(5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextLong();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = ';';
      charArray0[4] = '\\';
      charArray0[5] = '6';
      stringReader0.read(charArray0);
      stringReader0.close();
      jsonReader0.peeked = (-1422);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peek();
      stringReader2.read();
      stringReader2.close();
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "NULL";
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.nextNull();
      jsonReader0.skipValue();
      stringReader0.reset();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".uM&[Ax_0x00)k");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip((-2906L));
      jsonReader0.setLenient(true);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader0.nextString();
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      try { 
        jsonReader3.nextBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      StringReader stringReader1 = new StringReader("\"2Aqn");
      stringReader0.reset();
      stringReader0.read();
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      StringReader stringReader1 = new StringReader("\"2Aqn");
      stringReader0.reset();
      stringReader0.read();
      stringReader0.close();
      StringReader stringReader2 = new StringReader("m0j&c");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tq");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("%");
      jsonReader0.peeked = (-939);
      StringReader stringReader2 = new StringReader("");
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.nextNull();
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peek();
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      jsonReader1.setLenient(true);
      boolean boolean0 = jsonReader1.isLenient();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|h|FnUnY2<7ZfY");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      StringReader stringReader1 = new StringReader("|h|FnUnY2<7ZfY");
      StringReader stringReader2 = new StringReader("k^ {[&J|h");
      jsonReader0.setLenient(true);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.peek();
      try { 
        jsonReader1.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peek();
      jsonReader0.setLenient(true);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("7:^w@");
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      jsonReader0.peek();
      StringReader stringReader2 = new StringReader("_+Ui/T(");
      StringReader stringReader3 = new StringReader("`N%yS");
      JsonReader jsonReader3 = new JsonReader(stringReader3);
      try { 
        jsonReader1.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peek();
      jsonReader0.setLenient(true);
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      jsonReader1.setLenient(true);
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".uM&[Ax_0x00)k");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.skip((-2906L));
      jsonReader0.setLenient(true);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("d{(9fi=Cf");
      StringReader stringReader2 = new StringReader("\"2Aqn");
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.peek();
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tq");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("%");
      StringReader stringReader2 = new StringReader("");
      jsonReader0.setLenient(true);
      jsonReader0.doPeek();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "FALSE";
      StringReader stringReader0 = new StringReader("FALSE");
      StringReader stringReader1 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader2 = new StringReader("FALSE");
      String string1 = "\\u";
      StringReader stringReader3 = new StringReader(string1);
      JsonReader jsonReader1 = new JsonReader(stringReader2);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      JsonReader jsonReader3 = new JsonReader(stringReader1);
      jsonReader3.nextBoolean();
      JsonReader jsonReader4 = new JsonReader(stringReader1);
      jsonReader3.doPeek();
      try { 
        jsonReader4.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.skip((-33L));
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.isLenient();
      jsonReader0.skipValue();
      stringReader0.mark(0);
      jsonReader0.peek();
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '*';
      charArray0[2] = 't';
      stringReader0.read(charArray0);
      jsonReader0.setLenient(false);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
      
      jsonReader0.isLenient();
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 5 path $", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      int int0 = jsonReader0.peeked;
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("7:^w@");
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      jsonReader1.nextLong();
      JsonReader jsonReader4 = new JsonReader(stringReader0);
      StringReader stringReader2 = new StringReader("Invalid escape sequence");
      JsonReader jsonReader5 = new JsonReader(stringReader2);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6,1");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.skipValue();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      StringReader stringReader1 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = "k^ {[&J|h";
      StringReader stringReader2 = new StringReader("FALSE");
      StringReader stringReader3 = new StringReader("k^ {[&J|h");
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("k^ {[&J|h");
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.peek();
      jsonReader0.setLenient(false);
      try { 
        jsonReader1.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("~OTyspb$?YS)u");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader2.nextString();
      stringReader0.skip((-9223372036854775808L));
      jsonReader2.setLenient(true);
      JsonReader jsonReader3 = new JsonReader(stringReader1);
      JsonReader jsonReader4 = new JsonReader(stringReader0);
      jsonReader4.getPath();
      jsonReader2.getPath();
      try { 
        jsonReader3.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      StringReader stringReader0 = new StringReader("22[;-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.doPeek();
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      try { 
        jsonReader2.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      stringReader0.read();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.getPath();
      int int0 = jsonReader0.peeked;
      jsonReader0.nextDouble();
      jsonReader0.getPath();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("NULL");
      StringReader stringReader2 = new StringReader("NULL");
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      jsonReader2.peek();
      jsonReader2.setLenient(true);
      jsonReader0.nextNull();
      // Undeclared exception!
      try { 
        jsonReader2.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CLC;:%L]*`j]'SH");
      StringReader stringReader1 = new StringReader("-]/7?{");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      stringReader0.read();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      int int0 = jsonReader0.peeked;
      jsonReader0.close();
      jsonReader0.getPath();
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      int int0 = jsonReader0.peeked;
      jsonReader0.getPath();
      stringReader0.ready();
      stringReader0.close();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      jsonReader1.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 10;
      jsonReader0.nextString();
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|h|FnUnY2<7Zf");
      StringReader stringReader1 = new StringReader("|h|FnUnY2<7Zf");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.peeked = (-1512);
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = ' ';
      charArray0[2] = 't';
      charArray0[3] = '.';
      charArray0[4] = '#';
      charArray0[5] = 'M';
      charArray0[6] = 'D';
      charArray0[7] = 'Y';
      stringReader1.read(charArray0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      StringReader stringReader1 = new StringReader("NULL");
      StringReader stringReader2 = new StringReader("NULL");
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      jsonReader2.setLenient(true);
      jsonReader0.nextNull();
      // Undeclared exception!
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader(";TA/=iF/");
      StringReader stringReader1 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.toString();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tq");
      StringReader stringReader1 = new StringReader("Tq");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(false);
      jsonReader0.getPath();
      stringReader1.close();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      stringReader0.mark(85);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8}!Lq]&Sr~c");
      stringReader0.mark(116);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
      jsonReader0.hasNext();
      jsonReader0.close();
      int int0 = jsonReader0.peeked;
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      char[] charArray0 = new char[4];
      char char0 = '-';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 g6Wh3(5");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextInt();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      jsonReader0.close();
      StringReader stringReader1 = new StringReader(",S(nu2");
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      try { 
        jsonReader2.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TjH40EO7SnhSLAS%39");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextNull();
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      jsonReader0.doPeek();
      jsonReader0.doPeek();
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      jsonReader1.nextInt();
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.skip((-33L));
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      jsonReader0.peek();
      jsonReader0.peeked = 2771;
      char[] charArray0 = new char[3];
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      stringReader2.read(charArray0);
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.markSupported();
      jsonReader0.doPeek();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=%5@80h<0U$]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      stringReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextNull();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0 g6Wh3(5");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = 'T';
      charArray0[2] = '_';
      charArray0[3] = 'F';
      charArray0[4] = 'a';
      charArray0[5] = 'T';
      charArray0[6] = 'F';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1537;
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7:^w@");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(3);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[13];
      jsonReader0.peeked = 3;
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_ARRAY at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.skip((-33L));
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.isLenient();
      jsonReader0.skipValue();
      jsonReader0.peek();
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      stringReader0.markSupported();
      charArray0[1] = 'a';
      charArray0[2] = 'r';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-708), (-708));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      stringReader0.skip((-9223372036854775808L));
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(23);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 39;
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char char0 = '5';
      StringReader stringReader0 = new StringReader("![(2*|T:uWI-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X11");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.isLenient();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'s}EAG`s.P[a`2q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t6QRd&0W{KL2c4=");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(23);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[8];
      jsonReader0.peeked = 39;
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 10;
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = '4';
      charArray0[2] = 'X';
      String string0 = "qv!sYLnF";
      StringReader stringReader0 = new StringReader("qv!sYLnF");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x2Z");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'M';
      charArray0[2] = 'k';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSON forbids NaN and infinities: ");
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '+';
      charArray0[2] = '*';
      charArray0[3] = 'h';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '%';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(false);
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = 'c';
      charArray0[3] = 'B';
      charArray0[4] = 'c';
      charArray0[5] = '$';
      stringReader0.read(charArray0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1537;
      char char0 = 'X';
      char char1 = 'S';
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#4bJO|-x>:Kv");
      stringReader0.reset();
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '9';
      charArray0[2] = '7';
      charArray0[3] = '9';
      charArray0[4] = '.';
      charArray0[5] = '.';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '%';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read(charArray0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t8)If");
      String string0 = "\\u";
      StringReader stringReader1 = new StringReader(string0);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(false);
      jsonReader0.getPath();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2VcF");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = ')';
      charArray0[2] = '.';
      char char0 = '%';
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ES8^%N4(=c+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< c2S");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yi7=_X&I+bg");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("STRING");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.skip(1L);
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.ready();
      jsonReader0.toString();
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a long but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUMBER");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]9.$D1?");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 1537;
      stringReader0.ready();
      jsonReader0.toString();
      stringReader0.mark(393);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '9';
      charArray0[2] = '7';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B6J[ N");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"2Aqn");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '%';
      stringReader0.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "Expected a string but was ";
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.close();
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = '<';
      charArray0[2] = 'T';
      charArray0[3] = 'a';
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'M';
      charArray0[2] = 'k';
      charArray0[3] = 'S';
      stringReader0.skip(98L);
      charArray0[4] = 'l';
      charArray0[5] = '7';
      charArray0[6] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSON forbids NaN and infinities: ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2VcF");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = ')';
      charArray0[2] = '.';
      charArray0[3] = '%';
      charArray0[4] = '8';
      charArray0[5] = '_';
      charArray0[6] = '[';
      charArray0[7] = '4';
      charArray0[8] = '?';
      stringReader0.read(charArray0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'T';
      charArray0[2] = 'X';
      charArray0[3] = 'F';
      charArray0[4] = '';
      charArray0[5] = 'S';
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vqfb9FZ9$_[<F%Z'");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#4bJO|-x>:Kv");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(2022L);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
