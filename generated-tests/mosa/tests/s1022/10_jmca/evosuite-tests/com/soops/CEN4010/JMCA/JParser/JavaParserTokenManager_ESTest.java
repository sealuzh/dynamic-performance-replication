/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:33:39 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 3782, 3782, 3782);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\Nh#Mm");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '\u0000', '\u0000');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("case");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2064, 17, 17);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(18, token0.kind);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      javaParserTokenManager0.debugStream = printStream0;
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.setDebugStream(printStream0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'v', 123);
      charArrayReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("v", token0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1522, 1522);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1522, column 1523.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 974, 974, 974);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(976, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",BnA848FBAhzc N");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1290, 1183, 1290);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1290, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pA{|b^u8;=?jKy5~w ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1, 50);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("{", token0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 374, (-3516), 374);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("l", token0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xfv(OdyX.%lq-1");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(5);
      assertEquals(5L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 5, 6);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endLine);
      assertEquals(5, token0.beginColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals("dyX", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals(5, token1.beginLine);
      assertEquals(5, token1.endLine);
      assertEquals(8, token1.beginColumn);
      assertEquals(8, token1.endColumn);
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("*=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 53, 53, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(112, token0.kind);
      assertEquals(53, token0.endLine);
      assertEquals(54, token0.endColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(53, token0.beginColumn);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals("*=", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(53, token1.beginLine);
      assertEquals(54, token1.beginColumn);
      assertEquals(53, token1.endLine);
      assertEquals(54, token1.endColumn);
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'n';
      charArray0[2] = 'd';
      charArray0[3] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', 'n', 'd', 'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 15, 15, 33);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'j', 'n', 'd', 'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'j', 'n', 'd', 'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(18, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("jndn", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'j', 'n', 'd', 'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'j', 'n', 'd', 'n', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 15, column 19.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = ',';
      charArray0[2] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', ',', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, ',', (-752), ',');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', ',', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', ',', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-752), token0.beginColumn);
      assertEquals(44, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals((-752), token0.endColumn);
      assertEquals(44, token0.endLine);
      assertEquals((-752), javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals((-752), javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals((-752), javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', ',', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(44, token1.beginLine);
      assertEquals((-751), token1.endColumn);
      assertEquals((-751), token1.beginColumn);
      assertEquals(44, token1.endLine);
      assertEquals(84, token1.kind);
      assertEquals((-751), javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals((-751), javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals((-751), javaCharStream0.getBeginColumn());
      assertEquals(",", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'*', ',', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iQ=@:N$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.beginLine);
      assertEquals(96, token0.endColumn);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals("iQ", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals('@', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token1.beginColumn);
      assertEquals(97, token1.endColumn);
      assertEquals(95, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(95, token1.beginLine);
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("IN_FORMAL_COMMENT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 14, 14, 115);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, javaCharStream0.bufpos);
      assertEquals(14, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(14, token0.beginColumn);
      assertEquals(30, token0.endColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals("IN_FORMAL_COMMENT", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(14, token1.beginLine);
      assertEquals(30, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(30, token1.endColumn);
      assertEquals(14, token1.endLine);
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0089';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '\u0089', 123);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 137, column 124.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ro^NH#bMm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.beginLine);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals("Ro", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, token1.beginLine);
      assertEquals(97, token1.beginColumn);
      assertEquals(107, token1.kind);
      assertEquals(97, token1.endColumn);
      assertEquals(95, token1.endLine);
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(95, token2.endLine);
      assertEquals(95, token2.beginLine);
      assertEquals(98, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(99, token2.endColumn);
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals("NH", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\\Nh#Mm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 37.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, (-3379));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals((-3379), token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals((-3379), token0.endColumn);
      assertEquals((-3379), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-3379), javaCharStream0.getBeginColumn());
      assertEquals((-3379), javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(122, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-3366), token1.endColumn);
      assertEquals(122, token1.endLine);
      assertEquals((-3378), token1.beginColumn);
      assertEquals((-3378), javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-3366), javaCharStream0.getColumn());
      assertEquals((-3366), javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 8, 2744);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals(21, token0.beginLine);
      assertEquals(17, token0.endColumn);
      assertEquals(21, token0.endLine);
      assertEquals(8, token0.beginColumn);
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals("\"\t\"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2896), 461, 461);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(461, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals((-2896), token0.beginLine);
      assertEquals(461, token0.endColumn);
      assertEquals((-2896), token0.endLine);
      assertEquals((-2896), javaCharStream0.getBeginLine());
      assertEquals((-2896), javaCharStream0.getEndLine());
      assertEquals(461, javaCharStream0.getEndColumn());
      assertEquals(461, javaCharStream0.getColumn());
      assertEquals(461, javaCharStream0.getBeginColumn());
      assertEquals((-2896), javaCharStream0.getLine());
      assertEquals("6", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"float\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, 32, 32);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(38, token0.endColumn);
      assertEquals(32, token0.beginColumn);
      assertEquals(98, token0.beginLine);
      assertEquals(98, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals("\"float\"", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(98, token1.beginLine);
      assertEquals(38, token1.beginColumn);
      assertEquals(38, token1.endColumn);
      assertEquals(98, token1.endLine);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(38, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(98, token2.beginLine);
      assertEquals(38, token2.beginColumn);
      assertEquals(98, token2.endLine);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 123, 126);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(126, token0.beginColumn);
      assertEquals(123, token0.endLine);
      assertEquals(126, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(123, token0.beginLine);
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals("_", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(126, token0.beginColumn);
      assertEquals(123, token0.endLine);
      assertEquals(126, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(123, token0.beginLine);
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals("_", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((-3001));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3001. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ro^NH#bMm");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'O';
      charArray0[2] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-3958), 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token0.kind);
      assertEquals(37, token0.endColumn);
      assertEquals(37, token0.beginColumn);
      assertEquals((-3958), token0.beginLine);
      assertEquals((-3958), token0.endLine);
      assertEquals((-3958), javaCharStream1.getEndLine());
      assertEquals((-3958), javaCharStream1.getLine());
      assertEquals(37, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getEndColumn());
      assertEquals((-3958), javaCharStream1.getBeginLine());
      assertEquals("+", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3958), javaCharStream1.getEndLine());
      assertEquals((-3958), javaCharStream1.getLine());
      assertEquals(37, javaCharStream1.getBeginColumn());
      assertEquals(37, javaCharStream1.getColumn());
      assertEquals(37, javaCharStream1.getEndColumn());
      assertEquals((-3958), javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-3958), token1.beginLine);
      assertEquals(39, token1.endColumn);
      assertEquals((-3958), token1.endLine);
      assertEquals(38, token1.beginColumn);
      assertEquals((-3958), javaCharStream1.getEndLine());
      assertEquals((-3958), javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getColumn());
      assertEquals(38, javaCharStream1.getBeginColumn());
      assertEquals((-3958), javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndColumn());
      assertEquals("OR", token1.toString());
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'+', 'O', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 16, 70, 760);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(70, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(16, token0.beginLine);
      assertEquals(70, token0.endColumn);
      assertEquals(16, token0.endLine);
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(16, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(70, token1.beginColumn);
      assertEquals(70, token1.endColumn);
      assertEquals(16, token1.endLine);
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("do");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'O';
      charArray0[6] = '5';
      charArray0[7] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', 'l', 'l', 'l', 'l', 'O', '5', ':'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 34, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'8', 'l', 'l', 'l', 'l', 'O', '5', ':'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'8', 'l', 'l', 'l', 'l', 'O', '5', ':'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("8l", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(7, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("lllO5", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xfv(OdyX.%lq-1");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Xfv(OdyX.%lq-1");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(5);
      assertEquals(5L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals('d', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("yX", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("yX", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 974, 974, 974);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, token0.beginLine);
      assertEquals(974, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(975, token0.endColumn);
      assertEquals(974, token0.endLine);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(975, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(975, javaCharStream0.getEndColumn());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(974, javaCharStream0.getBeginColumn());
      assertEquals("K7", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(975, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(975, javaCharStream0.getEndColumn());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(974, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.curLexState = (-1817);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(975, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(975, javaCharStream0.getEndColumn());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(974, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, token1.endLine);
      assertEquals(976, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(976, token1.beginColumn);
      assertEquals(974, token1.beginLine);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(976, javaCharStream0.getEndColumn());
      assertEquals(976, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(976, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(976, javaCharStream0.getEndColumn());
      assertEquals(976, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(976, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, token0.beginLine);
      assertEquals(974, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(975, token0.endColumn);
      assertEquals(974, token0.endLine);
      assertEquals(974, javaCharStream0.getEndLine());
      assertEquals(976, javaCharStream0.getEndColumn());
      assertEquals(976, javaCharStream0.getColumn());
      assertEquals(974, javaCharStream0.getLine());
      assertEquals(974, javaCharStream0.getBeginLine());
      assertEquals(976, javaCharStream0.getBeginColumn());
      assertEquals("K7", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iQ=@:N$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.endLine);
      assertEquals(96, token0.endColumn);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.beginLine);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals("iQ", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token1.beginColumn);
      assertEquals(95, token1.beginLine);
      assertEquals(97, token1.endColumn);
      assertEquals(95, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, token2.beginLine);
      assertEquals(98, token2.beginColumn);
      assertEquals(86, token2.kind);
      assertEquals(95, token2.endLine);
      assertEquals(98, token2.endColumn);
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals("@", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'h', 'd', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'h', 76);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'h', 'd', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 36, (-414));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'h', 'd', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'h', 'd', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-413), token0.endColumn);
      assertEquals(36, token0.endLine);
      assertEquals((-414), token0.beginColumn);
      assertEquals(36, token0.beginLine);
      assertEquals((-413), javaCharStream1.getEndColumn());
      assertEquals((-413), javaCharStream1.getColumn());
      assertEquals((-414), javaCharStream1.getBeginColumn());
      assertEquals(36, javaCharStream1.getLine());
      assertEquals(36, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getEndLine());
      assertEquals("hd", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'h', 'd', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 'h');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 104. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xfv(OdyX.%lq-1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1611), (-1611), 6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1611), token0.beginLine);
      assertEquals((-1611), token0.beginColumn);
      assertEquals((-1609), token0.endColumn);
      assertEquals((-1611), token0.endLine);
      assertEquals((-1611), javaCharStream0.getBeginLine());
      assertEquals((-1611), javaCharStream0.getLine());
      assertEquals((-1611), javaCharStream0.getEndLine());
      assertEquals((-1609), javaCharStream0.getEndColumn());
      assertEquals((-1609), javaCharStream0.getColumn());
      assertEquals((-1611), javaCharStream0.getBeginColumn());
      assertEquals("Xfv", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kEQ%@~nK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, (-3955), 73);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-3955), token0.beginColumn);
      assertEquals(36, token0.beginLine);
      assertEquals(36, token0.endLine);
      assertEquals((-3953), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals((-3955), javaCharStream0.getBeginColumn());
      assertEquals((-3953), javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals((-3953), javaCharStream0.getEndColumn());
      assertEquals("kEQ", token0.toString());
      assertNotNull(token0);
      
      char char0 = File.pathSeparatorChar;
      assertEquals(':', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals((-3955), javaCharStream0.getBeginColumn());
      assertEquals((-3953), javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals((-3953), javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-3952), token1.endColumn);
      assertEquals(36, token1.endLine);
      assertEquals(36, token1.beginLine);
      assertEquals(108, token1.kind);
      assertEquals((-3952), token1.beginColumn);
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals((-3952), javaCharStream0.getEndColumn());
      assertEquals((-3952), javaCharStream0.getColumn());
      assertEquals((-3952), javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals("%", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("lj}F7E");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 893, 100, 893);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(100, token0.beginColumn);
      assertEquals(893, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(101, token0.endColumn);
      assertEquals(893, token0.beginLine);
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals("lj", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(102, token1.endColumn);
      assertEquals(102, token1.beginColumn);
      assertEquals(80, token1.kind);
      assertEquals(893, token1.beginLine);
      assertEquals(893, token1.endLine);
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(893, token2.endLine);
      assertEquals(105, token2.endColumn);
      assertEquals(893, token2.beginLine);
      assertEquals(103, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals("F7E", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(105, token3.endColumn);
      assertEquals(105, token3.beginColumn);
      assertEquals(893, token3.endLine);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":Ya\"az8zVN4iP!3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 965, 965, 965);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(965, token0.endColumn);
      assertEquals(965, token0.beginColumn);
      assertEquals(965, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(965, token0.beginLine);
      assertEquals(965, javaCharStream0.getEndColumn());
      assertEquals(965, javaCharStream0.getBeginColumn());
      assertEquals(965, javaCharStream0.getColumn());
      assertEquals(965, javaCharStream0.getEndLine());
      assertEquals(965, javaCharStream0.getBeginLine());
      assertEquals(965, javaCharStream0.getLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(965, token1.endLine);
      assertEquals(965, token1.beginLine);
      assertEquals(966, token1.beginColumn);
      assertEquals(966, token1.endColumn);
      assertEquals(80, token1.kind);
      assertEquals(966, javaCharStream0.getEndColumn());
      assertEquals(966, javaCharStream0.getColumn());
      assertEquals(966, javaCharStream0.getBeginColumn());
      assertEquals(965, javaCharStream0.getEndLine());
      assertEquals(965, javaCharStream0.getBeginLine());
      assertEquals(965, javaCharStream0.getLine());
      assertEquals("}", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3S\b]ZY@`e+xT+n}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3173), 73, 304);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.endColumn);
      assertEquals(73, token0.beginColumn);
      assertEquals((-3173), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-3173), token0.endLine);
      assertEquals((-3173), javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals((-3173), javaCharStream0.getLine());
      assertEquals((-3173), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3173), javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals((-3173), javaCharStream0.getLine());
      assertEquals((-3173), javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("W5/qx~G");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 30, 1704, 30);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(60, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(30, token0.beginLine);
      assertEquals(30, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1705, token0.endColumn);
      assertEquals(1704, token0.beginColumn);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(1705, javaCharStream0.getColumn());
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals(1704, javaCharStream0.getBeginColumn());
      assertEquals("W5", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(30, token1.beginLine);
      assertEquals(1706, token1.beginColumn);
      assertEquals(1706, token1.endColumn);
      assertEquals(104, token1.kind);
      assertEquals(30, token1.endLine);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(30, token2.beginLine);
      assertEquals(1707, token2.beginColumn);
      assertEquals(30, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1708, token2.endColumn);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(1708, javaCharStream0.getEndColumn());
      assertEquals(1708, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(1707, javaCharStream0.getBeginColumn());
      assertEquals("qx", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      StringReader stringReader0 = new StringReader("/:<WQHcI:Px");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-44), (byte)42, (byte)42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(42, token0.beginColumn);
      assertEquals((-44), token0.endLine);
      assertEquals((-44), token0.beginLine);
      assertEquals(42, token0.endColumn);
      assertEquals((-44), javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(42, token0.beginColumn);
      assertEquals((-44), token0.endLine);
      assertEquals((-44), token0.beginLine);
      assertEquals(42, token0.endColumn);
      assertEquals((-44), javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pA{|b^u8;=?jKy5~w ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 73, 893, 90);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(893, token0.beginColumn);
      assertEquals(894, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(73, token0.beginLine);
      assertEquals(73, token0.endLine);
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(894, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(894, javaCharStream0.getColumn());
      assertEquals("pA", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(895, javaCharStream0.getEndColumn());
      assertEquals(895, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals('{', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(895, javaCharStream0.getEndColumn());
      assertEquals(895, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(106, token1.kind);
      assertEquals(73, token1.beginLine);
      assertEquals(73, token1.endLine);
      assertEquals(896, token1.endColumn);
      assertEquals(896, token1.beginColumn);
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(896, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(896, javaCharStream0.getColumn());
      assertEquals(896, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals("|", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(73, token2.beginLine);
      assertEquals(897, token2.beginColumn);
      assertEquals(897, token2.endColumn);
      assertEquals(73, token2.endLine);
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(897, javaCharStream0.getBeginColumn());
      assertEquals(897, javaCharStream0.getEndColumn());
      assertEquals(897, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals("b", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5o(NH*bMm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(37, token0.beginColumn);
      assertEquals(37, token0.endColumn);
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(95, token1.endLine);
      assertEquals(95, token1.beginLine);
      assertEquals(38, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(38, token1.beginColumn);
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals("o", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 3200, 3200);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3200, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3200, token0.endColumn);
      assertEquals(3200, token0.beginLine);
      assertEquals(3200, token0.beginColumn);
      assertEquals(3200, javaCharStream0.getBeginLine());
      assertEquals(3200, javaCharStream0.getEndLine());
      assertEquals(3200, javaCharStream0.getBeginColumn());
      assertEquals(3200, javaCharStream0.getEndColumn());
      assertEquals(3200, javaCharStream0.getColumn());
      assertEquals(3200, javaCharStream0.getLine());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3200, token1.endLine);
      assertEquals(3200, token1.beginColumn);
      assertEquals(3200, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(3200, token1.beginLine);
      assertEquals(3200, javaCharStream0.getBeginLine());
      assertEquals(3200, javaCharStream0.getEndLine());
      assertEquals(3200, javaCharStream0.getBeginColumn());
      assertEquals(3200, javaCharStream0.getEndColumn());
      assertEquals(3200, javaCharStream0.getColumn());
      assertEquals(3200, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\b]ZY@`e+xT+n}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 73, 893, 73);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(73, token0.beginLine);
      assertEquals(893, token0.beginColumn);
      assertEquals(73, token0.endLine);
      assertEquals(893, token0.endColumn);
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(893, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndColumn());
      assertEquals("S", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(894, javaCharStream0.getEndColumn());
      assertEquals(894, javaCharStream0.getColumn());
      assertEquals('\b', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(82, token1.kind);
      assertEquals(895, token1.endColumn);
      assertEquals(895, token1.beginColumn);
      assertEquals(73, token1.endLine);
      assertEquals(73, token1.beginLine);
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(895, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(895, javaCharStream0.getBeginColumn());
      assertEquals(895, javaCharStream0.getColumn());
      assertEquals("]", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(895, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(895, javaCharStream0.getBeginColumn());
      assertEquals(895, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 123, 123);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.jjmatchedKind = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(123, token0.endLine);
      assertEquals(123, token0.endColumn);
      assertEquals(123, token0.beginLine);
      assertEquals(123, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals("b", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'B';
      charArray0[3] = '_';
      charArray0[4] = '<';
      charArray0[5] = '_';
      charArray0[6] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 88, (-2027));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 1345, (-1), 96);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      javaCharStream1.ReInit((Reader) charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(88, token0.beginLine);
      assertEquals(88, token0.endLine);
      assertEquals((-2024), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2027), token0.beginColumn);
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals((-2024), javaCharStream0.getEndColumn());
      assertEquals((-2024), javaCharStream0.getColumn());
      assertEquals((-2027), javaCharStream0.getBeginColumn());
      assertEquals("__B_", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token1.kind);
      assertEquals(88, token1.beginLine);
      assertEquals(88, token1.endLine);
      assertEquals((-2023), token1.endColumn);
      assertEquals((-2023), token1.beginColumn);
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals((-2023), javaCharStream0.getEndColumn());
      assertEquals((-2023), javaCharStream0.getBeginColumn());
      assertEquals((-2023), javaCharStream0.getColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'_', '_', 'B', '_', '<', '_', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZBxQI%T>7'OB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 991, (-1400), 30);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(90, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(991, token0.endLine);
      assertEquals(991, token0.beginLine);
      assertEquals((-1397), token0.endColumn);
      assertEquals((-1400), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1397), javaCharStream0.getEndColumn());
      assertEquals(991, javaCharStream0.getEndLine());
      assertEquals(991, javaCharStream0.getBeginLine());
      assertEquals((-1400), javaCharStream0.getBeginColumn());
      assertEquals(991, javaCharStream0.getLine());
      assertEquals((-1397), javaCharStream0.getColumn());
      assertEquals("BxQI", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1396), token1.endColumn);
      assertEquals(991, token1.beginLine);
      assertEquals((-1396), token1.beginColumn);
      assertEquals(108, token1.kind);
      assertEquals(991, token1.endLine);
      assertEquals((-1396), javaCharStream0.getBeginColumn());
      assertEquals((-1396), javaCharStream0.getColumn());
      assertEquals((-1396), javaCharStream0.getEndColumn());
      assertEquals(991, javaCharStream0.getEndLine());
      assertEquals(991, javaCharStream0.getBeginLine());
      assertEquals(991, javaCharStream0.getLine());
      assertEquals("%", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0n^^7Hp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3516), (-3516), 38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3516), token0.endLine);
      assertEquals((-3516), token0.beginColumn);
      assertEquals((-3516), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-3514), token0.endColumn);
      assertEquals((-3516), javaCharStream0.getBeginLine());
      assertEquals((-3516), javaCharStream0.getBeginColumn());
      assertEquals((-3516), javaCharStream0.getLine());
      assertEquals((-3514), javaCharStream0.getColumn());
      assertEquals((-3516), javaCharStream0.getEndLine());
      assertEquals((-3514), javaCharStream0.getEndColumn());
      assertEquals("W0n", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3516), token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals((-3516), token1.beginLine);
      assertEquals((-3513), token1.beginColumn);
      assertEquals((-3513), token1.endColumn);
      assertEquals((-3516), javaCharStream0.getBeginLine());
      assertEquals((-3516), javaCharStream0.getLine());
      assertEquals((-3513), javaCharStream0.getBeginColumn());
      assertEquals((-3516), javaCharStream0.getEndLine());
      assertEquals((-3513), javaCharStream0.getEndColumn());
      assertEquals((-3513), javaCharStream0.getColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4065), Integer.MAX_VALUE, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4065), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals((-4065), token0.beginLine);
      assertEquals((-4065), javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals((-4065), javaCharStream0.getBeginLine());
      assertEquals((-4065), javaCharStream0.getLine());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4065), javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals((-4065), javaCharStream0.getBeginLine());
      assertEquals((-4065), javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4065), javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals((-4065), javaCharStream0.getBeginLine());
      assertEquals((-4065), javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(Integer.MIN_VALUE, token1.endColumn);
      assertEquals(82, token1.kind);
      assertEquals(Integer.MIN_VALUE, token1.beginColumn);
      assertEquals((-4065), token1.beginLine);
      assertEquals((-4065), token1.endLine);
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndColumn());
      assertEquals((-4065), javaCharStream0.getEndLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginColumn());
      assertEquals((-4065), javaCharStream0.getBeginLine());
      assertEquals((-4065), javaCharStream0.getLine());
      assertEquals("]", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-44)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'r';
      charArray0[2] = '3';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      javaCharStream0.adjustBeginLineColumn((byte) (-44), (-857));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals((-43), javaCharStream0.getBeginLine());
      assertEquals((-857), javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals((-43), javaCharStream0.getBeginLine());
      assertEquals((-857), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-43), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-856), token0.endColumn);
      assertEquals((-856), token0.beginColumn);
      assertEquals((-43), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-43), javaCharStream0.getLine());
      assertEquals((-43), javaCharStream0.getBeginLine());
      assertEquals((-856), javaCharStream0.getBeginColumn());
      assertEquals((-43), javaCharStream0.getEndLine());
      assertEquals((-856), javaCharStream0.getColumn());
      assertEquals((-856), javaCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-44)}, byteArray0);
      
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 12, (int) (byte)54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t(^>n.9s.-a");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(bufferedReader0, 893);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 73, 2, 893);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals('t', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(73, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(73, token0.beginLine);
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      StringReader stringReader0 = new StringReader("tg!`#0y^");
      assertNotNull(stringReader0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, 41);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(42, token0.endColumn);
      assertEquals(41, token0.endLine);
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals("tg", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(43, token1.beginColumn);
      assertEquals(43, token1.endColumn);
      assertEquals(41, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals(41, token1.beginLine);
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals("!", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("r;.w&JM%,9");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4919, 283, 283);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.readChar();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(283, javaCharStream0.getColumn());
      assertEquals(283, javaCharStream0.getEndColumn());
      assertEquals(4919, javaCharStream0.getEndLine());
      assertEquals(4919, javaCharStream0.getBeginLine());
      assertEquals(283, javaCharStream0.getBeginColumn());
      assertEquals(4919, javaCharStream0.getLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals('r', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(283, javaCharStream0.getColumn());
      assertEquals(283, javaCharStream0.getEndColumn());
      assertEquals(4919, javaCharStream0.getEndLine());
      assertEquals(4919, javaCharStream0.getBeginLine());
      assertEquals(283, javaCharStream0.getBeginColumn());
      assertEquals(4919, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.jjround = 283;
      assertEquals(283, javaCharStream0.getColumn());
      assertEquals(283, javaCharStream0.getEndColumn());
      assertEquals(4919, javaCharStream0.getEndLine());
      assertEquals(4919, javaCharStream0.getBeginLine());
      assertEquals(283, javaCharStream0.getBeginColumn());
      assertEquals(4919, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(283, javaCharStream0.getColumn());
      assertEquals(283, javaCharStream0.getEndColumn());
      assertEquals(4919, javaCharStream0.getEndLine());
      assertEquals(4919, javaCharStream0.getBeginLine());
      assertEquals(283, javaCharStream0.getBeginColumn());
      assertEquals(4919, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token0.kind);
      assertEquals(284, token0.endColumn);
      assertEquals(284, token0.beginColumn);
      assertEquals(4919, token0.endLine);
      assertEquals(4919, token0.beginLine);
      assertEquals(284, javaCharStream0.getColumn());
      assertEquals(284, javaCharStream0.getEndColumn());
      assertEquals(4919, javaCharStream0.getEndLine());
      assertEquals(4919, javaCharStream0.getBeginLine());
      assertEquals(284, javaCharStream0.getBeginColumn());
      assertEquals(4919, javaCharStream0.getLine());
      assertEquals(";", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '%';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2027), (-166));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 23, 37, 1345);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 50, 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      javaCharStream1.ReInit((Reader) charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.endLine);
      assertEquals(37, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(50, javaCharStream2.getLine());
      assertEquals(37, javaCharStream2.getBeginColumn());
      assertEquals(50, javaCharStream2.getBeginLine());
      assertEquals(38, javaCharStream2.getEndColumn());
      assertEquals(50, javaCharStream2.getEndLine());
      assertEquals(38, javaCharStream2.getColumn());
      assertEquals("kk", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream2.bufpos);
      assertEquals(108, token1.kind);
      assertEquals(39, token1.endColumn);
      assertEquals(50, token1.endLine);
      assertEquals(39, token1.beginColumn);
      assertEquals(50, token1.beginLine);
      assertEquals(50, javaCharStream2.getLine());
      assertEquals(39, javaCharStream2.getBeginColumn());
      assertEquals(50, javaCharStream2.getBeginLine());
      assertEquals(39, javaCharStream2.getEndColumn());
      assertEquals(39, javaCharStream2.getColumn());
      assertEquals(50, javaCharStream2.getEndLine());
      assertEquals("%", token1.toString());
      assertNotNull(token1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'k', 'k', '%', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ro^NH#bMm");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '\\';
      charArray0[2] = 'R';
      charArray0[3] = 'F';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'R', 'o', '^', 'N'}, charArray0);
      assertEquals(4, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.endColumn);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.beginLine);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals("H", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 96.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("do");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 73);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 893, 73, 73);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(893, token0.beginLine);
      assertEquals(73, token0.beginColumn);
      assertEquals(893, token0.endLine);
      assertEquals(25, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals("do", token0.toString());
      assertNotNull(token0);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0n^^7Hp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 1290, 893);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(1290, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1292, token0.endColumn);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(1292, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(1292, javaCharStream0.getColumn());
      assertEquals("W0n", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(1293, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(1293, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals('^', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(1293, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(1293, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1294, token1.endColumn);
      assertEquals(13, token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals(1294, token1.beginColumn);
      assertEquals(13, token1.beginLine);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(1294, javaCharStream0.getBeginColumn());
      assertEquals(1294, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(1294, javaCharStream0.getEndColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 30, (-1697), 30);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(108, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
      assertEquals((-1697), token0.endColumn);
      assertEquals((-1697), token0.beginColumn);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals((-1697), javaCharStream0.getBeginColumn());
      assertEquals((-1697), javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals((-1697), javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(30, token1.endLine);
      assertEquals((-1696), token1.endColumn);
      assertEquals((-1696), token1.beginColumn);
      assertEquals(30, token1.beginLine);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals((-1696), javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals((-1696), javaCharStream0.getBeginColumn());
      assertEquals((-1696), javaCharStream0.getColumn());
      assertEquals("N", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 30, column -1693.  Encountered: \"q\" (113), after : \"\\']\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZBxQI%T>7'OB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 13, 893);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals("ZBxQI", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals('%', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(13, token1.beginLine);
      assertEquals(13, token1.endLine);
      assertEquals(19, token1.endColumn);
      assertEquals(19, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals("T", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"&\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 527, 23, 527);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals("\"&\"", token0.toString());
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertNull(token_GTToken0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iQ@:N$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1498, 1498);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1498, token0.endLine);
      assertEquals(1498, token0.endColumn);
      assertEquals(1498, token0.beginColumn);
      assertEquals(1498, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getEndColumn());
      assertEquals(1498, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals("Q", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1499, token1.beginColumn);
      assertEquals(1498, token1.beginLine);
      assertEquals(1498, token1.endLine);
      assertEquals(1499, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(1499, javaCharStream0.getColumn());
      assertEquals(1499, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals(1499, javaCharStream0.getEndColumn());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cKXP");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("cKXP");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, 3162, 2064);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3162, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(3165, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(3165, javaCharStream0.getColumn());
      assertEquals(3162, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(3165, javaCharStream0.getEndColumn());
      assertEquals("cKXP", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3162, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(3165, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(3165, javaCharStream0.getColumn());
      assertEquals(3162, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(3165, javaCharStream0.getEndColumn());
      assertEquals("cKXP", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, (-1518), 118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token0.endLine);
      assertEquals((-1518), token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals((-1518), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals((-1518), javaCharStream0.getColumn());
      assertEquals((-1518), javaCharStream0.getBeginColumn());
      assertEquals((-1518), javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals("g", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'g', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x9av+QltadA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1290, 1290, 1290);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1290, token0.beginColumn);
      assertEquals(1290, token0.beginLine);
      assertEquals(1290, token0.endLine);
      assertEquals(1293, token0.endColumn);
      assertEquals(1290, javaCharStream0.getEndLine());
      assertEquals(1290, javaCharStream0.getBeginLine());
      assertEquals(1293, javaCharStream0.getColumn());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(1290, javaCharStream0.getLine());
      assertEquals(1293, javaCharStream0.getEndColumn());
      assertEquals("x9av", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("{", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = Token.newToken(0);
      assertNotSame(token1, token0);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)47, (byte)123, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 73);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 73, 893, 893);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(73, token0.beginLine);
      assertEquals(893, token0.beginColumn);
      assertEquals(73, token0.endLine);
      assertEquals(893, token0.endColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(894, javaCharStream0.getEndColumn());
      assertEquals(894, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals('O', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(893, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(894, javaCharStream0.getEndColumn());
      assertEquals(894, javaCharStream0.getColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(73, token1.beginLine);
      assertEquals(906, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(73, token1.endLine);
      assertEquals(895, token1.beginColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(906, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(895, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(906, javaCharStream0.getColumn());
      assertEquals("CTAL_LITERAL", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(73, javaCharStream0.getLine());
      assertEquals(906, javaCharStream0.getEndColumn());
      assertEquals(73, javaCharStream0.getBeginLine());
      assertEquals(895, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getEndLine());
      assertEquals(906, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("la ZBbC,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1201, 29);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token0.beginColumn);
      assertEquals(1201, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1201, token0.beginLine);
      assertEquals(30, token0.endColumn);
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals("la", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1201, token1.beginLine);
      assertEquals(32, token1.beginColumn);
      assertEquals(1201, token1.endLine);
      assertEquals(35, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals("ZBbC", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`Pc[ztZ !");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 2653);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginLine);
      assertEquals(2653, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(2657, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(2657, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(2657, javaCharStream0.getColumn());
      assertEquals(2653, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("ddddd", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(2657, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(2657, javaCharStream0.getColumn());
      assertEquals(2653, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'d', 'd', 'd', 'd', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'f';
      charArray0[2] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'f', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, (-1518), 118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', 'f', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', 'f', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'-', 'f', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.kind);
      assertEquals((-1518), token0.endColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(17, token0.endLine);
      assertEquals((-1518), token0.beginColumn);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals((-1518), javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals((-1518), javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals((-1518), javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'-', 'f', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ydG-Ioj4}%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)42, 2377, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(2377, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(2377, javaCharStream0.getBeginColumn());
      assertEquals(2377, javaCharStream0.getColumn());
      assertEquals('y', char0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(2377, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(2377, javaCharStream0.getBeginColumn());
      assertEquals(2377, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(42, token0.endLine);
      assertEquals(2378, token0.beginColumn);
      assertEquals(42, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2379, token0.endColumn);
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(2379, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(2378, javaCharStream0.getBeginColumn());
      assertEquals(2379, javaCharStream0.getColumn());
      assertEquals("dG", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(42, token1.endLine);
      assertEquals(42, token1.beginLine);
      assertEquals(2380, token1.endColumn);
      assertEquals(2380, token1.beginColumn);
      assertEquals(102, token1.kind);
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(2380, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(2380, javaCharStream0.getBeginColumn());
      assertEquals(2380, javaCharStream0.getColumn());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xfv(OdyX.%lq-1");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("76WE0g");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 19, 68, 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(19, token0.beginLine);
      assertEquals(19, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(69, token0.endColumn);
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("76", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0n^^7Hp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 1290, 1290);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(87, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1290, token0.endColumn);
      assertEquals(1290, token0.beginColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(13, token0.endLine);
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(1290, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1290, javaCharStream0.getColumn());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1291, token2.endColumn);
      assertEquals(13, token2.beginLine);
      assertEquals(1291, token2.beginColumn);
      assertEquals(1291, javaCharStream0.getEndColumn());
      assertEquals(1291, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1291, javaCharStream0.getColumn());
      assertEquals("n", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1291, javaCharStream0.getEndColumn());
      assertEquals(1291, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(1291, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'f';
      charArray0[3] = '<';
      charArray0[4] = '!';
      charArray0[0] = '0';
      charArray0[6] = '(';
      charArray0[7] = '^';
      charArray0[8] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 123, 123);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
      assertTrue(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
      
      javaParserTokenManager0.jjround = 1334;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(124, token0.endColumn);
      assertEquals(123, token0.beginColumn);
      assertEquals(123, token0.beginLine);
      assertEquals(123, token0.endLine);
      assertEquals(70, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("0f", token0.toString());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndLine());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(124, token0.endColumn);
      assertEquals(123, token0.beginColumn);
      assertEquals(123, token0.beginLine);
      assertEquals(123, token0.endLine);
      assertEquals(70, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("0f", token0.toString());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'0', 'f', '\u0000', '<', '!', '\u0000', '(', '^', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'l', '<', 'N', '\'', ']', 'q', ':', '*', 'O'}, charArray0);
      assertEquals(9, int0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(82, int1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(79, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("Jq1N", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte) (-32), (byte)47, (byte)47}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte) (-32), (byte)47, (byte)47}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte) (-32), (byte)47, (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte) (-32), (byte)47, (byte)47}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AYnhX.~]^m,E!");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 73);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 893, (-1338), 59);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      javaCharStream0.ReInit((Reader) lineNumberReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {':'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("AYnhX", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("0,C(v");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 37, 37, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token0.beginColumn);
      assertEquals(37, token0.beginLine);
      assertEquals(37, token0.endLine);
      assertEquals(37, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token1.kind);
      assertEquals(37, token1.beginLine);
      assertEquals(38, token1.endColumn);
      assertEquals(38, token1.beginColumn);
      assertEquals(37, token1.endLine);
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(",", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f~6,htw2)V:i@kpNtF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-44), 32, 32);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-44), token0.endLine);
      assertEquals(32, token0.beginColumn);
      assertEquals((-44), token0.beginLine);
      assertEquals(32, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals((-44), javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      assertEquals("f", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.curChar = '[';
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals((-44), javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      
      javaCharStream0.tokenBegin = 44;
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-44), token0.endLine);
      assertEquals(32, token0.beginColumn);
      assertEquals((-44), token0.beginLine);
      assertEquals(32, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-44), javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals((-44), javaCharStream0.getEndLine());
      assertEquals("f", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&jnaCWT k4G7S");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-909), 99, 30);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-909), token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(99, token0.endColumn);
      assertEquals(99, token0.beginColumn);
      assertEquals((-909), token0.beginLine);
      assertEquals((-909), javaCharStream0.getLine());
      assertEquals((-909), javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals((-909), javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals((-909), javaCharStream0.getLine());
      assertEquals((-909), javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals((-909), javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S@)`8");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 893, 700, 53);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, token0.beginLine);
      assertEquals(700, token0.endColumn);
      assertEquals(700, token0.beginColumn);
      assertEquals(893, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(700, javaCharStream0.getColumn());
      assertEquals(700, javaCharStream0.getBeginColumn());
      assertEquals(700, javaCharStream0.getEndColumn());
      assertEquals("S", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(701, javaCharStream0.getEndColumn());
      assertEquals(701, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(700, javaCharStream0.getBeginColumn());
      assertEquals('@', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(701, javaCharStream0.getEndColumn());
      assertEquals(701, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(700, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(893, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(893, token1.beginLine);
      assertEquals(702, token1.beginColumn);
      assertEquals(702, token1.endColumn);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(702, javaCharStream0.getColumn());
      assertEquals(702, javaCharStream0.getBeginColumn());
      assertEquals(702, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 893, column 703.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q:*OR{Jq1N");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("r;.w&JM%,9");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 126, 110, 6);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(126, token0.endLine);
      assertEquals(126, token0.beginLine);
      assertEquals(110, token0.beginColumn);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals("r", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.readChar();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(';', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals(112, token1.endColumn);
      assertEquals(126, token1.endLine);
      assertEquals(112, token1.beginColumn);
      assertEquals(126, token1.beginLine);
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(113, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(126, token2.endLine);
      assertEquals(126, token2.beginLine);
      assertEquals(113, token2.beginColumn);
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals("w", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("astrat");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1201, 1201);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1206, token0.endColumn);
      assertEquals(1201, token0.endLine);
      assertEquals(1201, token0.beginLine);
      assertEquals(1201, token0.beginColumn);
      assertEquals(1206, javaCharStream0.getEndColumn());
      assertEquals(1206, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1201, javaCharStream0.getBeginColumn());
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals("astrat", token0.toString());
      assertNotNull(token0);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cQ&s3?E?7`L\"*O>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'f';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 3, 3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals("cQ", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals('&', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endLine);
      assertEquals(7, token1.endColumn);
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("s3", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(8, token2.endColumn);
      assertEquals(8, token2.beginColumn);
      assertEquals(91, token2.kind);
      assertEquals(3, token2.endLine);
      assertEquals(3, token2.beginLine);
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("?", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZBxQI%T>7'OB");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">>=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1400), 8, 68);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(119, token0.kind);
      assertEquals((-1400), token0.beginLine);
      assertEquals((-1400), token0.endLine);
      assertEquals(10, token0.endColumn);
      assertEquals(8, token0.beginColumn);
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-1400), javaCharStream0.getLine());
      assertEquals((-1400), javaCharStream0.getBeginLine());
      assertEquals((-1400), javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(">>=", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9,M\"1.*7^*");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 115);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 0, 0, 304);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1201, 1201);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1201, token0.beginColumn);
      assertEquals(1201, token0.endLine);
      assertEquals(13, token0.kind);
      assertEquals(1208, token0.endColumn);
      assertEquals(1201, token0.beginLine);
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1208, javaCharStream0.getEndColumn());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals(1208, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getBeginColumn());
      assertEquals("abstract", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1208, token1.endColumn);
      assertEquals(1208, token1.beginColumn);
      assertEquals(1201, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1201, token1.beginLine);
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1208, javaCharStream0.getBeginColumn());
      assertEquals(1208, javaCharStream0.getEndColumn());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals(1208, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1201, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(1201, token2.beginLine);
      assertEquals(1208, token2.beginColumn);
      assertEquals(1208, token2.endColumn);
      assertEquals(1201, javaCharStream0.getLine());
      assertEquals(1201, javaCharStream0.getEndLine());
      assertEquals(1208, javaCharStream0.getBeginColumn());
      assertEquals(1208, javaCharStream0.getEndColumn());
      assertEquals(1201, javaCharStream0.getBeginLine());
      assertEquals(1208, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("case");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '.';
      charArray0[2] = '|';
      charArray0[3] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-1350), (-1350));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1350), token0.endColumn);
      assertEquals((-1350), token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals((-1350), token0.beginColumn);
      assertEquals((-1350), token0.endLine);
      assertEquals((-1350), javaCharStream0.getEndColumn());
      assertEquals((-1350), javaCharStream0.getLine());
      assertEquals((-1350), javaCharStream0.getBeginLine());
      assertEquals((-1350), javaCharStream0.getColumn());
      assertEquals((-1350), javaCharStream0.getBeginColumn());
      assertEquals((-1350), javaCharStream0.getEndLine());
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1349), token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals((-1350), token1.endLine);
      assertEquals((-1350), token1.beginLine);
      assertEquals((-1349), token1.beginColumn);
      assertEquals((-1350), javaCharStream0.getLine());
      assertEquals((-1349), javaCharStream0.getEndColumn());
      assertEquals((-1350), javaCharStream0.getBeginLine());
      assertEquals((-1349), javaCharStream0.getBeginColumn());
      assertEquals((-1349), javaCharStream0.getColumn());
      assertEquals((-1350), javaCharStream0.getEndLine());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'|', '.', '|', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K7}#E'/|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[5];
      charArray0[2] = '1';
      charArray0[3] = 'w';
      charArray0[4] = ':';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'K', '7', '}', '#', 'E'}, charArray0);
      assertEquals(5, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\\'/|\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      int int0 = charArrayReader1.read(charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 95, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("vv", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      javaParserTokenManager0.lengthOfMatch = 3;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("z");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '<';
      charArray0[2] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '<', '%'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', '<', '%'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-123);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(113, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("/=", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte)0, (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xfv(OdyX.%lq-1");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '.';
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '.', 117, 7);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(119, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.beginLine);
      assertEquals(117, token0.beginColumn);
      assertEquals(46, token0.endLine);
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals("com", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 652);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 652. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0089';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-334), 85);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0089'}, charArray0);
      
      javaParserTokenManager0.curLexState = 2;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.lengthOfMatch = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -334, column 86.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      StringReader stringReader0 = new StringReader("iP~7ePsY^a%GlxSk");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-5144L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 6, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token0.beginLine);
      assertEquals(31, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals("iP", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token1.kind);
      assertEquals(8, token1.beginColumn);
      assertEquals(31, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(31, token1.beginLine);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("z");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '5';
      charArray0[2] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte) (-12), (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)61, (byte) (-123), (byte) (-12), (byte)95, (byte)12, (byte)121, (byte)101}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1842), (byte)121, 125);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1842), token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(121, token0.beginColumn);
      assertEquals((-1842), token0.beginLine);
      assertEquals(121, token0.endColumn);
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals((-1842), javaCharStream0.getEndLine());
      assertEquals((-1842), javaCharStream0.getBeginLine());
      assertEquals((-1842), javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '5', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("Xfv(OdyX.%lq-1");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(88, int0);
      
      long long0 = stringReader0.skip(5);
      assertEquals(5L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("yX", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals('.', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.lengthOfMatch = 31;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("yX.", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("%", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager1.jjFillToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("vvv", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ydG-Ioj4}%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)42, 2377, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaCharStream0.adjustBeginLineColumn((byte)42, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("ydG", token0.toString());
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      
      byte[] byteArray0 = new byte[0];
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(43, token1.beginLine);
      assertEquals(6, token1.beginColumn);
      assertEquals(43, token1.endLine);
      assertEquals(102, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZBxQI%T>7'OB");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 5);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 32, (-1206), 6);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curLexState = 34;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curLexState = 5;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1206), token0.beginColumn);
      assertEquals(32, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(32, token0.beginLine);
      assertEquals((-1206), token0.endColumn);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1206), javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals((-1206), javaCharStream0.getColumn());
      assertEquals((-1206), javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 37, 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'q';
      charArray0[4] = 'l';
      charArray0[5] = 'O';
      charArray0[7] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', 'l', 'l', 'q', 'l', 'O', '\u0000', 'l'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 34, 95);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'8', 'l', 'l', 'q', 'l', 'O', '\u0000', 'l'}, charArray0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'8', 'l', 'l', 'q', 'l', 'O', '\u0000', 'l'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("8", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t(^>n.9s.-a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-371), 1290, 23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1290, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-371), token0.beginLine);
      assertEquals(1290, token0.endColumn);
      assertEquals((-371), token0.endLine);
      assertEquals((-371), javaCharStream0.getBeginLine());
      assertEquals((-371), javaCharStream0.getEndLine());
      assertEquals(1290, javaCharStream0.getEndColumn());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals(1290, javaCharStream0.getColumn());
      assertEquals((-371), javaCharStream0.getLine());
      assertEquals("t", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-371), javaCharStream0.getBeginLine());
      assertEquals((-371), javaCharStream0.getEndLine());
      assertEquals(1291, javaCharStream0.getEndColumn());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals((-371), javaCharStream0.getLine());
      assertEquals(1291, javaCharStream0.getColumn());
      assertEquals('(', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-371), javaCharStream0.getBeginLine());
      assertEquals((-371), javaCharStream0.getEndLine());
      assertEquals(1291, javaCharStream0.getEndColumn());
      assertEquals(1290, javaCharStream0.getBeginColumn());
      assertEquals((-371), javaCharStream0.getLine());
      assertEquals(1291, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1292, token1.endColumn);
      assertEquals((-371), token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals((-371), token1.beginLine);
      assertEquals(1292, token1.beginColumn);
      assertEquals((-371), javaCharStream0.getBeginLine());
      assertEquals((-371), javaCharStream0.getEndLine());
      assertEquals(1292, javaCharStream0.getEndColumn());
      assertEquals(1292, javaCharStream0.getBeginColumn());
      assertEquals((-371), javaCharStream0.getLine());
      assertEquals(1292, javaCharStream0.getColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<6B?!>h%i(MhS~giR0");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<6B?!>h%i(MhS~giR0");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3162, 3162, 1665);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3162, token0.endColumn);
      assertEquals(3162, token0.beginColumn);
      assertEquals(3162, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(3162, token0.beginLine);
      assertEquals(3162, javaCharStream0.getEndColumn());
      assertEquals(3162, javaCharStream0.getLine());
      assertEquals(3162, javaCharStream0.getBeginColumn());
      assertEquals(3162, javaCharStream0.getEndLine());
      assertEquals(3162, javaCharStream0.getColumn());
      assertEquals(3162, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3162, token1.endLine);
      assertEquals(3163, token1.endColumn);
      assertEquals(3163, token1.beginColumn);
      assertEquals(3162, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(3162, javaCharStream0.getLine());
      assertEquals(3163, javaCharStream0.getBeginColumn());
      assertEquals(3163, javaCharStream0.getColumn());
      assertEquals(3163, javaCharStream0.getEndColumn());
      assertEquals(3162, javaCharStream0.getEndLine());
      assertEquals(3162, javaCharStream0.getBeginLine());
      assertEquals("6", token1.toString());
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3164, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(3164, token2.beginColumn);
      assertEquals(3162, token2.beginLine);
      assertEquals(3162, token2.endLine);
      assertEquals(3162, javaCharStream0.getLine());
      assertEquals(3164, javaCharStream0.getColumn());
      assertEquals(3162, javaCharStream0.getEndLine());
      assertEquals(3164, javaCharStream0.getEndColumn());
      assertEquals(3162, javaCharStream0.getBeginLine());
      assertEquals(3164, javaCharStream0.getBeginColumn());
      assertEquals("B", token2.toString());
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '.';
      charArray0[2] = '5';
      charArray0[3] = '8';
      charArray0[4] = 'l';
      charArray0[5] = 'q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '.', '5', '8', 'l', 'q'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, 95, 18);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'5', '.', '5', '8', 'l', 'q'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'5', '.', '5', '8', 'l', 'q'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'5', '.', '5', '8', 'l', 'q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("5.58", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'5', '.', '5', '8', 'l', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&Q");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("&Q");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)17, (byte)22, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)17, (byte)22, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)17, (byte)22, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)85, (byte)17, (byte)22, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)85, (byte)17, (byte)22, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}fQJ9&'uRWy`aa\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 93, 98);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token0.endLine);
      assertEquals(93, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(93, token0.beginColumn);
      assertEquals(93, token0.endColumn);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals("}", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals('f', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(93, token1.endLine);
      assertEquals(97, token1.endColumn);
      assertEquals(93, token1.beginLine);
      assertEquals(95, token1.beginColumn);
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals("QJ9", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(98, token2.beginColumn);
      assertEquals(98, token2.endColumn);
      assertEquals(105, token2.kind);
      assertEquals(93, token2.endLine);
      assertEquals(93, token2.beginLine);
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals("&", token2.toString());
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 20, (-2982), 961);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("rr", token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'3', 'r', 'r', '}', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&;4u&Bk<a0:P]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 893, 13, 893);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(893, token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(893, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(';', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(15, token1.beginColumn);
      assertEquals(893, token1.beginLine);
      assertEquals(15, token1.endColumn);
      assertEquals(893, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(893, javaCharStream0.getBeginLine());
      assertEquals(893, javaCharStream0.getEndLine());
      assertEquals(893, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals("4", token1.toString());
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W0n^^7Hp");
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'c';
      charArray0[2] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4334, 52);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)42, 112, (byte)42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'b';
      charArray0[3] = '.';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2929, 34, 2929);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1921, 1012);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 1);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("switch");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2808, 1495, (byte)47);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream1.ReInit((Reader) stringReader0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l<N']q3*OR{Jq1N");
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 104, '-', 118);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S\b]ZY@`e+xT+n}");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 73, 893, 73);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.ReadByte();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[5] = 'b';
      charArray0[6] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 123. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'r';
      charArray0[3] = 'n';
      charArray0[4] = 'b';
      charArray0[5] = 'r';
      charArray0[6] = '.';
      charArray0[7] = '%';
      charArray0[8] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("ud!&vh.YK}zN]m@_n5");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1928, 101, 102);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Charset.defaultCharset();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.nextCharInd = 1928;
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      StringReader stringReader0 = new StringReader("\"synchronized\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)42, (byte)42, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)42, 119);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 78, (byte)42);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager2.getNextToken();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      StringReader stringReader1 = new StringReader("<OCTAL_LITERAL>");
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1008), (-1008), 118);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[2] = (byte)42;
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, 112, (byte)42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)42;
      StringReader stringReader0 = new StringReader(")hz7KEH=x;Nz@/=>i");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 893, 893, 1130);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          StringReader stringReader0 = new StringReader(".[J}i(I");
          StringReader stringReader1 = new StringReader("DOm.eS>$oV");
          JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2523, 71, (byte)118);
          JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
          javaParserTokenManager0.getNextToken();
          JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (byte)42, 752);
          JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
          Token token0 = javaParserTokenManager0.getNextToken();
          javaParserTokenManager0.TokenLexicalActions(token0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
