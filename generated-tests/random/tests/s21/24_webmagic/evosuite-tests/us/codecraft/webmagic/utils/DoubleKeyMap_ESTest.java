/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:15:19 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, String>, Object>();
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, Object>((Map<HashMap<String, Object>, Map<String, Object>>) null);
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.remove((HashMap<Integer, Object>) null, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Map<Object, Map<HashMap<Integer, String>, Object>>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<HashMap<Integer, String>, Object>>, String, Object>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, "", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>((Map<String, Map<Integer, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<HashMap<String, String>, Map<Integer, String>>> hashMap0 = new HashMap<String, Map<HashMap<String, String>, Map<Integer, String>>>();
      DoubleKeyMap<String, HashMap<String, String>, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Map<Integer, String>>(hashMap0);
      Map<HashMap<String, String>, Map<Integer, String>> map0 = doubleKeyMap0.get("bMXMn&>:i5vm/");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, (Object) integer0, integer0);
      Integer integer1 = doubleKeyMap0.remove(integer0, (Object) "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<HashMap<Object, String>, String>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<HashMap<Object, String>, String>>();
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<HashMap<Object, String>, String> hashMap3 = new HashMap<HashMap<Object, String>, String>();
      hashMap0.put(hashMap1, hashMap3);
      doubleKeyMap0.remove(hashMap1, hashMap2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, Integer>>();
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>(hashMap0);
      HashMap<Map<Integer, String>, Integer> hashMap1 = new HashMap<Map<Integer, String>, Integer>();
      hashMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap1);
      Integer integer0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Map<Integer, String>) null, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<Object, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<Object, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Integer>>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, integer0, hashMap1);
      HashMap<Object, Integer> hashMap2 = doubleKeyMap0.get(integer0, integer0);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Integer, String>, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>(hashMap0, class0);
      HashMap<HashMap<String, Object>, Map<String, Object>> hashMap1 = new HashMap<HashMap<String, Object>, Map<String, Object>>();
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, Object>(hashMap1);
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.get(map0, "3FN_r?1O=~):c");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Integer, String>, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>(hashMap0, class0);
      HashMap<HashMap<String, Object>, Map<String, Object>> hashMap1 = new HashMap<HashMap<String, Object>, Map<String, Object>>();
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, Object>(hashMap1);
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      Map<String, Object> map1 = doubleKeyMap0.remove(map0);
      assertNull(map1);
  }
}
