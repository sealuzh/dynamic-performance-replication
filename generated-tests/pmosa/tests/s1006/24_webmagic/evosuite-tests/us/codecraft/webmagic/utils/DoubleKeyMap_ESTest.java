/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:00:12 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Object object0 = new Object();
      doubleKeyMap0.get((String) null, object0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class1);
      doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Object>(map0);
      doubleKeyMap3.get((String) null);
      DoubleKeyMap<Object, String, String> doubleKeyMap4 = new DoubleKeyMap<Object, String, String>();
      Map<Object, Map<Integer, Object>> map1 = doubleKeyMap4.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap5 = new DoubleKeyMap<Object, Integer, Object>(map1);
      Map<Integer, Object> map2 = doubleKeyMap5.get((Object) null);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0);
      Map<String, Map<Object, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map1, class0);
      Object object0 = new Object();
      doubleKeyMap2.get((String) null, object0);
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Integer integer0 = new Integer(1224);
      doubleKeyMap3.remove((Object) null, integer0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap5 = new DoubleKeyMap<String, Integer, String>(class1);
      Map<Object, Integer> map2 = doubleKeyMap5.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap4.put((String) null, map2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      Integer integer0 = new Integer((-2883));
      doubleKeyMap0.remove(integer0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = "";
      doubleKeyMap1.put(object0, object1, "");
      doubleKeyMap1.put(object0, (Object) "1}0Z7VY* ~2am1}(`", ">t\"g7HamCdD){3B %hC");
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap2.remove("1}0Z7VY* ~2am1}(`");
      doubleKeyMap2.remove((String) null, (Object) ">t\"g7HamCdD){3B %hC");
      Object object2 = new Object();
      doubleKeyMap2.remove(">t\"g7HamCdD){3B %hC", object2);
      String string1 = "/vWIT";
      doubleKeyMap2.remove("/vWIT");
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>();
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap3.newMap();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap4 = new DoubleKeyMap<Integer, String, Object>(map0, class0);
      Integer integer1 = new Integer(399);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, String>(class1);
      Map<String, Object> map1 = doubleKeyMap5.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap4.put(integer1, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Object object0 = new Object();
      doubleKeyMap0.get((String) null, object0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class1);
      Object object1 = new Object();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer0 = new Integer(2865);
      doubleKeyMap2.put((Object) null, (Object) integer0, (Object) null);
      Object object2 = new Object();
      Object object3 = doubleKeyMap2.remove((Object) null, object2);
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      Integer integer0 = new Integer(3118);
      doubleKeyMap0.put("}u9w5.", (Object) "}u9w5.", (Object) integer0);
      Object object0 = new Object();
      doubleKeyMap0.get("}u9w5.", object0);
      doubleKeyMap0.get("}u9w5.", (Object) "}u9w5.");
      Object object1 = new Object();
      Object object2 = new Object();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object3 = new Object();
      Object object4 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) "}u9w5.");
      assertNull(object4);
  }
}
