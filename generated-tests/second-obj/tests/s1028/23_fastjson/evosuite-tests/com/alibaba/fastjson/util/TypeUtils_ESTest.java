/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:45:03 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PipedReader;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      Field[] fieldArray0 = new Field[0];
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader.getSystemClassLoader();
      Class<BitSet> class1 = BitSet.class;
      TypeUtils.getSerializeFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Rectangle");
      TypeUtils.loadClass("Ljava.awt.Rectangle", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isTransient((Method) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Point point0 = new Point(102, 102);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Integer> class1 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClass((Type) class0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.compatibleWithFieldName = true;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Point point0 = new Point((-4132), (-4132));
      TypeUtils.decapitalize("uz4K;[2PQo3h4{722Wu");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      Constructor<JobAttributes>[] constructorArray0 = (Constructor<JobAttributes>[]) Array.newInstance(Constructor.class, 1);
      constructorArray0[0] = (Constructor<JobAttributes>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.isKotlin(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      
      TypeUtils.getCollectionItemClass(class1);
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class2, map0);
      Constructor<Calendar>[] constructorArray0 = (Constructor<Calendar>[]) Array.newInstance(Constructor.class, 7);
      constructorArray0[0] = (Constructor<Calendar>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<MessageFormat> class1 = MessageFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.decapitalize("(T%T(Cv");
      Class<HttpCookie> class1 = HttpCookie.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.getClassFromMapping("writeAsArray");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.loadClass("S");
      MockThread mockThread0 = new MockThread("S");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("S", (ClassLoader) aSMClassLoader0);
      Class<Properties> class0 = Properties.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = TypeUtils.decapitalize("S");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<Point> class2 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(101, 0.75F, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<NumberFormatException> class3 = NumberFormatException.class;
      NoSuchMethodError noSuchMethodError1 = new NoSuchMethodError("andDecrement");
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError1, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("qkd6");
      assertEquals((-7669384940131454513L), long0);
      
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isPath(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      TypeUtils.toLocale("qkd6");
      Locale locale0 = TypeUtils.toLocale("qkd6");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.toLocale("Me");
      Class<?> class0 = TypeUtils.loadClass("g_NeE;&{6{#2xm", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass((String) null);
      Class<Date> class0 = Date.class;
      TypeUtils.isPath(class0);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Date> class0 = Date.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isTransient((Method) null);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@6d12476f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      MockThread mockThread0 = new MockThread(",}ESrc@{s?sJnf");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("ex?p}U/(L{o,cz.Zwt", true);
      classLoader0.clearAssertionStatus();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException(",}ESrc@{s?sJnf");
      Class<OptionalCodec> class1 = OptionalCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<VerifyError> class0 = VerifyError.class;
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class2, jSONType0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      MockDate mockDate0 = new MockDate(4147696707147271408L);
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockDate0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      Class<Point> class0 = Point.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<VerifyError> class1 = VerifyError.class;
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class2, jSONType0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) null, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "clone", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("[B");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("x&iE71vA]T", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.isHibernateInitialized((Object) null);
      DataTruncation dataTruncation0 = new DataTruncation(22, false, false, 22, (-1729));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dataTruncation0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ThreadGroup threadGroup0 = new ThreadGroup(">-pbl");
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      TypeUtils.loadClass(">-pbl", classLoader0, false);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(25);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, identityHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.toLocale("}5+^XLb");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isProxy(class0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.decapitalize("fastjson.parser.deny");
      Class<BigDecimal> class1 = BigDecimal.class;
      parserConfig0.getDeserializer((Type) class0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "fastjson.parser.autoTypeAccept", fieldArray0);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isGenericParamType(class0);
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AtomicLong atomicLong0 = new AtomicLong(6L);
      atomicLong0.weakCompareAndSet(6L, (-2891L));
      atomicLong0.weakCompareAndSet((-2891L), (-2401L));
      atomicLong0.compareAndSet((-2401L), 1671L);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToLong((Object) null);
      String string0 = TypeUtils.decapitalize("DONE");
      assertEquals("DONE", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.isProxy(class0);
      MockThread mockThread0 = new MockThread("LS");
      mockThread0.getContextClassLoader();
      AtomicInteger atomicInteger0 = new AtomicInteger(3617);
      atomicInteger0.getAndSet(3617);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Integer integer0 = new Integer(99);
      Integer.getInteger("W");
      Integer.sum(1126, 1699);
      TypeUtils.castToTimestamp(integer0);
      MockDate mockDate0 = new MockDate(659L);
      mockDate0.clone();
      BitSet bitSet0 = new BitSet(3617);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      linkedHashMap0.remove((Object) null, (Object) "fastjson.parser.autoTypeSupport");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(Ljava/lang/reflect/Type;)Ljava/lang/Object;", "getNextWarning", 91);
      Double double0 = new Double((-1.0));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      Locale locale0 = Locale.TAIWAN;
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      Class<Character> class0 = Character.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(91, 91, 91, 91, 91, 91);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread.getAllStackTraces();
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayName();
      locale0.hasExtensions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("French", classLoader0, true);
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1", linkedHashMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("rO2?0", classLoader1, false);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<BigDecimal> class1 = BigDecimal.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "fastjson.parser.autoTypeAccept", fieldArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.isNumber("isEmpty");
      Field[] fieldArray0 = new Field[3];
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "I?6,3qTU!,", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      String string0 = "s^&#H'SCbd*";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(115);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Time> class0 = Time.class;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("getNextException", mockIllegalStateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ex?p}U/(L{o,cz.Zwt", "ex?p}U/(L{o,cz.Zwt", 2, sQLInvalidAuthorizationSpecException0);
      TypeUtils.loadClass(",");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("}");
      TypeUtils.castToBytes("}");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[5]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "}", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449711f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      Boolean boolean0 = new Boolean("nE7\"Q]o\"$VYpbvRuO");
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      TypeUtils.castToInt(boolean0);
      TypeUtils.unwrapOptional(class0);
      PageAttributes pageAttributes0 = new PageAttributes();
      TypeUtils.loadClass("+");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<ClassLoader> class1 = ClassLoader.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      Class<InternalError> class2 = InternalError.class;
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class3);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("clone");
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.castToString(locale0);
      locale0.getDisplayName();
      Locale locale1 = Locale.TAIWAN;
      locale0.hasExtensions();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.springframework.remoting.support.RemoteInvocation");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getLocalizedMessage();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.ibatis.javassist.util.proxy.ProxyObject", "fastjson.compatibleWithJavaBean", 51);
      Double double0 = new Double(51);
      Double.isFinite(51);
      Locale locale0 = Locale.CANADA_FRENCH;
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.clearClassMapping();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      TypeUtils.castToDate((Object) null);
      TypeUtils.loadClass("get");
      Class<Field> class1 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      Class<Object> class0 = Object.class;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      LinkedHashMap<PropertyNamingStrategy, RenderingHints> linkedHashMap0 = new LinkedHashMap<PropertyNamingStrategy, RenderingHints>();
      try { 
        javaBeanSerializer0.getFieldValuesMap(linkedHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, IllegalMonitorStateException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, IllegalMonitorStateException>();
      linkedHashMap0.remove((Object) identityHashMap0, (Object) "}5+^XLb");
      linkedHashMap0.entrySet();
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<String> class1 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockThread mockThread0 = new MockThread("ftD");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.getParserFeatures(class0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Class<?> class2 = TypeUtils.getClassFromMapping("@pE_J+(Ky");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayName();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      try { 
        javaBeanSerializer0.getFieldValuesMap(sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "s^&#H'SCbd*";
      TypeUtils.loadClass("s^&#H'SCbd*", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("s^&#H'SCbd*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : s^&#H'SCbd*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-1843203796));
      Float float0 = TypeUtils.castToFloat(atomicInteger0);
      assertEquals((-1.84320384E9F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oracle.sql.DATE");
      TypeUtils.decapitalize("oracle.sql.DATE");
      TypeUtils.castToString("oracle.sql.DATE");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.lang.String@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Type type0 = null;
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      TypeUtils.fnv1a_64_lower("Ljava.lang.AutoCloseable");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(453L);
      TypeUtils.castToBoolean((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass((String) null);
      MockDate mockDate0 = new MockDate(101);
      TypeUtils.castToChar((Object) null);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "ka+X;$";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ka+X;$");
      TypeUtils.castToSqlDate((Object) null);
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Field[] fieldArray0 = new Field[3];
      String string1 = null;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ex?p}U/(L{o,cz.Zwt", "-9223372036854775808", 2, mockIllegalStateException0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      TypeUtils.castToLong((Object) null);
      Class<Properties> class1 = Properties.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "Ljava.awt.Rectangle";
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      TypeUtils.castToBytes("Ljava.awt.Rectangle");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Integer> class0 = Integer.class;
      TypeUtils.isProxy(class0);
      Point point0 = new Point();
      Constructor<SQLInvalidAuthorizationSpecException>[] constructorArray0 = (Constructor<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<VerifyError> class0 = VerifyError.class;
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class2, jSONType0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      MockDate mockDate0 = new MockDate(4147696707147271408L);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.util.ASMClassLoader@2ec18354
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("0");
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "0", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("toInstant");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) choiceFormat0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type1, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getRawClass(type0);
      JSONObject jSONObject0 = new JSONObject(13, true);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      TypeUtils.castToString((Object) null);
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.getSerializeFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.getGenericParamType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.BufferCapabilities@18fe08cc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      TypeUtils.getClassFromMapping("kotlin.reflect.KFunction");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToSqlTime((Object) null);
      boolean boolean0 = TypeUtils.isNumber("kotlin.reflect.KFunction");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double(3379.3521410401);
      Double.isFinite(3379.3521410401);
      TypeUtils.castToBigInteger(double0);
      SecurityException securityException0 = new SecurityException((String) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized(securityException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToDouble((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Type type0 = TypeUtils.unwrapOptional(class1);
      Class<?> class2 = TypeUtils.getClass(type0);
      assertEquals("class java.util.Locale", class2.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass((String) null);
      Class<Date> class0 = Date.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToInt((Object) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNull(illegalMonitorStateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      Class<PropertyProcessable> class2 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class2);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) propertyProcessableDeserializer0.type;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      Rectangle rectangle0 = new Rectangle(0, (-2759), 2197, 1302);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) rectangle0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // craete instance error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      SQLException sQLException0 = new SQLException(internalError0);
      BigDecimal bigDecimal0 = new BigDecimal((-1926));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = "";
      TypeUtils.castToInt(bigDecimal0);
      TypeUtils.loadClass("", classLoader0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      SQLException sQLException0 = new SQLException(internalError0);
      Class<Properties> class0 = Properties.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.isNumber("948");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", weakHashMap0);
      TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(typeUtils0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.castToJavaBean(map0, class1, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader1, true);
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InternalError internalError0 = new InternalError("com.alibaba.fastjson.JSON");
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      String string0 = TypeUtils.castToString(optionalCodec0);
      assertNotNull(string0);
      
      Class<Point> class0 = Point.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.JSON", (ClassLoader) aSMClassLoader0, false);
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(101, 0.75F, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLWarning> class1 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge("andDecrement", "getClass", biFunction0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(linkedHashMap0);
      TypeUtils.clearClassMapping();
      Hashtable<SQLNonTransientConnectionException, SQLClientInfoException> hashtable1 = new Hashtable<SQLNonTransientConnectionException, SQLClientInfoException>();
      TypeUtils.castToBigDecimal(hashtable1);
      Locale locale0 = TypeUtils.toLocale("illegal.char");
      assertEquals("illegal.char", locale0.getLanguage());
      
      long long0 = TypeUtils.fnv1a_64_lower(" ;_j+9\"@t<r)fEpRTn");
      assertEquals(1755718519850374936L, long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.castToString(optionalCodec0);
      Class<Point> class0 = Point.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSON");
      TypeUtils.loadClass("com.alibaba.fastjson.JSON", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.isGenericParamType((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TimeDeserializer timeDeserializer0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(timeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      ParserConfig parserConfig0 = ParserConfig.global;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) currency0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Class<HttpCookie> class1 = HttpCookie.class;
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("is", class0, class1, (Type) null, (Field) null, 1, 1, 1);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayName();
      Locale locale1 = Locale.TAIWAN;
      locale1.hasExtensions();
      locale1.hasExtensions();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("org.springframework.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("org.springframework.cglib.proxy.Factory");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.springframework.cglib.proxy.Factory\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AU";
      stringArray0[1] = "5krXAH[k~ve~e'W{*JD";
      stringArray0[2] = "jd!yAg&EELx^*<'i!?";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.setMaxLevel(105);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.isGenericParamType(type0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(1313, 1530.0F);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<MockDate> class1 = MockDate.class;
      TypeUtils.isProxy(class1);
      MockThread mockThread0 = new MockThread("LS");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      TypeUtils.loadClass(".000000", (ClassLoader) null, false);
      TreeMap<InstantiationError, SQLTransactionRollbackException> treeMap0 = new TreeMap<InstantiationError, SQLTransactionRollbackException>();
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.castToJavaBean((Object) treeMap0, class2);
      Class<EnumDeserializer> class3 = EnumDeserializer.class;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ArrayList<Time> arrayList0 = new ArrayList<Time>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.JAPAN;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      TypeUtils.unwrapOptional((Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) "", (Type) null, parserConfig0);
      TypeUtils.decapitalize("fastjson.parser.deny");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemClass(class1);
      TypeUtils.loadClass("WriteTabAsSpecial");
      PipedReader pipedReader0 = new PipedReader();
      Character.valueOf('$');
      JSONObject jSONObject0 = new JSONObject(2162);
      SecurityException securityException0 = new SecurityException();
      jSONObject0.fluentPut("WriteTabAsSpecial", class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Collator> class2 = Collator.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, parserConfig0);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) hashMap1, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.awt.Rectangle");
      TypeUtils typeUtils0 = new TypeUtils();
      InternalError internalError0 = new InternalError("ljava.awt.Rectangle");
      ParserConfig parserConfig0 = ParserConfig.global;
      Character.valueOf('|');
      Character.highSurrogate(56);
      Class<StackTraceElement> class0 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "ljava.awt.Rectangle", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1.classLoader);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      TypeUtils.loadClass("fastjson.parser.deny", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) null;
      Class<Boolean> class1 = Boolean.TYPE;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      Rectangle rectangle0 = new Rectangle((-2759), (-2759), (-2759), 70);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory2, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.compatibleWithFieldName = true;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isProxy(class0);
      Constructor<SimpleDateFormat>[] constructorArray0 = (Constructor<SimpleDateFormat>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      String string1 = "Pp: Dq>P \"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pp: Dq>P \"");
      weakHashMap0.put("Pp: Dq>P \"", "Pp: Dq>P \"");
      weakHashMap0.put("fastjson.parser.autoTypeSupport", "d,>)%SL4K9Mg");
      weakHashMap0.put("Pp: Dq>P \"", "fastjson.parser.autoTypeSupport");
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      weakHashMap0.putIfAbsent("Pp: Dq>P \"", "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Pp: Dq>P \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Pp: Dq>P \"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      MockThread.currentThread();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(547L);
      atomicLong0.weakCompareAndSet((-2401L), (-1L));
      atomicLong0.compareAndSet(547L, 946L);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.castToString(decimalFormat0);
      TypeUtils.castToInt(boolean0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InternalError internalError0 = new InternalError("com.alibaba.fastjson.JSON");
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.castToString(optionalCodec0);
      Character character0 = new Character('a');
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.alibaba.fastjson.JSON", "'Zdy_HXYIk*x#c", (-2038));
      Double double0 = new Double((-2038));
      Double.isFinite(0.0);
      Locale locale0 = Locale.CANADA_FRENCH;
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'Zdy_HXYIk*x#c");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "'Zdy_HXYIk*x#c", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      SQLException sQLException0 = new SQLException(internalError0);
      Class<Properties> class0 = Properties.class;
      Class<Short> class1 = Short.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AU";
      stringArray0[1] = "`8&IuHp+&y";
      stringArray0[2] = "jd!yAg&EELx^*<'i!?";
      stringArray0[3] = "AU";
      stringArray0[4] = "AU";
      stringArray0[5] = "jd!yAg&EELx^*<'i!?";
      stringArray0[6] = "AU";
      stringArray0[7] = "AU";
      stringArray0[8] = "jd!yAg&EELx^*<'i!?";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-109));
      Byte.toUnsignedInt((byte) (-36));
      Byte.toUnsignedInt((byte)7);
      Byte byte1 = new Byte((byte) (-109));
      Byte.compare((byte)7, (byte)7);
      Byte.toUnsignedLong((byte) (-109));
      TypeUtils.castToLong(byte0);
      String[] stringArray0 = new String[4];
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = Calendar.AM_PM;
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) byte1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Type[] typeArray0 = new Type[7];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("ex?p}U/(L{o,cz.Zwt");
      TypeUtils.castToShort((Object) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "ex?p}U/(L{o,cz.Zwt", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<Object> class0 = Object.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader.getSystemClassLoader();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertEquals(1, class3.getModifiers());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage();
      locale1.hasExtensions();
      locale1.hasExtensions();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToByte("");
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("'h]sRRy", "'h]sRRy");
      hashMap0.put("t_&VEjoS", "ge");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("'h]sRRy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 'h]sRRy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("}5+^XLb");
      TypeUtils.castToDouble((Object) null);
      locale0.clone();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BreakIterator.getLineInstance(locale0);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.loadClass("org.springframework.remoting.support.RemoteInvocation");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      aSMClassLoader1.getParent();
      TypeUtils.loadClass("LaKMFl -P.yh6-", (ClassLoader) aSMDeserializerFactory1.classLoader, false);
      TypeUtils.isGenericParamType((Type) null);
      TreeMap<InstantiationError, SQLTransactionRollbackException> treeMap0 = new TreeMap<InstantiationError, SQLTransactionRollbackException>();
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance_timestamp;
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      weakHashMap0.put("jPp: Dq>P \"", "has");
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("jPp: Dq>P \"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jPp: Dq>P \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockDate> class0 = MockDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      weakHashMap0.put("3~8ETYr}DyR", "Ljava.awt.Point");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      TypeUtils.castToInt("");
      TypeUtils.unwrapOptional(class0);
      TypeUtils.getCollectionItemType(class0);
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet1 = new LinkedHashSet<MockJapaneseDate>();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ArrayList<Time> arrayList0 = new ArrayList<Time>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.getClassFromMapping("quTm(~/@NJ'");
      Class<SecurityException> class0 = SecurityException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double((-1799.689));
      Double.sum((-509.93160889025), (-1064.259));
      Double.max((-1799.689), (-1799.689));
      Double.sum((-1.0), (-1.0));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TypeUtils.castToInt(double0);
      TypeUtils.castToString(class1);
      TypeUtils.isNumber("NULL");
      TypeUtils.castToShort("NULL");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      TypeUtils.toLocale("quTm(~/@NJ'");
      TypeUtils.decapitalize(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Byte> class0 = Byte.class;
      TypeUtils.isKotlin(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "|@j6tV", fieldArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToDate("6");
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("6", hashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader.getSystemClassLoader();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Point> class0 = Point.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils typeUtils0 = new TypeUtils();
      MockDate mockDate0 = new MockDate(101);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToChar((Object) null);
      TypeUtils.isPath(class0);
      WeakHashMap<GridBagConstraints, BatchUpdateException> weakHashMap0 = new WeakHashMap<GridBagConstraints, BatchUpdateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, (String) null);
      weakHashMap1.put("3~8ETYr}DyR", "=N4Vog&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {null=null, Ljava.awt.Rectangle=Ljava.awt.Rectangle}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "s^&#H'SCbd*";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s^&#H'SCbd*");
      Boolean boolean1 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("s^&#H'SCbd*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : s^&#H'SCbd*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.castToDate((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      String string0 = "w@";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("w@", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("w@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : w@
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
      TypeUtils.loadClass("-lZrv}e+!i:fG`o{D;7");
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      TypeUtils.isProxy(class1);
      MockThread mockThread0 = new MockThread("double");
      MockThread mockThread1 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup("s^&#H'SCbd*");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread0, "double", 1L);
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2);
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.clearAssertionStatus();
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      TypeUtils.getParserFeatures(class2);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(jSONPDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InternalError internalError0 = new InternalError();
      Class<Properties> class0 = Properties.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.getGenericParamType(class0);
      ClassLoader.getSystemClassLoader();
      Class<Dimension> class1 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      aSMDeserializerFactory1.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      aSMDeserializerFactory1.classLoader.getParent();
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getLocalizedMessage();
      String string0 = ParserConfig.DENY_PROPERTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.ibatis.javassist.util.proxy.ProxyObject", "fastjson.compatibleWithJavaBean", 51);
      Double double0 = new Double(51);
      Double.isFinite(51);
      Locale locale0 = Locale.CANADA_FRENCH;
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.toLocale("1_.-");
      TypeUtils.decapitalize("fastjson.parser.deny");
      TypeUtils typeUtils0 = new TypeUtils();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToDouble((Object) null);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getKoltinConstructorParameters(class0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<PageAttributes> class2 = PageAttributes.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class1, (Type) class2, (PropertyNamingStrategy) null, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.deny");
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      parserConfig0.setAutoTypeSupport(true);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("fastjson.parser.deny");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(547L);
      atomicLong0.decrementAndGet();
      atomicLong0.weakCompareAndSet((-2401L), (-1L));
      atomicLong0.compareAndSet(547L, 946L);
      Boolean boolean0 = Boolean.TRUE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.castToString(decimalFormat0);
      TypeUtils.castToInt(boolean0);
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(2198.95);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Method> class0 = Method.class;
      Float.sum(0.0F, 0.0F);
      Float.max(0.75F, 0.75F);
      Float.sum((-0.9839683F), (-0.9839683F));
      Float.max(1210.0F, 0.0F);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      parserConfig0.putDeserializer(class0, timeDeserializer0);
      parserConfig0.clearDeserializers();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      TypeUtils.getGenericParamType((Type) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.springframework.remoting.support.RemoteInvocation");
      InterruptedException interruptedException0 = new InterruptedException("can not cast to Timestamp, value : ");
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "Ljava.lang.AutoCloseable");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      classLoader1.getParent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.lang.AutoCloseable");
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = aSMClassLoader1.getParent();
      Class<?> class1 = TypeUtils.loadClass("org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate", classLoader2, true);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.getRawClass(javaBeanInfo0.clazz);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<MockDate> class0 = MockDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pp: Dq>P \"");
      weakHashMap0.put("Pp: Dq>P \"", "");
      weakHashMap0.put("fastjson.parser.autoTypeSupport", "d,>)%SL4K9Mg");
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      weakHashMap0.put("Pp: Dq>P \"", "");
      weakHashMap0.putIfAbsent("", "fastjson.parser.autoTypeSupport");
      TypeUtils.castToChar("");
      int int0 = Calendar.SUNDAY;
      TypeUtils.isHibernateInitialized("Pp: Dq>P \"");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "DYR", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("moduleName", identityHashMap0);
      Class<BigDecimal> class0 = BigDecimal.class;
      Field[] fieldArray0 = new Field[0];
      linkedHashMap0.clear();
      TypeUtils.getField(class0, "fastjson.parser.autoTypeAccept", fieldArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<Point> class2 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      NoSuchMethodError noSuchMethodError1 = new NoSuchMethodError();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.isProxy(class1);
      MockThread mockThread0 = new MockThread("tgt$'FK'(9pdN:g,PC");
      mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("");
      TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fi", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getLocalizedMessage();
      String string0 = ParserConfig.DENY_PROPERTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.ibatis.javassist.util.proxy.ProxyObject");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fi", "8FG=|2okn1>rZ-C^", 55);
      Double double0 = new Double(1914.931121);
      Double.isFinite(51);
      Locale locale0 = Locale.CANADA_FRENCH;
      ParserConfig.getGlobalInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny");
      Class<Character> class0 = Character.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.clearClassMapping();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      TypeUtils.castToDate(double0);
      TypeUtils.loadClass("fi");
      Class<Field> class1 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFAULT_TYPE_KEY = "Ljava.awt.Color";
      ParserConfig parserConfig0 = ParserConfig.global;
      Character.valueOf('n');
      Character.highSurrogate(84);
      String string0 = "MapSortField";
      TypeUtils.loadClass("MapSortField");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "_7F|oM],L", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_7F|oM],L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getParserFeatures(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ex?p}U/(L{o,cz.Zwt", "#,kowH6zBywS", 0, sQLTransientConnectionException0);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = type1;
      typeArray0[6] = type1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type1, typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.sql.SQLFeatureNotSupportedException -> java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context", class0, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context -> java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.awt.Rectangle");
      TypeUtils typeUtils0 = new TypeUtils();
      InternalError internalError0 = new InternalError();
      SQLException sQLException0 = new SQLException(internalError0);
      sQLException0.printStackTrace();
      InternalError internalError1 = new InternalError("ljava.awt.Rectangle");
      ParserConfig parserConfig0 = ParserConfig.global;
      Character.valueOf('n');
      Character.highSurrogate(68);
      Class<StackTraceElement> class0 = StackTraceElement.class;
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.autoTypeAccept", "Ljava.awt.Rectangle", "fastjson.parser.autoTypeSupport", 68);
      TypeUtils.loadClass("MapSortField");
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.isProxy(class1);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getCollectionItemType((Type) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.unwrapOptional((Type) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "value ";
      Type type0 = null;
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(1316, true);
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("CQ%j5D&8ra", "CQ%j5D&8ra");
      weakHashMap0.size();
      byte[] byteArray0 = new byte[1];
      weakHashMap0.put("getName", "CQ%j5D&8ra");
      byteArray0[0] = (byte) (-103);
      weakHashMap0.put("1I9T>RqBCom8#@q]", (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      weakHashMap0.put("CQ%j5D&8ra", (String) null);
      weakHashMap0.put("isshortValue", "UZzjK[?4W");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      TypeUtils.isProxy(class1);
      TypeUtils.getSerializeFeatures(class0);
      Class<AtomicInteger> class2 = AtomicInteger.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      Class<?> class3 = TypeUtils.getRawClass(class1);
      TypeUtils.getGenericParamType(class3);
      TypeUtils.isHibernateInitialized(fileSystemHandling0);
      Class<InternalError> class4 = InternalError.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("in", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("X-&{<", class4, class1, class4, (Field) null, (-1390), 0, 28);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class3, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Pp: Dq>P \"");
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      atomicLong0.weakCompareAndSet((-1L), (-1L));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      atomicLong0.compareAndSet((-1L), (-1L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      ClassLoader.getSystemClassLoader();
      AtomicLong atomicLong0 = new AtomicLong(6L);
      atomicLong0.weakCompareAndSet((-2891L), 6L);
      atomicLong0.compareAndSet((-2891L), (-2891L));
      AtomicInteger atomicInteger0 = new AtomicInteger(1056);
      TypeUtils.castToBoolean((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("&", classLoader0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&", "", numberFormatException0);
      TypeUtils.castToShort(atomicInteger0);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.RBTableBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.compatibleWithFieldName = false;
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      classLoader0.clearAssertionStatus();
      Class<BitSet> class0 = BitSet.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", hashMap0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig1, javaBeanInfo0);
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(true);
      TypeUtils.castToBoolean((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<MockDate> class1 = MockDate.class;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) hashMap0, true, (PropertyNamingStrategy) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<DataTruncation> class0 = DataTruncation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      MockDate mockDate0 = new MockDate((-2068L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToChar((Object) null);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      TypeUtils.isPath(class1);
      WeakHashMap<GridBagConstraints, BatchUpdateException> weakHashMap0 = new WeakHashMap<GridBagConstraints, BatchUpdateException>();
      TypeUtils.clearClassMapping();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      MockDate mockDate1 = new MockDate();
      TypeUtils.castToDate(mockDate1);
      TypeUtils.isNumber("puXi'?6.4.FBtXir=");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("new Date(", "<X4U{lv{Fz(l");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLInvalidAuthorizationSpecException: new Date(
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      String string0 = ".000000";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass(".000000", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".000000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass((String) null);
      TypeUtils.castToDate("");
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", hashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getParserFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(101, 0.75F, false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLWarning> class1 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge("andDecrement", "getClass", biFunction0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(linkedHashMap0);
      TypeUtils.clearClassMapping();
      Hashtable<SQLNonTransientConnectionException, SQLClientInfoException> hashtable1 = new Hashtable<SQLNonTransientConnectionException, SQLClientInfoException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cr[E|\";", "(CLjava/lang/String;F)V", noSuchMethodError0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("{", "6]eLZ :M<;OA$o", hashMap1);
      hashtable1.put(sQLNonTransientConnectionException0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashtable1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
