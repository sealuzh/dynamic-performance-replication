/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:14:19 GMT 2018
 */

package org.apache.commons.jxpath.ri.model.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyIterator_ESTest extends PropertyIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = new QName("{qxl`2oa'i&)tbOgx$", "{qxl`2oa'i&)tbOgx$");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      QName qName1 = nodeNameTest0.getNodeName();
      Locale locale0 = Locale.CHINA;
      NullPointer nullPointer0 = new NullPointer(qName1, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.setPosition(60);
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      assertTrue(nodePointer0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      NullPointer nullPointer0 = new NullPointer(locale0, "fW<(P+QpSK%|S");
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPointer0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "fW<(P+QpSK%|S", true, beanPropertyPointer0);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNull(nodePointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.KOREAN;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.reset();
      beanAttributeIterator0.setPosition(Integer.MIN_VALUE);
      beanAttributeIterator0.getNodePointer();
      assertEquals(Integer.MIN_VALUE, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(variablePointer0, (QName) null, variablePointer0, jXPathBasicBeanInfo0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "cmxaBf0.", false, beanPropertyPointer0);
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator0.prepareForIndividualProperty((String) null);
      assertEquals(Integer.MIN_VALUE, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "+cfWKFI,o{;q&VUt");
      Object object0 = new Object();
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty("$d<A");
      propertyIterator0.setPosition(39);
      int int0 = propertyIterator0.getPosition();
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.KOREAN;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      boolean boolean0 = beanAttributeIterator0.setPosition((-2029));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NullPointer nullPointer0 = new NullPointer(locale0, "wS=-n%qbIs#<bvtB");
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nullPointer0);
      QName qName0 = nullPropertyPointer0.getName();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.getNodePointer();
      assertEquals(1, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "emp3oty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      propertyIterator0.getPosition();
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      int int0 = NodePointer.WHOLE_COLLECTION;
      jXPathBasicBeanInfo0.getPropertyDescriptor((String) null);
      propertyIterator0.getNodePointer();
      int int1 = PropertyPointer.UNSPECIFIED_PROPERTY;
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "emTcoty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      propertyIterator0.getPosition();
      propertyIterator0.getNodePointer();
      propertyIterator0.prepareForIndividualProperty("8,6EwiP:xs7%>}(");
      int int0 = NodePointer.WHOLE_COLLECTION;
      jXPathBasicBeanInfo0.getPropertyDescriptor((String) null);
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      int int1 = PropertyPointer.UNSPECIFIED_PROPERTY;
      assertEquals(Integer.MIN_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("&]7F?c.YGD_m<#v", "&]7F?c.YGD_m<#v");
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.CANADA_FRENCH;
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, jXPathBasicBeanInfo0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty("empty");
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertEquals(0, propertyIterator0.getPosition());
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "empty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "empty", true, (NodePointer) null);
      propertyIterator0.setPosition(486);
      int int0 = propertyIterator0.getPosition();
      assertEquals(486, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("8,6EwiP:xs7%>}(", "empty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      int int0 = NodePointer.WHOLE_COLLECTION;
      propertyIterator0.getNodePointer();
      jXPathBasicBeanInfo0.getPropertyDescriptor("8,6EwiP:xs7%>}(");
      propertyIterator0.prepareForIndividualProperty("8,6EwiP:xs7%>}(");
      int int1 = NodePointer.WHOLE_COLLECTION;
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      Object object1 = propertyPointer0.bean;
      JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "C");
      assertFalse(jXPathContext0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "empty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "empty");
      beanPointer0.getPropertyPointer();
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.setPosition(499);
      int int0 = propertyIterator0.getPosition();
      assertEquals(499, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "empty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "empty", false, (NodePointer) null);
      propertyIterator0.setPosition(486);
      assertEquals(486, propertyIterator0.getPosition());
      
      int int0 = PropertyPointer.UNSPECIFIED_PROPERTY;
      propertyIterator0.reset();
      int int1 = propertyIterator0.getPosition();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QName qName0 = new QName("nqn", "em,pty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nqn");
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, false, (NodePointer) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNotNull(nodePointer0);
      
      int int0 = propertyIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("nq1n");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "empty", false, (NodePointer) null);
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator0.getPosition();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      jXPathBasicBeanInfo0.getPropertyDescriptor("empty");
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      boolean boolean0 = propertyIterator0.setPosition(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      propertyIterator0.getNodePointer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      propertyIterator0.prepareForIndividualProperty("nq1n");
      assertEquals(1, propertyIterator0.getPosition());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = new QName("empty");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "empty", true, (NodePointer) null);
      propertyIterator0.getPosition();
      jXPathBasicBeanInfo0.toString();
      propertyIterator0.prepareForIndividualProperty("BeanInfo [class = java.lang.String, atomic, properties = \n    class [B: bytes\n    boolean: empty]");
      propertyIterator0.getPropertyPointer();
      propertyIterator0.reset();
      propertyIterator0.setPosition(1);
      NullPointer nullPointer0 = new NullPointer(beanPointer0, qName0);
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "org.apache.commons.jxpath.ClassFunctions", true, beanPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "empty");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "C", true, propertyPointer0);
      jXPathBasicBeanInfo0.getPropertyDescriptor(", atomic");
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.setPosition(499);
      // Undeclared exception!
      try { 
        ((BeanPropertyPointer) propertyPointer0).remove();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set property: /* - no such property
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("+cfWK@FI,o{;q&VUt", "+cfWK@FI,o{;q&VUt");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      int int0 = NodePointer.WHOLE_COLLECTION;
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      ((BeanPropertyPointer) propertyPointer0).setIndex((-1360));
      propertyPointer0.namespaceIterator();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "C", false, propertyPointer0);
      propertyIterator0.reset();
      propertyIterator0.getPropertyPointer();
      propertyIterator0.prepareForIndividualProperty("+cfWK@FI,o{;q&VUt");
      propertyIterator0.getPosition();
      propertyIterator0.getPosition();
      propertyIterator0.prepareForIndividualProperty("+cfWK@FI,o{;q&VUt");
      propertyIterator0.prepareForIndividualProperty("bytes");
      propertyIterator0.setPosition((-1360));
      propertyIterator0.getPosition();
      propertyIterator0.getNodePointer();
      assertEquals((-1360), propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QName qName0 = new QName("jOR!AV(0:aR'H9m\"Q]");
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.CANADA_FRENCH;
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.namespaceIterator();
      jXPathBasicBeanInfo0.getPropertyDescriptor("C");
      String string0 = "\"following::\"";
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, false, propertyPointer0);
      propertyIterator0.getPropertyPointer();
      beanPropertyPointer0.getNamespaceResolver();
      propertyIterator0.getNodePointer();
      propertyIterator0.reset();
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, beanPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QName qName0 = new QName("+cfWKFI,o{;q&VUt", "+cfWKFI,o{;q&VUt");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, beanPropertyPointer0, jXPathBasicBeanInfo0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = NodePointer.WHOLE_COLLECTION;
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      beanPropertyPointer0.namespaceIterator();
      beanPropertyPointer0.setIndex((-497));
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, propertyPointer0);
      propertyIterator0.prepareForIndividualProperty("3M44r35!+:_uxU#rb>.Ew");
      propertyIterator0.reset();
      propertyIterator0.getNodePointer();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QName qName0 = new QName("+cfWK@FI,o{;q&VUt", "+cfWK@FI,o{;q&VUt");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = NodePointer.WHOLE_COLLECTION;
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      beanPointer0.createNodeIterator("+cfWK@FI,o{;q&VUt", true, propertyPointer0);
      ((BeanPropertyPointer) propertyPointer0).setIndex(Integer.MIN_VALUE);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "C", true, propertyPointer0);
      propertyIterator0.reset();
      propertyIterator0.getPropertyPointer();
      propertyIterator0.prepareForIndividualProperty("+cfWK@FI,o{;q&VUt");
      propertyIterator0.getPosition();
      propertyIterator0.prepareForIndividualProperty("+cfWK@FI,o{;q&VUt");
      propertyIterator0.prepareForIndividualProperty("bytes");
      propertyIterator0.setPosition(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QName qName0 = new QName("PropertyIerator startWith parameter is not a child of the supplied parent", "PropertyIerator startWith parameter is not a child of the supplied parent");
      Object object0 = new Object();
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, object0, jXPathBasicBeanInfo0);
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyPointer propertyPointer0 = beanPointer0.getPropertyPointer();
      ((BeanPropertyPointer) propertyPointer0).setIndex(3214);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ((BeanPropertyPointer) propertyPointer0).setIndex((-1));
      PropertyIterator propertyIterator0 = (PropertyIterator)beanPointer0.createNodeIterator("<<unknown namespace>>", false, propertyPointer0);
      propertyIterator0.setPosition(2147483645);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "PropertyIerator startWith parameter is not a child of the supplied parent", true, propertyPointer0);
      Class<Integer> class1 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class1, class1);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
      BeanPointer beanPointer1 = (BeanPointer)beanPointer0.getValuePointer();
      propertyIterator0.getPropertyPointer();
      BeanPointer beanPointer2 = (BeanPointer)beanPointer0.clone();
      propertyIterator1.getNodePointer();
      beanPointer1.getValuePointer();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer2, qName0);
      beanAttributeIterator0.getPropertyPointer();
      beanAttributeIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      NullPointer nullPointer0 = new NullPointer(beanPointer2, qName0);
      propertyIterator0.getNodePointer();
      propertyIterator0.getPosition();
      beanAttributeIterator0.getNodePointer();
      propertyIterator1.reset();
  }
}
