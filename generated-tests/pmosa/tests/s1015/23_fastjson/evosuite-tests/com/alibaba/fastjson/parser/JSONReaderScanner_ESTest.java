/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:57:29 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.time.chrono.ChronoLocalDate;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'N';
      charArray0[2] = '[';
      charArray0[3] = '=';
      charArray0[4] = '~';
      charArray0[5] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(99999, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2769), (-2769));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2769
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'I';
      charArray0[2] = 'A';
      charArray0[3] = ';';
      charArray0[4] = 'i';
      charArray0[5] = '6';
      charArray0[6] = '@';
      charArray0[7] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1505));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(0, charArray0, (-1505), 1526);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      char char0 = 'k';
      charArray0[1] = 'k';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      char char1 = 'V';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'r');
      jSONReaderScanner0.indexOf('H', 0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 0, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(25);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertTrue(boolean0);
      
      int int0 = jSONReaderScanner0.indexOf('^', 1328);
      assertEquals((-1), int0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(192);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$", 192);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = ')';
      charArray0[2] = 'g';
      charArray0[3] = '$';
      charArray0[4] = 'd';
      charArray0[5] = '7';
      charArray0[6] = 'D';
      charArray0[7] = ' ';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(76, (-687), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o:s]");
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = 'q';
      charArray0[3] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      int int0 = (-83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'N';
      charArray0[2] = '[';
      charArray0[3] = '=';
      charArray0[4] = '~';
      charArray0[5] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanNumber();
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 16384);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(16384, 16384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = '|';
      charArray0[3] = '\'';
      charArray0[4] = 'v';
      charArray0[5] = 'z';
      charArray0[6] = 'T';
      charArray0[7] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3928, 3928);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.subString(3928, 3928);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.putChar('v');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.sub_chars(3928, 0);
      jSONReaderScanner0.sub_chars(20, 0);
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals(':', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      jSONReaderScanner0.charAt(1976);
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'l';
      charArray0[3] = 'y';
      charArray0[4] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2613, 19);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
      
      jSONReaderScanner0.matchStat = 116;
      jSONReaderScanner0.sub_chars(2854, 2854);
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertTrue(boolean1 == boolean0);
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'K';
      charArray0[2] = 'T';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'X');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2425);
      jSONReaderScanner2.indexOf('E', 126);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "can not cast to JSONObject.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AqBJ|\"Nxv1ChH};Rq", 78);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      int int0 = 757;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 757, 757);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.sp = 93;
      jSONReaderScanner0.eofPos = 93;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'S';
      charArray0[2] = 'u';
      charArray0[3] = 'o';
      charArray0[4] = ',';
      charArray0[5] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1927);
      jSONReaderScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2301);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.next();
      jSONReaderScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      SymbolTable symbolTable0 = new SymbolTable(16384);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-1432), 65279, (-447), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s>f%Z)b1^");
      SymbolTable symbolTable0 = new SymbolTable(876);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.charAt(197);
      char char0 = jSONReaderScanner0.charAt(1442);
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oP:s]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.indexOf('@', 1151);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s>f%Z)b1^");
      SymbolTable symbolTable0 = new SymbolTable(876);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(384);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G{4gcQ}u<6?z_l");
      assertEquals('G', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.numberString();
      assertEquals('{', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R:1^E06y");
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'K';
      charArray0[2] = 'T';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'X');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2425);
      jSONReaderScanner2.bp = 38;
      // Undeclared exception!
      try { 
        jSONReaderScanner2.indexOf('E', 126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(384);
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = ')';
      charArray0[2] = '*';
      charArray0[3] = '5';
      charArray0[4] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 384, 384);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(184);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ydB-aJh|7suxC)'^B");
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
