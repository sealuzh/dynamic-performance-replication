/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:40:36 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.log.LogFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.data.AllocPage;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.command.dml.BackupCommand;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("intoderby.storage.keeptransactionlog");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.substituteMarkers(" AND ", " AND ", " AND ");
      SQLUtil.isQuery(" :LZ^i,gd<7sD");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.substituteMarkers("Mzm';U|]*Vrh)pMS(y(", "Mzm';U|]*Vrh)pMS(y(", (Object) null);
      String string0 = TypeId.BOOLEAN_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRIMARY KEY ");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(";z].MXg(r");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";z].MXg(r";
      stringArray0[1] = ";z].MXg(r";
      stringArray0[2] = ";z].MXg(r";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.leftJoin(";z].MXg(r", stringArray0, "The fastpath function {0} is unknown.", "create table ", stringArray0);
      assertEquals("left join The fastpath function {0} is unknown. as create table  on ;z].MXg(r.;z].MXg(r = create table .;z].MXg(r and ;z].MXg(r.;z].MXg(r = create table .;z].MXg(r and ;z].MXg(r.;z].MXg(r = create table .;z].MXg(r", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(";z].MXg(r = ';z].MXg(r' AND ;z].MXg(r = ';z].MXg(r' AND ;z].MXg(r = ';z].MXg(r'", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = "Xx:C'LeJkl1$,'7-";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Xx:C'LeJkl1$,'7-", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBDataType.getInstance(2285, "renamel?un<`**k:");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("renamel?un<`**k:", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.replace(2285, 2285, "Xx:C'LeJkl1$,'7-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.isProcedureCall("x6&(2r");
      String string0 = FBConnectionProperties.USER_NAME_PROPERTY;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("@[mddP5N2tzJ^1", (String[]) null, "x6&(2r", "x6&(2r", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[0], (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("7XS4R#W3Wy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7XS4R#W3Wy", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "alter session");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      try { 
        Integer.parseUnsignedInt((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", false);
      assertEquals("~ W_I - '\"ylOv]E[V{\"E'", string0);
      
      boolean boolean0 = FBBlob.SEGMENTED;
      String string1 = TypeId.BLOB_NAME;
      boolean boolean1 = SQLUtil.isDDL("~W_I-'\"ylOv]E[V{\"E");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = TypeId.BLOB_NAME;
      SQLUtil.mutatesDataOrStructure("SETTINGS");
      String string1 = TypeId.BINARY_NAME;
      assertEquals("BINARY", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      VersionNumber.valueOf("/IG)W3DK=s<;O0;?>c");
      dBCatalog0.setDoc("/IG)W3DK=s<;O0;?>c");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SIMPLE";
      stringArray0[1] = "SIMPLE";
      stringArray0[2] = "SIMPLE";
      stringArray0[3] = "SIMPLE";
      stringArray0[4] = "SIMPLE";
      stringArray0[5] = "SIMPLE";
      stringArray0[6] = "SIMPLE";
      stringArray0[7] = "SIMPLE";
      String string0 = SQLUtil.innerJoin("SIMPLE", stringArray0, "drop table", "SIMPLE", stringArray0);
      assertEquals("drop table as SIMPLE on SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE and SIMPLE.SIMPLE = SIMPLE.SIMPLE", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SIMPLE");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SIMPLE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE) REFERENCES SIMPLE(SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE, SIMPLE)", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.normalize("", false);
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      stringArray0[2] = "alter session";
      stringArray0[3] = "alter session";
      stringArray0[4] = "alter session";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter session", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter session\" UNIQUE (alter session, alter session, alter session, alter session, alter session)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ZZ(llZK;Z-!X1a*#gb");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("ZZ(llZK;Z-!X1a*#gb", stringBuilder0);
      stringBuilder1.append((-3077.9162113339626));
      assertEquals("ZZ(llZK;Z-!X1a*#gb or ZZ(llZK;Z-!X1a*#gb-3077.9162113339626", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("O\"!pbFSri04Xby[/", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String string0 = TypeId.BINARY_NAME;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop table";
      stringArray0[1] = "select int";
      stringArray0[2] = "wpP[\"I.hlMlhQ{";
      stringArray0[3] = "EqaD3f`'H,Hu";
      stringArray0[4] = "drop table";
      stringArray0[5] = "EqaD3f`'H,Hu";
      stringArray0[6] = "EqaD3f`'H,Hu";
      stringArray0[7] = "EqaD3f`'H,Hu";
      stringArray0[8] = "drop table";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("EqaD3f`'H,Hu", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (drop table, select int, wpP[\"I.hlMlhQ{, EqaD3f`'H,Hu, drop table, EqaD3f`'H,Hu, EqaD3f`'H,Hu, EqaD3f`'H,Hu, drop table) REFERENCES drop table(drop table, select int, wpP[\"I.hlMlhQ{, EqaD3f`'H,Hu, drop table, EqaD3f`'H,Hu, EqaD3f`'H,Hu, EqaD3f`'H,Hu, drop table)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = "/Ur:Xnn{A$^=";
      stringArray0[6] = "/Ur:Xnn{A$^=";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = SQLUtil.normalize("#%K)}J!-,", true);
      assertEquals("# % K) } J ! -,", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , /Ur:Xnn{A$^=, , , /Ur:Xnn{A$^=)", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/Ur:Xnn{A$^=";
      stringArray0[2] = "/Ur:Xnn{A$^=";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("/Ur:Xnn{A$^=", true);
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = TypeId.BLOB_NAME;
      SQLUtil.mutatesDataOrStructure("~W_I-'\"ylOv]E[V{\"E");
      String string1 = TypeId.BINARY_NAME;
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Mzm';U|]*Vrh)pMS(y(", "Mzm';U|]*Vrh)pMS(y(", "Mzm';U|]*Vrh)pMS(y(");
      assertEquals("'Mzm';U|]*Vrh)pMS(y('", string0);
      
      String string1 = TypeId.BOOLEAN_NAME;
      TableContainer tableContainer0 = new TableContainer("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRIMARY KEY ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "PRIMARY KEY ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PRIMARY KEY ", true, stringArray0);
      String string2 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \"PRIMARY KEY \" UNIQUE (PRIMARY KEY )", string2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("insertnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertnull", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter table", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.getComponents();
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("insertnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'insertnull' not found in table 'insertnull'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "ZZ(llZK;Z-!X1a*#gb";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ZZ(llZK;Z-!X1a*#gb");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("ZZ(llZK;Z-!X1a*#gb", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-3077.9162113339626));
      StringBuilder stringBuilder3 = stringBuilder2.insert(13, true);
      StringBuilder stringBuilder4 = stringBuilder3.deleteCharAt(13);
      // Undeclared exception!
      try { 
        stringBuilder4.insert((-302480310), 609L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -302480310
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", false);
      boolean boolean0 = FBBlob.SEGMENTED;
      String string0 = TypeId.BLOB_NAME;
      TableContainer tableContainer0 = new TableContainer("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~ W_I - '\"ylOv]E[V{\"E'");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 452, "~W_I-'\"ylOv]E[V{\"E");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sR[QLPzeIQ3}x*Si", dBSchema0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " an ");
      DBSequence dBSequence0 = new DBSequence("", " an ", " an ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBUniqueConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder1 = new StringBuilder(1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DBCatalog dBCatalog0 = new DBCatalog("^Sj");
      BackupCommand.correctFileName("create materialized =iew");
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.removeComments("^Sj");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("drop index");
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      String string0 = AllocPage.TEST_MULTIPLE_ALLOC_PAGE;
      StringBuilder stringBuilder0 = new StringBuilder(104);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("hJps=Q~q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("create unique indexcomment on");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("create unique indexcomment on");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("!fd/4", stringArray0, "!fd/4", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("!fd/4", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((String) null, "!fd/4 as null on ", "\u0001\u019E");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)77;
      String string0 = SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", true);
      assertEquals("~ W_I - '\"ylOv]E[V{\"E'", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~ W_I - '\"ylOv]E[V{\"E'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = PermDescriptor.SEQUENCE_TYPE;
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(2287, "~W_I-'\"ylOv]E[V{\"E");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o\"=", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SEQUENCE", defaultDBTable0, 2287, "h#UL`VAe#T0@TAZ");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("~ W_I - '\"ylOv]E[V{\"E'", defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("o\"=, SEQUENCE, ~ W_I - '\"ylOv]E[V{\"E'", string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      VersionNumber versionNumber0 = VersionNumber.valueOf("/IG)W3DK=s<;O0;?>c");
      dBCatalog0.setDoc("/IG)W3DK=s<;O0;?>c");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("%OsI9f8zfJe:^OtvJT", "jI0(C*X?\"n>~^", versionNumber0);
      dBCatalog0.setDatabase(defaultDatabase0);
      dBCatalog0.getTables();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("%OsI9f8zfJe:^OtvJT.null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBPackage dBPackage0 = new DBPackage((String) null, (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[3] = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"ev1j8vv!43v");
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = RawStoreFactory.PATCH_INITPAGE_RECOVER_ERROR;
      SQLUtil.removeComments("derby.storage.patchInitPageRecoverError");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("bKEx*:s VvtLaU_", true);
      assertEquals("bKEx * : s VvtLaU_", string0);
      
      boolean boolean0 = FBBlob.SEGMENTED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      boolean boolean1 = SQLUtil.isQuery(" join ");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "r+0}";
      stringArray0[1] = "r+0}";
      stringArray0[2] = "r+0}";
      stringArray0[3] = "r+0}";
      stringArray0[4] = "r+0}";
      stringArray0[5] = "r+0}";
      stringArray0[6] = "r+0}";
      stringArray0[7] = "insert";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "r+0}", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (r+0}, r+0}, r+0}, r+0}, r+0}, r+0}, r+0}, insert)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("}W");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("}W");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable2, (String[]) null, defaultDBTable1, (String[]) null);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1111), "()");
      String string2 = PermDescriptor.SEQUENCE_TYPE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamel?un<`**k:", defaultDBTable1, dBDataType0);
      String string3 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("#KEx*:s `vtLYaU_");
      SQLUtil.normalize("select intoderby.storage", true);
      Boolean.valueOf(true);
      String string0 = Page.DIAG_ROWSIZE;
      SQLUtil.mutatesDataOrStructure("drop index");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoderby.storage.keeptransactionlog");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SETTINGS";
      stringArray0[1] = "selectcomment on";
      stringArray0[2] = " (";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("DELETE");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "44^ho(o#6oRX4S";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DBCatalog dBCatalog0 = new DBCatalog("44^ho(o#6oRX4S");
      BackupCommand.correctFileName("44^ho(o#6oRX4S");
      SQLUtil.removeComments("truncat");
      dBCatalog0.setDoc("KBTH~");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("44^ho(o#6oRX4S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 44^ho(o#6oRX4S
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RawStoreFactory.KEEP_TRANSACTION_LOG;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.keepTransactionLog");
      SQLUtil.renderColumnNames((String[]) null);
      DBDataType dBDataType0 = DBDataType.getInstance(3759, "()");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("()", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.setTable(defaultDBTable0);
      DBDataType.getInstance((-187582813), "derby.storage.keepTransactionLog");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      try { 
        Integer.parseUnsignedInt("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"()\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RawStoreFactory.KEEP_TRANSACTION_LOG;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.keepTransactionLog");
      SQLUtil.renderColumnNames((String[]) null);
      DBDataType.getInstance(3759, "()");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      jdbcDataSource1.getLogWriter();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 3759, "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.normalize("+3#rf[wE4IK(3,[", false);
      TableContainer tableContainer0 = new TableContainer("'REFERENCES'");
      tableContainer0.getTable("+ 3 # rf [ wE4IK (3, [");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CHECK ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.isDML("%#t\"TV");
      SQLUtil.isDDL("CHECK ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "/Ur:Xnn{A$^=";
      stringArray0[2] = "/Ur:Xnn{A$^=";
      stringArray0[3] = "/Ur:Xnn{A$^=";
      String string0 = SchemaDescriptor.DEFAULT_USER_NAME;
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("CHECK ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bKEx*:s V3tLaU_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.isDML("CHECK ");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "truncate";
      stringArray0[1] = "-$@}91>ov";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "truncate", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      RowOutputText rowOutputText0 = new RowOutputText("-$@}91>ov", " ADD ", "Sg$hG#SU}", false, ":x$Esno*`S\"1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-$@}91>ov");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null, (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getComponents();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.normalize("GT", true);
      assertEquals("GT", string1);
      
      boolean boolean0 = FBBlob.SEGMENTED;
      String string2 = TypeId.BLOB_NAME;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("zEoEOu BN/l+T");
      assertNull(boolean1);
      
      String string3 = TypeId.BINARY_NAME;
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "table null";
      stringArray0[1] = "zEoEOu BN/l+T";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string4 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (table null, zEoEOu BN/l+T)", string4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RawStoreFactory.KEEP_TRANSACTION_LOG;
      DBSchema dBSchema0 = new DBSchema("zeoeou bn/l+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1KxUbDj", dBSchema0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1KxUbDj");
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      String string1 = DataDictionary.MODULE;
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder1 = new StringBuilder(7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("8;xU#X$`.tON%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.substituteMarkers("Mzm';U|]*Vrh)pMS(y(", "Mzm';U|]*Vrh)pMS(y(", (Object) null);
      String string0 = TypeId.XML_NAME;
      TableContainer tableContainer0 = new TableContainer("alter tableupdatedelete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableupdatedelete");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRIMARY KEY ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string1 = Page.DIAG_ROWSIZE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execselect intoderby.storage.keeptransactionlog");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("hJps=Q~q");
      boolean boolean0 = FBBlob.SEGMENTED;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean1 = SQLUtil.isQuery("create unique indexcomment on");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter sessionalter materialized view");
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("alter materialized viewselect intoderby.storage.keeptransactionlog", false);
      Boolean.valueOf(false);
      String string0 = Page.DIAG_ROWSIZE;
      SQLUtil.mutatesDataOrStructure("select intoderby.storage.keeptransactionlog");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique index");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", true);
      String string0 = "/*";
      SQLUtil.normalize("/*", false);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RawStoreFactory.KEEP_TRANSACTION_LOG;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.keepTransactionLog");
      SQLUtil.renderColumnNames((String[]) null);
      DBDataType dBDataType0 = DBDataType.getInstance(3759, "()");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.storage.keepTransactionLog", defaultDBTable0, dBDataType0, integer0, integer1);
      TableContainer tableContainer0 = new TableContainer("b-K=*90Lwr:{>~U");
      TableContainer tableContainer1 = new TableContainer("()");
      tableContainer0.getTable("b-K=*90Lwr:{>~U");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Integer.divideUnsigned(3759, 8);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("42Y40", (DBTable) null, 3759, " DEFAULT ");
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      Random.setNextRandom(469);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d+q1^BKpfJ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter tableemjnc2e.v6vdb", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "truncate";
      stringArray1[1] = "-$@}91>ov";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "truncate", false, stringArray1);
      dBUniqueConstraint0.addColumnName("org.apache.derby.impl.store.raw.data.DeleteOperation");
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      RowOutputText rowOutputText0 = new RowOutputText("-$@}91>ov", " ADD ", "Sg$hG#SU}", false, ":x$Esno*`S\"1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, false);
      rowOutputText0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-$@}91>ov");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = RawStoreFactory.KEEP_TRANSACTION_LOG;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.storage.keepTransactionLog");
      SQLUtil.renderColumnNames((String[]) null);
      DBDataType dBDataType0 = DBDataType.getInstance(3759, "()");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.storage.keepTransactionLog", defaultDBTable0, dBDataType0, integer0, integer1);
      TableContainer tableContainer0 = new TableContainer("b-K=*90Lwr:{>~U");
      TableContainer tableContainer1 = new TableContainer("()");
      tableContainer0.getTable("b-K=*90Lwr:{>~U");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Integer.divideUnsigned(3759, 8);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("b-K=*90Lwr:{>~U", defaultDBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      Random.setNextRandom(469);
      System.setCurrentTimeMillis(8);
      Class<TableContainer> class0 = TableContainer.class;
      TypedPropertyMutator typedPropertyMutator0 = null;
      try {
        typedPropertyMutator0 = new TypedPropertyMutator(class0, "()", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No property '()' found in class org.databene.jdbacl.model.TableContainer
         //
         verifyException("org.databene.commons.bean.TypedPropertyMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Mzm';U|]*Vrh)pMS(y(", "Mzm';U|]*Vrh)pMS(y(", (Object) null);
      assertEquals("null", string0);
      
      String string1 = TypeId.BOOLEAN_NAME;
      TableContainer tableContainer0 = new TableContainer("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRIMARY KEY ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BOOLEAN";
      StringBuilder stringBuilder0 = new StringBuilder("BOOLEAN");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("BOOLEAN");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Mzm';U|]*Vrh)pMS(y(");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("selectselect intoderby.storage.keeptransactionlog");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ZERO", true, defaultDBTable0, stringArray0, defaultDBTable1, (String[]) null);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 482, "l&t[Qwkj^%M");
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" L&T[QWKJ^%M NULL", string2);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string3 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string3);
      
      Random.setNextRandom((-3058));
      String string4 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container create materialized view", string4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Xx:C'LeJkl1$,'7-", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      TableContainer tableContainer0 = new TableContainer("Xx:C'LeJkl1$,'7-");
      tableContainer0.getComponents();
      String string0 = LogFactory.RUNTIME_ATTRIBUTES;
      boolean boolean0 = FBBlob.SEGMENTED;
      String string1 = TypeId.BLOB_NAME;
      tableContainer0.setOwner(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1019), "BLOB");
      Integer integer0 = new Integer((-1019));
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.__rt.storage.log", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "derby.__rt.storage.log BLOB NULL";
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) "derby.__rt.storage.log";
      objectArray0[3] = (Object) tableContainer0;
      objectArray0[4] = (Object) integer0;
      String string2 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      tableContainer0.isIdentical(defaultDBTable0);
      String string0 = SQLUtil.normalize("g,T", true);
      assertEquals("g, T", string0);
      
      boolean boolean0 = FBBlob.SEGMENTED;
      String string1 = Page.DIAG_ROWSIZE;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "I-`Y?b2!_30E/\"v`Vf");
      String string2 = TypeId.ARRAY_NAME;
      SQLUtil sQLUtil0 = new SQLUtil();
      Integer.min(335544354, 307);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ARRAY";
      stringArray0[1] = "g, T";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rowSize", true, stringArray0);
      String string3 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT rowSize ", string3);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string4 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT rowSize PRIMARY KEY (ARRAY, g, T)", string4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter session";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "", "select");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      stringArray0[3] = "alter session";
      RowOutputText rowOutputText0 = new RowOutputText("select", "select", "alter session", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("exec");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~ W_I - '\"ylOv]E[V{\"E'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = PermDescriptor.SEQUENCE_TYPE;
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(2287, "~W_I-'\"ylOv]E[V{\"E");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o\"=", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SEQUENCE", defaultDBTable0, 2287, "h#UL`VAe#T0@TAZ");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputTextLog0, 335544587);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "o\"=", (Object[]) dBColumnArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("H#UL`VAE#T0@TAZ", string1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.normalize("~W_I-'\"ylOv]E[V{\"E", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~ W_I - '\"ylOv]E[V{\"E'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = PermDescriptor.SEQUENCE_TYPE;
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(2287, "~W_I-'\"ylOv]E[V{\"E");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o\"=", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SEQUENCE", defaultDBTable0, 2287, "h#UL`VAe#T0@TAZ");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("~ W_I - '\"ylOv]E[V{\"E'");
      defaultDBColumn1.setNullable(false);
      SQLUtil.renderColumn(dBColumnArray0[1]);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
