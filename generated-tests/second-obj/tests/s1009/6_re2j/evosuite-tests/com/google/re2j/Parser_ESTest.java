/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:49:37 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        Parser.parse(")5K7V1GQ", 857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Parser.parse("", 361);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 361, (-1986));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "+pzzzF";
      try { 
        Parser.parse("+pzzzF", 8125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PD", (-1504));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        Parser.parse("(J", 128709);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(J`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":", (-1231));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{#", (-1981));
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      int int0 = 80;
      Parser.parse("{#", 80);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-967), 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Parser.parse("+G", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s?", 4145);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".Zk", 32);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-511);
      Regexp regexp0 = Parser.parse("[x0y0-x{10FFF}]", (-511));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[3] = regexp1;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      String string0 = regexp0.name;
      assertNull(string0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp2 = Parser.parse(" N{<", 85);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3621), 11694);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3621
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ".h";
      int int0 = 6809;
      Regexp regexp0 = Parser.parse(".h", 6809);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.flags = 6809;
      regexpArray0[4] = regexp1;
      regexp1.min = 6809;
      regexpArray0[5] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 41, 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k|", 869);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Diacritic", (-1870));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("=?F|", 41);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = new Parser("G(", 63);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("G(", 1477);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `G(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k|", 844);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("(?(?P<?:E/>]`>/D)", 844);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        Parser.parse("3|)ldi@.", 3949);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("C", 5196);
      assertNotNull(regexp0);
      
      String string1 = "(?(?:";
      int int0 = 5;
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.op = regexp_Op1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 448;
      String string0 = regexp1.toString();
      assertEquals("^", string0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = regexp1.name;
      assertNull(string1);
      
      int int1 = (-10795);
      Regexp regexp2 = Parser.parse("^", 365);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      Regexp regexp5 = null;
      try {
        regexp5 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      String string0 = "Old_Persian";
      try { 
        Parser.parse("(", 1409);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?i:E/>]`>/D)", 3049);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?i:E/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "\\pzxFzF!";
      int int0 = (-2867);
      Regexp regexp0 = Parser.parse("pzxFzF!", (-284));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int1 = 6916;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      try { 
        Parser.parse("Ppx00x00)", 1729);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "\\D";
      try { 
        Parser.parse("[:", 6809);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("[", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "\\pzxFzF!";
      int int0 = (-284);
      try { 
        Parser.parse("[:--&K5sLw$", (-284));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:--`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[::]", (-244));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      try { 
        Parser.parse("e%q7NbkZ(||u", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `e%q7NbkZ(||u`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k|h", 117);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      regexp3.reinit();
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp5 = new Regexp(regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp4));
      assertNotNull(regexp6);
      
      boolean boolean0 = regexp0.equals(regexp5);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp6));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp5));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp6));
      assertTrue(regexp2.equals((Object)regexp5));
      assertTrue(regexp3.equals((Object)regexp5));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp6));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp6));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp5);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp2, regexp6);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp5);
      assertNotSame(regexp3, regexp6);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp6);
      
      Regexp regexp7 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertTrue(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertNotNull(regexp7);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|h", 117);
      assertNotNull(regexp0);
      
      regexp0.flags = 117;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      regexp0.op = regexp_Op0;
      Regexp regexp1 = Parser.parse("|h", 10);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("#3Xx@)z{", 1114111);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("", 1114111);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Parser parser0 = new Parser("#3Xx@)z{", 1114111);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-803);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexp2.cap = (-803);
      regexp2.min = (-803);
      int int1 = 13;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexp3.op = regexp_Op1;
      regexp3.subs = null;
      try { 
        Parser.parse("=|>cP)Xoewu}'](zpsr", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = 69811;
      String string0 = "&fd8W";
      int int1 = 3647;
      String string1 = "r<jTQq3YXA_6][";
      int int2 = (-772);
      String string2 = "*";
      try { 
        Parser.parse("*", 257);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "[:";
      try { 
        Parser.parse("[:", 128513);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("p", 100);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", (-10779));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 13, 13);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-154);
      String string0 = "\\s";
      Regexp regexp0 = Parser.parse("s", (-2867));
      assertNotNull(regexp0);
      
      int int1 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 123, 46);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "\\s";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "^\\e\\";
      Regexp regexp0 = Parser.parse("^e", 376);
      assertNotNull(regexp0);
      
      int int0 = 2887;
      Parser parser0 = new Parser(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(parser0);
      
      String string2 = "\\P\\(||u";
      int int1 = 16;
      try { 
        Parser.parse(string2, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k|h", (-1884));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("(??E/>]`>/)", (-458));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("[:^word:]", (-458));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp regexp0 = Parser.parse("i`hx0{4O", (-844));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 85;
      String string0 = "";
      Regexp regexp0 = Parser.parse("", 461);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "(?-m";
      Parser parser0 = new Parser("(?-m", (-1427));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?-m", 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "j{";
      int int0 = (-803);
      Regexp regexp0 = Parser.parse("j{", 41);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      regexp0.max = (-803);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.runes = null;
      regexpArray0[0] = regexp1;
      regexp1.flags = 36;
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      int int0 = 36;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 36, 36);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotNull(regexpArray1);
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      try { 
        Parser.parse(".+*?()|[]{}^$", 120276);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Regexp regexp4 = Parser.parse("'?", 120);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Parser parser0 = new Parser("'?", 120);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp5);
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int int0 = (-962);
      Parser parser0 = new Parser((String) null, 102);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("d", (-932));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 124, (-962));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Yg6Dma3TY7zT<Z{4", 1275);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:Yg6Dma3TY7zT<\\x7fZ\\{4)", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp1.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("Yg6Dma3TY7zT<Z{4", (-2440));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "(?i:";
      int int0 = 2248;
      try { 
        Parser.parse("(?i:", 2248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = Parser.parse("(?-m:$)", 505);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      regexp1.min = 505;
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      boolean boolean0 = regexp2.equals(object0);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        Parser.parse("(?P<", (-1195));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "..|,F;+GyEh_6>";
      String string1 = "N*+xKnanN{^'vh";
      try { 
        Parser.parse("N*+xKnanN{^'vh", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `*+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-1068);
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      String string0 = "\\x";
      Regexp regexp0 = Parser.parse("x", 4);
      assertNotNull(regexp0);
      
      String string1 = "STAR";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("x{", 118784);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 112;
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("[:$-", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:$-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp regexp0 = Parser.parse("<Y,", (-4357));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("<Y,", (-4357));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      int[] intArray0 = new int[3];
      intArray0[0] = (-4357);
      Regexp regexp2 = Parser.parse("missing argument to repetition operator", 582);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("\u0003", (-2783));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      
      Regexp regexp6 = new Regexp(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp5));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      
      String string0 = "(?(?-m:$)";
      int int0 = 4;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        Parser.parse("\u0002)<0XS0eC_[XlSIlf", (-3691));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 10716;
      String string0 = "\\PP0T";
      Regexp regexp0 = Parser.parse("PP0T", 10716);
      assertNotNull(regexp0);
      
      int int1 = (-5731);
      String string1 = "\\p9T14dX?,-5";
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexp1.subs = regexpArray0;
      String string2 = regexp1.toString();
      assertEquals("PP0T", string2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string3 = "com.google.re2j.Unicode";
      int int2 = 2;
      Regexp regexp3 = Parser.parse(string1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      String string4 = "%5_>j~O(q`_zqJzwR.";
      Regexp regexp4 = Parser.parse(string3, int1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      Parser parser0 = new Parser(string4, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(parser0);
      
      try { 
        Parser.parse(string4, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `%5_>j~O(q`_zqJzwR.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Wk^r0a:?ROpC", (-10779));
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-10779);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.runes = intArray0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      regexp0.op = regexp_Op1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 448;
      String string0 = regexp1.toString();
      assertEquals("(?s:.)", string0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = regexp1.name;
      assertNull(string1);
      
      int int1 = (-10795);
      Regexp regexp2 = Parser.parse("(?s:.)", 365);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      Regexp regexp5 = null;
      try {
        regexp5 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp0.toString();
      assertEquals("\\A", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotNull(string0);
      assertNotSame(regexp0, regexp1);
      
      String string1 = regexp0.name;
      assertNull(string1);
      
      Regexp regexp2 = Parser.parse("A", (-10795));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("s", 482);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertEquals("\\B", string0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("B", 505);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      try { 
        Parser.parse("(?-m:$)", 2060);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string0 = regexp1.toString();
      assertEquals("\\B", string0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("B", 505);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("(2-m:$)", 2060);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Parser parser0 = new Parser("P{70fZx{17b[}-x{17b5}x{200b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feffdx{Cff9}-x{ffZb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{007f}x{f0000}-x{fffd}x{100000}-x{10fffd}]", 1);
      assertNotNull(parser0);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp4.equals(regexp0);
      assertTrue(boolean0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 5196;
      Parser parser0 = new Parser("[:nk:]", 5196);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int1 = 1073;
      Regexp regexp0 = Parser.parse("-", 1073);
      assertNotNull(regexp0);
      
      Parser parser1 = new Parser("[:", 1479);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp regexp1 = Parser.parse("-", 1479);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("D", 109);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(".|VI%'$P+", 5196);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse("aFg11a,t", 131);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = Parser.parse("-", 1169);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1518), 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1518
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "'\"&$>:n[--&K5hLw$";
      int int0 = 104;
      try { 
        Parser.parse("'\"&$>:n[--&K5hLw$", 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `--&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp regexp0 = Parser.parse("k|h", 123);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("P*1`h=7xY'$", (-2483));
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("?Z0(<AJ~v=LR", 123);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      
      String string0 = regexp3.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(string0);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = Parser.parse("P*1`h=7xY'$", 806);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotNull(regexp6);
      
      Regexp regexp7 = new Regexp(regexp4);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp0));
      assertNotNull(regexp7);
      
      Regexp regexp8 = Parser.parse("[^x00-x{10FFFF}]", (-2483));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp3));
      assertNotNull(regexp8);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp3);
      
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 97, 1177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-527));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("H/1", (-977));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("", 367);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("?q~/}lRUVl~FOk}3DH", 367);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      
      Parser parser0 = new Parser("H/1", (-875));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      try { 
        Parser.parse("[:x{00}-x{603}x{6dd}x{70fZx{17b[}-x{17b5}x{200b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feffdx{Cff9}-x{ffZb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{007f}x{f0000}-x{fffd}x{100000}-x{10fffd}]", (-731));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "^[?]z9rz!`)-";
      try { 
        Parser.parse("^[?]z9rz!`)-", 1477);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "\\0T";
      int int0 = (-708);
      Regexp regexp0 = Parser.parse("\u0000T", (-708));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      try { 
        Parser.parse("'\"&$>:n[--&K5sLw$", 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `--&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "zik^r0a:`RO\\pC";
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      int int0 = 1984;
      Regexp regexp2 = Parser.parse("\bQ}c", 1984);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp2.equals(object0);
      assertFalse(boolean0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("\bQ}c", 41);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      
      String string1 = ":]";
      int int1 = (-479);
      Regexp regexp5 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      
      Regexp regexp6 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertNotNull(regexp6);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      
      String string2 = null;
      int int2 = (-420);
      Parser parser0 = new Parser(string2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      int int0 = 4;
      Regexp regexp0 = Parser.parse("\u0006", 4);
      assertNotNull(regexp0);
      
      String string0 = "zoe@CgDMjoNt";
      int int1 = 581;
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string1 = "[:^cntrl:]";
      Regexp regexp2 = Parser.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Regexp regexp0 = Parser.parse("K]{I|K$`", 4673);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("N_7MN*@;_R%P|NZ", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("w$", 65039);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      boolean boolean0 = regexp_Op1.isPseudo();
      assertFalse(boolean0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(regexp_Op1, regexp_Op0);
      
      Regexp regexp3 = Parser.parse("w$", 65039);
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      String string0 = regexp2.toString();
      assertEquals("(?i:w\\$)", string0);
      assertTrue(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Parser parser0 = new Parser("(?i:w$)", (-2610));
      assertNotNull(parser0);
      
      Regexp regexp4 = Parser.parse("[::]", (-2610));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      
      Regexp regexp5 = Parser.parse("<2?3U}Ux!8V{Q", 4);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse(";ho~o'e.:", 42);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse(";ho~o'e.:", 42);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int0 = 14;
      Parser parser0 = new Parser("N_7MN*@;_R%P|NZ", 14);
      assertNotNull(parser0);
      
      String string0 = ">h&I5j[|]D";
      Regexp regexp2 = Parser.parse(">h&I5j[|]D", (-2051));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = regexp0.equals(object1);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(object1, object0);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      
      regexpArray0[1] = regexp4;
      Regexp regexp5 = Parser.parse("N_7MN*@;_R%P|NZ", 14);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      
      regexp5.flags = (-1509);
      regexpArray0[2] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, (-2051));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "(?P<";
      Regexp regexp0 = Parser.parse("(?P<", 2);
      assertNotNull(regexp0);
      
      String string1 = regexp0.toString();
      assertEquals("\\(\\?P<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 108;
      String string2 = "[:\\x{70fZ\\x{17b[}-\\x{17b5}\\x{200b}-\\x{200f}\\x{202a}-\\x{202e}\\x{2060}-\\x{2064}\\x{206a}-\\x{206f}\\x{d800}-\\x{f8ff}\\x{feffd\\x{Cff9}-\\x{ffZb}\\x{110bd}\\x{1d173}-\\x{1d17a}\\x{e0001}\\x{e0020}-\\x{007f}\\x{f0000}-\\x{fffd}\\x{100000}-\\x{10fffd}]";
      try { 
        Parser.parse("[:x{70fZx{17b[}-x{17b5}x{200b}-x{200f}x{202a}-x{202e}x{2060}-x{2064}x{206a}-x{206f}x{d800}-x{f8ff}x{feffdx{Cff9}-x{ffZb}x{110bd}x{1d173}-x{1d17a}x{e0001}x{e0020}-x{007f}x{f0000}-x{fffd}x{100000}-x{10fffd}]", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "e\\1";
      int int0 = 4;
      Regexp regexp0 = Parser.parse("e\u0001", 4);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";=o\u0002}a%j?B#lM]Q", (-1355));
      assertNotNull(regexp0);
      
      String string0 = regexp0.name;
      assertNull(string0);
      
      String string1 = "D]l@q<&+fv.";
      int int0 = 4;
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string2 = "ps";
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int1 = 148;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp_Op0.equals((Object)regexp_Op2));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexp1.name = "0;b=c~:|5#o]}Ob";
      regexp0.max = (-332);
      regexp1.runes = null;
      Regexp regexp3 = Parser.parse("0;b=c~:|5#o]}Ob", 448);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      
      try { 
        Parser.parse("3o$[]yG2hBF8Ka<", (-2712));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]yG2hBF8Ka<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "'u\"&$>:n[-&KI56Lw$";
      int int0 = 93;
      Regexp regexp0 = Parser.parse("\u0000", 93);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("'u\"&$>:n[-&KI56Lw$", 706);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("\u0000", 169);
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int1 = 8165;
      Regexp regexp3 = Parser.parse("\u0000", 169);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp3);
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      try { 
        Parser.parse("[:", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 110);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("", 12589);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse("\r", 12589);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      
      Parser parser0 = new Parser("invalid escape sequence", 114);
      assertNotNull(parser0);
      
      Regexp regexp5 = Parser.parse("Rr\f42Yj2@f3", 114);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("\n", (-3932));
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int0 = (-2803);
      Regexp regexp1 = Parser.parse("\n", (-2803));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\n", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotNull(string0);
      assertNotSame(regexp0, regexp1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexpArray0[1] = regexp1;
      regexp1.name = "uI$&A3yB24gJ`0L=";
      int int1 = 118;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 118, (-2803));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "'u\"&$>:n[-&KI56Lw$";
      int int0 = (-1857);
      Regexp regexp0 = Parser.parse("'u\"&$>:n[-&KI56Lw$", (-1857));
      assertNotNull(regexp0);
      
      String string1 = "[:\\xad\\x{600}-\\x{603}\\x{6dd}\\x{70fZ\\x{17b4}-\\x{17b5}\\x{200b}-\\x{200f}\\x{202a}-\\x{202e}\\x{2060}-\\x{2064}\\x{206a}-\\x{206f}\\x{d800}-\\x{f8ff}\\x{feff}\\x{fff9}-\\x{ffZb}\\x{110bd}\\x{1d173}-\\x{1d17a}\\x{e0001}\\x{e0020}-\\x{e007f}\\x{f0000}-\\x{ffffd}\\x{100000}-\\x{10fffd}]";
      int int1 = (-2732);
      String string2 = ".\\49`H7";
      Regexp regexp1 = Parser.parse(".\u00049`H7", (-2732));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse(string2, int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = Parser.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      String string3 = "2\\-z(`A:";
      Parser parser0 = new Parser(string3, int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(parser0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      int int2 = 2825;
      int int3 = 20;
      try { 
        Parser.parse(string0, int3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-&KI56Lw$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = 3953;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("\f", 3953);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 143, 43225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 12);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      
      regexpArray0[2] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12, (-454));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 99;
      Regexp regexp0 = Parser.parse("i`hx0{8]", 99);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("a", 97);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 107, (-17));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp regexp0 = Parser.parse("i`hx0{8]", 93);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:I`HX0\\{8\\])", string0);
      assertNotNull(string0);
      
      regexp0.reinit();
      Object object0 = new Object();
      assertNotNull(object0);
      
      regexp0.flags = 141;
      regexp0.flags = (-3111);
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      Parser parser0 = new Parser("com.google.re2j.Parser$Stack", 93);
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", 93);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("5>", 80);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\A", string0);
      assertNotNull(string0);
      
      String string1 = regexp0.toString();
      assertEquals("\\A", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("[:x00-x{10FFF}]", 85);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "\\5";
      int int0 = 420;
      Regexp regexp0 = Parser.parse("\u0005", 420);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[9];
      int int1 = 61;
      regexp0.reinit();
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      regexp0.name = string0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = ")";
      try { 
        Parser.parse(string1, intArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      try { 
        Parser.parse(")g8i9/A^m'WW<", (-715));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 4351);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:x00-x{10FFFF}]", 85);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      String string0 = regexp1.toString();
      assertEquals("[0-\\{\\}\u017F\u212A]", string0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(string0);
      assertNotSame(regexp1, regexp0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      regexp0.cap = 73;
      Regexp regexp2 = Parser.parse("[:x00-x{10FFFF}]", 13);
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("UShzAS8b&;J{zcL;", 85);
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotNull(regexp6);
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp5;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp3;
      regexpArray0[7] = regexp6;
      regexpArray0[8] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 73, 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int int0 = 46;
      Regexp regexp0 = Parser.parse("$pjvb@e*qmiwU!+", 46);
      assertNotNull(regexp0);
      
      regexp0.cap = (-62);
      Parser parser0 = new Parser("missing closing )", (-1510));
      assertNotNull(parser0);
      
      Regexp regexp1 = Parser.parse("$pjvb@e*qmiwU!+", 17);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("missing closing )", 5279);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      try { 
        Parser.parse("missing closing )", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      String string0 = "e%q7NbkZ\\(||u";
      int int0 = (-151);
      try { 
        Parser.parse("S4/H!z00n[B\"R!e7T", (-151));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[B\"R!e7T`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Regexp regexp0 = Parser.parse("GoKg5a*1`h=7xY'$", 1);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int int0 = (-15);
      Regexp regexp0 = Parser.parse("..|,F;+GyEh_6>", (-15));
      assertNotNull(regexp0);
      
      String string0 = "[:\\x00-\\x{160FFFF}]";
      Regexp regexp1 = Parser.parse("[:x00-x{160FFFF}]", (-15));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      int int1 = 89;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{160FFF`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = 1025;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "\\7";
      Regexp regexp1 = Parser.parse("\u0007", 1025);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Shavian", (-3083));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("(?P<?:E/>]`>/D)", 127);
      assertNotNull(parser0);
      
      regexp0.flags = 2197;
      Regexp regexp1 = Parser.parse("Shavian", (-3083));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("C4t4^0|M5?eQL", (-3083));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp4 = Parser.parse("T>Z)*kx]$7[", 127);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      
      Regexp regexp5 = Parser.parse("PpC", 11350);
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
  }
}
