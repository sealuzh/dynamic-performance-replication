/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:41:34 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.ParserConfig");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName double
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, (-1747), parserConfig0, (-1747));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("pqVY]>P Wv6", parserConfig0, 24180);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : pqVY]>P Wv6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 48);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      TimeZone.getDefault();
      defaultJSONParser0.setDateFormat("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(3, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect float, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gQM]C+]");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : gQM]C+]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".o`P.!Q-4(OkMn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .o`P.!Q-4(OkMn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cbKa{i", 2406);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.config(feature0, true);
      defaultJSONParser0.resolveReference("");
      assertEquals(35174, jSONReaderScanner0.getFeatures());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse number key error", parserConfig0, (-384));
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : parse number key error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("pqVY]>P Wv6", parserConfig0);
      Object object0 = new Object();
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "q4m`@-^Fc";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q4m`@-^Fc");
      Class<Long> class0 = Long.TYPE;
      ArrayList<TimeZone> arrayList0 = new ArrayList<TimeZone>();
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) arrayList0, (Object) zoneInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : q4m`@-^Fc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.DEFAULT_TYPE_KEY = "fastjson.parser.deny";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.JSONPath$SizeSegement", parserConfig0, (-329));
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh", parserConfig0, (-724));
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      defaultJSONParser0.getContext();
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Locale locale0 = Locale.JAPANESE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.handleResovleTask(classLoader0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ,b0.eesfH&CCmm.k ");
      Object object0 = new Object();
      JSON.DEFAULT_PARSER_FEATURE = 2;
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      jSONReaderScanner0.scanType((String) null);
      classLoader0.clearAssertionStatus();
      jSONReaderScanner0.scanType("");
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      classLoader0.getParent();
      Locale locale0 = Locale.UK;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E", parserConfig0, (-1947));
      defaultJSONParser0.resolveReference("java.beans.Transient");
      SymbolTable symbolTable0 = parserConfig0.symbolTable;
      Stack<RuleBasedCollator> stack0 = new Stack<RuleBasedCollator>();
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ",9ZYh";
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh", parserConfig0, (-724));
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : ,9ZYh
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect null, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      IdentityHashMap<RuleBasedCollator, ThrowableDeserializer> identityHashMap0 = new IdentityHashMap<RuleBasedCollator, ThrowableDeserializer>();
      defaultJSONParser0.getObject("");
      defaultJSONParser0.setDateFormat("");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.DEFAULT_TYPE_KEY = "com.alibaba.fastjson.JSONPath$SizeSegement";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("~@L,#A/(6:B*]l*", parserConfig0, (-329));
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("l%/SA_C", 493);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uSFBTu");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zf", parserConfig0, 3);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) defaultJSONParser0);
      ParseContext parseContext1 = defaultJSONParser0.setContext((Object) parseContext0, (Object) defaultJSONParser0);
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("St9w/d8?^~UO");
      ParserConfig parserConfig0 = new ParserConfig(true);
      Long.valueOf((long) 1);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      Object object0 = new Object();
      defaultJSONParser0.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("D$D0pI|=\"^=&x>q");
      ParserConfig parserConfig0 = new ParserConfig();
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.getContext();
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8B /hp)", parserConfig0);
      defaultJSONParser0.getObject("W6'");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 2, json : 8B /hp)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONReaderScanner0, parserConfig0);
      Locale locale0 = Locale.UK;
      defaultJSONParser0.close();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) aSMDeserializerFactory0, (Object) bigDecimal0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5wJ,6Iv.@b");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5wJ,6Iv.@b", parserConfig0, (-736));
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig parserConfig1 = ParserConfig.global;
      parserConfig1.addDeny("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getContext();
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.popContext();
      Field field0 = ParserConfig.getFieldFromCache("5wJ,6Iv.@b", identityHashMap0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cbKa{i", 2399);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Object object0 = new Object();
      defaultJSONParser0.getConfig();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?ly");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(dateFormatSymbols0, jSONReaderScanner0, parserConfig0);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5wJ,6Iv.@b");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5wJ,6Iv.@b", parserConfig0, (-724));
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig parserConfig1 = ParserConfig.global;
      ParserConfig.global = parserConfig1;
      defaultJSONParser0.getLexer();
      JSON.DEFAULT_PARSER_FEATURE = 2963;
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "5wJ,6Iv.@b");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockHijrahDate0, (Object) dimension1);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Rectangle> class0 = Rectangle.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      ParserConfig parserConfig1 = new ParserConfig(false);
      javaBeanInfo0.creatorConstructorParameterTypes = null;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", linkedHashMap0);
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}o,G<p\"6`McC!Qp7)k ", parserConfig0, (-27));
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.resolveReference("B[d!su");
      defaultJSONParser0.checkMapResolve(linkedHashMap0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uVg2@", parserConfig0, 33);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      String string0 = "syntax error, expect [, actual ";
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("syntax error, expect [, actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - @, info : pos 4, json : uVg2@
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,9ZYh
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      BiFunction<Object, Object, Field> biFunction0 = (BiFunction<Object, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      DecimalFormatSymbols.getInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v[f=)u]qV8'");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("v[f=)u]qV8'", parserConfig0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormatSymbols.getInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5wJ,6Iv.@b");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setContext((Object) fileSystemHandling0, (Object) identityHashMap0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", identityHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ,b0.eesfH&CCmm.k ");
      defaultJSONParser0.getObject("");
      JSON.DEFAULT_PARSER_FEATURE = 2;
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}", parserConfig1);
      Feature feature0 = Feature.IgnoreAutoType;
      SymbolTable symbolTable0 = parserConfig0.symbolTable;
      defaultJSONParser0.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeSet<NumberFormat> treeSet0 = new TreeSet<NumberFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("qqb", parserConfig0);
      defaultJSONParser0.checkListResolve(treeSet0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = ", actual ";
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0, (-724));
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p?Z0*txX4`.QNl`rU");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("St9w", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      defaultJSONParser0.getDateFormat();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("St9w/8?^~UVO");
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Long.valueOf((long) 1);
      Feature feature0 = Feature.SupportArrayToBean;
      Feature feature1 = Feature.OrderedField;
      defaultJSONParser0.config(feature1, true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Locale locale0 = Locale.UK;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5qm\"  R}5E", parserConfig0, 47);
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      Rectangle rectangle0 = new Rectangle();
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5wJ,6Iv.@b");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5wJ,6Iv.@b", parserConfig0, (-724));
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig parserConfig1 = ParserConfig.global;
      parserConfig1.addDeny("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.getContext();
      Rectangle rectangle0 = new Rectangle(2, 120);
      defaultJSONParser0.parse((Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "5wJ,6Iv.@b");
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("St9w=/82x^CUVO");
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "St9w=/82x^CUVO");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "St9w=/82x^CUVO");
      defaultJSONParser0.getResolveTaskList();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NaN");
      LinkedHashMap<RenderingHints.Key, DateFormatSymbols> linkedHashMap0 = new LinkedHashMap<RenderingHints.Key, DateFormatSymbols>();
      RenderingHints renderingHints0 = new RenderingHints(linkedHashMap0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "S", (Object) "NaN");
      defaultJSONParser0.setContext(parseContext0, (Object) null, (Object) renderingHints0);
      Long long0 = new Long(0);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask("NaN");
      Vector<JobAttributes> vector0 = new Vector<JobAttributes>();
      JobAttributes.DefaultSelectionType jobAttributes_DefaultSelectionType0 = JobAttributes.DefaultSelectionType.ALL;
      JobAttributes.DestinationType jobAttributes_DestinationType0 = JobAttributes.DestinationType.FILE;
      JobAttributes.MultipleDocumentHandlingType jobAttributes_MultipleDocumentHandlingType0 = JobAttributes.MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES;
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.ONE_SIDED;
      assertNotNull(jobAttributes_SidesType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh", parserConfig0, 5594);
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      parserConfig0.addAccept("7.MX Lh_?Z,p");
      Class<Integer> class0 = Integer.class;
      IdentityHashMap<String, Field> identityHashMap1 = new IdentityHashMap<String, Field>();
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}o,G<p\"6`McC!Qp7)k ", parserConfig0);
      HashMap<JobAttributes, Float> hashMap0 = new HashMap<JobAttributes, Float>();
      Locale locale0 = Locale.ITALY;
      defaultJSONParser0.parseObject((Map) hashMap0, (Object) parserConfig0);
      defaultJSONParser0.getLexer();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("&AX~+nE)FL");
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.setContext((Object) hashMap0, (Object) mockMinguoDate0);
      ParserConfig parserConfig1 = ParserConfig.global;
      defaultJSONParser1.setDateFormat("&AX~+nE)FL");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ParserConfig.getGlobalInstance();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      Rectangle rectangle0 = new Rectangle();
      ClassLoader.getSystemClassLoader();
      Double double0 = new Double(2265.5009556);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-22));
      Object object0 = new Object();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "&K>pw$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName &K>pw$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ,b0.eesfH&CCmm.k ");
      JSON.DEFAULT_PARSER_FEATURE = 2;
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{a", parserConfig0, 106);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",9ZYh");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : ,9ZYh
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Insets insets0 = new Insets((-2579), (-2678), 2230, 0);
      MessageFormat messageFormat0 = new MessageFormat(", name ");
      Object object0 = new Object();
      defaultJSONParser0.setContext((Object) insets0, (Object) jSONReaderScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser1.accept(1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.ParserConfig");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<PageAttributes> class0 = PageAttributes.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny", 1);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parse();
      ParserConfig parserConfig0 = ParserConfig.global;
      defaultJSONParser0.config = parserConfig0;
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(I)");
      defaultJSONParser0.getDateFormat();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      Object object0 = new Object();
      defaultJSONParser0.setContext((Object) identityHashMap0, (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (I)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Locale locale0 = Locale.KOREA;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      ParserConfig.global = null;
      defaultJSONParser0.setResolveStatus((-1057));
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[I", parserConfig0, (-1539));
      List<ExtraProcessor> list0 = new Stack<ExtraProcessor>();
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      Rectangle rectangle0 = new Rectangle();
      IdentityHashMap<MockHijrahDate, MockSimpleDateFormat> identityHashMap0 = new IdentityHashMap<MockHijrahDate, MockSimpleDateFormat>();
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "5wJ,6Iv.@b";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]8ud`_[a", parserConfig0, 1195);
      defaultJSONParser0.getExtraProcessors();
      IdentityHashMap<String, Field> identityHashMap1 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("tp\"%w[U~,vg'ULXY;c>", identityHashMap1);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]8ud`_[a
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("St9w/8?^~UVO");
      ParserConfig parserConfig0 = new ParserConfig(true);
      Long.valueOf((long) 1);
      Feature feature0 = Feature.SupportArrayToBean;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : St9w/8?^~UVO
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0, (-724));
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      identityHashMap0.put("C+HhMs`';X", (Field) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ParserConfig parserConfig2 = new ParserConfig(classLoader0);
      parserConfig2.clearDeserializers();
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader2 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      classLoader2.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0);
      Long.valueOf((long) 0);
      defaultJSONParser0.getConfig();
      defaultJSONParser0.parse((Object) classLoader2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("NaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.clearDeserializers();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig1 = new ParserConfig();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Class<BitSet> class0 = BitSet.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Feature feature0 = Feature.AllowArbitraryCommas;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.getExtraProcessors();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.handleResovleTask(gridBagConstraints0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig1);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      Short short0 = new Short((short)22);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 7, json : , name 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wJ,6Iv.@b");
      Boolean boolean0 = new Boolean("a6\"(sc9\"=");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("a6\"(sc9\"=", parserConfig0);
      Boolean boolean1 = new Boolean("fastjson.parser.autoTypeAccept");
      Hashtable<RenderingHints.Key, RuleBasedCollator> hashtable0 = new Hashtable<RenderingHints.Key, RuleBasedCollator>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) renderingHints0, (Object) "wJ,6Iv.@b");
      defaultJSONParser0.setContext(parseContext0, (Object) hashtable0, (Object) renderingHints0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      Boolean boolean2 = Boolean.FALSE;
      defaultJSONParser0.getObject("");
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("S", parserConfig0);
      Feature feature0 = Feature.SupportArrayToBean;
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5er>AGeA#p9$gx4W", parserConfig1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$", 1456);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 2, json : 5er>AGeA#p9$gx4W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      IdentityHashMap<RuleBasedCollator, ThrowableDeserializer> identityHashMap0 = new IdentityHashMap<RuleBasedCollator, ThrowableDeserializer>();
      Locale locale0 = Locale.forLanguageTag("NaN");
      DecimalFormatSymbols.getInstance(locale0);
      Locale locale1 = Locale.UK;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wJ,6Iv.@b");
      String string0 = "6\"(sc8\"=";
      Boolean boolean0 = new Boolean("6\"(sc8\"=");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6\"(sc8\"=", parserConfig0);
      Boolean boolean1 = new Boolean("fastjson.parser.autoTypeAccept");
      Hashtable<RenderingHints.Key, RuleBasedCollator> hashtable0 = new Hashtable<RenderingHints.Key, RuleBasedCollator>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      Class<Rectangle> class1 = Rectangle.class;
      Class<Rectangle> class2 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wJ,6Iv.@b");
      Boolean boolean0 = new Boolean("6\"(sc8\"=");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6\"(sc8\"=", parserConfig0);
      Boolean boolean1 = new Boolean("fastjson.parser.autoTypeAccept");
      Hashtable<RenderingHints.Key, RuleBasedCollator> hashtable0 = new Hashtable<RenderingHints.Key, RuleBasedCollator>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) renderingHints0, (Object) "wJ,6Iv.@b");
      defaultJSONParser0.setContext(parseContext0, (Object) hashtable0, (Object) renderingHints0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wJ,6Iv.@b");
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      defaultJSONParser0.parse((Object) mockJapaneseDate0);
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      Feature feature0 = Feature.IgnoreAutoType;
      SymbolTable symbolTable0 = parserConfig0.symbolTable;
      defaultJSONParser1.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, json : 6\"(sc8\"=
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
