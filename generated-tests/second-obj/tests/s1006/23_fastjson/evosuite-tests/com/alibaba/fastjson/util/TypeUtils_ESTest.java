/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:07:45 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-709L));
      Boolean boolean0 = TypeUtils.castToBoolean(long0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      long long1 = TypeUtils.fnv1a_64("gn>7b`ZgLY`JZ");
      assertEquals(3196375801074166743L, long1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getParserFeatures(class0);
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.DefaultSelectionType jobAttributes_DefaultSelectionType0 = JobAttributes.DefaultSelectionType.RANGE;
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(jobAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Point> class1 = Point.class;
      int int0 = Opcodes.GETSTATIC;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("getfloatValue", classLoader0, true);
      TypeUtils.castToSqlDate((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("to");
      TypeUtils.loadClass("to");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = Opcodes.GETSTATIC;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("can not cast to boolean, value : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException: can not cast to boolean, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("q`Zd");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("q`Zd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : q`Zd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "o", fieldArray0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      Class<StackOverflowError> class1 = StackOverflowError.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "Ljava/lang/Object;Ljava/lang/String;", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("java.java.lang.Object", class0, class1, class0, (Field) null, (-1730636646), (-1730636646), (-1106954041));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.getClassFromMapping("y00bJ^='R(#e<");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("y00bJ^='R(#e<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y00bJ^='R(#e<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("}8]3");
      TypeUtils.fnv1a_64_lower("}8]3");
      Class<Object> class0 = Object.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("}8]3", "}8]3");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.decapitalize("to");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : to
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToInt((Object) null);
      TypeUtils.castToBigInteger((Object) null);
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("NULL", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      TypeUtils.isGenericParamType(type1);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      TypeUtils.loadClass((String) null);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.unwrapOptional(class1);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("isfillInStackTrace", hashtable0);
      Class<Collator> class0 = Collator.class;
      FieldInfo fieldInfo0 = new FieldInfo("isfillInStackTrace", class0, class0, class0, (Field) null, 37, 1478, 1478);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer(fieldInfo0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.ParserConfig@d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Point> class1 = Point.class;
      TypeUtils.isKotlin(class1);
      Class<TimeZone> class2 = TimeZone.class;
      TypeUtils.isKotlin(class2);
      MockThread mockThread0 = new MockThread();
      TypeUtils.getCollectionItemType(class2);
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "create instance error, class ");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      TypeUtils.isTransient((Method) null);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      TypeUtils.isNumber("<0[nBt/sG`gj0 <UB");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockThread mockThread0 = new MockThread();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.values();
      treeMap0.clone();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.ceilingKey("c_(8E");
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(type0);
      Class<?> class1 = TypeUtils.loadClass("q4`#LNw_]AY}KUiFP/", (ClassLoader) aSMClassLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setDefaultAssertionStatus(false);
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyyMMddHHmmssSSSZ");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("isshortValue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"isshortValue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockThread mockThread0 = new MockThread();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.values();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = new ThreadGroup("cachedHashCode");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "cachedHashCode");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "_js<gT&k{164jFzF$");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      Class<Byte> class0 = Byte.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.getParserFeatures(class0);
      TypeUtils.decapitalize((String) null);
      TypeUtils.getSerializeFeatures(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyyMMddHHmmssSSSZ");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread.getAllStackTraces();
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("'.YR8bRx{ i");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockThread1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thread[MockThread-0,5,isshortValue]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("getgetClass", "getgetClass");
      treeMap0.lowerEntry("6Ogau-(Yz+v]:t(|<");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(";~2BMx").when(function0).apply(any());
      treeMap0.computeIfAbsent(">PJL", function0);
      treeMap0.put(",d'+yQ4xB3:", "Ljava.awt.Point");
      treeMap0.put(">PJL", ">PJL");
      treeMap0.put("6Ogau-(Yz+v]:t(|<", "L");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class class0 = (Class)TypeUtils.getCollectionItemType(type0);
      TypeUtils.isProxy(class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"mockedClassName\":\"java.time.chrono.JapaneseDate\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isNumber("/mC!)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      simpleTimeZone0.setRawOffset((-72));
      TypeUtils.isHibernateInitialized(simpleTimeZone0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/String;");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isHibernateInitialized(type0);
      Class<Dimension> class0 = Dimension.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      weakHashMap0.put("#$|Rc8Z!^I>w:j2^wDd", "#$|Rc8Z!^I>w:j2^wDd");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ThreadGroup threadGroup0 = new ThreadGroup("yyyyMMd7dHHmmssSSSZ");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "yyyyMMd7dHHmmssSSSZ", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyyMMd7dHHmmssSSSZ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.isNumber(",,<zc#:");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      MockThread mockThread0 = new MockThread();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.castToString((Object) null);
      System.setCurrentTimeMillis(5347909877633654828L);
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ThreadGroup threadGroup0 = new ThreadGroup("sZ=b=/Bkv*");
      threadGroup0.interrupt();
      MockThread mockThread0 = new MockThread(threadGroup0, ".;jSY*d![f*@");
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "null", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.loadClass("$>:.V<COR6\"i", (ClassLoader) aSMClassLoader0);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.castToString((Object) null);
      Long long0 = new Long(1478L);
      TypeUtils.castToSqlTime(long0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("YTR9X");
      negativeArraySizeException0.fillInStackTrace();
      noSuchFieldException0.initCause(negativeArraySizeException0);
      TypeUtils.isHibernateInitialized(noSuchFieldException0);
      TypeUtils.isNumber("YTR9X");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchFieldException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.lowerEntry("6Ogau-(Yz+v]:t(|<");
      treeMap0.put("YL3xss?4AR_C,v|0", "YL3xss?4AR_C,v|0");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Point> class0 = Point.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Class<PageAttributes> class1 = PageAttributes.class;
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      TypeUtils.isKotlin(class2);
      TypeUtils.getRawClass(class1);
      WeakHashMap<Double, MessageFormat> weakHashMap0 = new WeakHashMap<Double, MessageFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer> identityHashMap0 = new java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer>();
      Rectangle rectangle0 = new Rectangle();
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 31);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      java.util.IdentityHashMap<String, Object> identityHashMap1 = new java.util.IdentityHashMap<String, Object>(43);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<TimeZone> class0 = TimeZone.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = new ThreadGroup(", json : ");
      mockThread0.getStackTrace();
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, ", json : ");
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1 == boolean0);
      
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.isKotlin(class0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "Ljava.lang.AutoCloseable");
      MockThread mockThread2 = new MockThread(mockThread1);
      ThreadGroup threadGroup0 = new ThreadGroup(", json : ");
      mockThread2.getStackTrace();
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, ", json : ");
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[0];
      threadGroup1.getParent();
      threadGroup1.enumerate(threadGroupArray0);
      threadGroup1.enumerate(threadGroupArray0);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      TypeUtils.castToDouble(atomicInteger0);
      mockThread2.setUncaughtExceptionHandler(threadGroup1);
      TypeUtils.getParserFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.fnv1a_64("z5^APEH{P9(B;iI");
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      NoSuchMethodException noSuchMethodException0 = TypeUtils.cast((Object) null, class0, parserConfig1);
      assertNull(noSuchMethodException0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "^x";
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("^x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ClassLoader.getSystemClassLoader();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ThreadGroup threadGroup0 = new ThreadGroup("N[Jr^4x3`Mr:h/");
      MockThread mockThread0 = new MockThread(threadGroup0, "isshortValue");
      mockThread0.setUncaughtExceptionHandler(threadGroup0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("setToken", classLoader0, true);
      TreeMap<NumberDeserializer, JavaBeanDeserializer> treeMap1 = new TreeMap<NumberDeserializer, JavaBeanDeserializer>();
      boolean boolean0 = TypeUtils.isHibernateInitialized(treeMap1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.values();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyyMMddHHmmssSSSZ");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      mockThread1.getContextClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      TypeUtils.isHibernateInitialized(classLoader0);
      Class<Rectangle> class0 = Rectangle.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.loadClass("$>:.V<COR6\"i", (ClassLoader) aSMClassLoader0);
      TypeUtils.castToBigInteger((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      
      classLoader0.setClassAssertionStatus("8{a^*", true);
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader0, classLoader1);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      ClassLoader classLoader3 = aSMClassLoader0.getParent();
      assertNotNull(classLoader3);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader3);
      assertSame(classLoader2, classLoader1);
      assertSame(aSMClassLoader0, aSMClassLoader1);
      assertSame(classLoader3, classLoader1);
      assertSame(classLoader3, classLoader2);
      assertSame(classLoader3, classLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("[D", (ClassLoader) aSMClassLoader1);
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals("class [D", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader3);
      assertSame(classLoader2, classLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      Class class3 = (Class)TypeUtils.unwrapOptional(typeArray0[0]);
      assertEquals("double", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class1));
      assertNotSame(class3, class1);
      
      typeArray0[1] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      MockThread mockThread0 = new MockThread((Runnable) null, "8{a^*");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader4 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader4);
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertFalse(classLoader4.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader3));
      assertFalse(classLoader4.equals((Object)classLoader2));
      
      ClassLoader classLoader5 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader5);
      assertFalse(classLoader5.equals((Object)classLoader0));
      assertFalse(classLoader5.equals((Object)classLoader3));
      assertFalse(classLoader5.equals((Object)classLoader1));
      assertFalse(classLoader5.equals((Object)classLoader2));
      assertSame(classLoader5, classLoader4);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader5));
      assertFalse(classLoader0.equals((Object)classLoader4));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@8cc24cf8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("iBg8``L1BN", "iBg8``L1BN");
      assertNull(string0);
      
      boolean boolean0 = weakHashMap0.remove((Object) "ply", (Object) "ply");
      assertFalse(boolean0);
      
      String string1 = weakHashMap0.put("ply", "+jDd>kkF<LA?Pt<9d");
      assertNull(string1);
      
      weakHashMap0.clear();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeSupport");
      assertEquals(1461384724327545714L, long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<?> class1 = TypeUtils.loadClass("D@?L1+");
      assertNull(class1);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Double double0 = new Double(1461384724327545714L);
      assertEquals(1.4613847243275456E18, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertNotNull(class1);
      
      Locale locale0 = TypeUtils.toLocale("tTY/4bk.JO~o");
      assertEquals("", locale0.getCountry());
      assertEquals("tty/4bk.jo~o", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("tty/4bk.jo~o", locale0.getLanguage());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class [I", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isArray());
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class2, class1);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertNotNull(class3);
      assertFalse(class1.equals((Object)class2));
      assertNotSame(class1, class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(classLoader1, classLoader0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Hashtable<InternalError, Timestamp> hashtable0 = new Hashtable<InternalError, Timestamp>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<OptionalCodec> class4 = OptionalCodec.class;
      boolean boolean1 = TypeUtils.isProxy(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = TypeUtils.castToString(classLoader1);
      assertNotNull(string0);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isKotlin(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      JSONObject jSONObject0 = new JSONObject(23, false);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentPut("oracle.sql.", classLoader1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.size());
      assertNotNull(jSONObject1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject2 = jSONObject1.fluentClear();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertNotNull(jSONObject2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      Class<InternalError> class1 = InternalError.class;
      InternalError internalError0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject2, class1, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject1);
      assertSame(jSONObject2, jSONObject0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertNotNull(class2);
      
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      boolean boolean3 = TypeUtils.isProxy(class1);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = TypeUtils.isPath(class3);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      Class<?> class4 = TypeUtils.loadClass(")1;raiBQJo;SR");
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.lang.AutoCloseable");
      assertNull(class0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONArray jSONArray0 = new JSONArray(3089);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) classLoader0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertNotNull(jSONArray1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONArray jSONArray3 = jSONArray0.fluentClear();
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray3.size());
      assertTrue(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray3.equals((Object)jSONArray2));
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray2);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertEquals(0, jSONArray3.size());
      assertTrue(jSONArray3.isEmpty());
      assertTrue(jSONArray4.isEmpty());
      assertEquals(0, jSONArray4.size());
      assertNotNull(jSONArray4);
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray2.equals((Object)jSONArray3));
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray3.equals((Object)jSONArray2));
      assertTrue(jSONArray4.equals((Object)jSONArray2));
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = identityHashMap0.put("yyyy-MM-dd HH:mm:ss", "F:=iB5hN!ILZV[");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      HashSet<Throwable> hashSet0 = new HashSet<Throwable>(3089);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(jSONArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeSupport");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeSupport", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTimeoutException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      String string0 = "tTY/4bk.JO~o";
      Class<?> class2 = TypeUtils.getClassFromMapping("tTY/4bk.JO~o");
      assertNull(class2);
      
      Locale locale0 = TypeUtils.toLocale("tTY/4bk.JO~o");
      assertEquals("tty/4bk.jo~o", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("tty/4bk.jo~o", locale0.getLanguage());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isEnum());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class3, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      int int0 = Opcodes.GETSTATIC;
      assertEquals(178, int0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[1]);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";Ljava/lang/reflect/Type;LjaAa/lang/Object;)V", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      Map<String, String> map0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer> identityHashMap0 = new java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      java.util.IdentityHashMap<String, Object> identityHashMap1 = new java.util.IdentityHashMap<String, Object>(43);
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotNull(identityHashMap1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap2 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap2.isEmpty());
      assertEquals(0, identityHashMap2.size());
      assertNotNull(identityHashMap2);
      
      identityHashMap2.putAll(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, identityHashMap2.size());
      assertFalse(identityHashMap2.isEmpty());
      
      Class<Double> class0 = Double.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap2, propertyNamingStrategy0);
      assertEquals(28, identityHashMap2.size());
      assertFalse(identityHashMap2.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Class<SQLDataException> class1 = SQLDataException.class;
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(", json : ");
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1, ", json : ");
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      MockThread mockThread3 = new MockThread(mockThread2);
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertNotNull(mockThread3);
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      MockThread mockThread4 = new MockThread(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isDaemon());
      assertFalse(mockThread4.isInterrupted());
      assertNotNull(mockThread4);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread3));
      
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread1.getStackTrace();
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread4);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "C]JvIfY`!0^,=.u");
      assertEquals("", threadGroup0.getName());
      assertEquals("C]JvIfY`!0^,=.u", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Class<Properties> class1 = Properties.class;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "sw}");
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.setClassAssertionStatus("", false);
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader0, classLoader1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<Float> class0 = Float.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = "E6?xfZ|0X\\:JEpF&";
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertEquals(0, treeMap1.size());
      assertNotNull(treeMap1);
      
      String string1 = treeMap1.floorKey("C5`O]AJt,MS4!^");
      assertEquals(0, treeMap1.size());
      assertNull(string1);
      
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      Class<Double> class2 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(0, treeMap0.size());
      assertNotNull(list0);
      
      boolean boolean0 = TypeUtils.isNumber("'fMJ{}d");
      assertFalse(boolean0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("is");
      assertNull(class0);
      
      String string0 = "shortValue";
      Locale locale0 = TypeUtils.toLocale("shortValue");
      assertEquals("", locale0.getCountry());
      assertEquals("shortvalue", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("shortvalue", locale0.toString());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) locale0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : shortvalue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("w%XQH3IK");
      assertEquals("w%XQH3IK", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("w%XQH3IK", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "");
      assertEquals("w%XQH3IK", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertEquals("w%XQH3IK", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertEquals("w%XQH3IK", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp("");
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      MockThread mockThread0 = new MockThread("java.time.java.lang.NoSuchMethodException");
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      mockThread0.setContextClassLoader(aSMDeserializerFactory0.classLoader);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("getfloatValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getfloatValue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      String string0 = treeMap0.ceilingKey("c_(8E");
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSON.setDefaultTypeKey("-dB,Q&EN1MJ3S&vL4Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      assertNull(class0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ThreadGroup threadGroup0 = new ThreadGroup(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V");
      assertEquals(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "(");
      assertEquals(";Ljava/lang/reflect/Type;Ljava/lang/Object;)V", threadGroup0.getName());
      assertEquals("(", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      LinkedHashMap<BatchUpdateException, ClassLoader> linkedHashMap0 = new LinkedHashMap<BatchUpdateException, ClassLoader>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<TimeZone> class0 = TimeZone.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      int int0 = Opcodes.GETSTATIC;
      assertEquals(178, int0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      boolean boolean1 = TypeUtils.isNumber("+a.f/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Map.Entry<String, String> map_Entry0 = treeMap0.lowerEntry("6Ogau-(Yz+v]:t(|<");
      assertEquals(0, treeMap0.size());
      assertNull(map_Entry0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(";~2BMx").when(function0).apply(any());
      String string0 = treeMap0.computeIfAbsent(">PJL", function0);
      assertEquals(";~2BMx", string0);
      assertEquals(1, treeMap0.size());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(";~2BMx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("is");
      assertNull(class0);
      
      String string0 = "shortValue";
      Locale locale0 = TypeUtils.toLocale("shortValue");
      assertEquals("shortvalue", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("shortvalue", locale0.getLanguage());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) locale0, (Class<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      assertFalse(class0.isPrimitive());
      assertEquals("class com.alibaba.fastjson.serializer.DoubleSerializer", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      assertEquals("isshortValue", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyyMMddHHmmssSSSZ");
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      mockThread1.setUncaughtExceptionHandler(threadGroup0);
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      assertEquals("isshortValue", threadGroup0.getName());
      
      ClassLoader classLoader2 = mockThread1.getContextClassLoader();
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(classLoader2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.serializer.DoubleSerializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertSame(class1, class0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(classLoader0);
      assertTrue(boolean0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertSame(classLoader0, classLoader1);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Boolean boolean1 = new Boolean("yyyyMMddHHmmssSSSZ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Short short0 = new Short((short) (-1477));
      assertEquals((short) (-1477), (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = TypeUtils.castToByte(short0);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = TypeUtils.castToInt(short0);
      assertEquals((-1477), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      String string0 = "&b5_D6r\\_{8c@aq";
      String string1 = ">*Q";
      Class<MockDate> class1 = MockDate.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class1, "ha", fieldArray0);
      assertNull(field0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = new Point(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotNull(point1);
      assertTrue(point1.equals((Object)point0));
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      
      Rectangle rectangle0 = new Rectangle(point1);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      Rectangle rectangle1 = new Rectangle(rectangle0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01);
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
      assertEquals(0.0, rectangle1.getMinX(), 0.01);
      assertEquals(0.0, rectangle1.getX(), 0.01);
      assertEquals(0.0, rectangle1.getY(), 0.01);
      assertEquals(0.0, rectangle1.getHeight(), 0.01);
      assertEquals(0.0, rectangle1.getWidth(), 0.01);
      assertNotNull(rectangle1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(rectangle1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Rectangle[x=0,y=0,width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "can not cast to int, value : ");
      assertFalse(boolean0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      int int0 = Short.toUnsignedInt((short)0);
      assertEquals(0, int0);
      
      int int1 = Short.compare((short)11, (short)11);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZF1[9'rN9@;:K");
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = TypeUtils.isNumber(".,Q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("2S`6]QG51lc)DCN", "gettoString");
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".,Q", ".,Q", 1255, sQLTransientException0);
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals(".,Q", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException0.toString());
      assertEquals(1255, sQLTransientConnectionException0.getErrorCode());
      assertEquals(".,Q", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals(".,Q", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException0.toString());
      assertEquals(1255, sQLTransientConnectionException0.getErrorCode());
      assertEquals(".,Q", sQLTransientConnectionException0.getMessage());
      assertEquals(".,Q", sQLTransientConnectionException1.getSQLState());
      assertEquals(".,Q", sQLTransientConnectionException1.getMessage());
      assertEquals(1255, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean2 = arrayList0.add(sQLTransientException0);
      assertTrue(boolean2);
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("gethashCode");
      assertNotNull(mockIllegalStateException0);
      
      JSONObject jSONObject0 = new JSONObject(680, true);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject1 = new JSONObject(680);
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("1.2.46");
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNull(jSONObject2);
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertTrue(class0.isInterface());
      assertEquals("interface java.util.List", class0.toString());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<DecimalFormat> class1 = DecimalFormat.class;
      boolean boolean3 = TypeUtils.isKotlin(class1);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("kTD*+7gob~#L2");
      assertNull(class0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Class<PageAttributes> class1 = PageAttributes.class;
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      PageAttributes pageAttributes0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(pageAttributes0);
      assertSame(jSONObject0, jSONObject1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<ClassLoader> class2 = ClassLoader.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "WRITE_MAP_NULL_FEATURES";
      stringArray0[1] = "BrowserSecure";
      stringArray0[2] = "toJdbc";
      stringArray0[3] = "o.Fq";
      stringArray0[4] = "g7{u)w";
      stringArray0[5] = "isLenient";
      stringArray0[6] = "`<fZ";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(class1.isSynthetic());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class1.isSynthetic());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      assertSame(class1, class2);
      assertSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeSupport");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((SQLTransientException) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("t/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "sho");
      assertEquals("", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("(Ljava/util/Collection;)V");
      assertEquals("(Ljava/util/Collection;)V", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: (Ljava/util/Collection;)V", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "WRITE_MAP_NULL_FEATURES", noSuchFieldException0);
      assertEquals("(Ljava/util/Collection;)V", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: (Ljava/util/Collection;)V", noSuchFieldException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("WRITE_MAP_NULL_FEATURES", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("sho", "(Ljava/util/Collection;)V");
      assertEquals("java.sql.SQLTransientConnectionException: sho", sQLTransientConnectionException0.toString());
      assertEquals("sho", sQLTransientConnectionException0.getMessage());
      assertEquals("(Ljava/util/Collection;)V", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Hashtable<MockMinguoDate, SQLTransientConnectionException> hashtable0 = new Hashtable<MockMinguoDate, SQLTransientConnectionException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = hashtable0.put(mockMinguoDate0, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: sho", sQLTransientConnectionException0.toString());
      assertEquals("sho", sQLTransientConnectionException0.getMessage());
      assertEquals("(Ljava/util/Collection;)V", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(sQLTransientConnectionException1);
      
      java.util.Date date0 = TypeUtils.castToDate("");
      assertNull(date0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<MockDate> class0 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      Constructor<VerifyError>[] constructorArray0 = (Constructor<VerifyError>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = "6Ogau-(Yz+v]:t(|<";
      Map.Entry<String, String> map_Entry0 = treeMap0.lowerEntry("6Ogau-(Yz+v]:t(|<");
      assertEquals(0, treeMap0.size());
      assertNull(map_Entry0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6Ogau-(Yz+v]:t(|<");
      assertFalse(boolean0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      assertEquals(DayOfWeek.THURSDAY, dayOfWeek0);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(dayOfWeek0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: THURSDAY of type java.time.DayOfWeek
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      assertNotNull(javaObjectDeserializer0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NULL_CAUSE_MESSAGE", parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      SQLTransientException sQLTransientException0 = javaObjectDeserializer0.deserialze(defaultJSONParser0, (Type) null, (Object) null);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNull(sQLTransientException0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put(",d'+yQ4xB3:", (String) null);
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      String string1 = treeMap0.put("sIvfz)|W*R%EYjl&R", ",d'+yQ4xB3:");
      assertEquals(2, treeMap0.size());
      assertNull(string1);
      
      String string2 = treeMap0.put("2YB-a'wSPBg\"l+pVz1", (String) null);
      assertEquals(3, treeMap0.size());
      assertNull(string2);
      
      MockDate mockDate0 = new MockDate(1, 2, (-1795297870), (-1278), 181, 1);
      assertEquals("Wed Apr 30 21:01:01 GMT 4913358", mockDate0.toString());
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-155115911876339000L), long0);
      assertEquals("Wed Apr 30 21:01:01 GMT 4913358", mockDate0.toString());
      
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Wed Apr 30 21:01:01 GMT 4913358", mockDate0.toString());
      assertEquals("Wed Apr 30 21:01:01 GMT 4913358", date0.toString());
      assertNotNull(date0);
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      String string1 = weakHashMap0.put("}pq", "+jDd>kkF<LA?Pt<9d");
      assertNull(string1);
      
      weakHashMap0.clear();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("+jDd>kkF<LA?Pt<9d", true);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", true);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(".000000000");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      Thread[] threadArray0 = new Thread[1];
      threadArray0[0] = (Thread) mockThread0;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader2);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertNotNull(aSMClassLoader1);
      assertFalse(aSMClassLoader1.equals((Object)aSMClassLoader0));
      assertNotSame(aSMClassLoader1, aSMClassLoader0);
      
      parserConfig0.setDefaultClassLoader(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertSame(classLoader0, classLoader2);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Properties> class1 = Properties.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      assertNotNull(javaObjectDeserializer0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NULL_CAUSE_MESSAGE");
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      
      MockDate mockDate0 = new MockDate((-1841840220), (-1841840220), (-1841840220), 2, 0, 2);
      assertEquals("Mon Jul 28 21:17:36 GMT 246741552", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockDate0);
      assertEquals("Mon Jul 28 21:17:36 GMT 246741552", mockDate0.toString());
      assertEquals("246741552-07-28 21:17:36.848", timestamp0.toString());
      assertEquals(848000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      assertEquals("isshortValue", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "yyyyMMddHHmmssSSSZ");
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ThreadGroup threadGroup1 = new ThreadGroup("yyyyMMddHHmmssSSSZ");
      assertEquals("yyyyMMddHHmmssSSSZ", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread0, "isshortValue");
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("yyyyMMddHHmmssSSSZ", threadGroup1.getName());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type[] typeArray0 = new Type[2];
      Class<Character> class1 = Character.TYPE;
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      typeArray0[1] = (Type) class1;
      Class<Boolean> class2 = Boolean.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("boolean", class2.toString());
      assertNotNull(class2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class2);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("boolean", class2.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      SQLTransientException sQLTransientException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("boolean", class2.toString());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(sQLTransientException0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      ClassLoader classLoader2 = aSMClassLoader1.getParent();
      assertNotNull(classLoader2);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass(",X2(Q5l3OMvVum^6", classLoader1);
      assertNull(class1);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(parameterizedTypeImpl1);
      
      MockThread mockThread1 = new MockThread(mockThread0, "getBounds2D");
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader3 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      
      ClassLoader classLoader4 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader4);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader4, classLoader3);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader4);
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ",X2(Q5l3OMvVum^6", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Rectangle rectangle0 = new Rectangle();
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>(3200);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("G9bNSW-k0yby]", classLoader1, true);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(identityHashMap1);
      
      Class<Method> class1 = Method.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap1, propertyNamingStrategy0);
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("G9bNSW-k0yby]");
      assertEquals("G9bNSW-k0yby]", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2|@jS");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2|@jS");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean3 = TypeUtils.isPath(class0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("tVY:l-0});");
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, ">PJL.000000");
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "06d7!~vIg");
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1, "g", 1969L);
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = mockThread2.getContextClassLoader();
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(classLoader1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      MockThread.reset();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader2 = aSMDeserializerFactory1.classLoader.getParent();
      assertEquals("tVY:l-0});", threadGroup0.getName());
      assertEquals(">PJL.000000", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertSame(classLoader2, classLoader1);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertSame(classLoader1, classLoader2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(true);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      Collection collection0 = new Vector<ChronoLocalDate>();
      assertNotNull(collection0);
      
      TypeUtils typeUtils1 = new TypeUtils();
      assertNotNull(typeUtils1);
      assertFalse(typeUtils1.equals((Object)typeUtils0));
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      boolean boolean5 = TypeUtils.isPath(class1);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<MockDate> class0 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      long long0 = TypeUtils.fnv1a_64_lower("j");
      assertEquals((-5808544778525999299L), long0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      Class<Boolean> class1 = Boolean.class;
      parserConfig1.setAsmEnable(false);
      assertFalse(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) treeMap0, true, (PropertyNamingStrategy) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HashSet<Throwable> hashSet0 = new HashSet<Throwable>(60);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      VerifyError verifyError0 = new VerifyError();
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      assertNotNull(verifyError0);
      
      Class<Float> class2 = Float.TYPE;
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("float", class2.toString());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) verifyError0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      int int0 = Opcodes.GETSTATIC;
      assertEquals(178, int0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = null;
      typeArray0[6] = null;
      typeArray0[4] = null;
      typeArray0[5] = (Type) class0;
      String string0 = "Z yN";
      String string1 = TypeUtils.decapitalize("Z yN");
      assertEquals("z yN", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(boolean1 == boolean0);
      
      Class<Float> class2 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Locale locale0 = TypeUtils.toLocale("tTY/4bk.JO~o");
      assertEquals("tty/4bk.jo~o", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("tty/4bk.jo~o", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertEquals("class [I", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class2, class1);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      assertFalse(class1.equals((Object)class2));
      assertNotSame(class1, class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(classLoader1, classLoader0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(locale0);
      assertTrue(boolean1);
      assertEquals("tty/4bk.jo~o", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("tty/4bk.jo~o", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(boolean1 == boolean0);
      
      Class<TimeDeserializer> class4 = TimeDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class4, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [S", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      
      long long0 = TypeUtils.fnv1a_64_lower("to");
      assertEquals(632818452916781220L, long0);
      
      boolean boolean0 = true;
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("_to");
      assertEquals(632818452916781220L, long0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("_to");
      assertEquals("java.lang.NegativeArraySizeException: _to", negativeArraySizeException0.toString());
      assertEquals("_to", negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NegativeArraySizeException: _to
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      
      Class<Properties> class1 = Properties.class;
      Properties properties0 = TypeUtils.cast((Object) "", class1, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(properties0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      
      ThreadGroup threadGroup0 = new ThreadGroup("sho");
      assertEquals("sho", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      assertNotNull(mockIllegalStateException0);
      
      Throwable throwable0 = mockIllegalStateException0.getCause();
      assertNull(throwable0);
      
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockIllegalStateException0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<MockDate> class0 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<Boolean> class1 = Boolean.class;
      Constructor<VerifyError>[] constructorArray0 = (Constructor<VerifyError>[]) Array.newInstance(Constructor.class, 0);
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<HttpCookie> class2 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(object0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = File.pathSeparator;
      assertEquals(":", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Class<Collator> class0 = Collator.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Collator collator0 = TypeUtils.castToEnum((Object) "", class0, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(collator0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(1478L);
      assertEquals(1478L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(long0);
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("6Ogau-(Yz+v]:t(|<");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "R1", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup("");
      assertEquals("", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, "sho");
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      Long long0 = new Long((-1348L));
      assertEquals((-1348L), (long)long0);
      assertNotNull(long0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(breakIterator0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(breakIterator0);
      assertTrue(boolean0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      boolean boolean1 = TypeUtils.isNumber("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) threadGroup1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<TimeZone> class0 = TimeZone.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      int int0 = Opcodes.GETSTATIC;
      assertEquals(178, int0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("9ydI):yX~*_@N");
      assertEquals("9ydi):yx~*_@N", locale0.toString());
      assertEquals("@N", locale0.getCountry());
      assertEquals("9ydi):yx~*", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("");
      assertEquals("java.lang.IllegalThreadStateException: ", illegalThreadStateException0.toString());
      assertEquals("", illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      Class<Long> class0 = Long.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.IllegalThreadStateException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      String string0 = "sZ=b=/Bkv*";
      ThreadGroup threadGroup0 = new ThreadGroup("sZ=b=/Bkv*");
      assertEquals("sZ=b=/Bkv*", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      threadGroup0.interrupt();
      assertEquals("sZ=b=/Bkv*", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, ".;jSY*d![f*@");
      assertEquals("sZ=b=/Bkv*", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup1 = new ThreadGroup("6,ro8");
      assertEquals("6,ro8", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread();
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1, "6,ro8");
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread mockThread3 = new MockThread(threadGroup1, mockThread2, "}bbn~JT8Tm~9/jR&g");
      assertEquals("6,ro8", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(mockThread3);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      
      ClassLoader classLoader1 = mockThread3.getContextClassLoader();
      assertEquals("6,ro8", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(classLoader1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread3, mockThread1);
      assertNotSame(mockThread3, mockThread2);
      
      Locale locale0 = TypeUtils.toLocale("com.alibaba.fastjson.serializer.ContextObjectSerializer");
      assertEquals("com.alibaba.fastjson.serializer.contextobjectserializer", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("com.alibaba.fastjson.serializer.contextobjectserializer", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertEquals("6,ro8", threadGroup1.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertSame(classLoader2, classLoader0);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread3, mockThread1);
      assertNotSame(mockThread3, mockThread2);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.instrumentation.InstrumentingClassLoader@5e47e7a3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^h+,jlEhh#Cg!");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus(".,Q", true);
      classLoader0.setClassAssertionStatus(".,Q", true);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader1.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass(",X2(Q5l3OMvVum^6", classLoader0);
      assertNull(class1);
      assertSame(classLoader0, classLoader1);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertNotNull(parameterizedTypeImpl1);
      
      Locale locale0 = TypeUtils.toLocale(";m>_,8i");
      assertEquals(";m>", locale0.getISO3Language());
      assertEquals(",8I", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";m>_,8I", locale0.toString());
      assertEquals(";m>", locale0.getLanguage());
      assertNotNull(locale0);
      
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl2);
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl1));
      
      Class<?> class2 = TypeUtils.getClass((Type) parameterizedTypeImpl2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
      assertEquals("interface java.util.List", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl1));
      assertNotSame(parameterizedTypeImpl2, parameterizedTypeImpl1);
      
      Class<StackTraceElement> class3 = StackTraceElement.class;
      boolean boolean2 = TypeUtils.isProxy(class3);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, true);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals(1, class0.getModifiers());
      assertEquals("class com.alibaba.fastjson.serializer.DoubleSerializer", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("isshortValue");
      assertEquals("isshortValue", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "isshortValue");
      assertEquals("isshortValue", threadGroup0.getName());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)61;
      byteArray0[6] = (byte)123;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ArrayList<BigInteger> arrayList0 = new ArrayList<BigInteger>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<?> class0 = TypeUtils.loadClass("org.springframework.security.core.userdetails.User");
      assertNull(class0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6Ogau-(Yz+v]:t(|<");
      assertEquals("6Ogau-(Yz+v]:t(|<", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6Ogau-(Yz+v]:t(|<", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, (Type) null, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6Ogau-(Yz+v]:t(|<", (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@457
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class2);
      assertFalse(boolean1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(boolean1 == boolean0);
      
      LinkedHashMap<BatchUpdateException, ClassLoader> linkedHashMap0 = new LinkedHashMap<BatchUpdateException, ClassLoader>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(".;jSY*d![f*@");
      assertEquals(".;jSY*d![f*@", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      threadGroup0.interrupt();
      assertEquals(".;jSY*d![f*@", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "getgetClass");
      assertEquals(".;jSY*d![f*@", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      boolean boolean0 = MockThread.interrupted();
      assertFalse(boolean0);
      
      MockThread mockThread1 = new MockThread();
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      mockThread0.run();
      assertEquals(".;jSY*d![f*@", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("getgetClass");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Boolean boolean2 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer> identityHashMap0 = new java.util.IdentityHashMap<Rectangle, JavaBeanDeserializer>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ParserConfig.global = parserConfig0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      Class<BigDecimal> class0 = BigDecimal.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(2, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      java.util.IdentityHashMap<String, Object> identityHashMap1 = new java.util.IdentityHashMap<String, Object>(43);
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotNull(identityHashMap1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass("G9bNSW-k0yby]", classLoader1, false);
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      java.util.IdentityHashMap<String, String> identityHashMap2 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap2.isEmpty());
      assertEquals(0, identityHashMap2.size());
      assertNotNull(identityHashMap2);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNull(threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(43, 0, 0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=43,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap2, (Type) null, ParserConfig.global);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "authority");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "authority");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = TypeUtils.toLocale(",NBLy<7~wVVli/uPSEU");
      assertEquals(",nbly<7~wvvli/upseu", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(",nbly<7~wvvli/upseu", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",NBLy<7~wVVli/uPSEU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",NBLy<7~wVVli/uPSEU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      long long0 = TypeUtils.fnv1a_64_lower("$K-R$p`})u6>>");
      assertEquals(8314942663410598207L, long0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Class<TimeUnit> class1 = TimeUnit.class;
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
      
      Class<TypeNotPresentException> class3 = TypeNotPresentException.class;
      Field field0 = ParserConfig.getFieldFromCache("com.alibaba.fastjson.util.UTF8Decoder", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("JLZ(I1|Un", class1, class3, class3, (Field) null, 0, 0, 653);
      assertEquals("JLZ(I1|Un", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(653, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertEquals("JLZ(I1|Un", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("JLZ(I1|Un", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(0, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(653, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      
      Method method0 = beanContext0.getMethod();
      assertEquals("JLZ(I1|Un", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("JLZ(I1|Un", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(0, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertNull(method0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(653, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<Byte> class1 = Byte.TYPE;
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "_";
      // Undeclared exception!
      try { 
        TypeUtils.toLocale("_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2|@jS");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean2 = TypeUtils.isPath(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      JSON.DEFFAULT_DATE_FORMAT = "tVY:l-0});";
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("tVY:l-0});", "g");
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("tVY:l-0});");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : tVY:l-0});
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("Ljava.awt.Rectangle");
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertNotNull(noSuchFieldException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, noSuchFieldException0);
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      Insets insets0 = new Insets(5, 114, 114, 114);
      assertNotNull(insets0);
      assertEquals(5, insets0.top);
      assertEquals(114, insets0.bottom);
      assertEquals(114, insets0.left);
      assertEquals(114, insets0.right);
      
      insets0.bottom = 5;
      insets0.set(102, 1894, 40, 12);
      assertEquals(102, insets0.top);
      assertEquals(1894, insets0.left);
      assertEquals(12, insets0.right);
      assertEquals(40, insets0.bottom);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(jdk8DateCodec0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 102;
      intArray0[1] = 114;
      intArray0[2] = 1894;
      intArray0[3] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {102, 114, 1894, 5}, intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("fastjson.parser.autoTypeSupport", "aS>sG1&){2j?0", 114, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertEquals("aS>sG1&){2j?0", sQLTransientConnectionException1.getSQLState());
      assertEquals(114, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: fastjson.parser.autoTypeSupport", sQLTransientConnectionException1.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      boolean boolean0 = arrayList0.add((SQLTransientException) sQLTransientConnectionException1);
      assertTrue(boolean0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransactionRollbackException", sQLNonTransientConnectionException0.toString());
      assertEquals("java.lang.NoSuchFieldException: Ljava.awt.Rectangle", noSuchFieldException0.toString());
      assertEquals("Ljava.awt.Rectangle", noSuchFieldException0.getMessage());
      assertEquals("aS>sG1&){2j?0", sQLTransientConnectionException1.getSQLState());
      assertEquals(114, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: fastjson.parser.autoTypeSupport", sQLTransientConnectionException1.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("C85h+ql!");
      assertNotNull(mockIllegalStateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=102,left=1894,bottom=40,right=12]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      String string0 = treeMap0.ceilingKey("c_(8E");
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      Long long0 = Long.getLong("dd.MM.yyyy", 100L);
      assertEquals(100L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-4922L));
      assertEquals((-4922L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = TypeUtils.castToJavaBean((Object) long1, class0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-4922,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=55,MILLISECOND=78,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      assertFalse(long1.equals((Object)long0));
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertNotNull(classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Map.Entry<String, String> map_Entry0 = treeMap0.lowerEntry("6Ogau-(Yz+v]:t(|<");
      assertEquals(0, treeMap0.size());
      assertNull(map_Entry0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("6Ogau-(Yz+v]:t(|<").when(function0).apply(any());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = treeMap0.computeIfAbsent("6Ogau-(Yz+v]:t(|<", function0);
      assertEquals("6Ogau-(Yz+v]:t(|<", string0);
      assertEquals(1, treeMap0.size());
      assertNotNull(string0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("int");
      assertNotNull(mockIllegalStateException0);
      
      java.util.IdentityHashMap<RenderingHints.Key, IllegalStateException> identityHashMap0 = new java.util.IdentityHashMap<RenderingHints.Key, IllegalStateException>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("6Ogau-(Yz+v]:t(|<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 6Ogau-(Yz+v]:t(|<
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)123;
      boolean boolean0 = TypeUtils.isNumber("![!Z0QnFk\"[d");
      assertFalse(boolean0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      byte[] byteArray1 = TypeUtils.castToBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-76), (byte)4, (byte) (-95), (byte)61, (byte)4, (byte)123}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-76), (byte)4, (byte) (-95), (byte)61, (byte)4, (byte)123}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("");
      assertNotNull(mockIllegalAccessException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSON.setDefaultTypeKey("-dB,Q&EN1MJ3S&vL4Z");
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("yyyy-MM-dd HH:mm:ss");
      assertEquals("yyyy-MM-dd HH:mm:ss", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-yyyy-MM-dd HH:mm:ss", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("yyyy-MM-dd HH:mm:ss#", decimalFormat0.toPattern());
      assertEquals("yyyy-MM-dd HH:mm:ss#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      decimalFormat0.setMinimumFractionDigits(51);
      assertEquals(51, decimalFormat0.getMaximumFractionDigits());
      assertEquals("yyyy-MM-dd HH:mm:ss", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("yyyy-MM-dd HH:mm:ss#.000000000000000000000000000000000000000000000000000", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-yyyy-MM-dd HH:mm:ss", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("yyyy-MM-dd HH:mm:ss#.000000000000000000000000000000000000000000000000000", decimalFormat0.toPattern());
      assertEquals(51, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      
      Integer integer0 = new Integer((-1933004155));
      assertEquals((-1933004155), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = TypeUtils.castToFloat(integer0);
      assertEquals((-1.93300416E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Hashtable<InternalError, Timestamp> hashtable0 = new Hashtable<InternalError, Timestamp>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      VerifyError verifyError0 = new VerifyError("1.2.46");
      assertEquals("1.2.46", verifyError0.getMessage());
      assertEquals("java.lang.VerifyError: 1.2.46", verifyError0.toString());
      assertNotNull(verifyError0);
      
      String string0 = TypeUtils.castToString(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(string0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<Float> class0 = Float.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("vp4vG?uSM=j8?m@jv6E");
      assertNull(class2);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vp4vG?uSM=j8?m@jv6E", "r(AtS<G%4r)C", 94);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: vp4vG?uSM=j8?m@jv6E", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(94, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("vp4vG?uSM=j8?m@jv6E", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("r(AtS<G%4r)C", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("vp4vG?uSM=j8?m@jv6E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : vp4vG?uSM=j8?m@jv6E
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Locale locale0 = TypeUtils.toLocale("tTY/4bk.JO~o");
      assertEquals("", locale0.getISO3Country());
      assertEquals("tty/4bk.jo~o", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("tty/4bk.jo~o", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("class [I", class2.toString());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class2, class1);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      assertFalse(class1.equals((Object)class2));
      assertNotSame(class1, class2);
      
      Class<Integer> class4 = Integer.class;
      Class<Annotation> class5 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class4, class5);
      assertNull(annotation0);
      assertFalse(class4.equals((Object)class0));
      assertNotSame(class4, class0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("tTY/4bk.JO~o", "dF;a{gR*RtRDR.1w%M");
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("class [I", class2.toString());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(class0.equals((Object)class4));
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class0, class4);
      assertNotSame(class2, class1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class5);
      assertFalse(boolean0);
      
      Class class6 = (Class)TypeUtils.unwrapOptional(class1);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class6.isAnnotation());
      assertEquals("int", class6.toString());
      assertEquals(1041, class6.getModifiers());
      assertTrue(class6.isPrimitive());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertNotNull(class6);
      assertFalse(class0.equals((Object)class4));
      assertFalse(class1.equals((Object)class2));
      assertFalse(class6.equals((Object)class2));
      assertNotSame(class0, class4);
      assertNotSame(class1, class2);
      assertSame(class1, class6);
      assertNotSame(class6, class2);
      assertSame(class6, class1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(class3);
      assertTrue(boolean1);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class0.equals((Object)class4));
      assertFalse(class1.equals((Object)class2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(class0, class4);
      assertNotSame(class1, class2);
      assertSame(class1, class6);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("dF;a{gR*RtRDR.1w%M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : dF;a{gR*RtRDR.1w%M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      ClassLoader classLoader2 = aSMClassLoader1.getParent();
      assertNotNull(classLoader2);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-36);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-36)}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(".,Q");
      assertEquals(".,Q", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, "nPz=:%6aG[/[$");
      assertEquals(".,Q", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertEquals(".,Q", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      assertEquals(".,Q", threadGroup0.getName());
      
      BigDecimal bigDecimal0 = new BigDecimal(1015.483);
      assertEquals((byte) (-9), bigDecimal0.byteValue());
      assertEquals((short)1015, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Short short0 = TypeUtils.castToShort(bigDecimal0);
      assertEquals((short)1015, (short)short0);
      assertEquals((byte) (-9), bigDecimal0.byteValue());
      assertEquals((short)1015, bigDecimal0.shortValue());
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[4] = (byte) (-76);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)61;
      byte byte0 = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)4, (byte) (-95), (byte)61, (byte)4, (byte)123, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      TreeMap<String, PropertyProcessableDeserializer> treeMap0 = new TreeMap<String, PropertyProcessableDeserializer>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      PropertyProcessableDeserializer propertyProcessableDeserializer1 = treeMap0.put("unsupport type ", propertyProcessableDeserializer0);
      assertEquals(1, treeMap0.size());
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNull(propertyProcessableDeserializer1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("getfloatValue", classLoader0, false);
      assertNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("0/wgNX3TX[");
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-4), (byte)32, (byte)53, (byte)125, (byte) (-45)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      assertEquals("", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals("", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(stackTraceElementArray0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      assertEquals("", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread0, "can not get javaBeanDeserializer. ");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      MockThread mockThread3 = new MockThread(mockThread2, "can not get javaBeanDeserializer. ");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      
      ClassLoader classLoader3 = mockThread3.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(classLoader3);
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread3, mockThread2);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread3, mockThread1);
      assertSame(classLoader3, classLoader1);
      
      ClassLoader classLoader4 = mockThread3.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertNotNull(classLoader4);
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread3, mockThread2);
      assertNotSame(mockThread3, mockThread0);
      assertNotSame(mockThread3, mockThread1);
      assertSame(classLoader4, classLoader3);
      assertSame(classLoader4, classLoader1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.addDeny("Mc,!j?v~h<6f2");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertSame(classLoader1, classLoader3);
      assertSame(classLoader1, classLoader4);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      HttpCookie httpCookie0 = new HttpCookie("serialVersionUID", "serialVersionUID");
      assertNull(httpCookie0.getPath());
      assertNull(httpCookie0.getCommentURL());
      assertNull(httpCookie0.getComment());
      assertEquals("serialVersionUID=\"serialVersionUID\"", httpCookie0.toString());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getDomain());
      assertEquals(1, httpCookie0.getVersion());
      assertFalse(httpCookie0.getSecure());
      assertFalse(httpCookie0.isHttpOnly());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertFalse(httpCookie0.hasExpired());
      assertEquals("serialVersionUID", httpCookie0.getName());
      assertNull(httpCookie0.getPortlist());
      assertEquals("serialVersionUID", httpCookie0.getValue());
      assertNotNull(httpCookie0);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = null;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[3]);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", true);
      assertSame(classLoader1, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isNumber(".,Q");
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("2S`6]QG51lc)DCN", "gettoString");
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(".,Q", ".,Q", 1255, sQLTransientException0);
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals(1255, sQLTransientConnectionException0.getErrorCode());
      assertEquals(".,Q", sQLTransientConnectionException0.getSQLState());
      assertEquals(".,Q", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals(1255, sQLTransientConnectionException0.getErrorCode());
      assertEquals(".,Q", sQLTransientConnectionException0.getSQLState());
      assertEquals(".,Q", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException0.toString());
      assertEquals(".,Q", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: .,Q", sQLTransientConnectionException1.toString());
      assertEquals(1255, sQLTransientConnectionException1.getErrorCode());
      assertEquals(".,Q", sQLTransientConnectionException1.getSQLState());
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add(sQLTransientException0);
      assertTrue(boolean1);
      assertEquals("java.sql.SQLTransientException: 2S`6]QG51lc)DCN", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("2S`6]QG51lc)DCN", sQLTransientException0.getMessage());
      assertEquals("gettoString", sQLTransientException0.getSQLState());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("gethashCode");
      assertNotNull(mockIllegalStateException0);
      
      JSONObject jSONObject0 = new JSONObject(680, true);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(linkedHashMap1);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      assertNotSame(linkedHashMap1, linkedHashMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject2 = new JSONObject(680);
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertNotNull(jSONObject2);
      assertTrue(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.equals((Object)jSONObject0));
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      JSONObject jSONObject3 = jSONObject2.getJSONObject("1.2.46");
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertNull(jSONObject3);
      assertTrue(jSONObject2.equals((Object)jSONObject1));
      assertTrue(jSONObject2.equals((Object)jSONObject0));
      assertNotSame(jSONObject2, jSONObject0);
      assertNotSame(jSONObject2, jSONObject1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertTrue(class0.isInterface());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      assertFalse(class1.equals((Object)class0));
      assertNotSame(class1, class0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) linkedHashMap0);
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(list0);
      assertFalse(class1.equals((Object)class0));
      assertTrue(linkedHashMap0.equals((Object)linkedHashMap1));
      assertNotSame(class1, class0);
      assertNotSame(linkedHashMap0, linkedHashMap1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus("-QR%.QKb2e3nJ}0+Wz ", true);
      assertSame(classLoader1, classLoader0);
      
      classLoader1.setClassAssertionStatus(".,Q", false);
      assertSame(classLoader1, classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isNumber(".,Q");
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertSame(classLoader1, classLoader0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(aSMDeserializerFactory0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      boolean boolean0 = jSONObject0.remove((Object) null, (Object) propertyProcessableDeserializer0);
      assertFalse(boolean0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.ceilingKey("{Los7");
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Map.Entry<String, String> map_Entry0 = treeMap0.lowerEntry("-dB,Q&EN1MJ3S&vL4Z");
      assertEquals(0, treeMap0.size());
      assertNull(map_Entry0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.security.core.userdetails.User").when(function0).apply(any());
      String string0 = treeMap0.computeIfAbsent("yyyy-MM-dd HH:mm:ss", function0);
      assertEquals("org.springframework.security.core.userdetails.User", string0);
      assertEquals(1, treeMap0.size());
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("[short");
      assertFalse(boolean0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Long long0 = Long.getLong("yyyy-MM-dd HH:mm:ss", (long) 3089);
      assertEquals(3089L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = TypeUtils.isNumber("yyyy-MM-dd HH:mm:ss");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Xl>", "parse enum ", (-1872));
      assertEquals("parse enum ", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals((-1872), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Xl>", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Xl>", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("-dB,Q&EN1MJ3S&vL4Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -dB,Q&EN1MJ3S&vL4Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<Byte> class1 = Byte.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("byte", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("isstream", true);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap1.equals((Object)linkedHashMap0));
      
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("isstream");
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(8, stringCharacterIterator0.getEndIndex());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals('i', stringCharacterIterator0.current());
      assertNotNull(stringCharacterIterator0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      LinkedHashMap<String, String> linkedHashMap2 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap2.size());
      assertTrue(linkedHashMap2.isEmpty());
      assertNotNull(linkedHashMap2);
      assertTrue(linkedHashMap2.equals((Object)linkedHashMap0));
      assertTrue(linkedHashMap2.equals((Object)linkedHashMap1));
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      assertEquals("", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals("", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(stackTraceElementArray0);
      
      MockThread mockThread1 = new MockThread("");
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals("", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      assertEquals("", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThread2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Thread[MockThread-0,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
