/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:35:03 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(52);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 52;
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("?>[zfsZg+F>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(61, (-238), (double) 61, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = new double[18];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray2);
      assertEquals(0, cCSMatrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2498);
      int[] intArray0 = new int[6];
      intArray0[2] = 2498;
      intArray0[4] = 2498;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.add((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix0.iteratorOfColumn(0);
      assertEquals(16, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 1903);
      cCSMatrix0.getColumn(1903);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom(1562L);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix1.determinant();
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.rank();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1471, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix0.copyOfShape(1471, 0);
      assertEquals(2942, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 30;
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = (double) 30;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(30, 30, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3602, 41, 2);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(41, 41, 2);
      CCSMatrix.block(cCSMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(8, vectorAccumulator0);
      Matrix matrix0 = cCSMatrix0.power(8);
      Matrix matrix1 = cCSMatrix0.kroneckerProduct(matrix0);
      CCSMatrix.block(matrix1, matrix0, matrix1, matrix1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1, 3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1168);
      cCSMatrix0.setRow(835, (double) 14);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1177);
      Matrix matrix0 = cCSMatrix0.shuffle();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1168);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(2, 615, 0.0, (Random) mockRandom0);
      CCSMatrix.zero(2, 2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.getRow(1471);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, 62);
      int[] intArray0 = new int[6];
      intArray0[0] = 3914;
      intArray0[1] = 17;
      intArray0[2] = 1304;
      intArray0[3] = 2;
      intArray0[4] = 2463;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(41, 41, 2);
      cCSMatrix0.nonZeroRowMajorIterator();
      cCSMatrix0.minInColumn(2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.maxInColumn(37);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(28, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.copy();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      cCSMatrix0.copyOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.min();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setRow((-1), (double) 3602);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(38, 38, (-1));
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3602, 38, 2);
      cCSMatrix0.setRow(2, (double) 3602);
      cCSMatrix0.copyOfColumns(2);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(38, 38, 2);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1168);
      cCSMatrix0.maxInColumn(19);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1304, 0.0);
      int[] intArray0 = new int[2];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      matrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1471, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.power(8);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2498);
      int[] intArray0 = new int[6];
      intArray0[2] = 2498;
      Locale locale0 = Locale.FRENCH;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.getRow((-3744));
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2498);
      int[] intArray0 = new int[6];
      intArray0[2] = 2498;
      Locale locale0 = Locale.FRENCH;
      ColumnMajorSparseMatrix.zero(71, 2498);
      cCSMatrix0.iteratorOrNonZeroColumns();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      cCSMatrix0.toMatrixMarket(numberFormat0);
      cCSMatrix0.maxInColumn(70);
      cCSMatrix0.getRow((-3744));
      cCSMatrix0.minInColumn(61);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-2585.6197584347);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.minInColumn(0);
      CCSMatrix.from1DArray(558, 1000, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.rotate();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.maxInColumn(37);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.setAll((-3326.972579719786));
      Matrix matrix0 = cCSMatrix0.power(7);
      cCSMatrix0.copyOfRows(7);
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.min();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.setAll((-1.0));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      matrix0.min();
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(4, 2146887621, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      cCSMatrix0.isZeroAt(37, 37);
      cCSMatrix0.maxInColumn(37);
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Matrix matrix0 = cCSMatrix0.copy();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-2422), vectorAccumulator0);
      Matrix matrix1 = cCSMatrix0.power(2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(550, 550, 550);
      cCSMatrix0.maxInColumn(37);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8);
      cCSMatrix0.setAll(8);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1.0));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1304, 1.0);
      SparseMatrix.diagonal(304, 1131.0956364888);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      cCSMatrix1.set(7, 11, 13);
      cCSMatrix0.to((MatrixFactory<Matrix>) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-0.7954753478199446);
      int int0 = 1304;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1304, (-0.7954753478199446));
      int[] intArray0 = new int[2];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.add(matrix0);
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)8, (double)2, (double)2, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      cCSMatrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8);
      cCSMatrix0.setAll(8);
      cCSMatrix0.power(8);
      CCSMatrix.zero(8, 8);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DenseMatrix.constant(1471, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 0);
      cCSMatrix0.copyOfRows(1471);
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 996;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(996, 996, 996);
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17);
      Matrix matrix0 = cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3602, 41, 2);
      Matrix matrix0 = Matrix.unit(3602, 2);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1471, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (-1.0), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      int int0 = 1334;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(663, 1334, 0.6, (Random) mockRandom0);
      cCSMatrix1.toCSV();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int0);
      CCSMatrix cCSMatrix3 = CCSMatrix.block(cCSMatrix2, cCSMatrix2, cCSMatrix0, cCSMatrix2);
      CCSMatrix cCSMatrix4 = CCSMatrix.block(cCSMatrix2, cCSMatrix2, cCSMatrix3, cCSMatrix3);
      cCSMatrix4.blank();
      cCSMatrix4.iteratorOrNonZeroColumns();
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2950;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2950, 2950);
      Matrix.constant(2950, 2950, 2950);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int1 = 2;
      cCSMatrix0.copyOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 38;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, (-1138.0), 690.0, 2.0, (-2007.534367)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      String string0 = "P<^r9f_py`O|tuO!,^";
      ColumnMajorSparseMatrix.fromCSV(string0);
      int int1 = 37;
      double double0 = cCSMatrix0.maxInColumn(int1);
      Double double1 = new Double(double0);
      cCSMatrix0.maxInColumn(int0);
  }
}
