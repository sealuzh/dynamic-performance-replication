/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:30:55 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
      
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      assertNotNull(linkedTreeMap_Node2);
      
      boolean boolean0 = linkedTreeMap_Node2.equals(linkedTreeMap_Node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      linkedTreeMap0.put("mhpd<=1?c7`+", "key == null");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      Integer integer0 = new Integer(230);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedTreeMap0.entrySet();
      Integer.min(1, (-2));
      linkedTreeMap0.containsValue(integer0);
      linkedTreeMap0.entrySet();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      linkedTreeMap_Node0.value = (Object) integer0;
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      Integer integer1 = new Integer((-2431));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>(linkedTreeMap_Node2, integer1, linkedTreeMap_Node1, linkedTreeMap_Node2);
      linkedTreeMap_Node3.setValue(set0);
      linkedTreeMap_Node3.toString();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator1);
      linkedTreeMap1.entrySet();
      linkedTreeMap0.replace(linkedTreeMap_Node0.value, (Object) integer0, (Object) "-2431=[]");
      linkedTreeMap1.replace("JQ:'I&`", "f");
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal((LinkedTreeMap.Node<Object, Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.containsValue("1um|)f0$Mxc7{yHCtE");
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey((Object) null);
      assertNull(linkedTreeMap_Node0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      Object object0 = new Object();
      linkedTreeMap0.findByObject(object0);
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      linkedTreeMap0.containsValue(integer0);
      linkedTreeMap1.clear();
      linkedTreeMap1.findByObject((Object) null);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap2 = new LinkedTreeMap<Object, Integer>(comparator0);
      Integer integer1 = null;
      linkedTreeMap2.put("Xbm.", (Integer) null);
      LinkedTreeMap<Object, String> linkedTreeMap3 = new LinkedTreeMap<Object, String>();
      String string0 = "%pi<,I";
      // Undeclared exception!
      try { 
        linkedTreeMap3.put(linkedTreeMap1, "%pi<,I");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.remove(linkedTreeMap0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.parent;
      Integer integer0 = new Integer((-1));
      Integer.compareUnsigned((-1), (-1));
      linkedTreeMap_Node0.equals(integer0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>((LinkedTreeMap.Node<Object, String>) null, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      Map.Entry.comparingByValue();
      linkedTreeMap_Node2.first();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      Object object0 = new Object();
      linkedTreeMap1.removeInternalByKey(object0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Integer>();
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(linkedTreeMap_Node3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>((Comparator<? super String>) null);
      Object object0 = new Object();
      linkedTreeMap0.get(object0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, linkedTreeMap1, linkedTreeMap_Node1, linkedTreeMap_Node0);
      Integer integer0 = new Integer((-1));
      linkedTreeMap_Node2.value = integer0;
      Integer integer1 = Integer.getInteger("", integer0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      linkedTreeMap_Node3.equals(linkedTreeMap1);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>();
      linkedTreeMap2.find(";*", true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node4.equals(linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node6 = linkedTreeMap_Node5.next;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node7 = linkedTreeMap_Node6.first();
      Integer integer2 = new Integer((-1));
      linkedTreeMap_Node7.equals(integer2);
      linkedTreeMap2.remove((Object) integer1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.parallelStream();
      linkedTreeMap_KeySet0.contains(linkedTreeMap_Node1);
      linkedTreeMap1.findByEntry(linkedTreeMap_Node7);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      assertEquals(1, linkedTreeMap2.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap3 = new LinkedTreeMap<Object, Integer>(comparator1);
      int int0 = linkedTreeMap3.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>((Comparator<? super Object>) null);
      linkedTreeMap0.modCount = 2;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Set<Object> set0 = linkedTreeMap0.keySet();
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.add(linkedTreeMap_Node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = linkedTreeMap0.header;
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      Integer integer0 = new Integer(0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Object>(linkedTreeMap_Node1, integer0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node2, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet1.size();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      Comparator.reverseOrder();
      ToIntFunction<String> toIntFunction0 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = comparator0.thenComparingInt(toIntFunction0);
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>(comparator1);
      linkedTreeMap1.find("X)X2HdQ", false);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "DD", linkedTreeMap_Node0, linkedTreeMap_Node0);
      Object object0 = linkedTreeMap_Node2.setValue("DD");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>(comparator0);
      LinkedTreeMap.Node<Integer, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, String>();
      linkedTreeMap0.root = linkedTreeMap_Node0;
      linkedTreeMap0.entrySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      Map.Entry.comparingByKey();
      Integer integer0 = new Integer((-1819));
      linkedTreeMap0.replace(integer0, "");
      Map.Entry.comparingByValue();
      linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, String>();
      Map.Entry.comparingByKey();
      ToDoubleFunction<Object> toDoubleFunction0 = null;
      // Undeclared exception!
      try { 
        Comparator.comparingDouble((ToDoubleFunction<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node0.toString();
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      linkedTreeMap0.find("lOQ/Wd,x", true);
      linkedTreeMap0.get("I`$X`~");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = linkedTreeMap0.find(object0, true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      linkedTreeMap_Node2.equals(object0);
      linkedTreeMap_Node2.toString();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.contains(linkedTreeMap_Node0);
      assertEquals(1, linkedTreeMap0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator1);
      int int0 = linkedTreeMap1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>((Comparator<? super String>) null);
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.prev;
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      assertFalse(boolean0);
      
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>((Comparator<? super Object>) null);
      linkedTreeMap1.clear();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = linkedTreeMap0.find(object0, true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>(comparator1);
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, Integer>(linkedTreeMap_Node4, "", linkedTreeMap_Node4, linkedTreeMap_Node4);
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node6 = linkedTreeMap_Node5.last();
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node6, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.prev;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>((Comparator<? super String>) null);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      linkedTreeMap_Node2.right = linkedTreeMap_Node3;
      String string0 = "5tm(?ikZW-Ks?+^";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = linkedTreeMap1.header;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node3, (String) null, linkedTreeMap_Node4, linkedTreeMap_Node2);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node6 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node5, "5tm(?ikZW-Ks?+^", linkedTreeMap_Node3, linkedTreeMap_Node4);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        linkedTreeMap1.removeInternal(linkedTreeMap_Node5, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = linkedTreeMap0.find(object0, true);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node1, linkedTreeMap_Node0, linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      linkedTreeMap_Node2.equals("");
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>();
      linkedTreeMap1.find("", true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node4 = new LinkedTreeMap.Node<Object, String>();
      linkedTreeMap_Node0.equals(linkedTreeMap_Node1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node6 = linkedTreeMap_Node5.next;
      linkedTreeMap_Node6.first();
      Integer integer0 = new Integer(1);
      linkedTreeMap_Node5.equals(linkedTreeMap_Node3);
      Object object1 = linkedTreeMap_Node5.key;
      linkedTreeMap1.remove((Object) null);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(linkedTreeMap_Node4);
      linkedTreeMap0.findByEntry(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedTreeMap0.size());
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap2 = new LinkedTreeMap<Object, Integer>(comparator1);
      linkedTreeMap2.size();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap2.new KeySet();
      linkedTreeMap_KeySet0.iterator();
      assertEquals(0, linkedTreeMap2.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Integer integer0 = new Integer(1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet1.remove(linkedTreeMap_Node1);
      assertFalse(boolean0);
      
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap1.remove((Object) linkedTreeMap_EntrySet1);
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(5460);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Integer, Object>(linkedTreeMap_Node0, integer0, linkedTreeMap_Node0, linkedTreeMap_Node2);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node3);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
      
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(5460);
      boolean boolean0 = true;
      linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node2);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap1 = new LinkedTreeMap<String, String>(comparator1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        linkedTreeMap_EntrySet0.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, (String) null, linkedTreeMap_Node0, linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node0.left = linkedTreeMap_Node2;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals((-1), linkedTreeMap0.size());
      
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node2);
      boolean boolean0 = linkedTreeMap1.containsKey(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node0;
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap_Node1.parent = linkedTreeMap_Node0;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.keySet();
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1, "", linkedTreeMap_Node1, linkedTreeMap_Node1);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.parent;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.first();
      Integer integer0 = new Integer((-2258));
      Integer.compare(2176, (-2258));
      linkedTreeMap_Node4.equals(integer0);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      Integer integer1 = new Integer(1868);
      linkedTreeMap1.get(integer1);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node5 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node6 = linkedTreeMap_Node5.last();
      linkedTreeMap_Node6.getValue();
      Object object0 = new Object();
      linkedTreeMap0.remove(object0);
      assertEquals(2, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      Object object0 = new Object();
      linkedTreeMap0.find(object0, true);
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>((Comparator<? super Object>) null);
      linkedTreeMap1.entrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedTreeMap2.entrySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap<Integer, String> linkedTreeMap3 = new LinkedTreeMap<Integer, String>((Comparator<? super Integer>) null);
      linkedTreeMap0.put(linkedTreeMap3, (String) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      linkedTreeMap_Node1.first();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.retainAll(set0);
      linkedTreeMap_KeySet0.iterator();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap1.new KeySet();
      Integer integer0 = new Integer((-1));
      linkedTreeMap_KeySet1.contains(integer0);
      String string0 = "JKOd~d9k&XJ'!";
      linkedTreeMap_KeySet1.remove("JKOd~d9k&XJ'!");
      // Undeclared exception!
      try { 
        linkedTreeMap2.put(linkedTreeMap1, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.internal.LinkedTreeMap is not Comparable
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap0.put("key == null", "");
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_KeySet0, linkedTreeMap_Node1, linkedTreeMap_Node0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = (LinkedTreeMap.KeySet)linkedTreeMap_Node2.key;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedTreeMap_KeySet1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      linkedTreeMap_KeySet0.removeIf(predicate3);
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node0;
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node0.right = linkedTreeMap_Node2;
      linkedTreeMap_Node0.left = linkedTreeMap_Node2;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = Comparator.nullsLast((Comparator<? super Integer>) comparator0);
      LinkedTreeMap<Integer, Integer> linkedTreeMap2 = new LinkedTreeMap<Integer, Integer>(comparator1);
      linkedTreeMap1.containsKey(linkedTreeMap2);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap2.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.keySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "xVl,~U-}^,>vz:,<", linkedTreeMap_Node1, linkedTreeMap_Node1);
      String string0 = linkedTreeMap_Node2.key;
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "");
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Object>();
      Object object0 = linkedTreeMap_Node1.setValue(linkedTreeMap0);
      assertNull(object0);
      
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertFalse(boolean0);
      
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Integer>();
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), (-1), (-563), 673).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.keySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "xVl,~U-}^,>vz:,<", linkedTreeMap_Node1, linkedTreeMap_Node1);
      String string0 = linkedTreeMap_Node2.key;
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "");
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertFalse(linkedTreeMap1.equals((Object)linkedTreeMap0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, 2).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.putIfAbsent("j~=Zi>3@I", "j~=Zi>3@I");
      linkedTreeMap0.put("j~=Zi>3@I", "j~=Zi>3@I");
      linkedTreeMap0.put("j~=Zi>3@I", (String) null);
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), 53, 53, (-1364)).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.keySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "xVl,~U-}^,>vz:,<", linkedTreeMap_Node1, linkedTreeMap_Node1);
      String string0 = linkedTreeMap_Node2.key;
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "");
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)linkedTreeMap2.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), 1167, 458, 1717).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      linkedTreeMap0.keySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "xVl,~U-}^,>vz:,<", linkedTreeMap_Node1, linkedTreeMap_Node1);
      String string0 = linkedTreeMap_Node2.key;
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "");
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap<Object, String> linkedTreeMap1 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(1);
      linkedTreeMap_Node1.prev = linkedTreeMap_Node0;
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node2, linkedTreeMap_Node1);
      linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      assertEquals(1, linkedTreeMap0.size());
      
      LinkedTreeMap<Integer, Integer> linkedTreeMap1 = new LinkedTreeMap<Integer, Integer>();
      assertEquals(0, linkedTreeMap1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2258), 53, 53, (-1364)).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, Object>(linkedTreeMap_Node1, "xVl,~U-}^,>vz:,<", linkedTreeMap_Node1, linkedTreeMap_Node1);
      String string0 = linkedTreeMap_Node2.key;
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "");
      linkedTreeMap0.putIfAbsent("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      linkedTreeMap0.put("xVl,~U-}^,>vz:,<", "xVl,~U-}^,>vz:,<");
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node3 = new LinkedTreeMap.Node<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>();
      Set<Object> set0 = linkedTreeMap1.keySet();
      linkedTreeMap_EntrySet0.retainAll(set0);
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.right = linkedTreeMap_Node0;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0.right, "73rFz^h79", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node0.right = linkedTreeMap_Node2;
      Map.Entry.comparingByKey();
      linkedTreeMap_Node0.left = linkedTreeMap_Node1;
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(1);
      linkedTreeMap_Node1.prev = linkedTreeMap_Node0;
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node2 = linkedTreeMap0.find(integer0, true);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node1.prev, linkedTreeMap_Node1);
      Integer integer1 = linkedTreeMap_Node1.key;
      linkedTreeMap_Node0.equals((Object) null);
      Integer.getInteger("g.?F");
      Integer integer2 = new Integer(0);
      linkedTreeMap0.putIfAbsent(integer0, integer2);
      linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node2);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node4 = linkedTreeMap_Node3.last();
      assertNotNull(linkedTreeMap_Node4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>(comparator0);
      BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Integer, Object>();
      Integer integer0 = new Integer(1);
      linkedTreeMap_Node1.prev = linkedTreeMap_Node0;
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node1.prev, linkedTreeMap_Node1);
      Integer integer1 = linkedTreeMap_Node1.key;
      linkedTreeMap_Node0.equals((Object) null);
      Integer.getInteger("g.?F");
      Integer integer2 = new Integer(0);
      linkedTreeMap0.putIfAbsent(integer0, integer2);
      linkedTreeMap_EntrySet0.remove(abstractMap_SimpleEntry0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      assertNotNull(linkedTreeMap_Node3);
  }
}
