/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:47:26 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      double[][] doubleArray0 = new double[5][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      eigenDecompositor0.matrix = matrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(11, 11, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(11, denseMatrix0.columns());
      assertEquals(11, denseMatrix0.rows());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(11, denseMatrix0.columns());
      assertEquals(11, denseMatrix0.rows());
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      
      Random.setNextRandom(10);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      assertNotNull(denseMatrix0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      assertNotNull(denseMatrix0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(8, 8, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      IntStream intStream0 = mockRandom0.ints(1417L);
      assertNotNull(intStream0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertNotNull(eigenDecompositor0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
  }
}
