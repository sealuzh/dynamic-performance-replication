/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:23:30 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.nio.CharBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2.quoteMeta("\"y8");
      RE2.match("", "");
      RE2 rE2_0 = new RE2("\"y8");
      int[] intArray0 = rE2_0.findIndex("RtkqId);T1'");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      rE2_0.prefixRune = 43394;
      RE2.quoteMeta("|");
      byte[] byteArray0 = new byte[3];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("hBE\"7}");
      rE2_0.findAllIndex("hBE\"7}", (-2562));
      rE2_0.findIndex("UTF-8");
      rE2_0.findSubmatchIndex("hBE\"7}");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.put((Machine) null);
      rE2_0.reset();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-30);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-100);
      byteArray1[4] = (byte) (-82);
      rE2_0.findAllUTF8(byteArray1, (byte) (-100));
      String[] stringArray0 = rE2_0.findSubmatch("UTF-8");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 45);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2(",K.J;");
      List<String> list0 = rE2_0.findAll("", (-1193));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 2017);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("j1{");
      rE2_0.prefix = "Le}pZ:Ik";
      rE2_0.longest = true;
      rE2_0.longest = true;
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[1];
      rE2_0.findAllSubmatch("", 0);
      byteArray0[0] = (byte) (-89);
      rE2_0.findUTF8Index(byteArray0);
      RE2 rE2_1 = RE2.compile("j1{");
      List<int[]> list0 = rE2_1.findAllIndex("j1{", 0);
      assertNull(list0);
      
      RE2 rE2_2 = RE2.compilePOSIX("");
      rE2_0.findAllUTF8(byteArray0, (byte) (-89));
      List<byte[]> list1 = rE2_2.findAllUTF8(byteArray0, (-2636));
      assertNotNull(list1);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("KA%B{");
      rE2_0.reset();
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.replaceAll("", "");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2.match("VSiv_.=x", "VSiv_.=x");
      RE2 rE2_0 = RE2.compileImpl("VSiv_.=x", 0, true);
      rE2_0.findAllIndex("VSiv_.=x", 3375);
      rE2_0.match("VSiv_.=x");
      rE2_0.replaceFirst("Jc==OYe'`(P'x+Tq", "Jc==OYe'`(P'x+Tq");
      String string0 = "com.google.re2j.RE2";
      StringBuilder stringBuilder0 = new StringBuilder();
      RE2 rE2_1 = RE2.compile(" I@q^");
      Machine machine0 = new Machine(rE2_1);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) machine0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete(92, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("iyqn<");
      String string0 = rE2_0.find("Y=Y('W am?*i\"g-vl");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 4, true);
      rE2_0.find("");
      Machine machine0 = new Machine(rE2_0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      String string0 = "dLU5_gTr7: 2$rT";
      int int0 = 3732;
      // Undeclared exception!
      try { 
        charBuffer0.put("dLU5_gTr7: 2$rT", 4, 3732);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("P");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 556);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllIndex("", (-1791));
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-2582));
      rE2_0.replaceAll("", "");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-78);
      rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-78));
      rE2_0.numberOfCapturingGroups();
      rE2_0.findAllSubmatch("", (-2186));
      // Undeclared exception!
      try { 
        RE2.match((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.prefixUTF8;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-1));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      StringBuffer stringBuffer0 = new StringBuffer();
      boolean boolean0 = rE2_0.match(stringBuffer0, 0, 0, 7, (int[]) null, 7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("LEFT_PAREN", (-2789), true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)57;
      rE2_0.findUTF8(byteArray0);
      rE2_0.match("LEFT_PAREN");
      byteArray0[0] = (byte)57;
      byte byte1 = (byte)81;
      byteArray0[1] = (byte)81;
      rE2_0.findAllUTF8(byteArray0, (byte)57);
      rE2_0.findSubmatch("");
      String string0 = "";
      int[] intArray0 = new int[5];
      intArray0[0] = (-2789);
      intArray0[1] = (-2789);
      intArray0[2] = (-2789);
      intArray0[3] = (-2789);
      intArray0[4] = (-2789);
      // Undeclared exception!
      try { 
        rE2_0.match("LEFT_PAREN", (-2789), (-2789), (-2789), intArray0, (-2789));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("OR4YKI,Sr_bl&A9");
      rE2_0.replaceFirst("", "OR4YKI,Sr_bl&A9");
      rE2_0.find("8AIJq$");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllIndex("", 45);
      byte[] byteArray1 = new byte[2];
      RE2.quoteMeta("");
      rE2_0.findAllIndex("", (byte)0);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray1[0] = (byte)0;
      rE2_0.findAllIndex("", 0);
      rE2_0.findAllUTF8(byteArray1, (-1610));
      RE2.quoteMeta("OR4YKI,Sr_bl&A9");
      rE2_0.findUTF8(byteArray0);
      byteArray1[1] = (byte)118;
      rE2_0.findUTF8(byteArray1);
      boolean boolean0 = RE2.match("RUNE_ANY_NOT_NL", "");
      rE2_0.findIndex("CHAR_CLASS");
      rE2_0.toString();
      boolean boolean1 = rE2_0.match("RUNE_ANY_NOT_NL");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("White_Space");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)14);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findSubmatch("");
      int[] intArray0 = new int[9];
      rE2_0.prefixRune = (-2195);
      intArray0[0] = 3823;
      rE2_0.get();
      rE2_0.findIndex("");
      intArray0[1] = 3823;
      intArray0[2] = (-2083);
      intArray0[3] = 3823;
      intArray0[4] = 3823;
      intArray0[5] = 3823;
      intArray0[6] = (-2083);
      intArray0[7] = (-2083);
      intArray0[8] = 3823;
      rE2_0.match("", (-2083), (-2083), 3823, intArray0, 0);
      rE2_0.replaceAll("", "");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("Rk=U@=:d4.jJIT{ {cT", 0, false);
      rE2_0.replaceFirst("Rk=U@=:d4.jJIT{ {cT", "Rk=U@=:d4.jJIT{ {cT");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("|", 212, false);
      rE2_0.toString();
      RE2 rE2_1 = RE2.compilePOSIX("|");
      rE2_1.findAllIndex("|", 212);
      rE2_0.replaceFirst("|", "|");
      rE2_1.replaceAll("@[u*x%9Wc", (String) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 212;
      intArray0[1] = 0;
      intArray0[2] = 212;
      intArray0[3] = 212;
      intArray0[4] = 0;
      intArray0[5] = 212;
      intArray0[6] = 212;
      intArray0[7] = 212;
      intArray0[8] = 212;
      // Undeclared exception!
      try { 
        rE2_1.match("null@null[nullunull*nullxnull%null9nullWnullcnull", 0, 0, 0, intArray0, 1324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", (-2269));
      assertNotNull(list0);
      
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      assertNull(list1);
      
      byteArray0[0] = (byte)0;
      rE2_0.prefixRune = (int) (byte)0;
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertNull(list2);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("<");
      String string0 = "4R$08\\u";
      rE2_0.findIndex(string0);
      rE2_0.match("<", (-2269), (-2294), (-2294), intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      List<byte[]> list3 = rE2_0.findAllUTF8(byteArray0, 40);
      assertEquals(2, list3.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = RE2.compile("");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllIndex("", (-1791));
      byteArray0[0] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      rE2_0.findSubmatch("");
      rE2_0.findIndex("b#4N:9,D8Q-(@");
      RE2.compilePOSIX("");
      rE2_0.findSubmatch("UTF-8");
      rE2_0.findAll("", (-12));
      rE2_0.reset();
      RE2 rE2_1 = RE2.compilePOSIX("");
      assertFalse(rE2_1.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllIndex("", (-1791));
      rE2_0.findAllUTF8Index(byteArray0, (byte)8);
      RE2 rE2_1 = RE2.compileImpl("", 41, true);
      rE2_1.findAll("", (byte)40);
      rE2_1.findAllUTF8Submatch(byteArray0, 65848);
      // Undeclared exception!
      try { 
        rE2_1.findAllIndex((String) null, 65848);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAll("", 5);
      rE2_0.findUTF8(byteArray0);
      rE2_0.findUTF8Submatch(byteArray0);
      RE2 rE2_1 = RE2.compileImpl("", 673, true);
      assertEquals("", rE2_1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("STAR");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.matchUTF8(byteArray0);
      rE2_0.reset();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-5);
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte) (-5);
      byteArray1[4] = (byte) (-5);
      byteArray1[5] = (byte) (-5);
      byteArray1[6] = (byte) (-5);
      byteArray1[7] = (byte) (-5);
      byteArray1[8] = (byte) (-5);
      rE2_0.findAllUTF8(byteArray1, 1889);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte) (-5));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 14);
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-89);
      rE2_0.findUTF8Index(byteArray0);
      RE2 rE2_1 = RE2.compile("");
      int[] intArray0 = rE2_1.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      rE2_1.findUTF8(byteArray0);
      boolean boolean0 = RE2.match(";|", "");
      assertTrue(boolean0);
      
      String string0 = RE2.quoteMeta("Deseret");
      assertEquals("Deseret", string0);
      
      int int1 = rE2_1.numberOfCapturingGroups();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("x|");
      List<String[]> list0 = rE2_0.findAllSubmatch("x|", 119638);
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2(".|");
      int[] intArray0 = rE2_0.findSubmatchIndex(".|");
      assertArrayEquals(new int[] {0, 1}, intArray0);
      
      String string0 = rE2_0.replaceAll(".|", ".|");
      assertEquals(".|.|", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      RE2 rE2_1 = RE2.compileImpl("|EU2~(P7e>-)zH,||\"", 2573, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-59);
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      
      List<String[]> list0 = rE2_1.findAllSubmatch("Tifinagh", (byte)119);
      assertNotNull(list0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("|");
      RE2 rE2_1 = RE2.compileImpl("|EU2~(P7e>-)zH,||\"", 2573, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-59);
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray0, 1352);
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)58;
      byteArray2[1] = (byte)58;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }
}
