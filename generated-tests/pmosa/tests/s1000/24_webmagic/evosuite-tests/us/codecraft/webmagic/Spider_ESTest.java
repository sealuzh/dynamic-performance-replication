/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:35:42 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.forLanguageTag("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "k>p+F4FN-6&t!x[><";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k>p+F4FN-6&t!x[><");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("k>p+F4FN-6&t!x[><");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      Selector[] selectorArray0 = new Selector[6];
      Json json0 = new Json("us.codecraft.webmagic.Spider$Status");
      Class<Selector> class0 = Selector.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setUUID("5l% E%\"k-");
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider4.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Request request0 = new Request("");
      spider0.thread(6);
      spider0.runAsync();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("SY(z8^E@Q|;&sXo");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      String string0 = "yc!s@!tG84s\"Rt";
      Request request1 = request0.addCookie("yc!s@!tG84s\"Rt", "yc!s@!tG84s\"Rt");
      requestArray0[0] = request1;
      Request request2 = request1.setPriority((-3008L));
      requestArray0[1] = request2;
      Request request3 = request0.setPriority((-3008L));
      requestArray0[2] = request3;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.isSpawnUrl();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.isSpawnUrl();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider2 = spider1.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("qH%^$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.downloader((Downloader) null);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      Spider spider3 = spider2.setExitWhenComplete(true);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      Spider spider5 = spider4.thread(137);
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = new Page();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("a", "a");
      Spider spider1 = spider0.setUUID("a");
      spider1.setSpawnUrl(false);
      spider1.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2989, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      spider0.thread((ExecutorService) forkJoinPool0, 125);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath error!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      int int0 = 0;
      Spider.create(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      spider0.sleep(0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider1.clearPipeline();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.getAll((Collection<String>) linkedTransferQueue0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider0.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("");
      boolean boolean0 = true;
      Request request1 = request0.setBinaryContent(true);
      spider2.setUUID("'");
      spider1.setScheduler(queueScheduler0);
      requestArray0[0] = request1;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      FilePipeline filePipeline0 = new FilePipeline();
      ResultItems resultItems0 = new ResultItems();
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems0, (Task) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      spider1.runAsync();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      spider1.setEmptySleepTime(0);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      spider3.clearPipeline();
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.setSpawnUrl(true);
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zset_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_*Q5#{+Q66gC");
      fileCacheQueueScheduler0.poll(spider0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      spider1.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider0.clearPipeline();
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider2.setUUID("");
      Spider spider3 = spider0.addPipeline(collectorPipeline0);
      spider3.getSite();
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      spider0.setUUID(" ");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider spider4 = spider3.startUrls(linkedList1);
      Spider spider5 = spider4.pipeline((Pipeline) null);
      spider5.getCollectorPipeline();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider0.thread((ExecutorService) forkJoinPool0, 364);
      long long0 = spider3.getPageCount();
      assertEquals(0L, long0);
      
      Scheduler scheduler0 = spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertSame(scheduler0, queueScheduler0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "C)C>KLH");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider0.scheduler(fileCacheQueueScheduler0);
      spider2.stop();
      spider0.getScheduler();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      assertTrue(spider3.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) synchronousQueue0);
      Spider spider4 = spider3.startUrls(list1);
      Json json0 = new Json("A");
      spider4.setEmptySleepTime(3933);
      spider3.isExitWhenComplete();
      Spider spider5 = spider0.pipeline((Pipeline) null);
      spider5.getSite();
      String string0 = spider5.getUUID();
      assertNull(string0);
      
      spider1.clearPipeline();
      spider2.checkIfRunning();
      Spider spider6 = spider5.downloader(phantomJSDownloader0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zset_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("?", "zset_");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-103));
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.setScheduler(queueScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      List<Pipeline> list1 = spider3.getAll((Collection<String>) list0);
      spider3.setPipelines(list1);
      PhantomJSDownloader phantomJSDownloader2 = null;
      try {
        phantomJSDownloader2 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zset_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.start();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setUUID("5l% E%\"k-");
      spider1.scheduler(queueScheduler0);
      spider0.thread(4286);
      spider2.runAsync();
      List<Locale.LanguageRange> list0 = null;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        Locale.filterTags(list0, (Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("");
      Request request1 = request0.addCookie("5l% E%\"k-", "");
      request1.getExtras();
      request1.setExtras((Map<String, Object>) null);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      spider1.getCollectorPipeline();
      spider1.sleep(341);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%7");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.setUUID("&.{2,5};|&#.{2,5};");
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      spider3.setSpawnUrl(true);
      spider2.isSpawnUrl();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider2.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider3.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.addPipeline(filePipeline0);
      spider2.getCollectorPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Spider.Status.fromValue(29);
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#/PD&6Qu6cU");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setExitWhenComplete(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#/PD&6Qu6cU";
      stringArray0[1] = "#/PD&6Qu6cU";
      stringArray0[2] = "#/PD&6Qu6cU";
      stringArray0[3] = "#/PD&6Qu6cU";
      stringArray0[4] = "#/PD&6Qu6cU";
      stringArray0[5] = "#/PD&6Qu6cU";
      stringArray0[6] = "#/PD&6Qu6cU";
      stringArray0[7] = "#/PD&6Qu6cU";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k>p+F4FN-6&t!x[><");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      int int0 = spider1.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0, int0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      assertTrue(spider3.isExitWhenComplete());
      
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) synchronousQueue0);
      Spider spider4 = spider3.startUrls(list1);
      Json json0 = new Json("A");
      spider0.getThreadAlive();
      spider4.close();
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
  }
}
