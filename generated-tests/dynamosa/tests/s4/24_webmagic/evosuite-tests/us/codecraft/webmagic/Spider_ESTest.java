/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:42:08 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^#H(:}q*jpuR6-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.isExitWhenComplete();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      spider1.getCollectorPipeline();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "H%C(O[ l";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H%C(O[ l");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("H%C(O[ l");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.pipeline(jsonFilePipeline0);
      Spider spider1 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Init;
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      Spider spider3 = Spider.create(simplePageProcessor0);
      spider3.setUUID("");
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("g} #SAAE^a,dHHLk{}>", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2033, threadFactory0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      spider1.thread(2033);
      spider2.run();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      FilePipeline filePipeline0 = new FilePipeline("");
      // Undeclared exception!
      try { 
        spider2.pipeline(filePipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request(",jik1XiET3");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Spider[] spiderArray0 = new Spider[0];
      spiderMonitor0.register(spiderArray0);
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "us.codecraft.webmagic.Spider");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider1.run();
      spider0.isSpawnUrl();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(1350);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.getCollectorPipeline();
      spider0.pipeline(jsonFilePipeline0);
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      spider1.setExitWhenComplete(false);
      Spider spider2 = spider1.setUUID((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Stopped";
      stringArray0[1] = "/";
      stringArray0[2] = "";
      stringArray0[3] = "Stopped";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "Stopped";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "hIBI9An3";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      String string1 = "j*k)B9";
      Json json0 = new Json("j*k)B9");
      ForkJoinPool.commonPool();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(false);
      String string2 = "";
      Spider spider3 = spider2.setUUID("");
      // Undeclared exception!
      try { 
        spider3.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 440;
      Spider.Status.fromValue(440);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HDm9o_P`3JQ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("threadNum should be more than one!");
      spider0.startUrls(linkedList0);
      Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      Request request0 = new Request();
      page1.addTargetRequest(request0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("HDm9o_P`3JQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y#nB1G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      requestArray0[0] = request1;
      Request request2 = request0.setMethod("y#nB1G");
      requestArray0[1] = request2;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[2] = null;
      Request request3 = new Request();
      requestArray0[3] = request3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      spider0.clearPipeline();
      Page page0 = new Page();
      page0.getJson();
      Request request4 = new Request();
      request2.getExtras();
      Request request5 = request4.setExtras((Map<String, Object>) null);
      request0.addCookie("_cycle_tried_times", "omit-xml-declaration");
      request5.setPriority(10L);
      request0.addHeader("_cycle_tried_times", "_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Scheduler scheduler0 = null;
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VE";
      stringArray0[1] = "VE";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.RegexResult");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider0.pipeline(consolePipeline0);
      spider3.getScheduler();
      spider1.downloader = null;
      Spider spider4 = spider1.setScheduler(fileCacheQueueScheduler0);
      spider2.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "init cache file ");
      spider0.downloader(phantomJSDownloader0);
      fileCacheQueueScheduler0.getLeftRequestsCount(spider0);
      spider3.getScheduler();
      spider4.run();
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertEquals(3, spider_StatusArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider.Status.values();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setUUID("");
      Spider spider4 = spider3.pipeline((Pipeline) null);
      spider4.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|p");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "os*@SK[";
      stringArray0[1] = "|p";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      assertNotNull(collectorPipeline0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y#nB1G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool.commonPool();
      spider0.getPageCount();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "~P8fcc3\"KCf4JZC=cT");
      Request request0 = new Request();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.addCookie((String) null, "Thread interrupted when sleep");
      Request request3 = request2.setPriority(2);
      Request request4 = request3.addCookie("~P8fcc3\"KCf4JZC=cT", ":m[lV.hi0L*[[L");
      request4.setBinaryContent(false);
      request4.addHeader("R[bb~", "^&PF:");
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&7E");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.getCollectorPipeline();
      spider0.setEmptySleepTime(2371);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.scheduler(queueScheduler0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      assertSame(spider3, spider0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider1.runAsync();
      spider1.isExitWhenComplete();
      spider0.stop();
      spider1.scheduler(queueScheduler0);
      //  // Unstable assertion: assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      Json json0 = new Json("j*k)B9");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("eyZ6#/?");
      Spider spider1 = new Spider(simplePageProcessor1);
      spider1.getStatus();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#", "#");
      spider0.scheduler = null;
      spider1.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("&u3_P|l", "us.codecraft.webmagic.Spider");
      spider2.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@+l;uFuGyxrVDB");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      String string0 = "cB}&G";
      Spider spider3 = spider2.setUUID("cB}&G");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("p\"lsrkKELS9ik");
      spider3.scheduler(fileCacheQueueScheduler0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-11), threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      ForkJoinTask.getPool();
      spider1.clearPipeline();
      spider0.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider0.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider3 = spider2.setScheduler(scheduler0);
      spider2.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("s>Qv9F`aa[]]nzV,1", "<Y*ve@ 3}ek]x");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Spider.Status spider_Status1 = Spider.Status.Init;
      spider_Status1.getValue();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", (String) null);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.getScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "");
      phantomJSDownloader0.setRetryNum(2);
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.thread(2);
      Request request0 = new Request("F");
      Request request1 = request0.setPriority((-680L));
      Request request2 = request1.setCharset("_cycle_tried_times");
      Request request3 = request2.setUrl("");
      ResultItems resultItems0 = new ResultItems();
      request0.setCharset("_cycle_tried_times");
      PipedReader pipedReader0 = new PipedReader(2);
      ResultItems resultItems1 = resultItems0.put("", pipedReader0);
      Map<String, Object> map0 = resultItems1.getAll();
      Request request4 = request3.setExtras(map0);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~]O63LWG~]c");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.clearPipeline();
      spider2.getStartTime();
      spider1.getPageCount();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "~P8fcc3\"KCf4JZC=cT");
      // Undeclared exception!
      try { 
        spider0.get("~P8fcc3\"KCf4JZC=cT");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("DXbN)0:Y'GDi9{");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2033, threadFactory0);
      Spider spider3 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 2033);
      spider3.getSpiderListeners();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider0.pipeline(collectorPipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.thread(2);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "CI_0<lsulw*!q8");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".a<rp.g:`8";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Scheduler scheduler0 = spider0.getScheduler();
      assertNotNull(scheduler0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Page page0 = Page.fail();
      page0.toString();
      page0.setSkip(true);
      spider1.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider1.spawnUrl = false;
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(false);
      page1.setHtml((Html) null);
      spider3.extractAndAddRequests(page1, false);
      spider0.getUUID();
      // Undeclared exception!
      try { 
        spider1.sleep((-2948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
      Spider spider3 = Spider.create(simplePageProcessor0);
      spider3.getCollectorPipeline();
      spider1.getCollectorPipeline();
      spider1.close();
      assertSame(spider0, spider1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider1.clearPipeline();
      spider2.getSpiderListeners();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.sleep(1630);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.getCollectorPipeline();
      Scheduler scheduler0 = spider0.getScheduler();
      spider0.setScheduler(scheduler0);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#";
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      spider0.getSite();
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "B\"]CQc}<\"";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B\"]CQc}<\"");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l*RtQ");
      jsonFilePipeline0.getFile("l*RtQ");
      spider0.pipeline(jsonFilePipeline0);
      String string1 = "_C";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      spider0.thread((ExecutorService) null, (int) (byte)3);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("22}%N:;[%*iub");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.getCollectorPipeline();
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      spider0.isSpawnUrl();
      Spider spider1 = spider0.setSpawnUrl(true);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.clearPipeline();
      assertSame(spider0, spider2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider0.pipeline(consolePipeline0);
      spider2.thread((ExecutorService) forkJoinPool0, 3);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider3 = spider2.setScheduler(scheduler0);
      spider2.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("s>Qv9F`aa[]]nzV,1", "<Y*ve@ 3}ek]x");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      spider1.getCollectorPipeline();
      spider3.getScheduler();
      spider2.run();
      spider4.checkIfRunning();
      spider0.sleep(2);
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("|p");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      int int0 = Spider.STAT_RUNNING;
      spider1.setDownloader((Downloader) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$Status", "|p");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"fapjnN3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider2.getScheduler();
      spider0.getThreadAlive();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.downloader((Downloader) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$Status", "\"fapjnN3");
      spider1.getStatus();
      spider2.sleep(40);
      Request request0 = new Request("");
      Request request1 = request0.setPriority(250L);
      Request request2 = request1.putExtra("", scheduler0);
      request1.setBinaryContent(true);
      Request request3 = request2.setBinaryContent(false);
      Map<String, Object> map0 = request1.getExtras();
      Request request4 = request3.setExtras(map0);
      // Undeclared exception!
      try { 
        spider2.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      spider2.spawnUrl = false;
      Scheduler scheduler0 = spider1.getScheduler();
      spider1.setScheduler(scheduler0);
      Spider spider3 = spider2.setUUID("hIBI9An3");
      int int0 = Spider.STAT_STOPPED;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("hIBI9An3", "hIBI9An3");
      spider2.downloader(phantomJSDownloader0);
      spider3.run();
      spider1.setExecutorService(forkJoinPool0);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Spider.Status.fromValue(1359);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("px^7+Lc7y+;\"SHyZ?fe");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setUUID("px^7+Lc7y+;\"SHyZ?fe");
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      Spider spider4 = spider3.clearPipeline();
      Json json0 = new Json("px^7+Lc7y+;\"SHyZ?fe");
      // Undeclared exception!
      try { 
        spider4.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"fapjnN3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider2.getScheduler();
      Spider spider3 = spider2.setScheduler(scheduler0);
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      spider3.downloader(phantomJSDownloader1);
      spider0.getCollectorPipeline();
      spider3.getScheduler();
      spider2.run();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      
      Spider.Status.fromValue((-2878));
      AndSelector andSelector0 = new AndSelector((List<Selector>) null);
      // Undeclared exception!
      try { 
        andSelector0.selectList((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.AndSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      ForkJoinPool.commonPool();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.pipeline((Pipeline) null);
      Date date0 = spider2.getStartTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xrahrz5n0>KvX`>R");
      Spider spider0 = Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";5j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.clearPipeline();
      String string0 = "";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      String string1 = "";
      // Undeclared exception!
      try { 
        spider3.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Scheduler scheduler0 = spider0.getScheduler();
      Spider spider1 = spider0.setScheduler(scheduler0);
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "us.codecraft.webmagic.Spider");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider1.thread(401);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider1.spawnUrl = false;
      spider1.getPageCount();
      assertTrue(spider1.isExitWhenComplete());
      
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(false);
      page1.setHtml((Html) null);
      spider3.extractAndAddRequests(page1, false);
      assertTrue(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider0.downloader(phantomJSDownloader0);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "us.codecraft.webmagic.Spider");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "+aZZ/AYgQ\"S";
      stringArray0[2] = "";
      stringArray0[3] = "us.codecraft.webmagic.Spider";
      stringArray0[4] = "us.codecraft.webmagic.Spider";
      stringArray0[5] = "us.codecraft.webmagic.Spider";
      stringArray0[6] = "us.codecraft.webmagic.Spider";
      stringArray0[7] = "us.codecraft.webmagic.Spider";
      stringArray0[8] = "us.codecraft.webmagic.Spider";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "<Y*ve@ 3}ek]x");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      Spider spider4 = spider3.setSpawnUrl(false);
      spider4.clearPipeline();
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(3, (ForkJoinPool.ForkJoinWorkerThreadFactory) null, (Thread.UncaughtExceptionHandler) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"fapjnN3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider2.getScheduler();
      Spider spider3 = spider2.setScheduler(scheduler0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider0.downloader((Downloader) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider$Status", "\"fapjnN3");
      Spider.Status spider_Status0 = spider3.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      spider2.sleep(40);
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.checkIfRunning();
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      Spider spider3 = spider0.pipeline((Pipeline) null);
      int int0 = spider3.getThreadAlive();
      assertEquals(0, int0);
      
      Spider spider4 = spider0.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider2.scheduler(priorityScheduler0);
      spider4.addPipeline((Pipeline) null);
      spider1.stop();
      spider2.setEmptySleepTime(1295);
      assertEquals(Spider.Status.Init, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" ");
      spider1.setExitWhenComplete(true);
      spider0.getCollectorPipeline();
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y#nB1G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      requestArray0[0] = request1;
      Request request2 = request0.setMethod("y#nB1G");
      requestArray0[1] = request2;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[2] = null;
      Request request3 = new Request();
      requestArray0[3] = request3;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("MdKJ+U%7qfi");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setUUID("MdKJ+U%7qfi");
      Spider spider3 = spider2.scheduler((Scheduler) null);
      Spider spider4 = spider3.thread((ExecutorService) null, 34);
      Spider spider5 = spider4.setExecutorService((ExecutorService) null);
      Spider.Status spider_Status0 = spider5.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      String string0 = spider2.getUUID();
      assertNotNull(string0);
      
      FilePipeline filePipeline0 = new FilePipeline("MdKJ+U%7qfi");
      spider1.addPipeline(filePipeline0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.setExecutorService(forkJoinPool0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      spider1.getThreadAlive();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "<Y*ve@ 3}ek]x");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Z4VkE3u5", ",]Kz[SN");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6>e_O% ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider2.getSite();
      String string0 = spider2.getUUID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "|p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      Spider spider3 = spider2.clearPipeline();
      spider3.scheduler((Scheduler) null);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.clearPipeline();
      spider1.setExitWhenComplete(false);
      Page.fail();
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      AndSelector andSelector0 = new AndSelector((List<Selector>) null);
      // Undeclared exception!
      try { 
        andSelector0.selectList("VE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.AndSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider1.spawnUrl = true;
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(true);
      page1.setHtml((Html) null);
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider0.sleep((-2216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y#nB1G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider2.getScheduler();
      spider0.setScheduler(scheduler0);
      spider1.getThreadAlive();
      spider1.downloader((Downloader) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("y#nB1G", "y#nB1G");
      assertEquals(0, phantomJSDownloader0.getRetryNum());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("b8Y1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'OPYJa]GaB!JWW;");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      spider0.spawnUrl = false;
      spider0.addPipeline(filePipeline0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      stringArray0[1] = "'OPYJa]GaB!JWW;";
      stringArray0[2] = "'OPYJa]GaB!JWW;";
      stringArray0[3] = "";
      stringArray0[4] = "'OPYJa]GaB!JWW;";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      ForkJoinTask.getPool();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      linkedList0.pollFirst();
      linkedList0.add((Pipeline) collectorPipeline0);
      spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B;s%3&[");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Spider.Status spider_Status1 = Spider.Status.Running;
      spider_Status1.getValue();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "'OPYJa]GaB!JWW;";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'OPYJa]GaB!JWW;");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      spider0.spawnUrl = false;
      spider0.addPipeline(filePipeline0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      stringArray0[1] = "'OPYJa]GaB!JWW;";
      spider0.setUUID("yE0zgZc^SD{&S$ql");
      stringArray0[2] = "'OPYJa]GaB!JWW;";
      stringArray0[3] = "";
      stringArray0[4] = "'OPYJa]GaB!JWW;";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      FilePipeline filePipeline0 = new FilePipeline(":%6 -.5NDw#\"~C_");
      spider1.pipeline(filePipeline0);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider2 = spider0.setScheduler(scheduler0);
      spider2.clearPipeline();
      Spider spider3 = spider0.setSpawnUrl(false);
      spider3.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "L MKx2VZ`3u");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      spider4.run();
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      FilePipeline filePipeline0 = new FilePipeline("");
      // Undeclared exception!
      try { 
        spider2.pipeline(filePipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.checkIfRunning();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~]O63LWG~]c");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.clearPipeline();
      spider2.getStartTime();
      spider1.getPageCount();
      Request request0 = new Request();
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.threadNum = (-15);
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider1.spawnUrl = true;
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(true);
      page1.getTargetRequests();
      spider3.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.scheduler(priorityScheduler0);
      spider2.addPipeline(collectorPipeline0);
      spider2.stop();
      spider1.setEmptySleepTime((-2014));
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.clearPipeline();
      spider0.setUUID("t9yq0 6PU|0:j|zxB_");
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = new Spider(simplePageProcessor0);
      spider2.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q)");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1359, 1359, 1359, timeUnit0, synchronousQueue0);
      spider2.thread((ExecutorService) threadPoolExecutor0, 1359);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "VPP?6.AYY";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VPP?6.AYY");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setSpawnUrl(true);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.pipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<Y*ve@ 3}ek]x", "");
      spider0.downloader(phantomJSDownloader0);
      spider0.stop();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIB<A3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider2 = spider1.setScheduler(scheduler0);
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("hIB<A3", "hIB<A3");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider2.getScheduler();
      spider3.run();
      Json json0 = new Json((String) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider2.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Page.fail();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider4 = spider3.startRequest(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider5 = spider4.addRequest(requestArray0);
      spider5.getCollectorPipeline();
      spider4.getScheduler();
      Spider.Status spider_Status0 = spider4.getStatus();
      assertFalse(spider1.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("'OPYJa]GaB!JWW;");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      FilePipeline filePipeline0 = new FilePipeline("");
      spider0.spawnUrl = false;
      Spider spider1 = spider0.setUUID("");
      spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.getStartTime();
      assertEquals(0L, spider0.getPageCount());
      
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      assertSame(spider2, spider0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.getCollectorPipeline();
      spider0.getCollectorPipeline();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ResultItems{fields=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ResultItems{fields=";
      Spider spider1 = spider0.clearPipeline();
      spider0.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertSame(spider0, spider1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider");
      spider1.setExitWhenComplete(false);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H%C(O[ l");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("VE");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider1.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider2 = spider1.setScheduler(scheduler0);
      spider0.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("hIBI9An3", "hIBI9An3");
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      spider2.getScheduler();
      spider3.run();
      spider3.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.commonPool();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider0.checkIfRunning();
      assertSame(spider0, spider1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("c9D 4F)@c", "gp!I-O]c-vVeHA*r~E");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("/");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider4 = spider3.scheduler(duplicateRemovedScheduler0);
      assertTrue(spider4.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("] I");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Json json0 = page1.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider4.setPipelines((List<Pipeline>) null);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      json0.toList(class1);
      Class<String> class2 = String.class;
      json0.toList(class2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) null, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"fapjnN3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider0.pipeline(collectorPipeline0);
      spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hIBI9An3");
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("us.codecraft.webmagic.monitor.SpiderStatus");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("hIBI9An3", "us.codecraft.webmagic.Spider$Status");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "us.codecraft.webmagic.Spider");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.executorService = (ExecutorService) forkJoinPool0;
      stringArray0[0] = "?";
      ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider2.thread(401);
      spider2.run();
      spider1.getStartTime();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(3904);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.clearPipeline();
      spider2.getScheduler();
      spider0.sleep(0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3904, threadPoolExecutor_DiscardOldestPolicy0);
      Spider spider3 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 418);
      assertEquals(Spider.Status.Init, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("chz?Qdc'HB30&k~");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("chz?Qdc'HB30&k~");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider3.thread((ExecutorService) null, (-3267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "|p");
      spider0.downloader(phantomJSDownloader0);
      spider1.getCollectorPipeline();
      spider1.getScheduler();
      spider0.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("dVii6egr1bb8>T");
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.utils.UrlUtils");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Init");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Y*ve@ 3}ek]x");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.sleep(0);
      assertEquals(Spider.Status.Running, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(2123);
      assertSame(spider0, spider1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startUrls(list0);
      Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      spider0.run();
      spider2.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      ForkJoinPool.commonPool();
      Spider spider2 = spider0.startRequest((List<Request>) null);
      Spider spider3 = spider1.setSpiderListeners((List<SpiderListener>) null);
      spider3.start();
      spider2.checkIfRunning();
      assertSame(spider0, spider2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Spider.Status.fromValue(1359);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.thread(1359);
      Scheduler scheduler0 = spider2.getScheduler();
      spider1.setScheduler(scheduler0);
      spider2.getThreadAlive();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "__8nafaep>]k");
      spider2.setUUID("");
      spider2.getScheduler();
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider0.pipeline(consolePipeline0);
      Scheduler scheduler0 = spider2.getScheduler();
      Spider spider3 = spider0.setScheduler((Scheduler) null);
      spider2.setUUID("");
      int int0 = Spider.STAT_STOPPED;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VE", "~8@5ZF}[V%@/QW");
      Spider spider4 = spider0.downloader(phantomJSDownloader0);
      spider4.setScheduler(scheduler0);
      Spider spider5 = spider1.thread(1086);
      spider5.run();
      spider3.scheduler(scheduler0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      Spider[] spiderArray0 = new Spider[0];
      spiderMonitor0.register(spiderArray0);
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      ForkJoinPool.commonPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      spider2.run();
      spider1.run();
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#";
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.getPageCount();
      spider0.getCollectorPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.addPipeline(filePipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(true);
      page1.setHtml((Html) null);
      // Undeclared exception!
      try { 
        spider0.thread((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider2.addPipeline(collectorPipeline0);
      Page page0 = Page.fail();
      page0.toString();
      Page page1 = page0.setSkip(true);
      page1.setHtml((Html) null);
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.getCollectorPipeline();
      spider0.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*LH)/Q428)f_x\"]4qu!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      FilePipeline filePipeline0 = new FilePipeline("*LH)/Q428)f_x\"]4qu!");
      Spider spider4 = spider3.pipeline(filePipeline0);
      Spider spider5 = spider4.addPipeline(filePipeline0);
      spider5.getCollectorPipeline();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setUUID("");
      spider1.getCollectorPipeline();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      queueScheduler1.poll(spider0);
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|{rC$2k(n*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider1.spawnUrl = true;
      spider1.getPageCount();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider1.setExitWhenComplete(true);
      Page page0 = Page.fail();
      page0.toString();
      spider0.runAsync();
      Page page1 = page0.setSkip(true);
      page1.getTargetRequests();
      spider3.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.scheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider2.addPipeline(collectorPipeline0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~]O63LWG~]c");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.clearPipeline();
      spider2.getStartTime();
      spider1.getPageCount();
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Request request0 = new Request();
      Request request1 = request0.addHeader("", "~]O63LWG~]c");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.setExecutorService(forkJoinPool0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kR#");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("kR#");
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      Spider spider2 = spider1.thread(3);
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("tm d1z`%'3e[wJw)0");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.downloader((Downloader) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("3,I\"t'/_~ $?pT ");
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1000, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 491);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider5 = spider4.setScheduler(fileCacheQueueScheduler0);
      long long0 = spider5.getPageCount();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }
}
