/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:57:25 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Parser.parse("|", 1864);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      try { 
        Parser.parse("(?(?", 288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexpArray0[3] = regexp1;
      regexp0.equals(regexp_Op0);
      Regexp[] regexpArray1 = regexp0.subs;
      regexp0.reinit();
      Parser.parse(".", 3624);
      Parser.subarray(regexpArray0, 18, 18);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", (-4027));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 749;
      try { 
        Parser.parse("*ChJ-g", 749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      Regexp regexp0 = Parser.parse("p}{52", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp regexp1 = Parser.parse(".", 2472);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pg=ma", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 4980;
      intArray0[4] = 0;
      Regexp[] regexpArray0 = new Regexp[17];
      Regexp regexp0 = Parser.parse("S", 4980);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      String string0 = "[:-\\1$*";
      try { 
        Parser.parse("[:-\u0001$*", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-\u0001`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("9[:]", (-1007));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1914, 36);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?(?-s:.)", (-2180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?-s:.)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "(?P(?i9q>ba4B#[;<_<J``E{(";
      int int0 = 2328;
      String string1 = "?A\"NOy1$Y{4<TR";
      try { 
        Parser.parse("?A\"NOy1$Y{4<TR", 2328);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1408);
      String string0 = "o*\\4kcP|";
      Regexp regexp0 = Parser.parse("o*\u0004kcP|", (-1408));
      assertNotNull(regexp0);
      
      String string1 = "\\P\\.#my";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp regexp0 = Parser.parse("O^", 44);
      assertNotNull(regexp0);
      
      int int0 = 2384;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 2384, 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1136;
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 1136, 1136);
      assertNotNull(regexpArray0);
      
      try { 
        Parser.parse("{6}", 1136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `{6}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("{|J", 288);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1136;
      Regexp[] regexpArray0 = null;
      try { 
        Parser.parse("{6)", 1136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-3392);
      try { 
        Parser.parse("(", (-3392));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 3872;
      try { 
        Parser.parse(")*tNyAp7zd<,P)", 3872);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("$", 288);
      assertNotNull(regexp0);
      
      String string0 = "t*:";
      Parser parser0 = new Parser("t*:", (-2310));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2147483645, 288);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "#.,D";
      Regexp regexp0 = Parser.parse("#.,D", 17);
      assertNotNull(regexp0);
      
      int int0 = 41;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 17, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertNotNull(string0);
      
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 1189);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp1.equals((Object) null);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "|J";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("|J", 288);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("t*:", (-2310));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2147483645, 288);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp regexp0 = Parser.parse("o*4kcP|", 128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 120;
      try { 
        Parser.parse("O.$o)VW`|^fymS", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0wv9?yAFan}+@%K", 79);
      assertNotNull(regexp0);
      
      regexp0.min = 79;
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      regexp0.op = regexp_Op0;
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.cap = (-2435);
      Regexp[] regexpArray1 = regexp0.subs;
      assertNull(regexpArray1);
      
      Regexp[] regexpArray2 = regexp1.subs;
      assertNull(regexpArray2);
      
      Regexp regexp2 = Parser.parse(",|", (-1252));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Regexp[] regexpArray3 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray3.equals((Object)regexpArray0));
      assertNotSame(regexpArray3, regexpArray0);
      assertNotNull(regexpArray3);
      
      Regexp[] regexpArray4 = new Regexp[4];
      assertFalse(regexpArray4.equals((Object)regexpArray0));
      assertFalse(regexpArray4.equals((Object)regexpArray3));
      
      regexpArray4[0] = regexp2;
      regexpArray4[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray4, 63, (-2435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[px00]", 79);
      assertNotNull(regexp0);
      
      regexp0.min = 79;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      regexp0.op = regexp_Op0;
      regexp0.cap = (-2435);
      Regexp[] regexpArray0 = regexp0.subs;
      assertNull(regexpArray0);
      
      Regexp regexp2 = Parser.parse(",|", (-1259));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray1);
      
      Regexp[] regexpArray2 = new Regexp[4];
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      
      regexpArray2[0] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotNull(regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, 63, (-2435));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      String string0 = "\\x";
      Regexp regexp0 = Parser.parse("x", 4);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      int int0 = 111;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      int int1 = (-1935);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "\\\\S";
      String string1 = ")X";
      Regexp regexp0 = Parser.parse("x{", 3248);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 693;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      regexpArray0[1] = regexp1;
      regexpArray0[5] = regexp0;
      int int1 = 3482;
      regexp1.cap = int1;
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int2 = 194;
      Regexp regexp3 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "@p\\x0|]";
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      assertEquals("\\A", string1);
      assertNotNull(string1);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("@px0|]", (-963));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      
      int int0 = (-458);
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotNull(regexp5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "invalid named apture";
      Regexp regexp0 = Parser.parse("[:x00]", 2848);
      assertNotNull(regexp0);
      
      int int0 = 102;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.flags = 1484;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-724), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -724
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[4];
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      try { 
        Parser.parse("+jx#7\"^f<S^b5Z", (-3007));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "\\";
      Regexp regexp0 = Parser.parse("", 3029);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[8];
      int int0 = 4980;
      intArray0[1] = int0;
      intArray0[4] = intArray0[3];
      Regexp[] regexpArray0 = new Regexp[17];
      regexpArray0[0] = regexp0;
      regexp0.runes = intArray0;
      String string1 = regexp0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("(?:)", string1);
      assertNotNull(string1);
      
      Regexp regexp1 = Parser.parse(string1, intArray0[1]);
      assertFalse(string1.equals((Object)string0));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertArrayEquals(new int[] {0, 4980, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(regexp1);
      
      String string2 = "\\p:\\00-\\x{10FFFF}]";
      int int1 = 11807;
      Regexp regexp2 = Parser.parse(string2, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      int int2 = 43639;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4980
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp regexp0 = Parser.parse("px7fH", 3013);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 128;
      String string0 = "j\\4bF1&D?r%=TF";
      Regexp regexp0 = Parser.parse("j\u0004bF1&D?r%=TF", 128);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("X|J", 288);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp[] regexpArray1 = regexp0.subs;
      assertNull(regexpArray1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray2 = Parser.subarray((Regexp[]) null, 288, 288);
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertNotSame(regexpArray2, regexpArray0);
      assertNotNull(regexpArray2);
      
      Regexp[] regexpArray3 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray3.equals((Object)regexpArray2));
      assertNotSame(regexpArray3, regexpArray2);
      assertSame(regexpArray3, regexpArray0);
      assertNotNull(regexpArray3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 6823;
      Regexp regexp0 = Parser.parse("sG|E", 6823);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("sG|E", 2564);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp2;
      int int1 = 929;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 929, (-2236));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-1004);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\3";
      Regexp regexp0 = Parser.parse("\u0003", (-1004));
      assertNotNull(regexp0);
      
      regexp0.flags = int0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = regexp1.equals(object1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(object1, object0);
      assertFalse(boolean0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      int int1 = (-1946);
      Parser parser0 = new Parser(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      String string1 = "";
      int int2 = 4;
      Regexp regexp3 = Parser.parse(string1, int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      
      String string2 = "[:space:]";
      Regexp regexp4 = Parser.parse(string2, int1);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      boolean boolean1 = regexp4.equals(string1);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      try { 
        Parser.parse("PP[2;<_<J``E')", 2508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[2;<_<J``E')`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      try { 
        Parser.parse("[:", 1184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "[:";
      int int0 = 13;
      try { 
        Parser.parse("[:", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 662;
      Regexp regexp0 = Parser.parse("[:\u0000-x{10F[FF}]", 45);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int1 = (-550);
      String string0 = "\\pb\\S";
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse(string0, int1);
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      
      String string1 = regexp4.toString();
      assertFalse(int1 == int0);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertEquals("\\\\pb\\\\S", string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int2 = 3;
      // Undeclared exception!
      try { 
        Parser.parse(string2, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-3830);
      Parser parser0 = new Parser("Y^)8G|_K /erb;G0TkP", (-3830));
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser", (-3830));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("Y^)8G|_K /erb;G0TkP", (-369));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      int int1 = 1561;
      try { 
        Parser.parse("Y^)8G|_K /erb;G0TkP", 1561);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Parser parser0 = new Parser("\b", 6823);
      assertNotNull(parser0);
      
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("\b", 120);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("(?", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      try { 
        Parser.parse("(?(?", 1252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-1194));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("]|C~BT@$QE,9b", (-1194));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?i:", (-904));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "\\S";
      int[] intArray0 = new int[1];
      intArray0[0] = 3020;
      String string1 = "(?-s";
      try { 
        Parser.parse("(?-s", 3020);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "[E\\x00]";
      String string1 = "comg|ogl.re2j.Parser";
      int int0 = 121;
      Regexp regexp0 = Parser.parse("(?-m:$)", 121);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-1445), 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parser parser0 = new Parser("p.", 118);
      assertNotNull(parser0);
      
      Parser parser1 = new Parser("Q*uT]ghYo|tKl}2df", 118);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertNotNull(string0);
      
      regexp0.max = 121;
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 121);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-411), 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -411
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      String string0 = "+";
      try { 
        Parser.parse("+", (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("<]%%0nrzOPpCszIUV", 6459);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[2] = regexp1;
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("z", 2508);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp3));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2508, 1812);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", (-1408));
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("", 2673);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("le6T^R[!-HBe=Bf8W", 122);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string0 = "1Gt<0!Y1{10\"7";
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      String string1 = "-]";
      try { 
        Parser.parse("5V[", 741);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 64;
      Regexp regexp0 = Parser.parse("g=2*?ArF$B,~k", 3170);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("g=2*?ArF$B,~k", 64);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 40);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("P", (-1001));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("\f", (-1001));
      assertTrue(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S", 3029);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("\n", 3029);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      String string0 = "\\t";
      Parser parser0 = new Parser("\t", 288);
      assertNotNull(parser0);
      
      int int0 = 10;
      Regexp regexp0 = Parser.parse("\t", 9);
      assertNotNull(regexp0);
      
      int int1 = 685;
      Parser parser1 = new Parser("]Aft{!BLI49M", 685);
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      
      try { 
        Parser.parse(";)^,*br-a-", (-2388));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "-x\\PE";
      try { 
        Parser.parse("`R++\"b*Vx0Di!@v", (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `++`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "\\d";
      Regexp regexp0 = Parser.parse("d", (-64));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      int int0 = 10714;
      Parser parser0 = new Parser((String) null, 10714);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      boolean boolean0 = regexp0.equals("[:\u0000-x{10FFFF}]");
      assertFalse(boolean0);
      
      Regexp regexp1 = Parser.parse("[:\u0000-x{10FFFF}]", 285);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = regexp0.equals("trailing backslash at end of expression");
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(regexp0, regexp1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 285, 1022);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "'\"(i{7";
      int int0 = 3509;
      try { 
        Parser.parse("'\"(i{7", 3509);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `'\"(i{7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[10];
      String string0 = "\\S";
      Parser parser0 = new Parser("\u0000", 16);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("\u0000", (-4534));
      assertNotNull(regexp0);
      
      String string1 = regexp0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\x00", string1);
      assertNotNull(string1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      int int0 = (-1059);
      Regexp regexp3 = Parser.parse("\u0000", (-1059));
      assertTrue(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotNull(regexp3);
      
      Regexp regexp4 = new Regexp(regexp1);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      Regexp regexp6 = new Regexp(regexp_Op2);
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertNotNull(regexp6);
      
      Regexp regexp7 = new Regexp(regexp_Op1);
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp_Op1.equals((Object)regexp_Op2));
      assertNotNull(regexp7);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-4534), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4534
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 32;
      try { 
        Parser.parse("[p\u0000", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[p\u0000`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "l`r*1";
      Regexp regexp0 = Parser.parse("l`r*1", (-1));
      assertNotNull(regexp0);
      
      int int0 = 116;
      int int1 = 86;
      Parser parser0 = new Parser("!A90 XqK) Qvel", 86);
      assertNotNull(parser0);
      
      try { 
        Parser.parse("!A90 XqK) Qvel", (-1039));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "(?P<(?i:92q>ba4B\\[;<_<J``E')";
      int int0 = 628;
      try { 
        Parser.parse("(?P<(?i:92q>ba4B[;<_<J``E')", 628);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?i:92q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-4027);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = (-4128);
      try { 
        Parser.parse("O w_3\"\"c\"aS[]", (-4128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("B", 46);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotNull(regexp3);
      
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp2;
      Regexp regexp4 = Parser.parse("B", 1760);
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
      
      regexpArray0[5] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 46, 1760);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 3020;
      int[] intArray0 = new int[8];
      Regexp[] regexpArray0 = new Regexp[17];
      try { 
        Parser.parse("..Wdg|i)RVnI>", 3020);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Parser parser0 = new Parser("\b", 6823);
      assertNotNull(parser0);
      
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("C", 6823);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("G|E", 2564);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("b;@n", 6823);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotNull(regexp4);
      
      Regexp regexp5 = Parser.parse("PP$%J'/!*#Ql*-|B", (-1134));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotNull(regexp5);
      
      try { 
        Parser.parse("[$7\"M", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[$7\"M`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 3029;
      int int1 = (-3317);
      Regexp regexp0 = Parser.parse("C", (-3317));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      assertTrue(boolean0);
      
      String string0 = regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertEquals("(?i:C)", string0);
      assertNotNull(string0);
      
      try { 
        Parser.parse("((wRZpiG,I`U?x)s", 3029);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `((wRZpiG,I`U?x)s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "[::\\00-\\x{10FFFF}]";
      int int0 = (-666);
      Regexp regexp0 = Parser.parse("[::\u0000-x{10FFFF}]", (-666));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("(?(1u{m{", (-666));
      assertNotNull(parser0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("o#|fqv<[Hk", (-666));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      int int1 = 81;
      Regexp regexp3 = new Regexp(regexp0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("o#|fqv<[Hk", (-666));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotNull(regexp4);
      
      try { 
        Parser.parse("2[[-?q", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `[-?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "C:3x\\P{m{";
      int int0 = 1975;
      Regexp regexp0 = Parser.parse("(?P(", 1975);
      assertNotNull(regexp0);
      
      String string1 = "(?-m";
      Parser parser0 = new Parser("(?-m", (-747));
      assertNotNull(parser0);
      
      try { 
        Parser.parse("(?-m", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Regexp regexp0 = Parser.parse("69ZxF>GtB</=]pm5A.", (-52));
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op0;
      String string0 = regexp0.toString();
      assertEquals("69ZxF>GtB</=\\]pm5A|(?s:.)", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("M&ja^", (-931));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      regexp0.max = (-52);
      String string1 = "O 6 q";
      Regexp regexp3 = Parser.parse("O 6 q", (-52));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("69ZxF>GtB</=]pm5A|(?s:.)", 104);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotNull(regexp4);
      
      String string2 = "_";
      Regexp regexp5 = Parser.parse("_", (-931));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp1);
      assertNotNull(regexp5);
      
      int int0 = 115;
      Regexp regexp6 = Parser.parse(",Q6UuM", 104);
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp2);
      assertNotNull(regexp6);
      
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 8313, 2000);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S", 3029);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 4980;
      intArray0[4] = 0;
      Regexp[] regexpArray0 = new Regexp[17];
      regexpArray0[0] = regexp0;
      regexp0.runes = intArray0;
      String string0 = regexp0.toString();
      assertEquals("(?i:\\x00\u1374\\x00\\x00\\x00\\x00\\x00\\x00)", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = Parser.parse("[x00-\u1374x00x00x00]", 4980);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("p:\u0000-x{10FFFF}]", 11807);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 4980, 43639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4980
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "\\PP\\x00\\x{bq5}\\x{~d5}\\x00\\x03x00)";
      try { 
        Parser.parse("PPx00x{bq5}x{~d5}x00x03x00)", 4297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("aqgAj|AZ~g", 749);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:A)(?:(?i:QGAJ)|(?i:Z~G))", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Regexp regexp0 = Parser.parse("||uFI 0e},\"zWv", 128);
      assertNotNull(regexp0);
      
      String string0 = "Tifinagh";
      int int0 = 36;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
      
      String string1 = "M#/?8v+ASxy5+";
      int int1 = 3342;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int0 = 1100;
      try { 
        Parser.parse("[:\u0000>", 1100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:\u0000>`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "[::V;\\vI%d";
      int int0 = 48;
      try { 
        Parser.parse("[::V;vI%d", 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[::V;vI%d`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 848;
      Parser parser0 = new Parser("dO@7^12g2G@.", 848);
      assertNotNull(parser0);
      
      String string0 = "\\pP[t9*";
      try { 
        Parser.parse("pP[t9*", (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[t9*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::\u0000-x{10FFFF}]", 167);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[::\u0000-x{10FFFF}]", 10727);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("[::\u0000-x{10FFFF}]", 94);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      regexp2.reinit();
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("4%f", 10727);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotNull(regexp5);
      
      Regexp regexp6 = Parser.parse("^x00-x{10FFFF}", 1501);
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp3));
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp3);
      assertNotNull(regexp6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "]=5@(?OeEIlH";
      int int0 = 13;
      try { 
        Parser.parse("X(1#l{95qF", 3028);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `X(1#l{95qF`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = 1938;
      int int1 = 10747;
      Regexp regexp0 = Parser.parse("\u0007", 120744);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertNotNull(regexp2);
      
      String string0 = "?Uviwf";
      int int2 = 1582;
      Regexp regexp3 = Parser.parse(string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      int int3 = 113;
      String string1 = "kms(P^nQ.{f";
      int int4 = 3504;
      try { 
        Parser.parse(string1, int4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `kms(P^nQ.{f`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pK']=?vQ *bvwGT@", 66);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("stack underflow", 67);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("5", 1918);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("QYV8h", 1761);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse("5", 12);
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp1);
      assertNotNull(regexp4);
      
      Parser parser0 = new Parser("(?P<", 58);
      assertNotNull(parser0);
      
      Regexp regexp5 = Parser.parse(":*\u0006w55", (-1451));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotNull(regexp5);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "\\xLRf";
      int int0 = 3054;
      Regexp regexp0 = Parser.parse("xLRf", 3054);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3054, 3054);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      assertNotNull(regexpArray1);
      
      String string1 = "l`r*1";
      Regexp regexp2 = Parser.parse("l`r*1", (-1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Parser.parse("xLRf", 116);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotNull(regexp3);
      
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotNull(regexp4);
      
      String string2 = "!\\A90 XqK) Qvel";
      int int1 = 86;
      Parser parser0 = new Parser(string2, int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(parser0);
      
      Regexp regexp5 = Parser.parse(string1, int0);
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotNull(regexp5);
      
      int int2 = (-1039);
      try { 
        Parser.parse(string2, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = (-52);
      Regexp regexp0 = Parser.parse("P{m{", (-52));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("P\\{m\\{", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      int int1 = (-931);
      String string1 = "Nd";
      Regexp regexp2 = Parser.parse(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      String string2 = "\\p_9-\\1$*";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p_`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("XCb^FgIraR5R!ky", 4040);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotNull(regexp2);
      
      regexpArray0[1] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 4040, (-629));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[BOKj;mQkcxhVB>h-#", 1975);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("", 1975);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      assertNotNull(regexp1);
      
      String string0 = "CXq,hRPUb rKUJvdc.B";
      String string1 = "\\p\\p_9LYE-\\1L*";
      int int0 = 26;
      Parser parser0 = new Parser("Lo", 26);
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("Lo", (-1118));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotNull(regexp2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      assertFalse(boolean0);
      
      try { 
        Parser.parse("[:sOs-", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:sOs-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Regexp regexp0 = Parser.parse("0,;D,j%9&6", 96);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "[:\\00-\\x{10FFFF}]";
      Regexp[] regexpArray0 = Regexp.EMPTY_SUBS;
      assertNotNull(regexpArray0);
      
      Regexp regexp0 = Parser.parse("1d\u0005", 1777);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotNull(regexp1);
      
      String string1 = "[:p\\x00]";
      int int0 = 67;
      Regexp regexp2 = Parser.parse(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertNotNull(regexp2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp2.equals(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      assertFalse(boolean0);
      
      int int1 = 92;
      int int2 = 128557;
      int int3 = 111;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
