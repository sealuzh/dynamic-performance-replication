/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:42:59 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z +-wnl]P4Oh", 0);
      Parser parser0 = new Parser("Other_Grapheme_Extend", 0);
      Regexp regexp1 = Parser.parse("z +-wnl]P4Oh", 0);
      Parser.parse("Other_Grapheme_Extend", 2137);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 51, 51);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("+tr'tK5k", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pa?!v", (-2687));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("|?(}", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("(?(}", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("t(?P<?(phx", 500);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<?(phx`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("5(", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `5(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "(}";
      int int0 = 81;
      try { 
        Parser.parse("(}", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = (-1272);
      Parser parser0 = new Parser("com.google.re2j.Parser$1", (-1272));
      Parser.parse("com.google.re2j.Parser$1", (-1914));
      Parser.parse("b", (-1272));
      Parser.parse("com.google.re2j.Parser$1", 12689);
      Parser.parse("com.google.re2j.Parser$1", (-1272));
      Parser.parse("b", 0);
      Parser.parse("com.google.re2j.Parser$1", 0);
      Parser.parse("b", 12689);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-1914));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "1|('*U_?LICWoWm}B$";
      int int0 = 2377;
      Parser parser0 = new Parser("1|('*U_?LICWoWm}B$", 2377);
      try { 
        Parser.parse("1|('*U_?LICWoWm}B$", 2377);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `1|('*U_?LICWoWm}B$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("?2jl9[a+}?:#tyX1l", 2544);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-395);
      try { 
        Parser.parse("(", (-395));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      int int0 = 91;
      Regexp regexp0 = Parser.parse("", 91);
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      intArray0[1] = 91;
      regexp0.runes = intArray0;
      String string1 = "ay(%Z*LrK5(.F-O%,,";
      regexp0.equals("ay(%Z*LrK5(.F-O%,,");
      regexp0.equals("\\)gmgrck");
      regexp0.equals("");
      int int1 = 0;
      try { 
        Parser.parse("ay(%Z*LrK5(.F-O%,,", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `ay(%Z*LrK5(.F-O%,,`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = (-2967);
      Parser parser0 = new Parser("{i?<Z> 'n", (-2967));
      Parser.parse("{i?<Z> 'n", (-2967));
      Parser.parse("{i?<Z> 'n", (-672));
      Parser.parse("DL% .}D]M69bY", (-2967));
      Parser.parse("trailing backslash at end of expression", (-2967));
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("", 1452);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      regexp1.equals(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.flags = (-672);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexp2.cap = (-672);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 65;
      String string0 = "{?,vE(";
      try { 
        Parser.parse("{?,vE(", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", (-295));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 69;
      Parser.parse("\"g5qdR", 69);
      String string0 = "Ideographic";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("[", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "Km3_e4Qx&GR/NBgioG";
      Parser.parse("Km3_e4Qx&GR/NBgioG", 0);
      Parser.parse("Km3_e4Qx&GR/NBgioG", 0);
      Parser parser0 = new Parser("Km3_e4Qx&GR/NBgioG", 0);
      Parser.parse("3eg4?T", 58);
      Parser.parse("Km3_e4Qx&GR/NBgioG", 0);
      Parser.parse("Km3_e4Qx&GR/NBgioG", 0);
      Parser.parse("regexp/syntax: internal error", 0);
      Parser.parse("|Pl", 0);
      Regexp[] regexpArray0 = null;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 0, 377);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4|", 1633);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("9|", 412);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser.parse("{.9'5d7F@", 116);
      Parser parser0 = new Parser("nkf9:Eym", 4);
      Parser.parse("{.9'5d7F@", (-782));
      Parser.parse("{.9'5d7F@", 116);
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int0 = 0;
      try { 
        Parser.parse("n3[tM@Y", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[tM@Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse("[:-", 2080);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "[:";
      int int0 = 44;
      try { 
        Parser.parse("[:", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("[", (-592));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-275);
      String string0 = "\\p\\G4}{$m+4";
      Parser.parse("pG4}{$m+4", (-275));
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 43;
      Parser.parse(":*YC(R^jx", 43);
      Parser.parse("", 43);
      String string0 = "\\W";
      int int1 = (-158);
      Parser parser0 = new Parser("W", (-158));
      Parser.parse(":*YC(R^jx", 43);
      Parser.parse("W", (-1822));
      try { 
        Parser.parse(":*YC(R^jx", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `:*YC(R^jx`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "tS3\"v";
      int int0 = 363;
      Parser.parse("tS3\"v", 363);
      String string1 = "P";
      int int1 = 0;
      Parser parser0 = new Parser("P", 0);
      try { 
        Parser.parse("[:?!v", 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:?!v`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      try { 
        Parser.parse("~s{1'Lj)&kBLit", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "{0}ZYILzO";
      try { 
        Parser.parse("{0}ZYILzO", 2432);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `{0}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = new Parser("pqdR", 0);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("pSa?!v", 119);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp4 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("|=", (-1399));
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op3 = Regexp.Op.END_LINE;
      Regexp regexp6 = new Regexp(regexp_Op3);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[6] = regexp7;
      regexp6.op = regexp_Op3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|m", 10712);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("d6t]9ZDc;/YA\"", (-456));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("com.google.re2j.Parser$Stack", (-456));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp1.subs = regexpArray0;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2830, 53);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "1|('*U_?LICWoWm}B$";
      int int0 = 2377;
      Parser parser0 = new Parser("1|('*U_?LICWoWm}B$", 2377);
      int int1 = 10716;
      Parser.parse("P", 2377);
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `1|('*U_?LICWoWm}B$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = new Parser("[ML@ppi%RQxZhnT7W]", 778);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("[ML@ppi%RQxZhnT7W]", 778);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("[ML@ppi%RQxZhnT7W]", 4);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 778, (-335));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", (-223));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[:W]", (-3351));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("[:W]", 2996);
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-549), 2996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("r|P", (-2444));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = new Parser("Pi", 124);
      Regexp regexp0 = Parser.parse("ppa?!v", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("3PZETb:P#pl8?", 1725);
      Parser parser0 = new Parser("3PZETb:P#pl8?", (-1295));
      Regexp regexp1 = Parser.parse("3PZETb:P#pl8?", (-1295));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = new Parser("s85gm>|Kv3oF%n]px", 98);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("s85gm>|Kv3oF%n]px", 76);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("~Pe'A:mQU$h", 76);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp4);
      regexp5.flags = 49;
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("s85gm>|Kv3oF%n]px", 256);
      regexpArray0[6] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 256, 76);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("nW|x", 1992);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Parser.parse("$v|)20VQ2d^X3=#2", 5216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = new Parser(";,=?Q(}0!C0xXo%Fz", 120);
      Regexp regexp0 = Parser.parse("P*|ilq +DU", 120);
      Regexp regexp1 = Parser.parse("Any", 120);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = new Parser(";w=vQ(}0\fC0xXo%>z", 120);
      try { 
        Parser.parse(";w=vQ(}0\fC0xXo%>z", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `;w=vQ(}0\fC0xXo%>z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "|";
      int int0 = 19;
      Parser.parse("|", 19);
      try { 
        Parser.parse("(?(}0!C0xXo%Fz", 44016);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = ";w=vQ(}0\\fC0xXo%>z";
      Parser parser0 = new Parser("[:", (-3026));
      Parser.parse("%(g%!}n|Y_^Z", (-2161));
      int int0 = 93;
      try { 
        Parser.parse("}~%EWtG~\"6MeV[-", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Parser.parse("O}~Et~gV[-", 688);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = new Parser(";,=?Q(}0!C0xXo%Fz", 50);
      Regexp regexp0 = Parser.parse("\b", 101);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 120;
      String string0 = "<p3tgXLa}:BU~";
      Parser parser0 = new Parser("<p3tgXLa}:BU~", 120);
      Parser.parse("<p3tgXLa}:BU~", 120);
      Parser.parse("P>G9g", (-3368));
      Parser.parse(string0, int0);
      String string1 = null;
      int int1 = 102;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 124;
      String string0 = "<p3tgXLa}:BU~";
      Parser parser0 = new Parser("<p3tgXLa}:BU~", 124);
      try { 
        Parser.parse("!oH[", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", 1633);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("()", 3677);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("zH8>.J,?X()jPm.7d", (-284));
      Regexp regexp1 = Parser.parse("zH8>.J,?X()jPm.7d", 1633);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 121;
      Parser.parse("Z", 121);
      try { 
        Parser.parse("w'$mMz[gy-`^E", 121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `y-``
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "[N-N";
      try { 
        Parser.parse("[N-N", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[N-N`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("3OZd>||a", 120132);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.flags = 120132;
      regexpArray0[2] = regexp0;
      regexp0.equals(regexp0);
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.min = 120132;
      regexp0.reinit();
      regexpArray0[5] = regexp0;
      int[] intArray0 = new int[4];
      intArray0[0] = 120132;
      intArray0[1] = 120132;
      intArray0[2] = 120132;
      intArray0[3] = 120132;
      regexp0.runes = intArray0;
      Parser.subarray(regexpArray0, 1110, 1110);
      try { 
        Parser.parse("3M\"CbpZFfs)J+rtDb5", (-4692));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005f", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005*5f", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Parser.parse("AtV%R4>CQ~1`)?=x", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 2216);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = (-456);
      Regexp regexp0 = Parser.parse("d6t]9ZDc;x/YA\"", (-456));
      regexpArray0[0] = regexp0;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 769;
      Parser.parse("x{", 769);
      String string0 = "=H:A$5_/W,tR.s";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 97, 97);
      Regexp regexp0 = Parser.parse("O0x5zgzduh", (-1460));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^00xx{0FFF0F]", 2229);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 120;
      Parser parser0 = new Parser("<p3tgXLa}:BU~", 120);
      Parser.parse("(?", 2799);
      Parser.parse("<p3tgXLa}:BU~", 7943);
      Regexp regexp0 = Parser.parse("^x00-x{10yFFF}", 120);
      String string0 = "!G?eW";
      Regexp regexp1 = Parser.parse(string0, int0);
      Regexp regexp2 = new Regexp(regexp1);
      assertFalse(regexp2.equals((Object)regexp0));
      
      int int1 = 120094;
      Regexp regexp3 = Parser.parse(string0, int1);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0-x{/10FFFF}]", 688);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-f", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-f", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = new Parser("<p3tgXLa}:BU~", 120);
      Parser.parse("<p3tgXLa}:BU~", 120);
      Parser.parse("^y*<{", (-484));
      Regexp regexp0 = Parser.parse("!G?eW", (-484));
      Regexp regexp1 = Parser.parse("!G?eW", 938);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("d6t]9ZDc;/YA\"", (-456));
      regexp0.cap = (-456);
      regexpArray0[0] = regexp0;
      Parser.parse("d6t]9ZDc;/YA\"", (-456));
      Regexp regexp1 = Parser.parse("pP/YA\"", 8153);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pC", (-55));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser parser0 = new Parser("<p3tgXLa}:BU~", 120);
      Parser.parse("(?", 2799);
      try { 
        Parser.parse("(?", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      String string0 = "\\z";
      int int0 = 1245;
      Regexp regexp3 = Parser.parse("z", 1245);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 926);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w", (-678));
      Parser parser0 = new Parser("w", (-678));
      Regexp regexp1 = Parser.parse("w", 124);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Parser.parse("}~%EWtG~\"6MeV[-", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Parser.parse("\\x{10yFFF}", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{10y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{03ZYInCO", (-164));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 84;
      Parser.parse("|", 84);
      String string0 = "-\\2f";
      Parser.parse("-\u0002f", 84);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("eA{\u0001y#$u ", 13);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 44016;
      int int1 = 815;
      Parser.parse("`TI|-.yF:aU", 815);
      Parser.parse("", 44016);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000f", 2400);
      Regexp regexp1 = Parser.parse("[:d,", 1511);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 13);
      Regexp regexp1 = Parser.parse("invalid character class", 13);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Parser.parse("gK/H5[102\u0006$mu", 65341);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[102\u0006$mu`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Parser.parse("w'$mMz[g-l^E", 2053);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[g-l^E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 1269);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP/YA\"", 8132);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("[:-", 8153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 1295;
      Parser.parse("T7r{%\u0004c", 1295);
      int int1 = (-806);
      Parser parser0 = new Parser("T7r{%\u0004c", (-806));
      Parser.parse("T7r{%\u0004c", 109);
      String string0 = null;
      int int2 = 1114111;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%{$M-jlB?w<\"_", 13311);
      Parser.parse("(?s:.)", 3016);
      Regexp regexp1 = Parser.parse(">G5E", 83);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("B", 101);
      regexpArray0[4] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 101, 101);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("Sinhala", 781);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("\n", 893);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 781, 893);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("invalid escape sequence", 8);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("0Pv6bp", 124);
      regexpArray0[4] = regexp4;
      int int0 = (-980);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 124, (-980));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser parser0 = new Parser("[::]", (-2572));
      Regexp regexp0 = Parser.parse("[::]", (-2572));
      Regexp regexp1 = Parser.parse("[::]", (-2572));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("xRvwQZB]JKHK", 125);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("", 125);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("Mandaic", 125);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("xRvwQZB]JKHK", 125);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("n", 125);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("", 125);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = Parser.parse("n", 125);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 125, (-1265));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("xRvwQZB]JKHK", 125);
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("", 125);
      Parser.parse("xRvwQZB]JKHK", 125);
      Parser.parse("", 125);
      Parser.parse("n", 125);
      regexp0.name = "xRvwQZB]JKHK";
      Parser.parse("", (-554));
      Parser parser0 = new Parser("n", 125);
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 57;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 57, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("^x00-x{10FFFF}", (-18));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op2 = Regexp.Op.END_TEXT;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("^x00-x{10FFFF}", (-18));
      regexpArray0[7] = regexp8;
      Regexp regexp9 = Parser.parse("^x00-x{10FFFF}", 4460);
      regexpArray0[8] = regexp9;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-18), (-18));
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 89);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("6a`N{VybKMBd\"49", (-550));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("6a`N{VybKMBd\"49", 114);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("6a`N{VybKMBd\"49", 2353);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 114, 2353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Parser.parse("[^B", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^B`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Parser.parse("cPsOScRfGv[^Yu%9c", 1540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^Yu%9c`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("o0h&F<F7IK@t\u0003p", 119261);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser.parse("UET\rb", 40);
      Parser.parse("UET\rb", 256);
      Parser parser0 = new Parser("UET\rb", 1050);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "L|P";
      int int0 = (-43);
      Parser parser0 = new Parser("L|P", (-43));
      Parser.parse("L|P", (-43));
      try { 
        Parser.parse("RHV-[3B", 5552);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[3B`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 43072);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007_!a? J}rj0u\u0004?", (-139));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8WC$", 1686);
      Parser.parse(",|,}$#vg", 88);
      Parser parser0 = new Parser("8WC$", 1378);
      Regexp regexp1 = Parser.parse("", 1686);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = new Parser("!S]zY-Yt,[M]z,No", (-485));
      Regexp regexp0 = Parser.parse("!S]zY-Yt,[M]z,No", 2147483645);
      Regexp regexp1 = Parser.parse("!S]zY-Yt,[M]z,No", (-485));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!S]zY-Y,[M]m,No", 3085);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser.parse("1X~jDCb>", 3777);
      Parser parser0 = new Parser("7UE7?$8.oP9{J^pE4S7", 3777);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Parser.parse("pM]z,No", 2147483645);
      Parser.parse("la", 730);
      Parser parser0 = new Parser("pM]z,No", 1241);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser.parse("(?:)", 2524);
      Regexp regexp0 = Parser.parse("(?:)", 2524);
      Regexp regexp1 = Parser.parse("d", 2524);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Parser.parse("(?-@(?m\"", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser.parse("Syloti_Nagri", 1291);
      Parser parser0 = new Parser("Syloti_Nagri", 1071);
      Regexp regexp0 = Parser.parse("Syloti_Nagri", 1071);
      Parser.parse("Syloti_Nagri", 89);
      Regexp regexp1 = Parser.parse("PF*\"", 1291);
      Parser.parse("PF*\"", 1291);
      Regexp regexp2 = Parser.parse("PF*\"", 89);
      Parser.parse("Syloti_Nagri", (-4649));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 121, (-4649));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "\\p{";
      int int0 = 1000;
      Parser.parse("p{", 1000);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp regexp0 = Parser.parse("n|m", (-4));
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 91, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 69;
      try { 
        Parser.parse("{0}ZYILzO", 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `{0}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?)", 80);
      Parser parser0 = new Parser("BYP>6^J5A3T", 80);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 80, 80);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0-x{10FFFF}]", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 77);
      Regexp regexp1 = Parser.parse("gU+=:T&", 77);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0-x{10FFFF}]", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Any", 66729);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("Z|r|vO@?6C'U&i&", 208);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[5] = regexp5;
      Parser.subarray(regexpArray0, 1749, 1749);
      Regexp regexp6 = Parser.parse("Z|r|vO@?6C'U&i&", 3);
      assertFalse(regexp6.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Parser parser0 = new Parser("[^nwx00-x{10FFF}]", 2233);
      Regexp regexp0 = Parser.parse("[^nwx00-x{10FFF}]", (-1644));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser.parse("!S]zY-Yt,+[M]m,No", 21);
      Parser.parse("!S]zY-Yt,+[M]m,No", (-2322));
      Parser parser0 = new Parser("!S]zY-Yt,+[M]m,No", (-2322));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Parser.parse("v(?P<N%thx>", (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<N%thx`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser.parse(".|", (-5192));
      Parser.parse(".|", 8240);
      Parser parser0 = new Parser(".|", (-5192));
  }
}
