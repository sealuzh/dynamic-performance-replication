/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:19:36 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("StackMap");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 339, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52168
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(8);
      Attribute[] attributeArray0 = null;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/ClassReader", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 46);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 2);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 787);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classReader0.accept((ClassVisitor) classWriter1, 787);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 705);
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter((-1352));
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 63);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[0] = 'Q';
      // Undeclared exception!
      try { 
        classReader0.readConst(407, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      classReader0.getSuperName();
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      // Undeclared exception!
      try { 
        classReader0.readConst(686, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(285212682);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 5113);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      ClassWriter classWriter0 = new ClassWriter(2261);
      Attribute attribute0 = new Attribute("wheel/asm/ClassReader");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel/asm/ClassReader");
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(1002);
      classReader1.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-3500));
      int int0 = (-2097);
      classReader0.accept((ClassVisitor) classWriter0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(classReader1, 1);
      classReader0.accept((ClassVisitor) classWriter1, (Attribute[]) null, 2);
      int int0 = 769;
      classReader0.accept((ClassVisitor) classWriter1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(6);
      ClassWriter classWriter1 = new ClassWriter(classReader1, 3744);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.ClassReader");
      attributeArray0[0] = attribute0;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 10);
      int int0 = 5233;
      classReader1.accept((ClassVisitor) classWriter1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter((-1352));
      classReader0.getClassName();
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 71);
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Y';
      ClassWriter classWriter0 = new ClassWriter(8);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1113);
      charArray0[5] = 'Q';
      // Undeclared exception!
      try { 
        classReader0.readConst(391, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getClassName();
      classReader0.getInterfaces();
      Object object0 = new Object();
      classReader0.getInterfaces();
      classReader0.getItem(248);
      classReader0.getSuperName();
  }
}
