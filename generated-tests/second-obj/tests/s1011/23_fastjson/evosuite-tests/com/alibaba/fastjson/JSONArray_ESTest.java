/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:02:56 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseEra;
import java.time.chrono.MinguoDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(47);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(176);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSON.parseArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockJapaneseDate0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(list0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(47, (Object) mockHijrahDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(25);
      jSONArray0.remove((Object) "yyyyMMddHHmmssSSSZ");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.clear();
      jSONArray0.addAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 57;
      JSONArray jSONArray0 = new JSONArray(57);
      ZoneId zoneId0 = ZoneId.systemDefault();
      zoneId0.getRules();
      MockMinguoDate.now(zoneId0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(655, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 655, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSON.parseArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(47, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray5 = jSONArray4.fluentSet(3089, jSONArray2);
      JSONArray jSONArray6 = jSONArray5.fluentRemoveAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray6.fluentAddAll(3089, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      JSONArray jSONArray0 = new JSONArray(1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-294), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -294, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1977);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(944);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 944, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(5);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3524, object0);
      jSONArray1.getLong(47);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(25);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.clear();
      jSONArray0.add((Object) jSONArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Field> class0 = Field.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<MockJapaneseDate> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray2.remove(999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId.systemDefault();
      jSONArray0.indexOf(zoneId0);
      SerializeConfig.getGlobalInstance();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1150, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      jSONArray0.lastIndexOf(mockJapaneseDate1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[18];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1794
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(47);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashSet0.add((PropertyNamingStrategy) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(47, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(241);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputStream[] inputStreamArray0 = new InputStream[0];
      jSONArray0.toArray(inputStreamArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1977);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      jSONArray1.fluentClear();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.setComponentType((Type) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(57);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZoneId zoneId0 = ZoneId.systemDefault();
      MockMinguoDate.now(zoneId0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockMinguoDate0);
      jSONArray1.clear();
      jSONArray1.fluentClear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, jSONArray1);
      jSONArray0.remove(57);
      Class<String> class0 = String.class;
      jSONArray2.toJavaList(class0);
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      jSONArray2.getObject(47, class1);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      ParserConfig.getGlobalInstance();
      jSONArray1.fluentRemoveAll(linkedHashSet1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray2 = jSONArray0.fluentSet(47, propertyNamingStrategy0);
      mockMinguoDate0.getMockedClassName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONObject(33);
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(57);
      ZoneId zoneId0 = ZoneId.systemDefault();
      MockMinguoDate.now(zoneId0);
      jSONArray0.clear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.fluentSet(3089, jSONArray0);
      Object object0 = new Object();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-11);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-11), pipedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(25);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.clear();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      jSONArray0.contains((Object) null);
      jSONArray0.addAll((Collection<?>) set0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      linkedHashSet0.add(propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(47, propertyNamingStrategy0);
      mockMinguoDate0.getMockedClassName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONObject(19);
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONArray(19);
      ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 87;
      int int1 = SerializerFeature.WRITE_MAP_NULL_FEATURES;
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      linkedHashSet0.add(propertyNamingStrategy0);
      jSONArray0.fluentSet(47, propertyNamingStrategy0);
      mockMinguoDate0.getMockedClassName();
      JSONObject jSONObject0 = new JSONObject();
      MockFile mockFile0 = new MockFile("");
      jSONArray1.getShortValue(35);
      // Undeclared exception!
      try { 
        jSONArray0.remove(670);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 670, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(57);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZoneId.systemDefault();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) minguoDate0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray0);
      jSONArray1.clear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      JSONArray jSONArray4 = jSONArray0.fluentAdd(object0);
      jSONArray4.fluentSet(44, mockMinguoDate0);
      // Undeclared exception!
      try { 
        jSONArray3.remove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 45
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1325));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 826;
      JSONArray jSONArray0 = new JSONArray(826);
      int int1 = 953;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(953);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 953, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 93;
      JSONArray jSONArray0 = new JSONArray(93);
      // Undeclared exception!
      try { 
        jSONArray0.getString(93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray2 = jSONArray1.fluentSet(47, list0);
      jSONArray0.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue((-639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -639
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.clear();
      jSONArray0.fluentClear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.iterator();
      jSONArray0.getBooleanValue(3089);
      jSONArray0.getIntValue(3089);
      jSONArray0.getLongValue(47);
      jSONArray1.getDoubleValue(150);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = new JSONArray(47);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray4 = jSONArray2.fluentSet(47, list0);
      jSONArray3.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray4.getBooleanValue((-639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      linkedHashSet0.add(propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(47, propertyNamingStrategy0);
      mockMinguoDate0.getMockedClassName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONObject(19);
      SerializeConfig serializeConfig0 = new SerializeConfig(47, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONArray(19);
      JSON.toJSON((Object) mockMinguoDate0, serializeConfig0);
      ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 87;
      int int1 = SerializerFeature.WRITE_MAP_NULL_FEATURES;
      jSONArray0.getRelatedArray();
      jSONArray2.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1871, linkedList0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(47, (Type) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSONArray0.set(1871, pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-2699));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2699, Size: 1872
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) fileSystemHandling0);
      jSONArray1.clear();
      jSONArray0.spliterator();
      jSONArray1.fluentClear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentSet(3089, mockMinguoDate0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 47);
      JSON.toJSON((Object) pipedInputStream0);
      Class<String> class0 = String.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KAIaN]");
      jSONArray1.toJavaList(class0);
      jSONArray1.iterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@23ff74af
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      jSONArray0.fluentSet((-1), mockMinguoDate1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(47, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 48
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3573, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONObject(3089);
      JSONArray jSONArray3 = new JSONArray(47);
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "@type";
      jSONArray1.getShortValue(3089);
      jSONArray2.remove(47);
      jSONArray1.isEmpty();
      jSONArray3.fluentRetainAll(jSONArray0);
      jSONArray3.isEmpty();
      jSONArray1.getBigInteger(44);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1871, linkedList0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(47, (Type) class1);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-2699));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2699, Size: 1872
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray(4642);
      int int0 = 1480;
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1480, object0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(1480);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@35663a63
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      linkedHashSet0.add(propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(47, propertyNamingStrategy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(47);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = jSONArray0.fluentSet(47, propertyNamingStrategy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, pipedInputStream0);
      JSONArray jSONArray2 = new JSONArray(47);
      int int0 = Calendar.DECEMBER;
      int int1 = Opcodes.DUP;
      jSONArray0.getFloatValue(11);
      int int2 = (-3752);
      // Undeclared exception!
      try { 
        jSONArray1.subList(11, (-3752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(11) > toIndex(-3752)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, pipedInputStream0);
      JSONArray jSONArray1 = new JSONArray();
      int int0 = Opcodes.DUP;
      jSONArray0.getFloatValue(47);
      // Undeclared exception!
      try { 
        jSONArray1.getString(797);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 797, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate.now();
      jSONArray0.setRelatedArray(mockMinguoDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = 3573;
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet1 = new LinkedHashSet<PropertyNamingStrategy>();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet2 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray2 = jSONArray0.fluentSet(3573, jSONArray1);
      int int1 = 3563;
      jSONArray0.getJSONObject(3563);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray2.getJSONArray(3573);
      ParserConfig.getGlobalInstance();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }
}
