/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:51:33 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl_Builder0.setEncodedQueryParameter("[\u0000-\u001F-\u009Fp{javaWhitespace}]", "#1k");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse(httpUrl0, " E  ?g.PikQn{_,^");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("[L-'0=C5t(-RB``!`K|");
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl_Builder0);
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("ISIZE");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "[Lh;v[rcq[Z");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:foo.bar");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://foo.bar/foo.bar", httpUrl1.toString());
      assertEquals(443, httpUrl1.port());
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%2B");
      URL uRL0 = mockFile0.toURL();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('V');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("Unexpected hex string: ");
      assertEquals(2, list0.size());
      assertTrue(list0.contains("Unexpected hex string: "));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "", 100, 34, true);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, ".outputStream()", 14, 14, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("https:/www.somefakebutwellformedurl.org/fooexample", false);
      assertEquals("https:/www.somefakebutwellformedurl.org/fooexample", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "https", 45, 45, "j", false, false, false, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "charset == null", (-2246), (-2246), "charset == null", false, false, true, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "kE?%{m2?j9A", 43, (-2146), "kE?%{m2?j9A", true, true, false, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("unexpected scheme: ", "unexpected scheme: ", true, true, false, false);
      assertEquals("%75%6E%65%78%70%65%63%74%65%64%20%73%63%68%65%6D%65%3A%20", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("_Yl+8G26\"~9Sa/k*tI", "_Yl+8G26\"~9Sa/k*tI", true, true, true, true);
      assertEquals("%5F%59%6C+%38%47%32%36%22%7E%39%53%61%2F%6B%2A%74%49", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("https:foo.bar", "okio.segmentpool", false, true, true, true);
      assertEquals("h%74%74%70%73:f%6F%6F%2Ebar", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("Expected leading [0-9a-fA-F] character but was 0x", 13, 13, "Expected leading [0-9a-fA-F] character but was 0x", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded(":@", 56, 128);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(8);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("%s: actual 0x%08x != expected 0x%08x");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString(stringBuilder0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("Ok@1Y]", 932, 932, "Ok@1Y]", true, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("H\"}7k!q<!fj,");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("scheme == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      String string0 = httpUrl0.encodedFragment();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
      assertEquals(4, httpUrl0.pathSize());
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.encodedPassword();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.toString();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("Jt3au7C{8=Nzp47D}", "-I$nUt^(Q");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("HSP+2|{l*P?MY^UP~>", "ljPO4'");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("'9jY^sX&R+0/Nto}8g");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("O!ytf+j", "8A%3Eg0DjYcK4%2B.z9?9");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("\u2026");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026]");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("2_8x3f%C?r7o");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("2w~Uib%_\fk", "2w~Uib%_\fk");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("Invalid host: ", 3, 1338);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("oi(0`f1>A.~+[4m?v^", 1320, 1320);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("hCG%7D9!L-)%3F;T%5E,+R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: hCG%7D9!L-)%3F;T%5E,+R
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("xGHi4%f%,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: xGHi4%f%,
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username("EQEqQz+7*!");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("+", true);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b.teCount < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b.teCount < 0: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b::ec:unt%20%3c%200:%20");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b::ec:unt%20%3c%200:%20
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b::eCount < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b::eCount < 0: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b::ec::nt < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b::ec::nt < 0: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[<ST~)qM*%:]:Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [<ST~)qM*%:]:Q
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Bu-e#d~2&+mP");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Bu-e#d~2&+mP
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        HttpUrl.getChecked("MF+>myUc<!q:V");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for MF+>myUc<!q:V
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("T6z");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        HttpUrl.getChecked("HmacSHA1");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for HmacSHA1
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        HttpUrl.getChecked("|a");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for |a
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(".");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("#X");
      assertNotNull(httpUrl_Builder0);
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("INVALID_PORT");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "okhttp3.RequestBody$1");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      
      httpUrl_Builder0.username("-I$nUt^(Q");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("-I$nUt^(Q", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("~");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("/2f)r6?iu|waP");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("2Z}");
      httpUrl_Builder1.addEncodedQueryParameter("E6", "E6");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters("2Z}");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("2Z}");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllQueryParameters("2Z}");
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("zs,fl';l8");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("file:", "zs,fl';l8");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("<}l|P\";/u]<,mYj\"f", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("8A>g0DjYcK4+.z9?9", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "8a%253eg0djyck4+.z9%253f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("#;${v;EHgRuj(W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: #;${v;EHgRuj(W
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("JI-7");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("Dyc!ey7X?'nLw");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removePathSegment(0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(19, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "file:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(128, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-459), ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-3303), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("/..");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 1114111
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("r&Oz c0VMkENNNZNS");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("/https");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /https
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(uRL0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Q:at9!");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Q:at9!
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.resolve("Bs:r)Ip");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:ftp.somefakebutwellformedurl.org/\"':;<=>@[]^`{}|/\"':;<=>@[]^`{}|/?#&!$(),~");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:!");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("!}lY:=Z=.i");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl_Builder1.parse(httpUrl0, "okhttp3.RequestBody$1");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName((-2011));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("okhttp3.ResponseBody$1");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge");
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge", httpUrl0.toString());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:ftp.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("/");
      assertEquals("https://ftp.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge");
      httpUrl0.queryParameter("\r");
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.querySize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.querySize();
      assertEquals(80, httpUrl0.port());
      assertEquals(0, int0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g\"ge");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertEquals("|g\"ge", string0);
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("aZ&tpF=tl@XcH");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("!}lY:=Z=.i");
      httpUrl_Builder1.setQueryParameter("Jt3au7C{8=Nzp47D}", "-I$nUt^(Q");
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder1.parse(httpUrl0, "okhttp3.RequestBody$1");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertEquals("http://foo.bar/okhttp3.RequestBody$1?!}lY:=Z=.i&Jt3au7C{8%3DNzp47D}=-I$nUt^(Q", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g\"ge");
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("okhttp3.ResponseBody$1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      int int0 = httpUrl0.port();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(4, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.url();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      httpUrl0.scheme();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
      assertEquals("/fake/but/wellformed/url:7F%252Fu", string0);
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:fvoovi#fvoovi");
      assertNotNull(httpUrl0);
      
      httpUrl0.pathSegments();
      assertEquals("fvoovi", httpUrl0.fragment());
      assertEquals("http://fvoovi/#fvoovi", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals(4, httpUrl0.pathSize());
      assertTrue(boolean0);
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g\"ge");
      assertNotNull(httpUrl0);
      
      httpUrl0.fragment();
      assertEquals("https://home/apaniche/performance/dataset/gordon_scripts/projects/7_okhttp/?|g%22ge", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.redact();
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("https://www.somefakebutwellformedurl.org/...", string0);
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/some/fake/but/wellformed/url", "7F%2Fu", "U#U_ W");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("U#U_ W", httpUrl0.fragment());
      assertEquals("https://some/fake/but/wellformed/url:7F%252Fu#U%23U_%20W", uRI1.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("UTF-16BE", "pathsegment%20==%20null");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }
}
