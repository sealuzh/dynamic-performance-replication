/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 09:52:51 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dQVC\t.HGj4imO?+");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(dQVC\t.HGj4imO?+");
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      StringReader stringReader1 = new StringReader("j");
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSSubstitution0.print();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.matches(jSTerm1, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.toStr();
      StringReader stringReader0 = new StringReader("!QYebU]3`5`W$3/I");
      jSTerm1.standardizerTerm();
      JSJshopVars.slash = (-2666);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.isEval();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 42;
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSJshopVars.lessT = (-2);
      stringReader0.read(charArray0);
      SystemInUtil.addInputLine("fNF*ffI'Wux(ngMm");
      jSTerm1.makeVariable();
      jSTerm2.listIterator();
      SystemInUtil.addInputLine("*");
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      jSTerm3.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      SystemInUtil.addInputLine("");
      StringReader stringReader1 = new StringReader("fNF*ffI'Wux(ngMm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.pushBack();
      jSTerm0.makeFunction();
      jSTerm3.equals(jSTerm0);
      jSTerm0.toStr();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.toStr();
      StringReader stringReader0 = new StringReader("!QYebU]3`5`W$3/I");
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      jSTerm1.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine("");
      jSTerm1.isGround();
      jSTerm1.iterator();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("u");
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.minus = (-1565);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.leftBrac = (-1565);
      streamTokenizer0.wordChars((-1565), (-1565));
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      jSTerm2.iterator();
      SystemInUtil.addInputLine("\"a ");
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.makeFunction();
      jSTerm0.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.iterator();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ttype = 39;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.minus = (-1565);
      JSTerm jSTerm3 = new JSTerm();
      streamTokenizer0.wordChars(2, 41);
      jSTerm3.isGround();
      jSTerm3.iterator();
      JSJshopVars.dot = 39;
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      streamTokenizer0.pushBack();
      charArray0[4] = 'A';
      charArray0[5] = '_';
      jSSubstitution1.ensureCapacity(39);
      charArray0[6] = 'l';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isEmpty();
      jSTerm1.isGround();
      Object object1 = jSTerm1.clone();
      jSTerm0.addElement(object1);
      JSTerm jSTerm2 = jSTerm1.call();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      Object object2 = jSTerm2.lastElement();
      jSTerm2.add(object2);
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      stringReader0.skip((-2));
      jSTerm1.capacity();
      jSTerm0.toStr();
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      jSTerm2.sort(comparator0);
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm1.listIterator();
      boolean boolean0 = jSTerm1.equals(jSTerm4);
      assertEquals("[7(%N+:Y'G7T#>:, [7(%N+:Y'G7T#>:], [7(%N+:Y'G7T#>:, [7(%N+:Y'G7T#>:]]]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      SystemInUtil.addInputLine("7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.iterator();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ttype = 39;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.minus = (-1580);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.dot = 39;
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      streamTokenizer0.pushBack();
      charArray0[4] = 'A';
      charArray0[5] = '_';
      jSSubstitution1.ensureCapacity(39);
      charArray0[6] = 'l';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("8.0");
      SystemInUtil.addInputLine("?%%%00");
      jSTerm0.addElement("8.0");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isVariable();
      boolean boolean0 = jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.addElement("?%%%00");
      JSTerm jSTerm3 = jSTerm0.call();
      SystemInUtil.addInputLine((String) null);
      Integer integer0 = new Integer((-4));
      jSTerm0.add((Object) integer0);
      boolean boolean1 = jSTerm3.isFunction();
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      jSTerm4.capacity();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals(6, stringBuffer0.length());
      
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm5.listIterator();
      boolean boolean2 = jSTerm5.equals(jSTerm0);
      assertFalse(boolean2);
      
      jSTerm3.isEval();
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      assertNotSame(jSTerm6, jSTerm5);
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEval());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("guoeA$JlbsS<S~]*k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.whitespaceChars((-2935), (-2935));
      jSTerm0.makeEval(true);
      streamTokenizer0.wordChars((-2935), (-2935));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.clonePF();
      jSTerm1.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      jSTerm1.call();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("guoeA$JlbsS<S~]*k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      stringReader0.ready();
      streamTokenizer0.whitespaceChars((-2935), (-2935));
      jSTerm0.makeEval(true);
      streamTokenizer0.wordChars((-2935), (-2935));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.clonePF();
      jSTerm1.print();
      jSTerm1.standardizerTerm();
      jSTerm0.print();
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      jSTerm1.print();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.toStr();
      assertTrue(jSTerm0.isEval());
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "7(%N+:Y'G7T#>:";
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isEval();
      int int0 = (-1612795658);
      streamTokenizer0.whitespaceChars((-1612795658), (-1612795658));
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      jSTerm1.addElement((Object) null);
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(0L);
      jSTerm1.isConstant();
      streamTokenizer0.sval = streamTokenizer0.sval;
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.addAll((Collection) jSTerm0);
      streamTokenizer0.whitespaceChars((-1612795658), (-1612795658));
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      stringReader0.read(charArray0);
      jSTerm1.lastElement();
      jSTerm1.addElement("7(%N+:Y'G7T#>:");
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(0L);
      jSTerm1.isConstant();
      streamTokenizer0.sval = "7(%N+:Y'G7T#>:";
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "dqawc";
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm1.print();
      jSTerm2.applySubstitutionPF(jSSubstitution1);
      Object[] objectArray0 = new Object[2];
      JSJshopVars.leftBrac = (-4);
      objectArray0[0] = (Object) "dqawc";
      jSTerm2.call();
      objectArray0[1] = (Object) stringReader0;
      jSTerm2.toStr();
      JSJshopVars.plus = (-4);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.isFunction();
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      System.setCurrentTimeMillis((-1506L));
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.makeEval(true);
      Integer integer0 = new Integer(3091);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm4.print();
      JSJshopVars.plus = (-2);
      jSTerm0.toStr();
      jSTerm5.matches(jSTerm2, jSSubstitution1);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm5.isGround();
      jSTerm0.matches(jSTerm4, jSSubstitution2);
      assertEquals("[7(%N+:Y'G7T#>:, [7.0]]", jSTerm0.toString());
      
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      assertFalse(jSTerm6.isEval());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.cloneT();
      JSJshopVars.equalT = (-2260);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[5];
      charArray0[2] = 'p';
      charArray0[3] = '*';
      charArray0[4] = 'p';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.read(charArray0);
      jSSubstitution1.removeAll(jSSubstitution0);
      StringReader stringReader1 = new StringReader("7(%N+:Y'G7T#>:");
      StringReader stringReader2 = new StringReader("`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      streamTokenizer1.slashStarComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'7T#1:");
      jSTerm0.addElement("7(%N+:Y'7T#1:");
      stringReader0.markSupported();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Integer integer0 = new Integer(3091);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm2.isConstant();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.negate();
      jSTerm5.print();
      JSJshopVars.plus = (-2);
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) "7(%N+:Y'7T#1:";
      objectArray0[1] = (Object) stringReader0;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm5.applySubstitutionPF(jSSubstitution0);
      jSTerm5.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.addAll(3091, (Collection) jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3091
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StringReader stringReader1 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm1.isEval();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm3, jSSubstitution5);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader2 = new StringReader("?%%%00");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm2.matches(jSTerm0, jSSubstitution6);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm2.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm6.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Integer integer0 = new Integer(3091);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.negate();
      jSTerm4.print();
      JSJshopVars.plus = (-2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "7(%N+:Y'G7T#>:";
      objectArray0[1] = (Object) stringReader0;
      jSTerm4.toArray(objectArray0);
      jSTerm0.toStr();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm3.add((Object) jSTerm4);
      jSTerm0.matches(jSTerm4, jSSubstitution2);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm5, (JSSubstitution) null);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Integer integer0 = new Integer(3091);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.negate();
      jSTerm4.print();
      JSJshopVars.plus = (-2);
      Object[] objectArray0 = new Object[2];
      jSTerm3.makeVariable();
      objectArray0[0] = (Object) "7(%N+:Y'G7T#>:";
      objectArray0[1] = (Object) stringReader0;
      jSTerm4.toArray(objectArray0);
      jSTerm0.toStr();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm4, jSSubstitution2);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm6.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("1.0");
      jSTerm0.add((Object) "7(%N+:Y'G7T#>");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      jSTerm2.toStr();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isConstant();
      jSTerm3.removeAllElements();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      jSTerm0.stream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      stringReader0.read(charArray0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm0.print();
      jSTerm3.toStr();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.print();
      JSJshopVars.plus = (-2);
      jSTerm0.toStr();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm4, jSSubstitution2);
      System.setCurrentTimeMillis(0L);
      jSTerm0.toStr();
      jSTerm3.isEmpty();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("[7(%N+:Y'G7T#>:, [7.0]]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "7(%N+:Y'G7T#>:";
      jSTerm0.add((Object) "7(%N+:Y'G7T#>:");
      Integer integer0 = new Integer((-1526));
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm1);
      JSTerm jSTerm5 = jSTerm0.call();
      JSTerm jSTerm6 = jSTerm0.cloneT();
      jSTerm0.matches(jSTerm4, jSSubstitution0);
      jSTerm6.isEval();
      jSTerm5.call();
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm3.print();
      jSTerm2.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm8 = null;
      try {
        jSTerm8 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(U~)J'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.add((Object) jSTerm3);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement("7(%N+:Y'G7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSJshopVars.VarCounter = (-3);
      jSTerm2.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'G';
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      stringReader0.read(charArray0);
      jSTerm0.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm3, jSSubstitution1);
      jSTerm3.matches(jSTerm0, jSSubstitution3);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Integer integer0 = new Integer(3091);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm3);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm5 = jSTerm3.cloneT();
      jSTerm4.print();
      JSJshopVars.plus = (-2);
      jSTerm0.toStr();
      jSTerm5.matches(jSTerm2, jSSubstitution1);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm5.isGround();
      jSTerm0.matches(jSTerm4, jSSubstitution2);
      assertEquals("[7(%N+:Y'G7T#>:, [7.0]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StringReader stringReader1 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.stream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertEquals(1, jSSubstitution4.size());
      
      boolean boolean1 = jSTerm1.isEval();
      assertEquals("[?%%%0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Integer integer0 = new Integer(39);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.print();
      jSTerm0.toStr();
      jSTerm2.applySubstitutionT(jSSubstitution2);
      assertEquals("[7(%N+:Y'G7T#>:, [7(%N+:Y'G7T#>:]]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Integer integer0 = new Integer(39);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution2);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm2.print();
      jSTerm1.print();
      jSTerm3.call();
      assertEquals("[7(%N+:Y'G7T#>:, [7(%N+:Y'G7T#>:]]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement((Object) null);
      jSTerm1.toStr();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:Y'G7T#>:");
      jSTerm0.addElement("7(%N+:Y'G7T#>:");
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Integer integer0 = new Integer(39);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution2);
      jSTerm1.cloneT();
      jSTerm2.print();
      jSTerm0.toStr();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8x\"_x_qgF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("V{W]iFNqoq:D]");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertTrue(jSSubstitution3.fail());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      jSTerm0.addElement("7(%N+:'G;7T#>:");
      jSTerm0.listIterator();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(17, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSSubstitution2.fail());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?&%");
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("7(%N+:'G;7T#>:");
      jSTerm0.listIterator();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.stream();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution1);
      boolean boolean1 = jSTerm0.equals(jSTerm4);
      assertTrue(boolean1);
      
      jSTerm4.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm4, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      Integer integer0 = new Integer(2788);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement((Object) null);
      jSTerm0.listIterator();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.parallelStream();
      jSTerm0.add((Object) stream0);
      Integer integer0 = new Integer((-1526));
      jSTerm0.addElement(stream0);
      JSJshopVars.equalT = (-1526);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8x\"_x_qgF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toString();
      Object object0 = jSTerm1.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      predicate0.negate();
      jSTerm0.stream();
      jSSubstitution0.removeIf(predicate0);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "SoQ";
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      jSSubstitution0.clone();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPairVarTerm");
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPairVarTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) stringReader0);
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(`7DQA_4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChar((-4181));
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      boolean boolean1 = jSTerm0.isFunction();
      assertTrue(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution0.isEmpty());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals(1, jSTerm3.capacity());
      
      jSTerm2.print();
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.toStr();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSJshopVars.exclamation = (-4100);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.dot = 1;
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.isGround();
      jSTerm0.addElement(spliterator0);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.add((Object) spliterator0);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(92, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSSubstitution1);
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SoQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.close();
      JSJshopVars.minus = 61;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(1586L);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.parallelStream();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-4181));
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0);
      jSTerm1.print();
      assertEquals("[?%%%, null]", jSTerm0.toString());
      assertTrue(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.add((Object) null);
      jSTerm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isEval();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(96, 96);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "_");
      jSTerm0.addElement("_");
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.add((Object) spliterator0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.add((Object) spliterator0);
      jSTerm0.addElement(spliterator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(61);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.addElement(spliterator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm0.add((Object) spliterator0);
      jSTerm0.addElement(spliterator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$VectorSpliterator cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 1;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSJshopVars.lessT = (-2);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-3));
      jSTerm0.addElement(integer0);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPairVarTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("planningdomain:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm0);
      JSJshopVars.leftPar = (-3);
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals("[%%%]", jSTerm1.toString());
      
      jSTerm2.toStr();
      stringReader0.read();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      stringReader0.close();
      jSTerm3.clonePF();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-3));
      jSTerm1.isFunction();
      boolean boolean0 = jSTerm2.isFunction();
      assertFalse(boolean0);
      
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm4.replaceAll(unaryOperator0);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm5, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("(DQA_4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.clear();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertEquals(0, jSSubstitution0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isVariable());
      assertEquals("[?%%%0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.verticalL = 631;
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StringReader stringReader0 = new StringReader("NgF6\"8i3PCPO=No0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1053.9895179848816;
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3);
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm2.isFunction());
      
      jSTerm3.iterator();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
      
      boolean boolean0 = jSTerm3.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("d)]8<s}vS$e");
      jSTerm0.makeConstant();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(125, 125);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      stringReader0.ready();
      jSTerm0.print();
      System.setCurrentTimeMillis((-3));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      assertEquals("[?%%%]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPairVarTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.removeAll(jSPredicateForm0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEval());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[?%%%]", jSTerm1.toString());
      
      boolean boolean0 = jSTerm1.isVariable();
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StringReader stringReader1 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(1, jSSubstitution1.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?&%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      JSJshopVars.slash = 62;
      StringReader stringReader0 = new StringReader("Iu<S-X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(523, 1037);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("planningdomain:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      boolean boolean0 = jSTerm2.isConstant();
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm1.print();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("7(%N+:'G;7T#>:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      StringReader stringReader0 = new StringReader("Qai!@F8~M41IBh&p9]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[xI\"O9R~lgEW?&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      JSJshopVars.apostrophe = 1531;
      JSJshopVars.slash = (-2186);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("planningdomain:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      jSTerm0.removeAllElements();
      int int0 = 593;
      streamTokenizer0.wordChars(0, 593);
      streamTokenizer0.whitespaceChars(1666, 1666);
      stringReader0.skip(915L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      int int0 = 1531;
      JSJshopVars.apostrophe = 1531;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q\"=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      charArray0[2] = 'K';
      charArray0[3] = 'i';
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      streamTokenizer0.pushBack();
      jSTerm0.addElement("<");
      streamTokenizer0.sval = "3 g>=K[lG7(";
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      jSTerm0.makeEval(false);
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("[%%%, <]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSEvaluate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = '&';
      charArray0[2] = '2';
      stringReader0.read(charArray0);
      CharBuffer.wrap(charArray0);
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.isEval();
      jSTerm1.isVariable();
      jSTerm1.isFunction();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertTrue(jSTerm1.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 114;
      JSJshopVars.dot = (-5416);
      JSJshopVars.exclamation = 114;
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 0;
      StringReader stringReader0 = new StringReader("wUol@_.FB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.trimToSize();
      jSTerm0.equals(jSTerm1);
      JSJshopVars.slash = 0;
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = (-1);
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[xI\"O9R~lgEW?&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8x\"_x_qgF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g?Wi^6%p0JV~u{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(513);
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.trimToSize();
      stringReader0.read();
      JSJshopVars.rightPar = 32;
      jSTerm1.ensureCapacity(513);
      char[] charArray0 = new char[0];
      streamTokenizer0.pushBack();
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 0, 2012);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "umd.cs.shop.JSPredicateForm");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ouV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(32, streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt((-1234));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1234
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2o((wJO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = ')';
      charArray0[2] = 'I';
      charArray0[3] = 'q';
      charArray0[4] = '\'';
      charArray0[5] = 'Q';
      charArray0[6] = 'E';
      charArray0[7] = 'a';
      charArray0[8] = 'K';
      stringReader0.read(charArray0);
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm0.print();
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=2.0], line 1", streamTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
