/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:05:15 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1353));
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(90);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-119));
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.number();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ask7h!8u+>VUsJG_;h");
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("ask7h!8u+>VUsJG_;h");
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("s", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("k", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("7", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer2.star();
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">o3,");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("3", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.literal();
      xPathLexer0.consume();
      assertEquals("[ (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[;!T");
      Token token0 = xPathLexer0.colon();
      assertEquals("[", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(2, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(")");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(23, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("T", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer1.div();
      xPathLexer1.setXPath("/'0vFT");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.consume(5);
      xPathLexer0.isIdentifierChar(' ');
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.plus();
      assertEquals(" ", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(1, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "<?=`c";
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("/'TS0vFT");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.consume(7);
      xPathLexer0.hasMoreChars();
      xPathLexer0.comma();
      Token token2 = new Token(7, "[ (-2) ()", 7, 7);
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.consume(7);
      assertEquals("wn>!1H3", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer0.consume(30);
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "F)>eA\\Vy}A";
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("L^fO.L_");
      Token token0 = xPathLexer0.slashes();
      xPathLexer1.not();
      xPathLexer1.not();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" %Zpo*fnWho4K");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token0 = new Token(113, "3e|LF/F{U<+M;.T+S?", 113, (-1963));
      XPathLexer xPathLexer1 = new XPathLexer("3e|LF/F{U<+M;.T+S?");
      xPathLexer1.nextToken();
      String string0 = "dU7:M";
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ic'usUne<XaR(}>r+");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("c", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("-XS{I'0\"8=&GJA(1");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer2.whitespace();
      Token token1 = xPathLexer1.minus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("[", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(1, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q) \"C~p\n");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.dollar();
      xPathLexer1.operatorName();
      token0.toString();
      xPathLexer1.slashes();
      boolean boolean0 = xPathLexer0.isIdentifierChar('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H'");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("wn", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.leftParen();
      String string0 = token1.toString();
      assertEquals("[ (1) (>)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>2 ks;PikB");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(23, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      Token token3 = xPathLexer0.star();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      XPathLexer xPathLexer2 = new XPathLexer(".>2 ks;PikB");
      String string0 = token2.toString();
      assertEquals("[ (1) (2)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (21) (.)", string1);
      
      String string2 = token3.toString();
      assertEquals("[ (20) ( )", string2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VlXUU6%!ILX*");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      token0.toString();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dots();
      Token token1 = xPathLexer3.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a.G$NRQ");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals("a.G", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("N", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "W21ss;ikB";
      XPathLexer xPathLexer0 = new XPathLexer("W21ss;ikB");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("W21ss;ikB");
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq1{<4(Ku>A*8");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      xPathLexer1.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eE");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("_R'(x7jy^K-ox", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('H');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.colon();
      assertEquals("_", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z:@sm");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("Z", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer1.operatorName();
      xPathLexer0.div();
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setXPath("-XS{I'0\"8=&GJA(1");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.not();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer2.whitespace();
      Token token1 = xPathLexer1.minus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.setXPath("[ (3) (n)");
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) (n)");
      xPathLexer1.rightParen();
      xPathLexer0.minus();
      xPathLexer0.setXPath("lU?9Fz]Q");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("[ (3) (n)");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K`]9Mp}4X{t9S");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("`", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertEquals(27, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("'ey");
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = "RLZ3L,UI{SX#NL-:3T";
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.identifier();
      xPathLexer1.nextToken();
      xPathLexer2.consume((-2319));
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2319));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7,Xk2P{s");
      xPathLexer0.plus();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q) \"C~p\n");
      Token token0 = xPathLexer0.pipe();
      assertEquals("Q", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(" ", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (6) (F)", string0);
      
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setXPath("[ (6) (F)");
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (F)");
      xPathLexer1.or();
      Token token2 = xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("cxzAcHE_#I!X\u0003x");
      Token token3 = xPathLexer0.colon();
      xPathLexer0.setXPath("");
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      xPathLexer0.setXPath("FE 0Va6dx<R");
      Token token5 = xPathLexer2.pipe();
      assertEquals("c", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer2.operatorName();
      Token token6 = xPathLexer2.rightParen();
      assertEquals("x", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      xPathLexer1.setXPath("");
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.hasMoreChars();
      Token token7 = new Token(1295, "", 1295, 86);
      XPathLexer xPathLexer3 = new XPathLexer("[ (6) (F)");
      Token token8 = xPathLexer2.nextToken();
      assertEquals("zAcHE_", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      String string1 = token3.toString();
      assertEquals("[ (18) ([)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (5) ([)", string2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Sp");
      xPathLexer1.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n>!|N13");
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer1.dollar();
      xPathLexer0.nextToken();
      String string0 = "Gey";
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ic'usUne<XaR(}>r+");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Ic", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("'", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9");
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      String string0 = "";
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<?k=`c");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.dollar();
      xPathLexer0.operatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (_)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (19) (_)");
      Token token1 = xPathLexer1.equals();
      assertEquals("[", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      String string1 = token2.toString();
      assertEquals("[ (-2) ()", string1);
      
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(11, int0);
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "n>!|N13";
      XPathLexer xPathLexer0 = new XPathLexer("n>!|N13");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.minus();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token1 = xPathLexer0.colon();
      token1.toString();
      token1.toString();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[;!T");
      xPathLexer0.colon();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("2");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ic'usUne<XaR(}>r+");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^ahLi]ws<eFFD&w*m@}");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("a", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("h", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("Li", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("]", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("s", token7.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume(1026);
      xPathLexer0.setXPath("^ahLi]ws<eFFD&w*m@}");
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[;!T");
      Token token0 = xPathLexer0.rightParen();
      String string0 = token0.toString();
      assertEquals("[ (2) ([)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";!T", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(";", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{ ~9a");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.literal();
      xPathLexer0.rightBracket();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("ask7h!8u+>UsJG_;h");
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq1{<4(Ku>A*8");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("x%u'/M]`'/Z,xq>I");
      xPathLexer1.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("[ (11) (F)");
      xPathLexer2.relationalOperator();
      xPathLexer1.slashes();
      String string1 = xPathLexer0.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ask7h!8u+>VUsJG_;h");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.at();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.nextToken();
      xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%n/7");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("%n/7");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("Ke");
      xPathLexer0.nextToken();
      xPathLexer0.consume((-2484));
      Token token0 = xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<?k`c");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer2.identifier();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "mxLob\"8a4N'oun;l";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("mxLob\"8a4N'oun;l");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token0);
      Token token1 = xPathLexer3.getPreviousToken();
      xPathLexer1.operatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dots();
      token1.toString();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.setXPath("[ (13) (n)");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token0);
      Token token2 = xPathLexer4.whitespace();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ask7h!8u+>UsJG_;h");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("s", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("!", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer1.setXPath("J<E");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token4 = new Token(337, "", 337, (-28));
      XPathLexer xPathLexer4 = new XPathLexer("+I:<LbWganJE");
      Token token5 = xPathLexer4.nextToken();
      assertEquals(5, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("dU7:M");
      xPathLexer5.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer6.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer3.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.and();
      Token token8 = xPathLexer5.rightBracket();
      assertEquals("d", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0&T");
      xPathLexer0.minus();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wn>!1H3");
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (13) (w)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("|Q#t8=J\"E\"hm[J|R!D");
      Token token2 = xPathLexer2.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer2.rightParen();
      assertEquals("Q", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer2.isIdentifierChar('$');
      Token token6 = xPathLexer2.nextToken();
      assertEquals("#t8=J\"E\"hm[J|R!D", token6.getTokenText());
      
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer1.pipe();
      xPathLexer1.div();
      xPathLexer1.operatorName();
      xPathLexer0.setXPath("5.LNQPh");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("5.LNQPh");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F)>eAVy}A");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("");
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.and();
      token1.toString();
      Token token2 = xPathLexer0.comma();
      xPathLexer1.getPreviousToken();
      token1.toString();
      token2.toString();
      xPathLexer3.at();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ask7h!8u+>VUsJG_;h");
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("ask7h!8u+>VUsJG_;h");
      xPathLexer0.not();
      Token token0 = xPathLexer1.not();
      assertEquals("a", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals("k", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer2.leftParen();
      assertEquals(1, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("6>iLq?4i.|");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-pE?U;WCr{|Gy*1{Zs");
      xPathLexer0.setXPath("-pE?U;WCr{|Gy*1{Zs");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("-p", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("C", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("r", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("{", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2osmq=q+-[/8");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setXPath("GI CZl=tOvxOo%icyJ");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("I", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("CZl", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iyvd/");
      Token token0 = xPathLexer0.dots();
      assertEquals("i", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("iyvd/");
      Token token1 = xPathLexer0.notEquals();
      String string0 = token1.toString();
      assertEquals("[ (22) (i)", string0);
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.not();
      assertEquals("v", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("/", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer(":$5W|2in2~&)94}8");
      xPathLexer2.nextToken();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.setXPath("*7J$om(z.8`J'&");
      Token token1 = xPathLexer0.at();
      assertEquals("", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = new Token((-28), "", (-712), (-712));
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(20, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("7", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("J$", token5.getTokenText());
      
      xPathLexer1.and();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<?k=`c");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("?", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("k", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(21, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("Z:@sm");
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L.a'H~Ow");
      Token token0 = xPathLexer0.dots();
      assertEquals("L.", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      xPathLexer0.isIdentifierChar('3');
      Token token2 = xPathLexer0.colon();
      assertEquals("'", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("~", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("O", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      assertNotNull(token5);
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z.ifMFxroh*0+N:i");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(".i", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("fMFxroh", token2.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("*", token3.getTokenText());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("0", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("+", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(":i", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('Q');
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("J<E");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.consume();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("E", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fq0{<4(Ku>A@8");
      Token token0 = xPathLexer0.at();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("`");
      xPathLexer1.setPreviousToken(token0);
      String string0 = token0.toString();
      assertEquals("[ (16) (F)", string0);
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      String string1 = token1.toString();
      assertEquals("[ (15) ()", string1);
      
      token0.toString();
      Token token2 = xPathLexer1.rightBracket();
      String string2 = token2.toString();
      assertEquals("[ (4) (`)", string2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("_R'(x7jy^K-ox");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.setXPath("(@g@3Pw'&PJ^R{X^!$ ");
      Token token1 = xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.setPreviousToken(token1);
      XPathLexer xPathLexer2 = new XPathLexer(":1I0`Lw7;Jae");
      Token token2 = xPathLexer0.whitespace();
      xPathLexer1.number();
      token2.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("[ (26) ()");
      xPathLexer2.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      boolean boolean0 = xPathLexer3.isIdentifierChar('k');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/'0vFT");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.not();
      assertEquals("0", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath("Ic'usUne<XaR(}>r+");
      Token token3 = xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("/'0vFT");
      String string0 = token1.toString();
      assertEquals("[ (2) (')", string0);
      
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (19) (Ic)", string1);
      
      xPathLexer1.setPreviousToken(token4);
      assertEquals("'", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer4.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer2.relationalOperator();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.colon();
      assertEquals(18, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P1GdiF\"@E");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      xPathLexer0.pipe();
      Token token1 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F4E:_n");
      Token token0 = xPathLexer0.not();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.notEquals();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'t`/qYZ2G~Jrk}'^g2m");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      token1.toString();
      xPathLexer1.or();
      token0.toString();
      xPathLexer1.consume((-1504));
      token1.toString();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".@2 ks;rid_");
      Token token0 = xPathLexer0.star();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("2", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(".@2 ks;rid_");
      token0.toString();
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer2.div();
      String string0 = token0.toString();
      assertEquals("[ (20) (.)", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("Z:@M");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("Z:@M");
      xPathLexer1.equals();
      xPathLexer2.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer1.colon();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.or();
      Token token1 = xPathLexer2.pipe();
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.setPreviousToken((Token) null);
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer(")");
      xPathLexer2.doubleColon();
      xPathLexer2.star();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token2 = xPathLexer8.slashes();
      token1.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
