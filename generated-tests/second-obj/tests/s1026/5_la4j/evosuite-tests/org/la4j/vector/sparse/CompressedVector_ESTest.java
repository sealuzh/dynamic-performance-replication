/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:14:06 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-621.45572680792);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 689;
      int int1 = (-1328);
      // Undeclared exception!
      try { 
        CompressedVector.zero(689, (-1328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1328.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 535;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 535;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      Locale locale0 = Locale.FRANCE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = compressedVector0.mkString(numberFormat0);
      assertEquals("535,00 \u20AC 0,00 \u20AC", string0);
      
      compressedVector0.isZeroAt(535);
      compressedVector0.iterator();
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 728;
      CompressedVector.zero(728);
      int int1 = 722;
      CompressedVector compressedVector0 = new CompressedVector(728, 722, (double[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(45);
      compressedVector0.setAll((-442.650144));
      Vector.constant(45, 1021.4809019145);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 2226;
      int[] intArray0 = new int[8];
      intArray0[0] = 45;
      compressedVector0.min();
      intArray0[1] = 2226;
      intArray0[2] = 2226;
      Long long0 = new Long(45);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 651;
      // Undeclared exception!
      try { 
        CompressedVector.zero(651, 708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 708.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(705);
      assertEquals(705, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3343, 3343);
      compressedVector0.iterator();
      assertEquals(3343, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 558);
      Vector vector0 = compressedVector0.blankOfLength(558);
      assertTrue(vector0.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(16);
      Byte byte0 = new Byte((byte) (-58));
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(0.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        CompressedVector.random(3, 2292.038888, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(3, 1.0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(5.0).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-90));
      // Undeclared exception!
      try { 
        CompressedVector.random((-90), (double) (-90), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements((-1186), (-1186));
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 534;
      doubleArray0[1] = (-45.82);
      doubleArray0[2] = (double) 534;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 534;
      int[] intArray0 = new int[3];
      intArray0[0] = 534;
      intArray0[1] = 534;
      intArray0[2] = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 534, doubleArray0, intArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.setAll(1791.403);
      Vector.zero(0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toSparseVector();
      compressedVector0.setAll((-2326.2204872281122));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2254;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2254;
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[4] = 13;
      intArray0[5] = 2254;
      intArray0[6] = 13;
      CompressedVector compressedVector0 = new CompressedVector(2254, 13, doubleArray0, intArray0);
      long long0 = 486L;
      Long long1 = new Long(486L);
      Long long2 = new Long(2254);
      Long.getLong("WgDY<!R!Dk64gY", long2);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.put((Integer) 13, long1);
      hashMap0.entrySet();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2254);
      // Undeclared exception!
      try { 
        compressedVector1.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2063, 37);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.set(2063, 2063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2063' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = hashMap0.put(integer0, (Byte) null);
      assertNull(byte0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 889.609;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {889.609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(722, (-1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertArrayEquals(new double[] {889.609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(4, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 45;
      CompressedVector compressedVector0 = new CompressedVector(45);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      
      Vector vector0 = Vector.constant(45, 1021.4809019145);
      assertNotNull(vector0);
      assertEquals(45, vector0.length());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 27;
      int[] intArray0 = new int[3];
      intArray0[0] = 45;
      intArray0[1] = 45;
      intArray0[2] = 0;
      CompressedVector compressedVector1 = new CompressedVector(27, 45, doubleArray0, intArray0);
      assertNotNull(compressedVector1);
      assertEquals(27, compressedVector1.length());
      assertEquals(45, compressedVector1.cardinality());
      assertEquals(1.6666666666666667, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {27.0, 27.0, 45.0, 27.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {45, 45, 0}, intArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 2165);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(2165, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      int int1 = 13;
      compressedVector2.set(13, 45);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(4.6189376443418013E-4, compressedVector2.density(), 0.01);
      assertEquals(2165, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        compressedVector1.nonZeroAt(45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(13);
      assertEquals(13.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = linkedList0.offer(double0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int int0 = Byte.compare((byte)9, (byte)37);
      assertEquals((-28), int0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double1 = compressedVector0.sum();
      assertEquals(13.0, double1, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(474, 474);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(474, compressedVector0.length());
      
      Vector vector0 = compressedVector0.subtract((double) 474);
      assertNotNull(vector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(474, compressedVector0.length());
      assertEquals(474, vector0.length());
      
      compressedVector0.setAll(474);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(474, compressedVector0.length());
      assertEquals(474, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(595);
      assertNotNull(compressedVector0);
      assertEquals(595, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-442.650144));
      assertEquals(595, compressedVector0.length());
      assertEquals(595, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.constant(0, 595);
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2226, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 698;
      doubleArray0[1] = (double) 698;
      doubleArray0[2] = (double) 698;
      doubleArray0[3] = (double) 698;
      doubleArray0[4] = (double) 698;
      doubleArray0[5] = (double) 698;
      doubleArray0[6] = (double) 698;
      doubleArray0[7] = (double) 698;
      doubleArray0[8] = (double) 698;
      int[] intArray0 = new int[7];
      intArray0[0] = 698;
      intArray0[1] = 698;
      intArray0[2] = 698;
      intArray0[3] = 698;
      intArray0[4] = 698;
      intArray0[5] = 698;
      intArray0[6] = 698;
      CompressedVector compressedVector0 = new CompressedVector(698, 698, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(698, compressedVector0.length());
      assertEquals(698, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {698, 698, 698, 698, 698, 698, 698}, intArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(698, compressedVector0.length());
      assertEquals(698, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0, 698.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {698, 698, 698, 698, 698, 698, 698}, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(595);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(595, compressedVector0.length());
      
      int int0 = 0;
      compressedVector0.setAll((-442.650144));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(595, compressedVector0.cardinality());
      assertEquals(595, compressedVector0.length());
      
      Vector vector0 = Vector.constant(0, 595);
      assertNotNull(vector0);
      assertEquals(0, vector0.length());
      
      double double0 = compressedVector0.get(586);
      assertEquals((-442.650144), double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(595, compressedVector0.cardinality());
      assertEquals(595, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(756, 756);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(756, compressedVector0.length());
      
      Integer integer0 = new Integer(756);
      assertEquals(756, (int)integer0);
      assertNotNull(integer0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)756).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(756, compressedVector0.length());
      assertEquals(0.0013227513227513227, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(756, compressedVector0.length());
      assertEquals(0.0013227513227513227, compressedVector0.density(), 0.01);
      assertEquals(0.0013227513227513227, compressedVector1.density(), 0.01);
      assertEquals(756, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.swapElements((-692), 756);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(756, compressedVector0.length());
      assertEquals(0.0013227513227513227, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-692), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-692' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      assertNotNull(compressedVector0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      Vector vector0 = Vector.constant(728, 728);
      assertNotNull(vector0);
      assertEquals(728, vector0.length());
      
      double double0 = compressedVector0.get(3);
      assertEquals(728.0, double0, 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      int int0 = 9;
      compressedVector0.swapElements(3, 9);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(9, 942);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(728);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(728, sparseVector0.length());
      
      compressedVector0.setAll(470.0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(728, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Long long0 = new Long((-215L));
      assertEquals((-215L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1135), vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 31;
      CompressedVector compressedVector0 = new CompressedVector(31);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(31, compressedVector0.length());
      
      compressedVector0.setAll(31);
      assertEquals(31, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(31, compressedVector0.length());
      
      double double0 = 1021.4809019145;
      Vector vector0 = Vector.constant(31, 1021.4809019145);
      assertNotNull(vector0);
      assertEquals(31, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.967741935483871, compressedVector0.density(), 0.01);
      assertEquals(31, compressedVector0.length());
      assertEquals(30, compressedVector0.cardinality());
      
      int int1 = (-1716);
      // Undeclared exception!
      try { 
        SparseVector.zero((-1716), (-1716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1716
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 45;
      CompressedVector compressedVector0 = new CompressedVector(45);
      assertNotNull(compressedVector0);
      assertEquals(45, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = (-442.650144);
      compressedVector0.setAll(45);
      assertEquals(45, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double1 = 1021.4809019145;
      Vector vector0 = Vector.constant(45, 1021.4809019145);
      assertNotNull(vector0);
      assertEquals(45, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1021.4809019145).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(45, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        SparseVector.zero((-1716), (-1716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1716
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 535;
      doubleArray0[1] = (-45.82);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 535;
      doubleArray1[1] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      assertNotNull(compressedVector0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {535.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = compressedVector0.isZeroAt(535);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {535.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {535.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = compressedVector0.nonZeroAt(0);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {535.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = new Long((-21L));
      assertEquals((-21L), (long)long0);
      assertNotNull(long0);
      
      String string0 = "J ";
      int int0 = 2465;
      Long long1 = Long.getLong("J ", (-21L));
      assertEquals((-21L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      long long2 = Long.max((-21L), (-21L));
      assertEquals((-21L), long2);
      
      Long long3 = new Long(0L);
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      Long long4 = new Long((-21L));
      assertEquals((-21L), (long)long4);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      
      Set<Map.Entry<Integer, Long>> set0 = (Set<Map.Entry<Integer, Long>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2465);
      assertNotNull(compressedVector0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2465, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-4723.0), (-4723.0), (double)(-21L), (double)0L, (double)(-21L)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      assertNotNull(compressedVector0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(3, (-1275.9055342414));
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-2021L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 45;
      CompressedVector compressedVector0 = new CompressedVector(45, 45);
      assertNotNull(compressedVector0);
      assertEquals(45, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      int int1 = 0;
      compressedVector0.setAll(45);
      assertEquals(45, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.constant(45, 45);
      assertNotNull(vector0);
      assertEquals(45, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte)18);
      assertEquals((byte)18, (byte)byte0);
      assertNotNull(byte0);
      
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(vectorOperation0).apply(any(org.la4j.vector.DenseVector.class));
      VectorVectorOperation<Byte> vectorVectorOperation0 = (VectorVectorOperation<Byte>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(vectorOperation0).when(vectorVectorOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      Byte byte1 = compressedVector0.apply(vectorVectorOperation0, vector0);
      assertEquals((byte)18, (byte)byte1);
      assertNotNull(byte1);
      assertEquals(45, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(45, vector0.length());
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector0.set(0, 0);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(44, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      assertEquals(0.9777777777777777, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728, 728);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      
      double double0 = compressedVector0.get(696);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -792
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(595);
      assertNotNull(compressedVector0);
      assertEquals(595, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(595, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(595, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      
      compressedVector0.setAll((-442.650144));
      assertEquals(595, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(595, compressedVector0.cardinality());
      
      BasicVector basicVector0 = (BasicVector)Vector.constant(595, 1021.4809019145);
      assertNotNull(basicVector0);
      assertEquals(595, basicVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      intArray0[0] = 595;
      intArray0[2] = 0;
      compressedVector0.swapElements((-23), (-623));
      assertEquals(595, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(595, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-623), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-126.13323);
      doubleArray0[1] = (double) (-1664);
      doubleArray0[5] = (-126.13323);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(7, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.42857142857142855, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-126.13323), (-1664.0), 0.0, 0.0, 0.0, (-126.13323), 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(0, (-1664));
      assertEquals(7, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.42857142857142855, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-126.13323), (-1664.0), 0.0, 0.0, 0.0, (-126.13323), 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-1111), 1);
      assertEquals(7, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.42857142857142855, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-126.13323), (-1664.0), 0.0, 0.0, 0.0, (-126.13323), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      assertEquals(728, compressedVector1.length());
      assertEquals(0.0013736263736263737, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      compressedVector0.swapElements(728, 3);
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1466));
      assertEquals((-1466), (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double((-1466));
      assertEquals((-1466.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Collection<Double> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Double double1 = hashMap0.put(integer0, double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      assertNotNull(compressedVector0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 889.609;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(889.609).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(889.609, double0, 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(708, (-1484));
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(889.609).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1484), vectorFunction1);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0027472527472527475, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Vector vector0 = Vector.unit(1222);
      assertNotNull(vector0);
      assertEquals(1222, vector0.length());
      
      CompressedVector compressedVector0 = new CompressedVector(37);
      assertNotNull(compressedVector0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1664);
      doubleArray0[5] = (-126.13323);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertArrayEquals(new double[] {(-1664.0), 0.0, 0.0, 0.0, 0.0, (-126.13323)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      compressedVector1.swapElements(0, (-1664));
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertArrayEquals(new double[] {(-1664.0), 0.0, 0.0, 0.0, 0.0, (-126.13323)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      double double0 = compressedVector1.getOrElse(0, 37);
      assertEquals(37.0, double0, 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertArrayEquals(new double[] {(-1664.0), 0.0, 0.0, 0.0, 0.0, (-126.13323)}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("@g,g}!/P6r9+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(293);
      assertNotNull(compressedVector0);
      assertEquals(293, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(2936.0);
      assertEquals(293, compressedVector0.length());
      assertEquals(293, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = Vector.zero(706);
      assertNotNull(vector0);
      assertEquals(706, vector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(293, compressedVector0.length());
      assertEquals(293, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(293, compressedVector0.length());
      assertEquals(293, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(293, sparseVector0.cardinality());
      assertEquals(293, sparseVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(293, vectorFunction0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(293, compressedVector0.length());
      assertEquals(293, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-707));
      assertFalse(boolean0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(293, compressedVector0.length());
      assertEquals(293, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-806), 712);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 293
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 889.609;
      doubleArray0[1] = (double) 2226;
      doubleArray0[3] = 889.609;
      doubleArray0[5] = 889.609;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertArrayEquals(new double[] {889.609, 2226.0, 0.0, 889.609, 0.0, 889.609, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(1, (-1));
      assertEquals(0.5714285714285714, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertArrayEquals(new double[] {889.609, 2226.0, 0.0, 889.609, 0.0, 889.609, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("The density value should be between 0 and 1.0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728, 728);
      assertNotNull(compressedVector0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.apply((VectorVectorOperation<Vector>) ooPlaceVectorsAddition0, (Vector) compressedVector0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(728, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.0013736263736263737, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = null;
      try {
        compressedVector2 = new CompressedVector((-792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -792
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(728);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(728, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)728).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0013736263736263737, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.length());
      
      compressedVector0.setAll(3);
      assertEquals(728, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.cardinality());
      
      Vector vector0 = Vector.constant(728, 728);
      assertNotNull(vector0);
      assertEquals(728, vector0.length());
      
      double double0 = compressedVector0.get(3);
      assertEquals(3.0, double0, 0.01);
      assertEquals(728, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.cardinality());
      
      compressedVector0.swapElements(3, 9);
      assertEquals(728, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(728, compressedVector0.cardinality());
      
      int int0 = (-651);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, 942);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(1798.0);
      assertEquals(1798.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1.0F, 3776.115F);
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = Float.min((-2225.709F), 3776.115F);
      assertEquals((-2225.709F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.add((Vector) compressedVector1);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector2.outerProduct(compressedVector0);
      assertNotNull(cRSMatrix0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(6465608.0, cRSMatrix0.max(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1474.4).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      String string0 = compressedVector0.toCSV();
      assertEquals("1474.400", string0);
      assertNotNull(string0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      VectorFactory<Vector> vectorFactory1 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector2).when(vectorFactory1).apply(anyInt());
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.to(vectorFactory1);
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertSame(compressedVector2, compressedVector3);
      assertSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector2.length());
      assertEquals(1, compressedVector3.length());
      assertEquals(1.0, compressedVector3.density(), 0.01);
      assertEquals(1, compressedVector3.cardinality());
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      
      boolean boolean1 = compressedVector1.nonZeroAt(1799);
      assertFalse(boolean1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector2);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector1.equals((Object)compressedVector3));
      assertTrue(compressedVector1.equals((Object)compressedVector2));
      assertFalse(boolean1 == boolean0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector3));
      
      org.evosuite.runtime.Random.setNextRandom(0);
      org.evosuite.runtime.Random.setNextRandom(0);
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float(1798.0);
      assertEquals(1798.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1.0F, 3555.653F);
      assertEquals(1.0F, float1, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float float2 = Float.min((-2225.709F), 3776.115F);
      assertEquals((-2225.709F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean1 = linkedList0.add(float0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.add((Vector) compressedVector1);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(2, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(2, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(2, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      String string0 = compressedVector0.toCSV();
      assertEquals("0.000, 0.000", string0);
      assertNotNull(string0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(2, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      VectorFactory<Vector> vectorFactory1 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory1).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory1);
      assertNull(vector0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(2, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      boolean boolean2 = compressedVector1.nonZeroAt(1799);
      assertFalse(boolean2);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertEquals(2, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector2);
      assertSame(compressedVector0, compressedVector1);
      assertEquals(2, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      org.evosuite.runtime.Random.setNextRandom(0);
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2254;
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[4] = 13;
      intArray0[5] = 2254;
      intArray0[6] = 13;
      CompressedVector compressedVector0 = new CompressedVector(2254, 13, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(13, compressedVector0.cardinality());
      assertEquals(0.005767524401064774, compressedVector0.density(), 0.01);
      assertEquals(2254, compressedVector0.length());
      assertArrayEquals(new double[] {2254.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 13, 13, 0, 13, 2254, 13, 0}, intArray0);
      
      Long long0 = new Long(486L);
      assertEquals(486L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(2254);
      assertEquals(2254L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = Long.getLong("WgDY<!R!Dk64gY", long1);
      assertEquals(2254L, (long)long2);
      assertNotNull(long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long3 = hashMap0.put((Integer) 13, long0);
      assertNull(long3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      
      Set<Map.Entry<Integer, Long>> set0 = (Set<Map.Entry<Integer, Long>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2254);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(4.4365572315882877E-4, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(2254, compressedVector1.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(13, vectorFunction0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2254, compressedVector1.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero(vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 45;
      CompressedVector compressedVector0 = new CompressedVector(45);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(45, compressedVector0.length());
      
      Vector vector0 = Vector.constant(45, 1021.4809019145);
      assertNotNull(vector0);
      assertEquals(45, vector0.length());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) 27;
      doubleArray0[2] = (double) 45;
      doubleArray0[3] = (double) 27;
      int[] intArray0 = new int[3];
      intArray0[0] = 45;
      intArray0[1] = 45;
      intArray0[2] = 0;
      CompressedVector compressedVector1 = new CompressedVector(27, 45, doubleArray0, intArray0);
      assertNotNull(compressedVector1);
      assertEquals(27, compressedVector1.length());
      assertEquals(45, compressedVector1.cardinality());
      assertEquals(1.6666666666666667, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {27.0, 27.0, 45.0, 27.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {45, 45, 0}, intArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put((Integer) 45, double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 2165);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(4.6189376443418013E-4, compressedVector2.density(), 0.01);
      assertEquals(2165, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      int int1 = 13;
      compressedVector2.set(13, 45);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertEquals(9.237875288683603E-4, compressedVector2.density(), 0.01);
      assertEquals(2165, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      // Undeclared exception!
      try { 
        compressedVector1.nonZeroAt(45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 1000;
      doubleArray0[4] = (double) 1000;
      int[] intArray0 = new int[2];
      intArray0[0] = 25;
      intArray0[1] = 1000;
      CompressedVector compressedVector0 = new CompressedVector(1000, 25, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertEquals(25, compressedVector0.cardinality());
      assertEquals(1000, compressedVector0.length());
      assertEquals(0.025, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1000.0, 25.0, 25.0, 1000.0, 1000.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {25, 1000}, intArray0);
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
