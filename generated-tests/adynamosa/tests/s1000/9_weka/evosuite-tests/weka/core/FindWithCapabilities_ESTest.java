/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 20:22:15 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.m_Filename;
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.m_MinimumNumberInstances = (-1727157155);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_MinimumNumberInstances = (-2068286653);
      findWithCapabilities0.m_Superclass = "pac_kages";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.find();
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("pac_kages");
      findWithCapabilities1.setFilename("-4");
      SingleIndex singleIndex0 = new SingleIndex("-not-binary-atts");
      SingleIndex.indexToString((-11));
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.getOptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getMatches();
      Random.setNextRandom((-1982702078));
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.m_Filename;
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.m_ClassIndex = null;
      Random.setNextRandom((-1698));
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getClassIndex();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Refresh in progress. Please wait...";
      stringArray0[1] = "-not-numeric-class";
      stringArray0[2] = "\tMust handle string attributes.";
      stringArray0[3] = "No instances supplied.";
      stringArray0[4] = ") cannot";
      stringArray0[5] = "t9!s5N!cy";
      stringArray0[6] = "not-binary-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Superclass = "packages";
      capabilities0.enableAll();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllClassDependencies();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.assign(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("cyhyHaJE,6Hb");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("cyhyHaJE,6Hb");
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("-not-unary-class");
      findWithCapabilities3.setClassIndex("-not-unary-class");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "-not-unary-class";
      stringArray0[5] = "\tSuperclass to look for in the packages.\n";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "cyhyHaJE,6Hb";
      stringArray0[8] = "-not-unary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("pac_kages");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "pac_kages";
      findWithCapabilities0.getRevision();
      stringArray0[1] = "pac_kages";
      stringArray0[2] = "pac_kages";
      stringArray0[3] = "pac_kages";
      stringArray0[4] = "pac_kages";
      stringArray0[5] = "pac_kages";
      stringArray0[6] = "-not-relational-class";
      stringArray0[7] = "pac_kages";
      stringArray0[8] = "-relational-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities1.enableDependency(capabilities_Capability0);
      findWithCapabilities0.handles((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("^fY5Mg3IgPw$c%UJ/xt");
      System.setCurrentTimeMillis(1L);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getCapabilities();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "gl,K&B'";
      SingleIndex singleIndex0 = new SingleIndex("gl,K&B'");
      singleIndex0.m_Upper = 125;
      singleIndex0.m_SelectedIndex = 30;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getClassIndex();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = new String[5];
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "weka/core/Capabilities.props";
      stringArray1[1] = "weka/core/Capabilities.props";
      stringArray1[2] = "gl,K&B'";
      try { 
        Capabilities.main(stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      Random.setNextRandom((-1114));
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "-not-unary-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setClassIndex("K5X=\"%Q");
      findWithCapabilities1.setClassIndex("There are new packages at the repository. Refreshing cache...");
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities1.find();
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#!";
      stringArray0[1] = "-only-multiinstance";
      stringArray0[2] = "7~+}&|(6nS9N/";
      stringArray0[3] = "first-last";
      stringArray0[4] = "Can't construct a path to file relative to user dir.";
      stringArray0[5] = "K\"t[aT)H";
      stringArray0[6] = "FyHe_r~)}I";
      stringArray0[7] = "r<Q.yz8(vsimIe8!";
      stringArray0[8] = "+OV*K4EM2S|\u0005g5";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.toSource("weka/core/Capabilities.props", (-1283));
      HashSet<Capabilities.Capability> hashSet0 = findWithCapabilities0.m_Capabilities.m_Dependencies;
      capabilities0.m_Capabilities = hashSet0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableAllAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = null;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      testInstances0.setRelation(" ");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String string0 = findWithCapabilities0.m_Superclass;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      findWithCapabilities1.listOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation((String) null);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      testInstances0.m_NumRelationalNominal = 255;
      testInstances0.m_NumNominalValues = 87;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" Val:");
      findWithCapabilities0.isEnabled((Capabilities.Capability) null);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getNotCapabilities();
      assertEquals(" Val:", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.dependencies();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      vector0.add("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.getClassCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Superclass = "packages";
      capabilities0.enableAll();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      int int0 = 11;
      SingleIndex.indexToString(11);
      findWithCapabilities2.setClassIndex("KPMGl 5:'VNPcs");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "-missing-att-values";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-missing-att-values";
      stringArray0[1] = "~";
      stringArray0[2] = "-missing-att-values";
      stringArray0[3] = "-missing-att-values";
      stringArray0[4] = "-missing-att-values";
      stringArray0[5] = "-missing-att-values";
      stringArray0[6] = "-missing-att-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllAttributes();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "packages";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      SingleIndex.indexToString(524);
      findWithCapabilities1.setClassIndex("packages");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex1 = new SingleIndex("\\");
      findWithCapabilities1.setClassIndex("n~");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities3.setOptions(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      capabilities0.getRevision();
      capabilities0.enableDependency(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability2);
      assertFalse(capabilities_Capability2.equals((Object)capabilities_Capability1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "packages";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      SingleIndex.indexToString(559);
      findWithCapabilities1.setClassIndex("packages");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex1 = new SingleIndex("\\");
      findWithCapabilities1.setClassIndex("n~");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("QIek");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = findWithCapabilities1.m_Superclass;
      findWithCapabilities1.m_Matches = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-t";
      stringArray0[4] = "\tMust handle string classes.";
      stringArray0[5] = "";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.listOptions();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.toSource("0<=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.enableAll();
      findWithCapabilities0.listOptions();
      capabilities0.setOwner(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      capabilities0.disable(capabilities_Capability1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setClassIndex(")7-cp#a&rN/N J?z");
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(19, stringArray0.length);
      
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertTrue(vector0.isEmpty());
      
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertFalse(capabilities1.hasDependencies());
      
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9`w");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "packages";
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.getOptions();
      assertEquals("", findWithCapabilities0.getFilename());
      
      findWithCapabilities3.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities3.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "packages";
      findWithCapabilities0.getOptions();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.handles(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Properties properties0 = Capabilities.PROPERTIES;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities1.m_Misses = vector0;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      capabilities0.setOwner(findWithCapabilities2);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities1.setNotCapabilities(capabilities1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9`w");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "packages";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enable(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9`w");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "packages";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.getRevision();
      Random.setNextRandom(2344);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(" ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tDoesn't need a class.";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(" ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t(,";
      stringArray0[1] = ",";
      stringArray0[2] = "-no-class";
      stringArray0[3] = ",";
      stringArray0[4] = ",";
      stringArray0[5] = "t(,";
      stringArray0[6] = ",";
      stringArray0[7] = ",";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      testInstances0.setRelation(" ");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String string0 = findWithCapabilities0.m_Superclass;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)18;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-binary-atts";
      stringArray0[1] = "%)U@\u0005>1(tW5y_MZ";
      stringArray0[2] = "NUMERIC_CLASS";
      stringArray0[3] = "-not-unary-atts";
      stringArray0[4] = "3kE3=i|^@m|X";
      stringArray0[5] = "-not-nominal-class";
      stringArray0[6] = "7[uu:gP)-sy:n1iYC";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      testInstances0.m_NumString = 1361;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("@data");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setClassIndex("@data");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex(",");
      findWithCapabilities1.setClassIndex("\"position\" is nominal");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      hashSet0.add(capabilities_Capability0);
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities3.enableNot(capabilities_Capability1);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      testInstances0.m_NumString = 4690;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      hashSet0.add(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      hashSet0.add(capabilities_Capability1);
      capabilities0.capabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("@data");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      TestInstances testInstances1 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances1.m_Handler;
      testInstances0.getRevision();
      CapabilitiesHandler capabilitiesHandler1 = findWithCapabilities1.m_Handler;
      capabilities1.setOwner((CapabilitiesHandler) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = "-not-missing-class-values";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ",";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      hashSet0.add(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      hashSet0.add(capabilities_Capability1);
      capabilities0.capabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Vector<String> vector1 = new Vector<String>();
      vector1.add("0HkU\"fUL");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex(";Fy8_kVu\"");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("@data");
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability2);
      try { 
        findWithCapabilities1.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      testInstances0.m_NumString = 4690;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("@data");
      testInstances0.setWordSeparators("'/:=z/aVk*b");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      TestInstances testInstances1 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances1.m_Handler;
      testInstances0.getRevision();
      capabilities1.setOwner(findWithCapabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex("\\");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities5.enableNot(capabilities_Capability1);
      try { 
        findWithCapabilities5.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities2.setHandler(findWithCapabilities0);
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.m_ClassIndex = singleIndex0;
      findWithCapabilities1.setClassIndex(")7-cp#a&rN/N J?z");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      SingleIndex singleIndex1 = new SingleIndex("jW!QB13LP{`.zvqul");
      findWithCapabilities2.setClassIndex("\"position\" is nominal");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities3.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[0] = "x\"=";
      stringArray0[1] = "String should not finish with ";
      stringArray0[2] = "\tDoesn't need a class.";
      stringArray0[3] = "# Nominal values: ";
      stringArray0[4] = "-date-atts";
      stringArray0[5] = "-W <classname>";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.listOptions();
      capabilities0.m_MissingClassValuesTest = true;
      Random.setNextRandom((-2566));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("num-instances");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      capabilities2.m_MissingClassValuesTest = true;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertEquals("num-instances", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("\"position\" is string");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      capabilities0.setOwner(findWithCapabilities0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("et-4\"gxgY9%h)");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities4.setCapabilities(capabilities1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.isEnabledNot(capabilities_Capability0);
      findWithCapabilities5.getMatches();
      Random.setNextRandom((-2));
      String string0 = findWithCapabilities0.m_Filename;
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KE%,EiL[>$AmHKq>";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[1] = "-no-class";
      stringArray0[2] = "-not-numeric-class";
      stringArray0[3] = "frG| vIa3^>";
      stringArray0[4] = "}%k#!$IaXx:]";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Superclass = "not-binary-atts";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-no-class");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      capabilities0.getOtherCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities5.isEnabledNot(capabilities_Capability0);
      findWithCapabilities3.getMatches();
      Random.setNextRandom(47);
      String string0 = findWithCapabilities2.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "O2P]rP";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.setFilename("");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      HashSet<Capabilities.Capability> hashSet1 = new HashSet<Capabilities.Capability>(hashSet0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities2.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.spliterator();
      vector1.add("");
      vector1.parallelStream();
      findWithCapabilities1.listOptions();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.setClassIndex("-relational-atts");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "D|;y=NuEs[cSFQ|4fE4";
      stringArray1[2] = "";
      stringArray1[3] = "D|;y=NuEs[cSFQ|4fE4";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "D|;y=NuEs[cSFQ|4fE4";
      stringArray1[7] = "";
      findWithCapabilities0.m_Superclass = "D|;y=NuEs[cSFQ|4fE4";
      stringArray1[8] = "-relational-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tMust handle nominal classes.");
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.find();
      vector0.add("-missing-att-values");
      vector0.parallelStream();
      findWithCapabilities0.listOptions();
      capabilities0.m_MinimumNumberInstances = 6;
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      capabilities0.setOwner(findWithCapabilities0);
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertEquals(1, vector1.size());
      
      findWithCapabilities0.setClassIndex("Hv&'/JK<*");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.add("");
      vector1.parallelStream();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      capabilities0.setOwner(findWithCapabilities0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex(" ");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities2.setCapabilities(capabilities0);
      assertEquals("", findWithCapabilities2.getFilename());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "O2P]rP";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.setClassIndex("zUJh=t4F-x$y)");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("\"position\" is nominal");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ZI73tK>T!.,\"N";
      stringArray0[1] = "missing-class-values";
      stringArray0[2] = "sqQ`bm&^}-ia";
      stringArray0[3] = "u}j<X2.%y;OH&^+cx1p";
      stringArray0[4] = "-numeric-class";
      stringArray0[5] = "dOP/slBwP%2";
      stringArray0[6] = "l]ast";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.enable((Capabilities.Capability) null);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      capabilities0.m_Capabilities = hashSet0;
      capabilities0.m_MissingValuesTest = true;
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumDate = 489;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities1.getFilename());
      assertEquals(" ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "not-binary-atts";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertNotSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.setFilename(" Val:");
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.toString();
      findWithCapabilities0.setCapabilities(capabilities0);
      capabilities0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "last";
      stringArray0[1] = "A superclass has to be specified!";
      stringArray0[2] = "-not-relational-class";
      stringArray0[3] = "Capabilities: []\nDependencies: []\nmin # Instance: 1\n";
      stringArray0[4] = "Capabilities: []\nDependencies: []\nmin # Instance: 1\n";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-not-relational-class");
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      hashSet0.add(capabilities_Capability0);
      hashSet0.clear();
      hashSet0.add(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableDependency(capabilities_Capability2);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("rIEN%*=3G$Jdo<PG(");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.enable(capabilities_Capability3);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.isEnabledNot(capabilities_Capability4);
      findWithCapabilities1.disable(capabilities_Capability1);
      assertFalse(capabilities_Capability1.equals((Object)capabilities_Capability4));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "-1";
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disable(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      assertFalse(capabilities_Capability2.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.parallelStream();
      hashtable0.put("", vector1);
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      capabilities0.setOwner(findWithCapabilities0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[4] = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("dOP/slBwP%2");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = findWithCapabilities0.find();
      vector0.parallelStream();
      hashtable0.put("", vector0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      CapabilitiesHandler capabilitiesHandler1 = findWithCapabilities0.m_Handler;
      capabilities0.setOwner((CapabilitiesHandler) null);
      Vector<String> vector2 = findWithCapabilities2.getMatches();
      assertTrue(vector2.equals((Object)vector1));
      
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities2.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      hashSet0.add(capabilities_Capability2);
      capabilities0.enableDependency(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector1 = new Vector<String>();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getOptions();
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      capabilities0.enableDependency(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setClassIndex("\b=J");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertTrue(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-words <comma-separated-list>");
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.disable(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability3);
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      boolean boolean1 = findWithCapabilities1.isEnabled(capabilities_Capability4);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      capabilities0.enableDependency(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector1 = new Vector<String>();
      findWithCapabilities1.m_Misses = vector1;
      findWithCapabilities1.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(",");
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      capabilities0.m_Capabilities = hashSet0;
      capabilities0.m_MissingValuesTest = true;
      hashSet0.add(capabilities_Capability0);
      capabilities0.capabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumDate = 489;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities1.getFilename());
      assertEquals(" ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.setFilename(" Val:");
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.handles(capabilities_Capability0);
      assertEquals(" Val:", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("\b=J");
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setFilename("\b=J");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setFilename("C5pU{etL(NHjle)");
      assertEquals("C5pU{etL(NHjle)", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      testInstances0.setRelation((String) null);
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      testInstances0.toString();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      boolean boolean1 = findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "##-*cO0%_>+q");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.m_Filename = "-not-binary-atts";
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation((String) null);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      testInstances0.m_NumRelationalNominal = 255;
      testInstances0.m_NumNominalValues = 87;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" Val:");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.handles(capabilities_Capability3);
      assertEquals(" Val:", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      testInstances0.setRelation((String) null);
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      testInstances0.m_NumRelationalNominal = 255;
      testInstances0.m_NumNominalValues = 87;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.setFilename(" Val:");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability4);
      assertEquals(" Val:", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      capabilities0.m_Capabilities = hashSet0;
      capabilities0.m_MissingValuesTest = true;
      capabilities0.capabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumDate = 514;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      capabilities0.setOwner((CapabilitiesHandler) null);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      boolean boolean0 = true;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Packages = null;
      findWithCapabilities0.setFilename("n72d0GJ(6kOTZ!4o9k");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getRevision();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.m_Matches.add("8034");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9134";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "9134";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      testInstances0.setRelation((String) null);
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getCapabilities();
      testInstances0.m_NumRelationalNominal = 255;
      testInstances0.m_NumNominalValues = 87;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.setFilename(" Val:");
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability4);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setCapabilities(capabilities0);
      hashSet0.add(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      hashSet0.clear();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities0.m_Dependencies = hashSet0;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertTrue(capabilities1.hasDependencies());
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Misses = vector0;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_Filename = "8034";
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "8034";
      stringArray0[2] = "^sp=(Ruq;D";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = null;
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("\tMust handle nominal classes.");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(245.7027379634, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.subList(0, 0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_>;fH8Q`r)41u[j]RXR";
      stringArray0[1] = ".kS";
      stringArray0[2] = "&";
      stringArray0[3] = "";
      stringArray0[4] = "W0+KTE";
      stringArray0[5] = "num-instances";
      stringArray0[6] = "'O<hH-y4bi";
      stringArray0[7] = ";%vP!Nf_?W;!";
      stringArray0[8] = "piN%]ZmB";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities1.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      findWithCapabilities0.listOptions();
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ZdbZJ@)\"2tzxj^!f{S";
      stringArray0[3] = "8^E@Q|";
      stringArray0[4] = "Xo0";
      stringArray0[5] = "#:2:M RhdsAK=Yv'";
      stringArray0[6] = "s@!t";
      stringArray0[7] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      // Undeclared exception!
      try { 
        findWithCapabilities0.isEnabled(capabilities_Capability0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setFilename("?TfVysx'Xeb");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.createMessage("weka/core/Capabilities.props");
      capabilities1.clone();
      findWithCapabilities0.setCapabilities(capabilities1);
      vector0.add("\nSet with attribute deleted:\n");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      assertEquals("?TfVysx'Xeb", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "O2P]rP";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Vector<String> vector1 = findWithCapabilities0.find();
      vector1.parallelStream();
      hashtable0.put("O2P]rP", vector1);
      vector0.add(">kcy[.I]");
      vector0.add("");
      hashtable0.put("O2P]rP", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("header has been modified\n");
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
