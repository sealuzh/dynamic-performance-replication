/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:45:59 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.FindWithCapabilities;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals(1, capabilities0.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("{LXb=;x#1yr)@zuLE");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{LXb=;x#1yr)@zuLE";
      findWithCapabilities0.getOptions();
      assertEquals("{LXb=;x#1yr)@zuLE", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "9T(h^3";
      findWithCapabilities1.getOptions();
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y2y-P{-\"HziXc?B_";
      stringArray0[1] = ";9 '^MFN";
      stringArray0[2] = "-date-class";
      stringArray0[3] = "-h|-help\n\tprints this help\n";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.find();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|$?ZTj%;";
      stringArray0[1] = "B%qCnYe>:rW}>";
      stringArray0[2] = "U)oR[R";
      stringArray0[3] = "";
      stringArray0[4] = "-missing-class-values";
      stringArray0[5] = "Quote parse error.";
      stringArray0[6] = "\tMust handle date attributes.";
      stringArray0[7] = "date";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3S";
      stringArray0[1] = "-not-binary-class";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FSRm.G7pW)y:k~";
      stringArray0[1] = "Expected opening brace on range fun: ";
      stringArray0[2] = "measureMinCoordsPerPoint";
      stringArray0[3] = "";
      stringArray0[4] = "-numeric-class";
      stringArray0[5] = "tp.*0X8~<*:gJG#N>";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VuCCDc(6%t";
      stringArray0[1] = "-binary-atts";
      stringArray0[2] = "GktgTsg\"St";
      stringArray0[3] = "YN_;!b&!?eb";
      stringArray0[4] = "=BI`zEpW.91IVi9";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-unary-class";
      stringArray0[1] = "\"|_.*Fsa:|n]G;5n";
      stringArray0[2] = "Yf9";
      stringArray0[3] = "fe.IN>Db74";
      stringArray0[4] = "j";
      stringArray0[5] = "Parameters first and/or toCopy out of range";
      stringArray0[6] = "-num-instances <num>";
      stringArray0[7] = "RXQ`7),fU3oZ3.Mo ";
      stringArray0[8] = "ZJP>OR";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ih";
      stringArray0[1] = "p1";
      stringArray0[2] = " class that didn't match the criteria:\n";
      stringArray0[3] = ") can't be established.";
      stringArray0[4] = "-nominal-atts";
      stringArray0[5] = ")ZZ'{p0n@";
      stringArray0[6] = ";9 '^MFN";
      stringArray0[7] = "ZH";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-relational-class";
      stringArray0[1] = "m/(C\"00F-dF'zzb{";
      stringArray0[2] = "tuXEudR`I;,4";
      stringArray0[3] = "-relational-class";
      stringArray0[4] = "FSRm.G7pW)y:k~";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vp)R-mo";
      stringArray0[1] = "L_`bSQxI|N `d\"oZ";
      stringArray0[2] = ".A._te2!";
      stringArray0[3] = "-num-instances <num>";
      stringArray0[4] = "K`;u)8k";
      stringArray0[5] = "@gHJ;`zxvSmrW_Y";
      stringArray0[6] = "-missing-att-values";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-wUIT&5";
      stringArray0[1] = "YN_;!b&!?eb";
      stringArray0[2] = " can't be loaded.";
      stringArray0[3] = "0AA!W!trpS+`j]$p";
      stringArray0[4] = "";
      stringArray0[5] = "Gt>";
      stringArray0[6] = "";
      stringArray0[7] = "-not-binary-atts";
      stringArray0[8] = "-not-unary-atts";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usage: SingleIndex <indexspec>";
      stringArray0[1] = "&A`t=:7GzVg";
      stringArray0[2] = "#rk%s0FX%`NAx";
      stringArray0[3] = ".java";
      stringArray0[4] = "y/cpGt2:LU@0f#ebfQ";
      stringArray0[5] = "-not-relational-class";
      stringArray0[6] = "+QU9py0%X]k:_}!|E6v";
      stringArray0[7] = "~aL+EX?$|";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(1206L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/m*{X[|TLt)c1gy";
      stringArray0[1] = ")bd, {->";
      stringArray0[2] = "-no-class";
      stringArray0[3] = "x~t]-c!>Y5R%:a3*VT";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "d81!l&rlR";
      stringArray0[1] = "-numeric-atts";
      stringArray0[2] = "MwiZ-}T)J`o";
      stringArray0[3] = ".JP#41,U|a0qKM`o!$";
      stringArray0[4] = "instances have changed";
      stringArray0[5] = "-not-string-class";
      stringArray0[6] = "<UwF";
      stringArray0[7] = "number expected";
      stringArray0[8] = "ov_Uym+Nct4|Du)u";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!4tj";
      stringArray0[1] = "zU";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = "V1?Q m^zU|~v";
      stringArray0[4] = "?r]v?5k$";
      stringArray0[5] = "j";
      stringArray0[6] = "-numeric-atts";
      stringArray0[7] = ")Ch6$QI%B'fKup";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.getFilename();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~x?x`ZYjbm;Xd@I_<~";
      stringArray0[1] = "A[<>0:K~xG";
      stringArray0[2] = "~x?x`ZYjbm;Xd@I_<~";
      stringArray0[3] = "-not-relational-atts";
      stringArray0[4] = "7.lMpU";
      stringArray0[5] = "no-class";
      stringArray0[6] = "fq,-=@iAF";
      stringArray0[7] = "6l7l}NK`q";
      stringArray0[8] = "DQ^4(";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z>mH8|S!8dT~(MlJco<";
      stringArray0[1] = "Expected opening brace on range fun: ";
      stringArray0[2] = ">IBqUqOLkZ";
      stringArray0[3] = "pmxlvkn";
      stringArray0[4] = "-nominal-class";
      stringArray0[5] = "glqOh6";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?C{e?nWw<{8=";
      stringArray0[1] = "\tMust handle string classes.";
      stringArray0[2] = "-not-nominal-class";
      stringArray0[3] = "*+@vC0`N-YDw`";
      stringArray0[4] = "not-unary-atts";
      stringArray0[5] = "o^T";
      stringArray0[6] = "Upper bound (";
      stringArray0[7] = "numeric-class";
      stringArray0[8] = "}Vpr253A{(";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k`t");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Capabilities = capabilities1;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      capabilities0.toString();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V-9Q^L=E1Tx@RAH";
      stringArray0[1] = "-superclass";
      stringArray0[2] = "-superclass";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("[!-Rc&[}");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{g`ILXzjNVgtSA^@[";
      stringArray0[1] = "-S";
      stringArray0[2] = "A'tnY+KY2}}E5:v(C[h";
      stringArray0[3] = "-only-multiinstance";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[4] = "?gq&R5/]V]('Q2H";
      stringArray0[5] = "- allowed: ";
      stringArray0[6] = "pb?(/uj){y.X";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "'SqTC";
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      String[] stringArray0 = new String[7];
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      stringArray0[0] = "g,iF)tep~F&Pxc-GcG";
      stringArray0[1] = "weka.core.logging.Logger$Level";
      stringArray0[2] = "Relation Name:  ";
      stringArray0[3] = "ANf+w";
      stringArray0[4] = "-not-string-atts";
      stringArray0[5] = "luwj!GCg/";
      stringArray0[6] = "_~5(z!hC,LLR";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[1] = "=4^<Y^L";
      stringArray0[2] = "numeric-class";
      stringArray0[3] = "Xby";
      stringArray0[4] = "-not-no-class";
      stringArray0[5] = "Inserted";
      stringArray0[6] = "na$v";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "D~c*zN1B:ME 3:!N]8j";
      stringArray0[2] = "7.lMpU";
      stringArray0[3] = "Q.V`]Q#twdj!8(3d0";
      stringArray0[4] = "uAa['`&[8twC^k";
      stringArray0[5] = "integer";
      stringArray0[6] = "CkdGJUDMx*S+";
      stringArray0[7] = "@NesIKHn=ph";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }
}
