/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 00:00:00 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1225));
      classWriter0.visit((-1225), (-1225), "P7!", "P7!", "P7!", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1225), "P7!", "P7!", "P7!", "P7!");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      classWriter0.index = (-1087);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1076, "*RdfOI%`r", "*RdfOI%`r", "*RdfOI%`r", "*RdfOI%`r");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1215));
      classWriter0.visit((-1215), (-1215), "<HObacjE", "<HObacjE", "<HObacjE", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1215), "<HObacjE", "<HObacjE", "<HObacjE", "<HObacjE");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      classWriter0.index = (-1087);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1076, "*RdfOI%`r", "*RdfOI%`r", "*RdfOI%`r", "*RdfOI%`r");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1230), "\"", "\"", "\"", "\"");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3140, "d'-:[=Wn_?lq<vzC0", "", "", "d'-:[=Wn_?lq<vzC0");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1666);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "M", "M", "M", "M");
      ByteVector byteVector0 = new ByteVector(1);
      byteVector0.length = 2;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "*R\f~%r", "*R\f~%r", "*R\f~%r", "*R\f~%r");
      ByteVector byteVector0 = classWriter0.pool;
      byte[] byteArray0 = new byte[2];
      byteVector0.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 131072, "ojag`>9TLXO", "ojag`>9TLXO", "ojag`>9TLXO", "ojag`>9TLXO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-1230), "`\"", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1307));
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong((-1L));
      byte[] byteArray0 = new byte[7];
      byteVector1.data = byteArray0;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2594, "", "", "<U3*S", byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3140, "d-:[=Wn_?lq<vzC0", "", "", "d-:[=Wn_?lq<vzC0");
      ByteVector byteVector0 = new ByteVector(2180);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1087), "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "|x$", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector(16);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1180));
      classWriter0.visit(49, 79, "k<dy@T;K2dn:G5TyzXC", ";X^.6dw[", ";X^.6dw[", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1180), "k<dy@T;K2dn:G5TyzXC", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "<HOxbajE");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64, "]", "W##Pqa&}#,lf)\"", "W##Pqa&}#,lf)\"", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(640);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 640, "`", "`", "`", "`");
      fieldWriter0.visitAnnotation("`", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1230), "`\"", "`\"", "`\"", "`\"");
      fieldWriter0.visitAnnotation("`\"", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1180));
      classWriter0.visit(49, 79, "k<dy@T;K2dn:G5TyzXC", ";X^.6dw[", ";X^.6dw[", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1180), "k<dy@T;K2dn:G5TyzXC", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "<HOxbajE");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64, "]", "W##Pqa&}#,lf)\"", "W##Pqa&}#,lf)\"", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 64, "]", "W##Pqa&}#,lf)\"", "W##Pqa&}#,lf)\"", (Object) null);
      fieldWriter0.visitAnnotation("]", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "*R\f~%`r", "*R\f~%`r", "*R\f~%`r", (Object) null);
      Attribute attribute0 = new Attribute("*R\f~%`r");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1087));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "|x$", "", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3140, "d-:[=Wn_?lq<vzC0", "", "", "d-:[=Wn_?lq<vzC0");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-1230), "", "d-:[=Wn_?lq<vzC0", "d-:[=Wn_?lq<vzC0", "d-:[=Wn_?lq<vzC0");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1230));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3140, ".ZJ% K^qNzY", "", "", ".ZJ% K^qNzY");
      fieldWriter0.visitEnd();
  }
}
