/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:31:10 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSite();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "Spider {} started!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedList0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("select text error! ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("select text error! ", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.setSpawnUrl(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`'y@tt2");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "us.codecraft.webmagic.Spider";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(444, threadPoolExecutor_DiscardOldestPolicy0);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 444);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Json json0 = new Json("");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "5@dun,";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider1 = spider0.clearPipeline();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider3.get("5@dun,");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setUUID("");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider1.pipeline(jsonFilePipeline0);
      ArrayBlockingQueue<String> arrayBlockingQueue0 = null;
      try {
        arrayBlockingQueue0 = new ArrayBlockingQueue<String>((-3724), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ArrayBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("phantomjs");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.clearPipeline();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1439), threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$Status";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".urls.txt");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider$Status");
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("us.codecraft.webmagic.Spider$Status");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", userAgent='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      Spider spider3 = spider2.setPipelines((List<Pipeline>) null);
      spider3.clearPipeline();
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(928);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(514, 514, 514, timeUnit0, priorityBlockingQueue0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 514);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.addPipeline(resultItemsCollectorPipeline0);
      spider2.sleep(514);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.utils.FilePersistentBase";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.utils.FilePersistentBase");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ExecutorService executorService0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      spider0.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request("");
      boolean boolean0 = true;
      Request request1 = request0.setBinaryContent(true);
      spider2.setUUID("'");
      spider1.setScheduler(queueScheduler0);
      requestArray0[0] = request1;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      FilePipeline filePipeline0 = new FilePipeline();
      ResultItems resultItems0 = new ResultItems();
      // Undeclared exception!
      try { 
        filePipeline0.process(resultItems0, (Task) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.FilePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setSpawnUrl(true);
      spider0.run();
      Spider spider5 = spider1.setExitWhenComplete(true);
      spider1.setUUID("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider4.start();
      spider1.sleep(1583);
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(1, true);
      spider5.getAll((Collection<String>) arrayBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "5@dun,";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      spider0.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_W+NjDo/d:uY4Z}$4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "5@dun,";
      stringArray0[2] = "javascript:";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider$Status");
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Spider.Status.values();
      String string0 = "init cache scheduler error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler error");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      // Undeclared exception!
      try { 
        spider1.get(" h3^=eA<W xnv:X*");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      ForkJoinPool.commonPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.addPipeline((Pipeline) null);
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      queueScheduler0.getTotalRequestsCount(spider4);
      queueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("us.codecraft.webmagic.Spider$Status");
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("us.codecraft.webmagic.Spider$Status");
      requestArray0[0] = request0;
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setSpawnUrl(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[0];
      spider2.addUrl(stringArray0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-2), forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Request request0 = new Request("[cK8\"");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Request[] requestArray0 = new Request[0];
      spider2.addRequest(requestArray0);
      spider0.setExitWhenComplete(true);
      spider2.clearPipeline();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) synchronousQueue0);
      Spider spider4 = spider3.startUrls(list1);
      Json json0 = new Json("A");
      Json json1 = new Json(list1);
      spider4.start();
      String[] stringArray0 = new String[3];
      spider3.run();
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.scheduler(duplicateRemovedScheduler0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Locale.LanguageRange> list0 = spider1.getAll((Collection<String>) linkedTransferQueue0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedTransferQueue0);
      spider0.startUrls(list1);
      Json json0 = new Json(list1);
      spider1.start();
      spider3.run();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A";
      stringArray0[1] = "5@dun,";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/24_webmagic/A");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[2] = "5@dun,";
      stringArray0[3] = "5@dun,";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("A");
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider1.start();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A";
      stringArray0[1] = "5@dun,";
      stringArray0[2] = "5@dun,";
      stringArray0[3] = "5@dun,";
      stringArray0[4] = "5@dun,";
      stringArray0[5] = "5@dun,";
      stringArray0[6] = "A";
      spider2.isExitWhenComplete();
      spider1.close();
      Spider spider3 = new Spider(simplePageProcessor0);
      spider0.getSite();
      Spider spider4 = spider2.setDownloader(phantomJSDownloader0);
      spider4.clearPipeline();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool.commonPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      spider2.setSpawnUrl(true);
      spider0.run();
      spider0.run();
      spider1.stop();
      spider0.setExitWhenComplete(true);
      Spider spider3 = spider1.setUUID("");
      HashSetDuplicateRemover hashSetDuplicateRemover1 = new HashSetDuplicateRemover();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider3.start();
      spider1.sleep(19);
      Spider.Status.values();
      // Undeclared exception!
      try { 
        spider1.get("Thread interrupted when sleep");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "5@dun,";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      spider3.setSpawnUrl(true);
      spider0.run();
      spider1.setExitWhenComplete(true);
      String string1 = "";
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<Locale.LanguageRange> list0 = spider2.getAll((Collection<String>) linkedBlockingQueue0);
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedBlockingQueue0);
      spider3.startUrls(list1);
      Json json0 = new Json("5@dun,");
      // Undeclared exception!
      try { 
        json0.removePadding("5@dun,");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // us/codecraft/xsoup/XTokenQueue
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "+}=$2H.p4";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+}=$2H.p4");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "'N\\+b/5,";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("'N+b/5,");
      String string2 = "jaH>l2|F(o5>k,NcBZ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jaH>l2|F(o5>k,NcBZ");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      Logger logger0 = (Logger)spider0.logger;
      spider1.logger = (org.slf4j.Logger) logger0;
      spider0.getScheduler();
      spider0.stop();
      int int0 = (-1152);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, (-1152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider0.setEmptySleepTime(3);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      spider1.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5@dun,";
      stringArray0[0] = "5@dun,";
      stringArray0[3] = "5@dun,";
      stringArray0[4] = "5@dun,";
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      spider3.setSpawnUrl(true);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(579, 579, 579, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_DiscardOldestPolicy0);
      Scheduler scheduler0 = spider1.getScheduler();
      Spider spider4 = spider0.scheduler(scheduler0);
      spider4.getScheduler();
      spider1.isExitWhenComplete();
      spider1.start();
      spider0.thread(1425);
      Spider spider5 = spider0.setPipelines((List<Pipeline>) null);
      spider5.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("5@dun,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("5@dun,", "5@dun,");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider0.getScheduler();
      Spider spider4 = spider3.setSpawnUrl(false);
      Selector[] selectorArray0 = new Selector[1];
      spider2.getStartTime();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      selectorArray0[0] = (Selector) smartContentSelector0;
      AndSelector andSelector0 = new AndSelector(selectorArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("5@dun,");
      spider4.getAll((Collection<String>) list0);
      List<Selector> list1 = spider3.getAll((Collection<String>) list0);
      AndSelector andSelector1 = new AndSelector(list1);
      int int0 = (-577);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector((String) null, (-577));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }
}
