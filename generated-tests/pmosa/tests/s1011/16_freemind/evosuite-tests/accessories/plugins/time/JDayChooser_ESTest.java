/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:36:27 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.ModeController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.browsemode.EncryptedBrowseNode;
import freemind.modes.filemode.FileController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.actions.RemoveIconAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.LookupOp;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalTime;
import java.util.Locale;
import java.util.Properties;
import javax.help.BackAction;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JScrollPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiColorChooserUI;
import javax.swing.plaf.multi.MultiScrollPaneUI;
import javax.swing.text.DefaultCaret;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.svggen.SVGIDGenerator;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemTextLiteral;
import org.apache.xerces.parsers.XIncludeParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1970, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.firePropertyChange("day", (short)0, (short)0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.drawDays();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getDecorationBackgroundColor();
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-13);
      byteArray0[0] = byteArray1;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable((short)0, byteArray0);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, (RenderingHints) null);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      Dimension dimension0 = new Dimension(399, 0);
      Dimension dimension1 = new Dimension(dimension0);
      // Undeclared exception!
      try { 
        imageHandlerBase64Encoder0.buildBufferedImage(dimension1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (399) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("", "X qYP7u6$]Lv");
      MultiScrollPaneUI multiScrollPaneUI0 = new MultiScrollPaneUI();
      // Undeclared exception!
      try { 
        multiScrollPaneUI0.getMaximumSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth((-850));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getMaximumSize();
      jDayChooser0.getY();
      jDayChooser0.drawWeeks();
      int int0 = (-489);
      dimension0.height = (-489);
      Date date0 = new Date((-489));
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDay((-489));
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.grabFocus();
      jDayChooser0.isDecorationBackgroundVisible();
      long long0 = (-3096L);
      int int1 = 0;
      char char0 = 'u';
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MultiColorChooserUI multiColorChooserUI0 = new MultiColorChooserUI();
      // Undeclared exception!
      try { 
        multiColorChooserUI0.getPreferredSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(164, 164, 2139095040, 1452, 4292);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.decorationBackgroundColor = (Color) systemColor0;
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = 0;
      char char0 = '?';
      MenuElement[] menuElementArray0 = new MenuElement[2];
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      String string0 = "tile";
      jDayChooser0.firePropertyChange("tile", (byte) (-98), (byte) (-98));
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setFocus();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getLocale();
      Properties properties0 = null;
      String string1 = "c{/";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "_^0zMh3hYqK]xS\"+{w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDoubleBuffered();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.getY();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      ElemTextLiteral elemTextLiteral0 = new ElemTextLiteral();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemTextLiteral0);
      SVGIDGenerator sVGIDGenerator0 = new SVGIDGenerator();
      sVGIDGenerator0.generateID("day");
      sVGGeneratorContext0.setIDGenerator(sVGIDGenerator0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "\u0004";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.initDecorations();
      Color color0 = jDayChooser0.getForeground();
      color0.getColorSpace();
      jDayChooser0.setWeekdayForeground(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JScrollPane jScrollPane0 = new JScrollPane(jDayChooser0);
      jDayChooser0.setDay(1970);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setSize(2785, 191);
      jDayChooser0.setMaxDayCharacters((-850));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.setSize(3347, 19);
      jDayChooser0.setMaxDayCharacters(3347);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 28, 32, 33, '5');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 2001;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 57, 57, 40, 40, '\\');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(2001, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.getInputVerifier();
      jDayChooser0.transferFocusUpCycle();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.getISOLanguages();
      Locale.setDefault(locale_Category0, locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setFocus();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDayPanel();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDay();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JDayChooser");
      JDayChooser jDayChooser0 = new JDayChooser();
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setYear(3416);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("k^CUu!.x@y", false);
      jRadioButtonMenuItem0.setLocation(1337, 3416);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButtonMenuItem0, 3, 31L, (-2366), 12, 'T');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxDayCharacters(1);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2636), (-2636), 37, (-2636), 'J');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "day";
      stringArray1[1] = "day";
      stringArray1[2] = "day";
      stringArray1[3] = "day";
      stringArray1[4] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      String[] stringArray2 = new String[0];
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(20, stringArray0, stringArray2, stringArray2, stringArray1, iBindingFactory0);
      jDayChooser0.setSize(1199, 9);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(1);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2636), (-2636), 37, (-2636), 'J');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "day";
      stringArray1[1] = "day";
      stringArray1[2] = "day";
      stringArray1[3] = "day";
      stringArray1[4] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(191, stringArray1, stringArray0, stringArray0, stringArray1, iBindingFactory0);
      jDayChooser0.setSize(5, (-1476));
      jDayChooser0.setMaxDayCharacters((-2934));
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2636), (-2636), 37, (-2636), 'J');
      keyEvent0.setKeyChar('J');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "day";
      stringArray1[1] = "day";
      stringArray1[2] = "day";
      stringArray1[3] = "day";
      stringArray1[4] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      jDayChooser0.setEnabled(true);
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-2934), stringArray0, stringArray0, stringArray0, stringArray1, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`A=E,D>j94h,Za-}0Kw");
      java.util.Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&<@+");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.removeMouseListener((MouseListener) null);
      jDayChooser0.getY();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters((-2471));
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.setFocus();
      jDayChooser0.addListeners(2);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 164, 37, (-1588), 37, '6');
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser1.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser1.getMaxDayCharacters();
      assertEquals(13, jDayChooser1.getDay());
      
      jDayChooser2.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.green;
      jDayChooser0.sundayForeground = color0;
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      BackAction backAction0 = new BackAction(jDayChooser0.sundayForeground);
      AWTEventMulticaster.remove((MouseListener) backAction0, (MouseListener) backAction0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) backAction0);
      jDayChooser_DecoratorButton0.addMouseListener(mouseListener0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "day";
      stringArray1[1] = "day";
      stringArray1[2] = "day";
      stringArray1[3] = "day";
      stringArray1[4] = "Metal";
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(20, stringArray0, stringArray0, stringArray1, stringArray0, iBindingFactory0);
      jDayChooser0.setSize(1866, 45);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 5, 2337, 34, 'A');
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      LocalTime localTime0 = MockLocalTime.now();
      Time time0 = Time.valueOf(localTime0);
      java.util.Date date0 = jDayChooser0.setMaxSelectableDate(time0);
      jDayChooser0.setSelectableDateRange(date0, time0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 4198L, (-927), 39, '{');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 32, 0L, 28, 33, '{');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "";
      stringArray0[3] = "day";
      stringArray0[4] = " c$-&Y.";
      stringArray0[5] = "day";
      stringArray0[6] = "MeH]Tt";
      stringArray0[7] = "day";
      String[] stringArray1 = new String[6];
      stringArray1[0] = " c$-&Y.";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "18";
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(164, stringArray0, stringArray0, stringArray1, stringArray1, (IBindingFactory) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "";
      stringArray0[3] = "day";
      stringArray0[4] = " c$-&Y.";
      stringArray0[6] = "MeH]Tt";
      String[] stringArray1 = new String[6];
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray0[0] = "";
      stringArray1[4] = "";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 164, 358L, 113, 35, 'f');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 164, 0L, 29, 36, 'f');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 57, 57, 40, 40, 'e');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, (-1655L), 14, 38, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }
}
