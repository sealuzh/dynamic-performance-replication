/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:53:04 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.store.access.btree.BTree;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("X7ht", false, "X7ht", "X7ht");
      String string0 = BTree.PROPERTY_NKEYFIELDS;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT X7ht CHECK X7ht", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" ADD ", (String[]) null, " ADD ", "=#_=Es.4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("54004", (String) null, stringArray0, "o~n(vd", "XsOk23lm", stringArray0);
      assertEquals("54004 join o~n(vd as XsOk23lm on null.null = XsOk23lm.null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";U-";
      stringArray0[1] = "zwp2*I?qP";
      String string0 = SQLUtil.innerJoin(";U-", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ;U-.;U- = .;U- and ;U-.zwp2*I?qP = .zwp2*I?qP", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("MSSQLServeA");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container MSSQLServeA", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "XCL31.S");
      SQLUtil.removeComments("select");
      Character character0 = new Character('D');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'D'", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-142), "y|e");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y|e", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("y|e Y|E(1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(1043, "table null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("table null TABLE NULL NULL", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("create table ");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("!aSS#|@rloMX{]", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "new";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(new)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("new = 'new'", string1);
      
      String string2 = SQLUtil.normalize("new", false);
      assertEquals("new", string2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("CHECK ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "CHECK ";
      stringArray0[3] = "CHECK ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("CHECK  = 'CHECK ' AND CHECK  = 'CHECK ' AND CHECK  = 'CHECK ' AND CHECK  = 'CHECK '", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = SQLUtil.normalize("?\"JxVl`7J{]&;_$", true);
      assertEquals("? \"JxVl`7J{]&;_$\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.mutatesStructure(" j:TQ}IBTB^rxC");
      SQLUtil.parseColumnTypeAndSize("X7ht");
      SQLUtil.renderValue("X7ht");
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("H<G}E+]+F7cXCze%l3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("X?AS*EwZT[j$e:(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: X?AS*EwZT[j$e:(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablecolumn yqe");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Random.setNextRandom(2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter tablecolumn yqe";
      String string0 = SQLUtil.renderColumnListWithTableName("alter tablecolumn yqe", stringArray0);
      assertEquals("alter tablecolumn yqe.alter tablecolumn yqe", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("truncateconstraint", "truncateconstraint", "truncateconstraint");
      assertEquals("'truncateconstraint'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncateconstraint");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'truncateconstraint'";
      stringArray0[1] = "k|e\u0005^r";
      String string1 = SQLUtil.renderColumnListWithTableName("k|e\u0005^r", stringArray0);
      assertEquals("k|e\u0005^r.'truncateconstraint', k|e\u0005^r.k|e\u0005^r", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      defaultDBTable0.getColumns();
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("`B");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PCGS[FkR6~/D#j", true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchemas();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("PCGS[FkR6~/D#j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'PCGS[FkR6~/D#j'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("Cannot change transaction isolation level in the middle of a transaction.", true);
      assertEquals("Cannot change transaction isolation level in the middle of a transaction.", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Dependable.STORED_PREPARED_STATEMENT;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("StoredPreparedStatement", false, "%`\"JM~h", "StoredPreparedStatement");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK StoredPreparedStatement", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      boolean boolean0 = SQLUtil.isDDL("call>2a,u^ukj&vj");
      assertFalse(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call>2a,u^ukj&vj", defaultDBTable0, 786, "call>2a,u^ukj&vj");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CALL>2A,U^UKJ&VJ", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("HAi-sR", stringBuilder0);
      SQLUtil.addOptionalCondition("54004", stringBuilder1);
      assertEquals("HAi-sR or 54004", stringBuilder1.toString());
      assertEquals("HAi-sR or 54004", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablecolumn yqe");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "execute582mh");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X7ht");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "54004";
      StringBuilder stringBuilder0 = new StringBuilder("W$uf)JR@`V,");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("W$uf)JR@`V,", stringBuilder0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      assertEquals("W$uf)JR@`V, and W$uf)JR@`V, or null", stringBuilder1.toString());
      assertEquals("W$uf)JR@`V, and W$uf)JR@`V, or null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("org.firebirdsql.jdbc.FBCachedBlob");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertvyc-&j=jqfbuc|({`");
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(60);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%NT}3TH@X}I", defaultDBTable0, (DBDataType) null, integer3, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      Integer integer4 = new Integer(1370);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop", defaultDBTable0, (DBDataType) null, integer3, integer4);
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("%NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, %NT}3TH@X}I, drop", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("drop");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("inner");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter tablevwpeacsr<tc3/@e{)");
      Integer integer0 = RawTransaction.ABORT;
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, "alter index", stringArray0, "", "4XBGKG8uyBs]@", stringArray0);
      assertEquals(" as 4XBGKG8uyBs]@ on ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ( FOREIGN KEY () REFERENCES (()", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tablecolumn yqe", false, "MF", "MF");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"alter tablecolumn yqe\" ", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("'", true);
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-142), "y|e");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y|e", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("y|e Y|E(1,1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("vyc-&j=jqfbuc|({`", true);
      assertEquals("v  yc - & j = jqfbuc | ({ `", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("X7ht", false, "X7ht", "X7ht");
      SQLUtil.normalize("X7ht", false);
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("CONSTRAINT X7ht ", stringBuilder0);
      assertEquals("CONSTRAINT X7ht ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("X7ht", false, "X7ht", "X7ht");
      String string0 = BTree.PROPERTY_NKEYFIELDS;
      DBCatalog dBCatalog0 = new DBCatalog();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("X7ht", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      String string1 = Page.DIAG_RESERVED_SPACE;
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vYc-&J=JQfbuc|({`");
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("N`%R[7Xmk;]q", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT N`%R[7Xmk;]q FOREIGN KEY (, , , , , , , ) REFERENCES vYc-&J=JQfbuc|({`(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "u");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string0);
      assertNotNull(string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK u", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("create unique index54004", stringBuilder0);
      assertEquals("create unique index54004", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index54004");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(20, rowOutputBinary0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      System.setCurrentTimeMillis(1033L);
      DBSchema dBSchema0 = new DBSchema("w=|I@BPk<&c~");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XcI;O", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create materialized viewstoredpreparedstatement";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized viewstoredpreparedstatement", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(85, rowOutputBinary0.size());
      
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM XcI;O WHERE create materialized viewstoredpreparedstatement = 'create materialized viewstoredpreparedstatement'", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("XSCH4.S", false);
      assertEquals("XSCH4.S", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create materialized viewstoredpreparedstatement";
      stringArray0[1] = "create materialized viewstoredpreparedstatement";
      stringArray0[2] = "calllpad";
      stringArray0[3] = "9]Hn_J:3 Iz}}%UV|";
      stringArray0[4] = "9]Hn_J:3 Iz}}%UV|";
      stringArray0[5] = "create materialized viewstoredpreparedstatement";
      stringArray0[6] = "9]Hn_J:3 Iz}}%UV|";
      stringArray0[7] = "create materialized viewstoredpreparedstatement";
      stringArray0[8] = "create materialized viewstoredpreparedstatement";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Y^KH-J!M#IklsysX", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("-", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "create materialized viewstoredpreparedstatement", false, stringArray0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("9]Hn_J:3 Iz}}%UV|", false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex2 = new DBUniqueIndex("9]Hn_J:3 Iz}}%UV|", false, dBUniqueConstraint0);
      dBUniqueIndex2.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("bHuHoT4q,E2Cb", false);
      assertEquals("bHuHoT4q, E2Cb", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = SQLUtil.normalize("vyc-&j=jqfbuc|({`", false);
      assertEquals("v  yc - & j = jqfbuc | ({ `", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vyc-&j=jqfbuc|({`";
      stringArray0[1] = null;
      stringArray0[2] = "update";
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "vyc-&j=jqfbuc|({`";
      stringArray1[1] = null;
      stringArray1[2] = "";
      stringArray1[3] = "update";
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray1);
      assertEquals("SELECT * FROM null WHERE vyc-&j=jqfbuc|({` = 'vyc-&j=jqfbuc|({`' AND null = null AND  = '' AND update = 'update'", string2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("j*M@]i08r", true);
      assertEquals("j * M  @ ] i08r", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.normalize("Xa~%jMLj'-'**/LO*", false);
      assertEquals("Xa ~ % jMLj '-' * */ LO *", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[12];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-142), "#");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#", defaultDBTable0, dBDataType0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Boolean boolean0 = new Boolean("CannCt chage transaction isolati;n level in the middle oP a transaction.");
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean1 = SQLUtil.isProcedureCall("\n/* group sorted */");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "exec";
      stringArray0[1] = "exec";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " REFERENCES ", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" REFERENCES \" UNIQUE (exec, exec)", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectcannot change transaction isolation level in the middle of a transaction.");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBDataType.getInstance((-507), "select into");
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.mutatesDataOrStructure(".$L UKNd2O}=8wa@");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into");
      SQLUtil.isQuery("select into");
      String string0 = SQLUtil.removeComments("T2cw|j_a+UrT|OUb8Y5");
      assertEquals("T2cw|j_a+UrT|OUb8Y5", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      String[] stringArray0 = new String[7];
      stringArray0[4] = "xZR?5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "action", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , xZR?5, , )", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(829, "create tablealter tablecolumn y|e");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sgmTipf18\"}A$\"", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("j43xplw|3b E", defaultDBTable0, (-3), "create table ");
      defaultDBColumn1.setSize((Integer) null);
      File file0 = FileUtil.canonicalFile("sgmTipf18\"}A$\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-142), "y|e");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y|e", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.offerFirst(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("y|e", string0);
      
      String string1 = SQLUtil.removeComments("y|e");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      String string0 = SQLUtil.normalize("}wgq|)m+-/3ux", false);
      assertEquals("} wgq |) m + - / 3ux", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lOB");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "} wgq |) m + - / 3u  x";
      stringArray0[1] = "}wgq|)m+-/3ux";
      stringArray0[2] = "} wgq |) m + - / 3u  x";
      stringArray0[3] = "}wgq|)m+-/3ux";
      stringArray0[4] = null;
      stringArray0[5] = "}wgq|)m+-/3ux";
      stringArray0[6] = null;
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM lOB WHERE } wgq |) m + - / 3u  x = '} wgq |) m + - / 3u  x' AND }wgq|)m+-/3ux = '}wgq|)m+-/3ux' AND } wgq |) m + - / 3u  x = '} wgq |) m + - / 3u  x' AND }wgq|)m+-/3ux = '}wgq|)m+-/3ux' AND null = null AND }wgq|)m+-/3ux = '}wgq|)m+-/3ux' AND null = null", string1);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[6], false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("}wgq|)m+-/3ux");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("}wgq|)m+-/3ux", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-142), "y|e");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y|e", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("y|e");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("y|e Y|E(1) DEFAULT y|e NULL", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CHECK ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "CHECK ";
      streamTokenizer0.nval = (-2253.363496);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2253.363496", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompositeDBObject<DBUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("X7ht", compositeDBObject0);
      tableContainer0.getTable("X7ht");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = new Integer(3621);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X7ht", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("X7ht BLOB NULL", string0);
  }
}
