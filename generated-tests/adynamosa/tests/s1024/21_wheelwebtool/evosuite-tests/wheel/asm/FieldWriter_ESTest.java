/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 14:24:28 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.version = 1576;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      classWriter0.version = 1576;
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", "/8", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ";S.KEwZ+0+", ";S.KEwZ+0+", "h jh,Tb!m'iGUg'xn", ";S.KEwZ+0+");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(953, "xK^&2<P[1K52'Zf", "", "", "xK^&2<P[1K52'Zf");
      // Undeclared exception!
      try { 
        fieldVisitor0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "TDNRHynd7z82}`Kd)<", "bD0", "3]CWiRw56d", "bD0");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", "/8", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.next = fieldWriter1;
      Attribute attribute0 = new Attribute("RuntimeInvisibleParameterAnnotations");
      fieldWriter1.visitAttribute(attribute0);
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      fieldWriter1.next.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-1048576), "Ljava/lang/Synthetic;", "s/@2MYV", "Label offset position has not been resolved yet", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@3cfd76fb
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      Attribute attribute0 = new Attribute("RuntimeInvisibleParameterAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "TDNRHynd7z82}`Kd)<", "bD0", "3]CiR&56d", "bD0");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("TDNRHynd7z82}`Kd)<", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("Deprecated", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "74dS1A", "org.apache.commons.io.filefilter.AndFileFilter", "O8", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 953, "O8", "", "O8", "O8");
      fieldWriter0.visitAnnotation("x!|VK3#k&ddT", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", "/8", (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "!nL)_C0", "/8", "J#C>DBEkCHpmVKoK\"V", (Object) null);
      fieldWriter1.visitAnnotation("Deprecated", true);
      int int0 = fieldWriter0.next.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "74dS1A", "org.apache.commons.io.filefilter.AndFileFilter", "O8", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(974);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65534, "", "", (String) null, (Object) null);
      classWriter0.version = 49;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(35, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(974);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65534, "", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 49, "", (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "TDNRHynd7z82}`Kd)<", "bD0", "3]CiR&56d", "bD0");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "/8", "/8", (String) null, (Object) null);
      Attribute attribute0 = new Attribute("RuntimeInvisibleParameterAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
