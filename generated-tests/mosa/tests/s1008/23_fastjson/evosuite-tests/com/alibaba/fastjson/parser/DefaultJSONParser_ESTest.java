/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:33:48 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.GridBagConstraints;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParsePosition;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3=@H/px:tcA 0");
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-4668));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/reflect/Type;)", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      HashSet<Rectangle> hashSet0 = new HashSet<Rectangle>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{TIeA\":\"");
      List<ExtraTypeProvider> list0 = new LinkedList<ExtraTypeProvider>();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G");
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y");
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : Y
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      defaultJSONParser0.handleResovleTask("");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{@$ref\"-\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : @pos 1, json : {@$ref\"-\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ti2");
      defaultJSONParser0.getExtraTypeProviders();
      LinkedHashMap<MockDateFormat, Date> linkedHashMap0 = new LinkedHashMap<MockDateFormat, Date>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 3, json : Ti2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("B poC ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : B poC 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create instance error");
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(9, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect new, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.getExtraProcessors();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Y]dp>2");
      defaultJSONParser0.getObject("]Y]dp>2");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]Y]dp>2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'E';
      charArray0[2] = '[';
      charArray0[3] = 'K';
      charArray0[4] = 'F';
      charArray0[5] = '%';
      charArray0[6] = 'x';
      charArray0[7] = '[';
      charArray0[8] = 'J';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      JSON.DEFFAULT_DATE_FORMAT = "fastjson.parser.deny";
      defaultJSONParser0.parseKey();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.deny");
      ParsePosition parsePosition0 = new ParsePosition(0);
      choiceFormat0.parseObject((String) null, parsePosition0);
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      String string0 = "]Y]dp>2";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Y]dp>2");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ], pos 0, fieldName it_IT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      assertNotNull(parseContext0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "");
      defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lTYg|b<", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("");
      defaultJSONParser1.setDateFormat("");
      assertEquals(0, defaultJSONParser1.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" Ti2#NLQL[kZQW");
      defaultJSONParser0.getDateFomartPattern();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 1, fieldName yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashMap<BreakIterator, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<BreakIterator, GridBagConstraints>();
      HashMap<BreakIterator, GridBagConstraints> hashMap0 = new HashMap<BreakIterator, GridBagConstraints>(linkedHashMap0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3=@H/px:tcA 0");
      defaultJSONParser0.parseKey();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Y]dp>2");
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      defaultJSONParser0.getObject("]Y]dp>2");
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      Feature feature0 = Feature.UseBigDecimal;
      defaultJSONParser0.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.resolveReference("{3Ief\":\"");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<ChoiceFormat> linkedList0 = new LinkedList<ChoiceFormat>();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      JSON.DEFAULT_PARSER_FEATURE = 2;
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ");
      List<ExtraTypeProvider> list0 = new ArrayList<ExtraTypeProvider>();
      defaultJSONParser0.setResolveStatus(1926);
      assertEquals(1926, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      IdentityHashMap<GridBagConstraints, ThrowableDeserializer> identityHashMap0 = new IdentityHashMap<GridBagConstraints, ThrowableDeserializer>();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(mockThaiBuddhistDate0, "fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : l:o>nt9,X-0G
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{@$ref\"-\"");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".[)");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) ".[)", (Object) ".[)");
      defaultJSONParser0.setContext((Object) "not support : ", (Object) parseContext0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IdentityHashMap<BreakIterator, GridBagConstraints> identityHashMap0 = new IdentityHashMap<BreakIterator, GridBagConstraints>();
      HashMap<BreakIterator, GridBagConstraints> hashMap0 = new HashMap<BreakIterator, GridBagConstraints>(identityHashMap0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3=@H/px:tcA 0");
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getContext();
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2>g/:|rt1W_t]qa");
      defaultJSONParser0.getResolveStatus();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "2>g/:|rt1W_t]qa");
      defaultJSONParser0.setContext((Object) symbolTable0, (Object) defaultJSONParser_ResolveTask0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      classLoader0.setDefaultAssertionStatus(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      defaultJSONParser0.setContext((Object) timeZone0, (Object) breakIterator0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) classLoader0, (Object) point0);
      Class<BreakIterator> class0 = BreakIterator.class;
      defaultJSONParser0.parseObject(class0);
      TreeSet<ThrowableDeserializer> treeSet1 = new TreeSet<ThrowableDeserializer>();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Pdu", parserConfig0, (-540));
      ParseContext parseContext0 = defaultJSONParser0.context;
      Locale locale0 = Locale.UK;
      Locale locale1 = locale0.stripExtensions();
      defaultJSONParser0.setContext((ParseContext) null, (Object) locale1, (Object) null);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Rectangle rectangle0 = new Rectangle(point1);
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) rectangle0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '/';
      charArray0[2] = 'g';
      charArray0[3] = '/';
      charArray0[4] = ',';
      charArray0[5] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getDateFormat();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("dgXVOIu<", parserConfig0);
      defaultJSONParser1.accept(1);
      defaultJSONParser1.resolveReference("1.2.46");
      defaultJSONParser1.checkListResolve(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      LinkedHashMap<MockDateFormat, Date> linkedHashMap0 = new LinkedHashMap<MockDateFormat, Date>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {3Ief\":\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "{3Ief\":\"";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      defaultJSONParser0.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{3Ief\":\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3pos 1, json : {3Ief\":\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{@$ref\"-\"", parserConfig0, 241);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{@$ref\"-\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l:o>nt9,X-0G", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser1.getLexer();
      assertEquals('o', jSONLexer0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"", parserConfig0, 241);
      JSONObject jSONObject0 = new JSONObject();
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      LinkedList<ChoiceFormat> linkedList0 = new LinkedList<ChoiceFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Ri@qk-\"!qFfjEj+", parserConfig0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - @, info : pos 3, json : {Ri@qk-\"!qFfjEj+
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"", parserConfig0, 241);
      defaultJSONParser0.getInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("59?s`;q^!\"y;");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class com.alibaba.fastjson.parser.JSONReaderScanner, property $ref
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"", parserConfig0, 241);
      JSONObject jSONObject0 = new JSONObject();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      LinkedHashMap<MapDeserializer, Feature> linkedHashMap0 = new LinkedHashMap<MapDeserializer, Feature>();
      Locale locale0 = Locale.PRC;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ti2");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals("Ti2", object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":o|>nt9X0G", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :o|>nt9X0G
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{3Ief\":\"", 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser1.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ef2\"");
      TreeMap<ChronoLocalDate, BigInteger> treeMap0 = new TreeMap<ChronoLocalDate, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) ":DA|OgB{on5[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name $ef2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{F$ref\"Q\"", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      defaultJSONParser0.getDateFormat();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("[long", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.checkListResolve(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Y]dp>2");
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      defaultJSONParser0.getResolveTaskList();
      JSON.DEFAULT_GENERATE_FEATURE = 1535;
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]Y]dp>2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("U", parserConfig0, 1);
      defaultJSONParser1.getInput();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setMinimumIntegerDigits((-357));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", pos ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 6, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("0{RW~]\"O<TBLPe+'");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" Ti2#NLQL[kZQW", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json :  Ti2#NLQL[kZQW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Y]dp>2");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("]Y]dp>2");
      Object object0 = new Object();
      Feature feature0 = Feature.SupportArrayToBean;
      boolean boolean0 = defaultJSONParser1.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3Ief\":\"");
      defaultJSONParser0.getExtraTypeProviders();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{3Ief\":\"", parserConfig0, 2);
      List<ExtraTypeProvider> list0 = defaultJSONParser1.getExtraTypeProviders();
      LinkedHashMap<MockDateFormat, Date> linkedHashMap0 = new LinkedHashMap<MockDateFormat, Date>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) linkedHashMap0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {3Ief\":\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}[r4=&Fx`CU");
      Hashtable<MockThaiBuddhistDate, ThrowableDeserializer> hashtable0 = new Hashtable<MockThaiBuddhistDate, ThrowableDeserializer>();
      defaultJSONParser0.parseObject();
      TreeMap<ParameterizedTypeImpl, BigInteger> treeMap0 = new TreeMap<ParameterizedTypeImpl, BigInteger>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      defaultJSONParser0.checkMapResolve(hashtable0, javaBeanDeserializer0);
      Class<BigInteger> class1 = BigInteger.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Hashtable<MockThaiBuddhistDate, ThrowableDeserializer> hashtable0 = new Hashtable<MockThaiBuddhistDate, ThrowableDeserializer>();
      JSONObject jSONObject0 = new JSONObject(true);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0);
      defaultJSONParser0.getDateFormat();
      BigDecimal bigDecimal0 = (BigDecimal)defaultJSONParser0.parseKey();
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      TreeMap<ParameterizedTypeImpl, BigInteger> treeMap0 = new TreeMap<ParameterizedTypeImpl, BigInteger>();
      defaultJSONParser0.checkMapResolve(treeMap0, ")");
      defaultJSONParser0.setContext((Object) treeMap0, (Object) treeMap0);
      defaultJSONParser0.getObject(")");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{@$ref\"-\"", parserConfig0, 241);
      ClassLoader.getSystemClassLoader();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{@$ref\"-\"", parserConfig0, 241);
      JSONObject jSONObject0 = new JSONObject();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{", parserConfig0);
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("pwP#H<\"6E/BPrkWxx");
      defaultJSONParser1.accept(1, 2);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser1.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".[)");
      defaultJSONParser0.setContext((Object) ".[)", (Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .[)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/String;Z)V");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (Ljava/lang/String;Z)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.setContext((Object) ")", (Object) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.resolveReference(")");
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".[)");
      defaultJSONParser0.setContext((Object) ".[)", (Object) null);
      defaultJSONParser0.popContext();
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.setContext((Object) ")", (Object) null);
      Point point0 = new Point(0, 0);
      Point point1 = new Point(point0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) ")", (Object) point1);
      LinkedList<BigInteger> linkedList0 = new LinkedList<BigInteger>();
      parseContext0.toString();
      defaultJSONParser0.checkListResolve(linkedList0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.getObject("$.java.awt.Point[x=0,y=0]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getExtraProcessors();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ")");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.getExtraProcessors();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "Z`q^`Fk`aQVcZ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}J&nG?s|IF", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }J&nG?s|IF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[short", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{F$ref\"Q\"", parserConfig0, 255);
      ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{F$ref\"Q\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("M[)");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "M[)", (Object) defaultJSONParser0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "#Wg^%y/j[\"1P!$VK%]+");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Integer integer0 = new Integer(1);
      defaultJSONParser0.handleResovleTask(integer0);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3efP\":\"");
      defaultJSONParser0.getExtraTypeProviders();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{3efP\":\"", parserConfig0, 2);
      List<ExtraTypeProvider> list0 = defaultJSONParser1.getExtraTypeProviders();
      LinkedHashMap<MockDateFormat, Date> linkedHashMap0 = new LinkedHashMap<MockDateFormat, Date>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) linkedHashMap0, (Object) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 3, json : {3efP\":\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Hashtable<MockThaiBuddhistDate, ThrowableDeserializer> hashtable0 = new Hashtable<MockThaiBuddhistDate, ThrowableDeserializer>();
      JSONObject jSONObject0 = new JSONObject(true);
      LinkedHashMap<MockThaiBuddhistDate, ThrowableDeserializer> linkedHashMap0 = new LinkedHashMap<MockThaiBuddhistDate, ThrowableDeserializer>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6Hl3'", parserConfig0, 3089);
      Vector<JSONScanner> vector0 = new Vector<JSONScanner>();
      defaultJSONParser0.checkListResolve(vector0);
      Class<BigInteger> class0 = BigInteger.class;
      defaultJSONParser0.parseObject(class0);
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : 6Hl3'
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{'@$rzf\"-\"");
      TreeMap<ParameterizedTypeImpl, BigInteger> treeMap0 = new TreeMap<ParameterizedTypeImpl, BigInteger>();
      defaultJSONParser0.checkMapResolve(treeMap0, "{'@$rzf\"-\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
