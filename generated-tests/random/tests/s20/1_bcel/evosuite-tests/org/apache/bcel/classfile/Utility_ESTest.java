/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:10:03 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("if_acmpeq", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-834), 72, false);
      Utility.convertString("cof%g7R!^h`M|J");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      boolean boolean0 = false;
      Utility.fillup("if_acmpeq", 241, false, 'O');
      boolean boolean1 = true;
      Utility.printArray((Object[]) null, true, false);
      String string0 = "invokespecial";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cof%g7R!^h`M|J", "invokespecial", "EUNLoeyJ5xF:trh[ H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cof%g7R!^h`M|J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.setBit(1704, 1704);
      String string0 = "V[n$]W";
      Utility.getSignature("V[n$]W");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)98;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1036, (-53786696), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.fillup("double", 8, true, 'j');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)23;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 775, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(M");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "(M";
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-107);
      Utility.encode(byteArray0, false);
      Utility.convertString("-GE1uaS0");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Utility.format(91, 91, true, 'm');
      try { 
        Utility.typeOfSignature("91mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 91mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "='Fs-.";
      try { 
        Utility.typeOfSignature("='Fs-.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ='Fs-.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-76);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, 2904, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Float";
      String string0 = Utility.methodTypeToSignature("Float", stringArray0);
      assertEquals("(LFloat;)LFloat;", string0);
      
      String string1 = Utility.methodSignatureToString("(LFloat;)LFloat;", "Float", "Float", false);
      assertEquals("Float Float Float(Float arg1)", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-74);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.fillup("jsr", 765, false, 'J');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)126, (byte)126);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)73);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)73, 1115);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("lstore");
      constantArray0[3] = (Constant) constantUtf8_0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeLong(1115);
      dataOutputStream0.write((int) (byte) (-3));
      constantInterfaceMethodref0.dump(dataOutputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("lstore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-102);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-441), (-441));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    fdiv
         // 2:    iconst_0
         // 3:    isub
         // 4:    idiv
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.clearBit(65, 65);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(DRPt9=]vz", "java.lang.Void", "java.lang.Void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RPt9=]vz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "YyYFxb\"k";
      try { 
        Utility.typeOfSignature("YyYFxb\"k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YyYFxb\"k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.convertString(" }:X{Nh__W$");
      Utility.replace(" }:X{Nh__W$", " }:X{Nh__W$", " }:X{Nh__W$");
      Utility.methodTypeToSignature(" }:X{Nh__W$", (String[]) null);
      Utility.replace(" }:X{Nh__W$", " }:X{Nh__W$", ";*6KLZTJOI$V*&");
      Utility.methodSignatureToString("()L}:X{Nh__W$;", " }:X{Nh__W$", "()L}:X{Nh__W$;");
      Utility.compactClassName(" }:X{Nh__W$", ";*6KLZTJOI$V*&", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("checkcast", false);
      Utility.methodTypeToSignature("invokespecial", (String[]) null);
      try { 
        Utility.typeOfMethodSignature(";*6KLZTJOI$V*&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;*6KLZTJOI$V*&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Utility.decode(";Fy)|V`~$ gqn/", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, 2048);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 20, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("86`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 86`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.getSignature("The size must be non-negative");
      Utility.compactClassName("LThe;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-58));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1571, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.accessToString(573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)97;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)43, (-1756));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3705, 1530);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 14, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)51;
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-39);
      byte byte1 = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byte byte2 = (byte)8;
      byteArray0[3] = (byte)8;
      byte byte3 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte byte4 = (byte)26;
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 3373);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.accessToString(4023);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[1] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[2] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[3] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[4] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[5] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      objectArray0[6] = (Object) "public private protected final synchronized transient native interface abstract strictfp";
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(4023);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (-940));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.setBit(614, 9);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface(123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (-578));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass((byte)117);
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((byte) (-95));
      constantArray0[1] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-95));
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-95), (byte) (-95));
      constantString0.setStringIndex((byte) (-95));
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(125);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.typeOfMethodSignature("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName("d2l");
      Utility.searchOpcode("d2l");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)32, (byte)120);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (-6013), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.AndFileFilter";
      Utility.getSignature("org.apache.commons.io.filefilter.AndFileFilter");
      Utility.fillup("R)", (-2145), true, 'd');
      Utility.isJavaIdentifierPart('d');
      Utility.isSet((-2145), 68);
      try { 
        Utility.typeOfSignature("R)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.clearBit((-1739), 354);
      String string0 = "HLV#Pqyas>OlM+2>f";
      try { 
        Utility.typeOfSignature("HLV#Pqyas>OlM+2>f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HLV#Pqyas>OlM+2>f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.accessToString(695, false);
      Utility.convertString("7eA\";@n37BYUTN");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-115);
      Utility.encode(byteArray0, false);
      Utility.format((byte)53, (byte)50, false, '|');
      Utility.clearBit(56, 56);
      Utility.fillup("||||||||||||||||||||||||||||||||||||||||||||||||53", 695, false, '|');
      Utility.isSet(2532, 43);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2239), 137);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2233, (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(606, 606, true, '4');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object
      objectArray0[3] = (Object
      objectArray0[4] = (Object
      objectArray0[5] = (Object
      objectArray0[6] = (Object) null;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PC_jK~X3q` >FU28pE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PC_jK~X3q` >FU28pE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 57;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = 87;
      Utility.setBit(57, 87);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("XpRGoJY8ti%e@o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XpRGoJY8ti%e@o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(91, 91, true, '\\');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("D0");
      Utility.isSet((byte)7, (byte)7);
      try { 
        Utility.typeOfMethodSignature("lG9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lG9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass((byte)117);
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString((byte) (-95));
      constantArray0[1] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-95));
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-95), (byte) (-95));
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(125);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      Utility.replace("ifnonnull", "ifnonnull", "R$nb\"?");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('.');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "R$nb\"?";
      Utility.printArray(printStream0, objectArray0);
      Utility.accessToString(4338, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    iastore
         // 2:    iinc\t\t%82\t33
         // 5:    lconst_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((-3074.8105F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("if_icmpgt\t\t#-15534", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.fillup("%,U9rlk#a?IW^+8n0X", (-763), false, 'K');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iconst_0
         // 2:    fload_2
         // 3:    iinc\t\t%151\t9
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("WENw5s`HNYA8{I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WENw5s`HNYA8{I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid type: ", "ifnull", "q3u/A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid type: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)76;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byte byte1 = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)14;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JY ~h^t|r?|UQx|I");
      assertEquals((byte)11, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature("lcmp");
      assertEquals("Llcmp;", string0);
      
      boolean boolean0 = Utility.isSet(84, 84);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(5816);
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Llcmp;";
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)11;
      objectArray0[3] = (Object) (byte)11;
      objectArray0[4] = (Object) (byte)11;
      objectArray0[5] = (Object) (byte)11;
      objectArray0[6] = (Object) "JY ~h^t|r?|UQx|I";
      objectArray0[7] = (Object) "lcmp";
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("Llcmp;, 11, 11, 11, 11, 11, JY ~h^t|r?|UQx|I, lcmp", string2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.accessToString(706);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte)74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\t(wide)";
      File file0 = MockFile.createTempFile("\t(wide)", "_p!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-61);
      byteArray0[1] = (byte) (-85);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(47);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)94, (-2839));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("jsr_w\t\t#-290692766", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aI|R2vdiZ0;,o1,4{";
      stringArray0[1] = "object";
      stringArray0[2] = "object";
      Utility.methodTypeToSignature("object", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-18);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-92), 192);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-420), (int) (byte)2, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      File file0 = MockFile.createTempFile("\t(wide)", "_p!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      byteSequence0.readUnsignedByte();
      Utility.compactClassName("\t(wide)", false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("int", true);
      MockFile mockFile0 = new MockFile("int", "int");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "int";
      objectArray0[1] = (Object) mockFile0;
      locale0.getDisplayVariant();
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "int";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "int", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.typeOfSignature("F*u\"~;ilQ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      Constant[] constantArray0 = new Constant[1];
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vk-:6Ehm:e");
      Utility.accessToString(2399);
      Utility.classOrInterface(1344);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)10;
      Utility.encode(byteArray0, false);
      Utility.setBit((-1852), 227);
      Utility.accessToString((-2236), true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 3230, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.fillup("org.apache.bcel.generic.ArrayType", 2299, true, 'M');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, 1003, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      Utility.clearBit(121, 2404);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)23;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte)125;
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString((int) (byte)112);
      String string0 = "multianewarray";
      try { 
        Utility.methodSignatureArgumentTypes("multianewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore\t\t%7", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Qgg!q(B[{(BoO";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Qgg!q(B[{(BoO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qgg!q(B[{(BoO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z3\"JIrI}+!~Pu5");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%J,VT?4t&*pkD=");
      Utility.searchOpcode("ishr");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-50);
      Utility.encode(byteArray0, false);
      Utility.compactClassName(": ", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4$f25L3$n$ce";
      stringArray0[1] = "jmdET9F@ia<\"@R";
      stringArray0[2] = "ishr";
      stringArray0[3] = ": ";
      Utility.methodTypeToSignature(": ", stringArray0);
      Utility.replace("]`VRd_g:hf`$HgG`t!", "jmdET9F@ia<\"@R", "%J,VT?4t&*pkD=");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "4$f25L3$n$ce";
      objectArray0[1] = (Object) ": ";
      objectArray0[2] = (Object) "4$f25L3$n$ce";
      objectArray0[3] = (Object) "%J,VT?4t&*pkD=";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("N ?Nj82;1- \"x,O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N ?Nj82;1- \"x,O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+@b@S^*c>%G>N9.07f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @b@S^*c>%G>N9.07f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)103;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)2, 211);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 20, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.getSignature("$ioA'~#/3o#@K8P%m3`");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)101, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aconst_null
         // 1:    freturn
         // 2:    aload_0
         // 3:    lsub
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "7zgoVWdw|F0+-;vp";
      try { 
        Utility.typeOfSignature("7zgoVWdw|F0+-;vp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7zgoVWdw|F0+-;vp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)119;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, (-29), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("|dJ8E+En#F^f\u0005Lv$");
      Utility.isSet((-325), (-325));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)89;
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("|dJ8E+En#F^f\\5Lv$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 10, (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46246. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      int int0 = (-661);
      boolean boolean0 = true;
      Utility.fillup("Bogus", (-661), true, '#');
      // Undeclared exception!
      try { 
        Utility.getSignature("}[7@5/ kzbfRqC[qU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[7@5/ kzbfRqC[qU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-92);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-712), (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    dsub
         // 2:    f2i
         // 3:    <illegal opcode>
         // 4:    ishr
         // 5:    aastore
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)25;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-1060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.setBit((-1005), 89);
      String string0 = "Asu2[;3F";
      try { 
        Utility.typeOfSignature("Asu2[;3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Asu2[;3F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-105);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(45);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (int) (byte) (-105), false);
      assertEquals("5:    athrow\n6:    ladd\n7:    fload_1\n8:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.accessToString(84, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), 14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    frem
         // 1:    ireturn
         // 2:    l2d
         // 3:    fload_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.classOrInterface(656);
      int int0 = Utility.setBit(656, (-1331));
      assertEquals(8848, int0);
      
      short short0 = Utility.searchOpcode("interface");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-42);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), 88);
      assertEquals("0:    swap\n1:    dup\n2:    lastore\n3:    if_acmpne\t\t#15389\n6:    <illegal opcode>\n7:    iconst_4\n8:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("0:    swap\n1:    dup\n2:    lastore\n3:    if_acmpne\t\t#15389\n6:    <illegal opcode>\n7:    iconst_4\n8:    <illegal opcode>\n");
      assertEquals("0:    swap\\n1:    dup\\n2:    lastore\\n3:    if_acmpne\t\t#15389\\n6:    <illegal opcode>\\n7:    iconst_4\\n8:    <illegal opcode>\\n", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-90);
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) (byte)60;
      objectArray0[3] = (Object) "0:    swap\n1:    dup\n2:    lastore\n3:    if_acmpne\t\t#15389\n6:    <illegal opcode>\n7:    iconst_4\n8:    <illegal opcode>\n";
      objectArray0[4] = (Object) (byte)89;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) (byte) (-42);
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("-90, interface, 60, 0:    swap\n1:    dup\n2:    lastore\n3:    if_acmpne\t\t#15389\n6:    <illegal opcode>\n7:    iconst_4\n8:    <illegal opcode>\n, 89, null, null, null, -42", string2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.fillup("", (-3346), false, '|');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(16384);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1791233387), 112);
      assertEquals("0:    d2l\n1:    i2l\n2:    <illegal opcode>\n3:    iconst_3\n4:    lload\t\t%35\n6:    iconst_0\n", string0);
      
      int int0 = Utility.clearBit(540, 4317);
      assertEquals(540, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.accessToString(573);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)82;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)43, (-1756));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3705, 1530);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 14, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.isJavaIdentifierPart('u');
      Utility.compactClassName("\t", "\t", true);
      Utility.format(201, 262, true, 'u');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-48);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)57, (-698));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ClassPath classPath0 = new ClassPath("java.lang.Float");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      JavaClass javaClass0 = classPathRepository0.loadClass("java.lang.Float");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantMethodType1.accept(descendingVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 198, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = MockFile.createTempFile("\t(wide)", "_p!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readUnsignedByte();
      Utility.compactClassName("\t(wide)", false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("ifle", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifle
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char char0 = ']';
      Utility.fillup("long", 20, true, ']');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)90;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-65));
      Utility.equals(byteArray0, byteArray0);
      String string0 = "Ou/)PZX8hf,6_S";
      Utility.convertString("Ou/)PZX8hf,6_S");
      try { 
        Utility.typeOfSignature("Ou/)PZX8hf,6_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ou/)PZX8hf,6_S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<";
      stringArray0[1] = "<";
      stringArray0[2] = "<";
      Utility.methodTypeToSignature("<", stringArray0);
      Utility.replace("float", "lload", "Mxbl\"i0S");
      String string0 = Utility.printArray((Object[]) stringArray0, false);
      Utility.setBit((-1265), (-1265));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-84);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-84), true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-98);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)52;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("fstore\t\t%80", "c_< bo$6m/{\"", false);
      Utility.isSet(69, (byte)56);
      Utility.classOrInterface(1459);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Zm-bEjC<Rrn0ca";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zm-bEjC<Rrn0ca");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Zm-bEjC<Rrn0ca";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "Zm-bEjC<Rrn0ca";
      objectArray0[5] = (Object) "Zm-bEjC<Rrn0ca";
      Utility.printArray(objectArray0, false);
      Utility.getSignature("Invalid method signature: ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-120);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 44, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.compactClassName("ret", false);
      Utility.format(1109, 134, false, '5');
      String string0 = "! |?";
      Utility.replace("! |?", "F", "ret");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 134);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "MB5O$";
      try { 
        Utility.typeOfSignature("MB5O$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MB5O$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "G4:yc|d'3V@.x0";
      try { 
        Utility.typeOfSignature("G4:yc|d'3V@.x0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G4:yc|d'3V@.x0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("j:/.Gi75HUA%y~'n^", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2307, 3679);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble(3679);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(27194, constantInvokeDynamic1.getClassIndex());
      
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass(2307);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(18, byteArray0.length);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)15;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(4);
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)89, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.compactClassName("K!`M%/0Q$k`pznS");
      Utility.compactClassName("K!`M%.0Q$k`pznS");
      try { 
        Utility.typeOfSignature("K!`M%/0Q$k`pznS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K!`M%/0Q$k`pznS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("if_icmple");
      String string0 = "-=xz41J7PS\\d'7'";
      mockPrintStream0.println("-=xz41J7PSd'7'");
      mockPrintStream0.println("ret");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byte byte0 = (byte)106;
      byteArray0[1] = (byte)106;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_MethodType");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readBoolean();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-2486), (byte) (-42));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-42);
      Utility.printArray(objectArray0, false);
      String string0 = ";lKq/h";
      try { 
        Utility.typeOfSignature(";lKq/h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;lKq/h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.accessToString(131);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("wide\t(wide)");
      String string0 = Utility.compactClassName("=yL|!o=H]n");
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "L53xIj|bn<=c%/y,F];V";
      String string1 = "Illegal type: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegal type: ");
      String string2 = "short";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L53xIj|bn<=c%/y,F];V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L53xIj|bn<=c%/y,F];V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.decode("iconst_5", false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)28;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1320, 163, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.convertString("A+Cl?r@");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3368, 40, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("", "#SO3$^jQbQpA@H|0Bl", false);
      Utility.getSignature("");
      String string0 = "invokespecial";
      Utility.replace("invokespecial", "#SO3$^jQbQpA@H|0Bl", "");
      Utility.searchOpcode("L;");
      Utility.compactClassName("invokespecial");
      Utility.getSignature("eN*E3'");
      Utility.signatureToString("LeN*E3';");
      Utility.clearBit((short) (-1), 3029);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(P", "", "LeN*E3';");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.accessToString((int) (byte)12);
      Utility.searchOpcode(")i{)7xH^j;i+&zkF}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("protected static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected static'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.fillup("", (-3346), false, '|');
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.accessToString(2715, false);
      Utility.getSignature("public private static final transient interface strictfp");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Lpublic;";
      objectArray0[1] = (Object) "Lpublic;";
      objectArray0[2] = (Object) "public private static final transient interface strictfp";
      objectArray0[3] = (Object) "public private static final transient interface strictfp";
      objectArray0[4] = (Object) "public private static final transient interface strictfp";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[5] = (Object) "Lpublic;";
      objectArray0[6] = (Object) "Lpublic;";
      objectArray0[7] = (Object) "Lpublic;";
      objectArray0[8] = (Object) "Lpublic;";
      Utility.printArray(objectArray0, false, false);
      String string0 = "*:,A-q7p`QHCZljq*,";
      try { 
        Utility.typeOfSignature("*:,A-q7p`QHCZljq*,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :,A-q7p`QHCZljq*,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)108;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64577. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, true);
      Utility.setBit((-1625), 245);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@59f902ad\", \"java.lang.Object@33577c38\", \"java.lang.Object@64d9a8cf\", \"java.lang.Object@f9979bb\", \"java.lang.Object@1e64ee8f\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@59f902ad\", \"java.lang.Object@33577c38\", \"java.lang.Object@64d9a8cf\", \"java.lang.Object@f9979bb\", \"java.lang.Object@1e64ee8f\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "10{I";
      try { 
        Utility.typeOfSignature("10{I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 10{I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)37;
      byteArray0[8] = (byte)41;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-426), 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_0
         // 1:    fload_3
         // 2:    nop
         // 3:    dup2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-45);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$806$bbi$d3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $806$bbi$d3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@10ba2e6e, java.lang.Object@d15596d, java.lang.Object@78bcf4c7, java.lang.Object@37a70dd9, java.lang.Object@762f8c1d");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)122;
      int int0 = 139;
      PipedInputStream pipedInputStream0 = new PipedInputStream(139);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&kMv4xFT-J_V,:nF,g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &kMv4xFT-J_V,:nF,g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1-g~>F_h[Z#|MG{");
      int int0 = new Integer(60);
      MockFile mockFile0 = new MockFile("_12v:BSF}|?5yt");
      MockFile mockFile1 = new MockFile("1-g~>F_h[Z#|MG{", "_12v:BSF}|?5yt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((long) 60);
      mockFile0.setExecutable(false, false);
      MockFile mockFile2 = new MockFile("_12v:BSF}|?5yt", "_12v:BSF}|?5yt");
      mockPrintWriter0.append('\'');
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte[] byteArray0 = Utility.decode("_12v:BSF}|?5yt", false);
      Utility.getSignature("jsr_w");
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(60);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, 94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.classOrInterface(46);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)97;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-448), 637, false);
      assertEquals("0:    dcmpg\n1:    ineg\n2:    <illegal opcode>\n3:    fload_0\n4:    ladd\n", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.setBit(209, 82);
      Utility.accessToString(262353);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "invokedynamic";
      stringArray0[5] = "public final volatile transient";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VKBSpTK{e]bX6Bv4";
      String string0 = Utility.methodTypeToSignature("VKBSpTK{e]bX6Bv4", stringArray0);
      assertEquals("(LVKBSpTK{e]bX6Bv4;)LVKBSpTK{e]bX6Bv4;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LVKBSpTK{e]bX6Bv4;)LVKBSpTK{e]bX6Bv4;", true);
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)105;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte) (-50), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62313. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(2536, 2536);
      int int0 = (-2004);
      Utility.accessToString((-2004));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}DC>9");
      // Undeclared exception!
      try { 
        Utility.decode("java.lang.$b@]M16|3", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*^gJ.%oGD*6A6j3:6C0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^gJ.%oGD*6A6j3:6C0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-101);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-2), (byte)109);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (-1109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("p~c+e{aR#");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-80));
      constantArray0[1] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("p~c+e{aR#");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-73), 1458);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3832, (int) (byte) (-113));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-30);
      byteArray0[0] = (byte) (-30);
      byte byte1 = (byte)98;
      byteArray0[1] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-896), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      byte byte0 = Utility.typeOfSignature("SjLqd0n[");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (-615), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "\t\t%";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?,%Tv$F|");
      Utility.getSignature("\t\t%");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantFloat0.setBytes((-1.0F));
      constantArray0[0] = (Constant) constantFloat0;
      int int0 = 123;
      ConstantInteger constantInteger0 = new ConstantInteger(123);
      constantArray0[1] = (Constant) constantInteger0;
      constantInteger0.toString();
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-63);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantLong constantLong0 = new ConstantLong((byte) (-63));
      constantPool0.constantToString((Constant) constantLong0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1177), 225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    istore_1
         // 2:    dmul
         // 3:    dup2_x1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-425), 93);
      assertEquals("0:    fconst_0\n1:    fload_3\n2:    dload_3\n3:    dup2\n4:    ixor\n5:    astore_3\n6:    arraylength\n7:    pop2\n8:    fastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(170);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "*9/jN-/sUs, G$1WX\\";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*9/jN-/sUs, G$1WX");
      Utility.signatureToString("ZNxH;j91Jlg(Wi?", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*9/jN-/sUs, G$1WX");
      try { 
        Utility.typeOfSignature("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)103;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2870, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, false);
      Utility.accessToString(158);
      Utility.getSignature("WgU*}9/PUqn)");
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-808), 65535);
      assertEquals("0:    dup_x2\n1:    dup2_x2\n2:    laload\n3:    land\n4:    <illegal opcode>\n5:    lconst_1\n6:    daload\n", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.compactClassName("V4R$JM7w*IU", false);
      Utility.compactClassName("V4R$JM7w*IU", true);
      Utility.classOrInterface(1171);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)11;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 640, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "><k@";
      try { 
        Utility.typeOfSignature("><k@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ><k@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Illegal type: ";
      objectArray0[1] = (Object) "Illegal type: ";
      objectArray0[2] = (Object) "Illegal type: ";
      objectArray0[3] = (Object) "Illegal type: ";
      objectArray0[4] = (Object) "Illegal type: ";
      objectArray0[5] = (Object) "Illegal type: ";
      objectArray0[6] = (Object) "Illegal type: ";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "Illegal type: ";
      Utility.printArray(objectArray0);
      int int0 = (-271);
      Utility.clearBit((byte)10, (-271));
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Illegal type: ", "Illegal type: ", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "@_a?*UT$JGX0lS CF";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@_a?*UT$JGX0lS CF", "fdiv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.typeOfSignature("The list of prefixes must not be null");
      Utility.compactClassName("The list of prefixes must not be null");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The list of prefixes must not be null", "The list of prefixes must not be null", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "Lorg/apache/commons/io/filefilter/SizeFileFilter;V";
      Utility.convertString("Lorg/apache/commons/io/filefilter/SizeFileFilter;V");
      Utility.typeOfSignature("Lorg/apache/commons/io/filefilter/SizeFileFilter;V");
      try { 
        Utility.typeOfSignature(", class=<unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , class=<unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.accessToString((-1533), true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-46);
      Utility.equals(byteArray0, byteArray0);
      Utility.setBit((byte)97, (byte)65);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)16, (byte)50);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantInvokeDynamic0.setClassIndex(122);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, 163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "53xIj|bn<=c%.y,F]";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "53xIj|bn<=c%.y,F]";
      stringArray0[1] = "53xIj|bn<=c%.y,F]";
      stringArray0[2] = "53xIj|bn<=c%.y,F]";
      stringArray0[3] = "53xIj|bn<=c%.y,F]";
      stringArray0[4] = "53xIj|bn<=c%.y,F]";
      stringArray0[5] = "53xIj|bn<=c%.y,F]";
      stringArray0[6] = "53xIj|bn<=c%.y,F]";
      stringArray0[7] = "53xIj|bn<=c%.y,F]";
      Utility.methodTypeToSignature("53xIj|bn<=c%.y,F]", stringArray0);
      try { 
        Utility.typeOfSignature("53xIj|bn<=c%.y,F]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 53xIj|bn<=c%.y,F]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.getSignature("Tk]+:SEX'I`/v^=l'6");
      Utility.isSet(62, 62);
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("48L%wO;^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 48L%wO;^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 14
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LS@&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LS@&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Utility.isSet(41, 2211);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)72;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("fstore_2");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(219, 2211);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (-1286));
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(41, (byte)0);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 41, true);
      assertEquals("0:    nop\n1:    iaload\n2:    nop\n3:    iconst_2\n4:    dstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "N3$8MTHnFp-iJ9";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(q=P[w8", "N3$8MTHnFp-iJ9", "N3$8MTHnFp-iJ9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q=P[w8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 46;
      Utility.isSet(46, 46);
      try { 
        Utility.methodSignatureReturnType("XX;N'j C5,:0](Lx(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XX;N'j C5,:0](Lx('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("d2l");
      Utility.searchOpcode("d2l");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)74;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)32, (byte)120);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (-6013), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.convertString("h&]pXKo1KCP;");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1614, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rt:>-f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rt:>-f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("F,9V?2TE[D}qc");
      assertEquals("float", string0);
      
      String string1 = Utility.accessToString(106, false);
      assertEquals("private static synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)10, 2389);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 221. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = 'x';
      Utility.isJavaIdentifierPart('x');
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      Utility.isSet((byte)109, (-2523));
      String string0 = "Yl6.B_D;6?quWQ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yl6.B_D;6?quWQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yl6.B_D;6?quWQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-68);
      byteArray0[0] = (byte) (-74);
      byteArray0[23] = (byte) (-74);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-54);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "xdM\"\"q=D$_}u;{Sm}";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xdM\"\"q=D$_}u;{Sm}");
      boolean boolean0 = true;
      try { 
        Utility.decode("xdM\"\"q=D$_}u;{Sm}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`c%HCaw?*U");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.accessToString(474, false);
      assertEquals("private static final volatile transient native", string0);
      
      String string1 = Utility.convertString(":");
      assertEquals(":", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)13;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-3698), (int) (byte)46, false);
      assertEquals("0:    <illegal opcode>\n1:    ddiv\n2:    lstore_1\n3:    aconst_null\n4:    fastore\n5:    iaload\n6:    dload_2\n7:    fload_0\n8:    fconst_2\n", string2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 78);
      assertEquals("0:    ldiv\n1:    fmul\n2:    pop2\n3:    if_acmpeq\t\t#18373\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "J5JciBapB7Zh1*P*J";
      Utility.methodSignatureReturnType("J5JciBapB7Zh1*P*J", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "long";
      objectArray0[2] = (Object) "long";
      objectArray0[3] = (Object) "J5JciBapB7Zh1*P*J";
      objectArray0[4] = (Object) "J5JciBapB7Zh1*P*J";
      objectArray0[5] = (Object) "long";
      Utility.printArray(objectArray0);
      String string1 = "x/22!e62vGZ;FB.z";
      Utility.replace("org.apache.bcel.classfile.Utility", "long", "x/22!e62vGZ;FB.z");
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "double", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 12;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(12, 12, true, '-');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-1));
      Utility.compactClassName("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "lreturn", true);
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)25;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-1060));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.signatureToString("Sa", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.getSignature("TqkC[Tw]x7xdA2l#");
      String string0 = Utility.methodSignatureReturnType("[LTqkC;", true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "[LTqkC;";
      objectArray0[1] = (Object) "[LTqkC;";
      objectArray0[2] = (Object) "[LTqkC;";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "TqkC[Tw]x7xdA2l#";
      objectArray0[6] = (Object) "TqkC[Tw]x7xdA2l#";
      Object object2 = new Object();
      objectArray0[7] = object2;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-54);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.getSignature("The size must be non-negative");
      Utility.compactClassName("LThe;");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-58));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1571, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40902. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "OAX;'tiY:*.lP";
      int int0 = 184;
      Utility.fillup("OAX;'tiY:*.lP", 184, false, ';');
      try { 
        Utility.methodSignatureReturnType("OAX;'tiY:*.lP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OAX;'tiY:*.lP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("(AS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (AS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E%NjS\"Mu)_q#'w$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E%NjS\"Mu)_q#'w$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "#@z!w6lvdYRr!M;j`,j";
      try { 
        Utility.typeOfSignature("#@z!w6lvdYRr!M;j`,j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #@z!w6lvdYRr!M;j`,j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.convertString("%\"_3-Zafg]<+.zOu");
      Utility.compactClassName("%\"_3-Zafg]<+.zOu", "%\"_3-Zafg]<+.zOu", true);
      Utility.compactClassName("%\"_3-Zafg]<+.zOu", "\"vVfEr", true);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = (-3413);
      Utility.classOrInterface((-3413));
      Utility.getSignature("interface");
      Utility.methodSignatureReturnType("Linterface;");
      String string0 = "=y={\\EXT+a";
      Utility.compactClassName("=y={EXT+a", false);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.clearBit(8, 0);
      Utility.signatureToString("Cg");
      Utility.isSet(8, 8);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "HK~";
      int int0 = 34;
      boolean boolean0 = false;
      Utility.fillup("HK~", 34, false, 'k');
      // Undeclared exception!
      try { 
        Utility.signatureToString("HK~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HK~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "DdH(vj";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodSignatureReturnType("DdH(vj");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "", "double", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-30);
      byteArray0[0] = (byte) (-30);
      byte byte1 = (byte)73;
      byteArray0[1] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-896), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "9DKy,g~mh\"j1g$";
      String string1 = "Expected class `";
      Utility.compactClassName("9DKy,g~mh\"j1g$", "Expected class `", false);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Expected class `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Expected class `'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.classOrInterface(190);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.convertString("2-NX=:U");
      assertEquals("2-NX=:U", string0);
      
      String string1 = Utility.fillup(".zip", 118, true, '?');
      assertEquals(".zip??????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2-NX\\=:U";
      stringArray0[1] = ".zip??????????????????????????????????????????????????????????????????????????????????????????????????????????????????";
      stringArray0[2] = "2-NX\\=:U";
      stringArray0[3] = "2-NX=:U";
      stringArray0[4] = ".zip??????????????????????????????????????????????????????????????????????????????????????????????????????????????????";
      stringArray0[5] = ".zip";
      String string2 = Utility.methodTypeToSignature(".zip", stringArray0);
      assertEquals("(L2-NX\\=:U;L/zip??????????????????????????????????????????????????????????????????????????????????????????????????????????????????;L2-NX\\=:U;L2-NX=:U;L/zip??????????????????????????????????????????????????????????????????????????????????????????????????????????????????;L/zip;)L/zip;", string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.isSet(66, 209);
      Utility.convertString("eKGM^3,H+9z5E,+i8");
      Utility.convertString("^F='BM@U");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<unknown object>", "^F='BM@U", "b>! }(HJh3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown object>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.signatureToString("I", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unrecognized attribute type tag parsed: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unrecognized attribute type tag parsed: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.classfile.RuntimeInvisibleAnnotations");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "3tz~s<*5kfXz";
      try { 
        Utility.typeOfSignature("3tz~s<*5kfXz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3tz~s<*5kfXz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)0);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte)11;
      byteArray1[7] = (byte)126;
      byteArray1[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[5];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("}A", "5f 0b 7e 00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"5f 0b 7e 00\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2870, (int) (byte) (-99), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(14, 247);
      String string0 = "invokestatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=FiRf", "=FiRf", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =FiRf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1-g~>F_h[Z#|MG{");
      Utility.setBit(60, 1424);
      MockFile mockFile0 = new MockFile("p2v:BSF}|?5yt");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((long) 60);
      mockFile0.setExecutable(false, false);
      MockFile mockFile1 = new MockFile("p2v:BSF}|?5yt", "p2v:BSF}|?5yt");
      mockPrintWriter0.append('\'');
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte[] byteArray0 = Utility.decode("p2v:BSF}|?5yt", false);
      Utility.getSignature("jsr_w");
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(60);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65596, 94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Nr.M+x\"VO'3fw.\"A^W";
      File file0 = MockFile.createTempFile("Nr.M+x\"VO'3fw.\"A^W", "#4>PNS'|->{gb");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Nr.M+x\"VO'3fw.\"A^W";
      objectArray0[1] = (Object) "Nr.M+x\"VO'3fw.\"A^W";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.close();
      objectArray0[4] = (Object) "#4>PNS'|->{gb";
      objectArray0[5] = (Object) "#4>PNS'|->{gb";
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) "#4>PNS'|->{gb";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet(80, 56);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[Wv_H9\"wU}9o*)");
      assertEquals((byte)13, byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[Wv_H9\"wU}9o*)";
      objectArray0[1] = (Object) "[Wv_H9\"wU}9o*)";
      objectArray0[2] = (Object) "[Wv_H9\"wU}9o*)";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"[Wv_H9\"wU}9o*)\", \"[Wv_H9\"wU}9o*)\", \"[Wv_H9\"wU}9o*)\"}", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Integer");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.fillup("CONSTANT_Integer", (byte)5, true, '!');
      assertEquals("CONSTANT_Integer", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)60;
      byte byte0 = (byte)119;
      byteArray0[3] = (byte)119;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)119, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "KkSGEG2(jrok2";
      // Undeclared exception!
      try { 
        Utility.signatureToString("KkSGEG2(jrok2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KkSGEG2(jrok2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.accessToString((-1423), true);
      try { 
        Utility.methodSignatureArgumentTypes("public final volatile strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public final volatile strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 78);
      assertEquals("0:    ldiv\n1:    fmul\n2:    if_acmpeq\t\t#-23223\n5:    monitorenter\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.getSignature("byte");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.format(23, 23, false, '\"');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23";
      objectArray0[1] = (Object) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23";
      objectArray0[2] = (Object) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23";
      objectArray0[3] = (Object) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23";
      objectArray0[4] = (Object) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23";
      Utility.printArray(objectArray0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"23");
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit(23, 23);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = "7+%{FZ_&w";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7+%{FZ_&w");
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      int int0 = 54;
      Utility.accessToString(54);
      Utility.getSignature("private protected final synchronized");
      try { 
        Utility.typeOfSignature(")-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.format(1326, 1326, false, '/');
      Utility.searchOpcode(string0);
      String string1 = Utility.compactClassName(string0);
      Utility.compactClassName(string0, false);
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ..........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................1326
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = (-2780);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.isSet(2725, (-2780));
      Utility.compactClassName("invokedyna", false);
      String string0 = Utility.format(2721, 2725, true, 'R');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 125;
      Utility.accessToString(125, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -80
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "void";
      Utility.compactClassName("void");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "void";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "void";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "void";
      objectArray0[6] = (Object) "void";
      Utility.printArray(objectArray0);
      try { 
        Utility.decode("{void, java.lang.Object@689399bc, void, void, void, void, void}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "'%%=6>[V8>:Z@T7Q,$";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'%%=6>[V8>:Z@T7Q,$";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "'%%=6>[V8>:Z@T7Q,$";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("'%%=6>[V8>:Z@T7Q,$", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[V8>:Z@T7Q,$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = " entries\n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " entries\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " entries\n");
      String string1 = "[,rN";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[,rN", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,rN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.replace("d2l", "d2l", "");
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.commons.io.filefilter.SizeFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.SizeFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.accessToString(76, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iaload", "$Y)Y<>+<+a&zM", "iaload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wy<=#E$fI\"n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wy<=#E$fI\"n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String string0 = "7_=88dbdlE";
      Utility.compactClassName("7_=88dbdlE");
      String string1 = "lreturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7_=88dbdlE");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7_=88dbdlE";
      stringArray0[1] = "Byte code error: ";
      stringArray0[2] = "~E|%jM0;kLr";
      stringArray0[3] = "7_=88dbdlE";
      Utility.methodTypeToSignature("lreturn", stringArray0);
      Utility.isJavaIdentifierPart('!');
      boolean boolean0 = true;
      Utility.compactClassName("7_=88dbdlE", "7_=88dbdlE", true);
      // Undeclared exception!
      try { 
        MockURI.create("<(&L-ssk2R@Mmts_]9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0: <(&L-ssk2R@Mmts_]9
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1-g~>F_h[Z#|MG{");
      int int0 = Utility.setBit(60, 1424);
      assertEquals(65596, int0);
      
      MockFile mockFile0 = new MockFile("p2v:BSF}|?5yt");
      mockFile0.getCanonicalFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte[] byteArray0 = Utility.decode("p2v:BSF}|?5yt", false);
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.getSignature("jsr_w");
      assertEquals("Ljsr_w;", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "sM$am^Fz$\"J;#GU5Vu";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("sM$am^Fz$\"J;#GU5Vu", (String[]) null);
      String string1 = null;
      int int0 = 1045;
      char char0 = 'T';
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1045, true, 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N`N-Sa_&e(y{0/Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N`N-Sa_&e(y{0/Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.clearBit((-1795), (-1795));
      boolean boolean0 = true;
      Utility.compactClassName("{null, org.evosuite.runtime.testdata.FileSystemHandling@7ab4c0da, null}", true);
      try { 
        Utility.typeOfMethodSignature("{null, org.evosuite.runtime.testdata.FileSystemHandling@7ab4c0da, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, org.evosuite.runtime.testdata.FileSystemHandling@7ab4c0da, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0, true, false);
      Utility.equals(byteArray0, byteArray0);
      int int0 = (-2253);
      int int1 = 86;
      Utility.isSet((-2253), 86);
      try { 
        Utility.typeOfSignature("{null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "dcmpg";
      Utility.searchOpcode("dcmpg");
      String string1 = "M+6C27*s$zk";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.methodSignatureReturnType("M+6C27*s$zk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M+6C27*s$zk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(}{'k.!)LOKiY[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `}{'k.!)LOKiY['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.format((-2181), 270, false, 'x');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte) (-121);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.compactClassName("(NqEg2ea", false);
      Utility.replace("if_icmpge", "(NqEg2ea", "(NqEg2ea");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (int) (byte) (-24), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-15);
      Utility.toHexString(byteArray0);
      Utility.convertString("57 8f f1");
      Utility.searchOpcode("ifnonnull");
      // Undeclared exception!
      try { 
        Utility.signatureToString("57 8f f1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `57 8f f1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 9;
      Utility.setBit(9, 1844);
      int int1 = (-15);
      Utility.classOrInterface((-15));
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "+!U>([S";
      try { 
        Utility.typeOfSignature("+!U>([S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U>([S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)67;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      String string0 = "boolean";
      Utility.compactClassName("boolean");
      Utility.accessToString((-1696));
      String string1 = " ";
      String string2 = "int";
      int int0 = 772;
      int int1 = 74;
      File file0 = MockFile.createTempFile("synchronized volatile native strictfp synthetic annotation enum", "long");
      String string3 = "7RC=?_=eKjpQJv\"#7RC=?_=eKjpQJv\"#";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "7RC=?_=eKjpQJv\"#7RC=?_=eKjpQJv\"#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"7RC=?_=eKjpQJv\"#7RC=?_=eKjpQJv\"#\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(81, 2230);
      Utility.setBit(3952, 32);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('m');
      Utility.replace("{java.lang.Object@63b586b3, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, java.lang.Object@5ee38620, org.evosuite.runtime.testdata.FileSystemHandling@29302353}", "{java.lang.Object@63b586b3, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, java.lang.Object@5ee38620, org.evosuite.runtime.testdata.FileSystemHandling@29302353}", "{java.lang.Object@63b586b3, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, org.evosuite.runtime.testdata.FileSystemHandling@29302353, java.lang.Object@5ee38620, org.evosuite.runtime.testdata.FileSystemHandling@29302353}");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = Utility.isSet((byte) (-19), (byte) (-19));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.classOrInterface(16384);
      String string0 = "({`@fxK5XDoznvj";
      Utility.getSignature("({`@fxK5XDoznvj");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = ")y\"OJzr/@bY\\+6mwfs8";
      try { 
        Utility.methodSignatureReturnType(")y\"OJzr/@bY+6mwfs8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `y\"OJzr/@bY+6mwfs8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.replace("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.TrueFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.clearBit(8, 0);
      String string0 = "<Unknown>";
      Utility.compactClassName("v,%{`4I92ZFrT%pOwj");
      Utility.isSet(8, 8);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.clearBit(1785, 1204);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@132e34d2, java.lang.Object@5076cbb, java.lang.Object@2a68d127, java.lang.Object@6427a347, java.lang.Object@6cd83b5}", "long", "\"y=,pl1AA}L[FU>ep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@132e34d2, java.lang.Object@5076cbb, java.lang.Object@2a68d127, java.lang.Object@6427a347, java.lang.Object@6cd83b5}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.fillup("By4", 0, false, 'h');
      Utility.setBit(229, 0);
      Utility.signatureToString("By4", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("By4", "n?mcct*hh!_p~]rY&", "wa)N?j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: By4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.format(0, 182, false, '=');
      try { 
        Utility.methodSignatureArgumentTypes("Ooops, what primitive type is ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ooops, what primitive type is 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.compactClassName("7RC=?_=eKjpQJv\"#", "7RC=?_=eKjpQJv\"#", true);
      Utility.getSignature("7RC=?_=eKjpQJv\"#");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L7RC=?_=eKjpQJv\"#;", "R{ 6v6o?U~8", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L7RC=?_=eKjpQJv\"#;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.clearBit(8, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<Unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<Unknown>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "<illegal opcode>";
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "<illegal opcode>";
      objectArray0[1] = (Object) "<illegal opcode>";
      objectArray0[2] = (Object) "<illegal opcode>";
      Utility.printArray(objectArray0, false);
      Utility.getSignature("<illegal opcode>, <illegal opcode>, <illegal opcode>");
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-129), (-129));
      try { 
        Utility.typeOfSignature("newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " entries\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " entries\n";
      stringArray0[1] = " entries\n";
      stringArray0[2] = " entries\n";
      stringArray0[3] = " entries\n";
      Utility.methodTypeToSignature(" entries\n", stringArray0);
      try { 
        Utility.typeOfMethodSignature("=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-28);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      Utility.isJavaIdentifierPart('7');
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte)0;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3142, 255, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.getSignature("U(ojG#nkmEK@}a");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byte byte0 = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-106);
      byte byte1 = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-37);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      classPathRepository0.findClass("");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      constantPool0.toString();
      try { 
        constantPool0.constantToString((-1917), (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1917. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)7;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)75;
      byte byte1 = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-42);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("08 07 29 57 4b c1 d6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 08 07 29 57 4b c1 d6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GCChSoP7Jt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GCChSoP7Jt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "T2G*4ylMTc43j";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("T2G*4ylMTc43j", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T2G*4ylMTc43j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)86;
      Utility.encode(byteArray0, false);
      Utility.convertString("java.lang.");
      Utility.searchOpcode("JEu8/");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 82
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.compactClassName("anewarray", "z", false);
      String string0 = "Invalid byte tag in constant pool: ";
      Utility.signatureToString("Invalid byte tag in constant pool: ");
      Utility.fillup("Invalid byte tag in constant pool: ", 194, true, 'i');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(2464);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(70, (-1943));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(2464);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("breakpoint", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
