/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:00:06 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(" < ", 32);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("]a1", 404);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int1 = HttpHeaders.skipUntil("]a1", 404, "]a1");
      assertTrue(int1 == int0);
      assertEquals(404, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = "chuned";
      stringArray0[1] = "chuned";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(1, headers0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "chuned";
      stringArray0[1] = "chuned";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toString();
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("milhwM1iiC!(0[e", 10);
      int int1 = HttpHeaders.skipUntil("milhwM1iiC!(0[e", 10, "milhwM1iiC!(0[e");
      assertTrue(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("r^h81|6 9<g9", 11, "6ooj;s7>8qgzn");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers1, headers0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("7", 33);
      assertEquals(7, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7";
      stringArray0[1] = "7";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "7");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[`\u0000jH\"efndl";
      stringArray0[1] = "[`\u0000jH\"efndl";
      stringArray0[2] = "[`\u0000jH\"efndl";
      stringArray0[3] = "[`\u0000jH\"efndl";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: [`\u0000jH\"efndl: [`\u0000jH\"efndl
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "3QH9E9");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      System.setCurrentTimeMillis(116L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      hashMap0.put("vary", "vary");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.clone();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "([ =i!z*)";
      hashMap0.put("([ =i!z*)", "([ =i!z*)");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "([ =i!z*)");
      // Undeclared exception!
      try { 
        HttpHeaders.parseChallenges(headers0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("DLDac` Ec;w#$6ox", 6);
      int int1 = HttpHeaders.parseSeconds("DLDac` Ec;w#$6ox", 7);
      assertTrue(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "h,by6";
      stringArray0[1] = "h,by6";
      stringArray0[2] = "j2;bZ$LZa&]*G_4";
      stringArray0[3] = "GLFS0A`";
      stringArray0[4] = "<";
      stringArray0[5] = "c0`2xZPr&$4Z?){5C^Q";
      stringArray0[6] = "Content-Length";
      stringArray0[7] = "t*$6Kf";
      Headers headers0 = Headers.of(stringArray0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpHeaders.parseSeconds("-9223372036854775808", (-2045720162));
      HttpHeaders.parseSeconds("-9223372036854775808", 0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ifmzx realm},=tz-", "ifmzx realm},=tz-");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      HttpHeaders.parseChallenges(headers0, "ifmzx realm},=tz-");
      headers0.values("max-age=");
      // Undeclared exception!
      try { 
        HttpHeaders.parseChallenges((Headers) null, "\"<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }
}
