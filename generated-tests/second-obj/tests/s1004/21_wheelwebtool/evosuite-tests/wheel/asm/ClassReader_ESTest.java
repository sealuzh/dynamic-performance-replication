/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:32:46 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("T*SZw");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = Type.DOUBLE;
      ClassReader classReader0 = new ClassReader(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        classReader0.getItem((-550));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -550
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassReader classReader0 = new ClassReader(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 15, (byte)0);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.close();
      // Undeclared exception!
      try { 
        classReader0.readByte(89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 89
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      ClassReader classReader0 = new ClassReader(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classReader0.getInterfaces();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst(46, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[6] = (byte)0;
      byteArray0[9] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader(byteArray0);
      classReader0.getAccess();
      classReader0.getAccess();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'N';
      charArray0[2] = '`';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(6, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'N';
      charArray0[2] = '`';
      charArray0[3] = 'U';
      charArray0[4] = '\'';
      charArray0[5] = 'v';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[6] = 'U';
      // Undeclared exception!
      try { 
        classReader0.readConst(132, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      ClassReader classReader0 = new ClassReader(byteArray0);
      classReader0.getInterfaces();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classReader2.getInterfaces();
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '3';
      charArray0[2] = 'a';
      charArray0[3] = '3';
      charArray0[4] = ';';
      charArray0[5] = 'E';
      charArray0[6] = '#';
      charArray0[7] = '+';
      charArray0[8] = 'z';
      // Undeclared exception!
      try { 
        classReader1.readLong(3134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3134
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(2);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-586L));
      sequenceInputStream0.close();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.SequenceInputStream@27503bb1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 675);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4146);
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'N';
      // Undeclared exception!
      try { 
        classReader0.readConst(14, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      int int0 = 14;
      char[] charArray0 = new char[9];
      char char0 = 'X';
      // Undeclared exception!
      try { 
        classReader0.readConst(86, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter((-842));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 1549);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      classReader0.readShort(2);
      // Undeclared exception!
      try { 
        classReader0.readLong((-1724));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(248);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, (-842));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      int int0 = 1536;
      ClassWriter classWriter0 = new ClassWriter((-842));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 1536);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      classReader0.getSuperName();
      int int1 = 4;
      ClassReader classReader1 = new ClassReader(classReader0.b, int0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      classReader0.getClassName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassReader");
      int int0 = 2;
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          char[] charArray0 = new char[9];
          ClassWriter classWriter0 = new ClassWriter(2);
          classReader0.copyPool(classWriter0);
          charArray0[1] = 'N';
          charArray0[2] = '\u0000';
          charArray0[3] = '\u0000';
          charArray0[4] = '\'';
          charArray0[5] = 'v';
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
          charArray0[6] = '\'';
          // Undeclared exception!
          try { 
            classReader0.readConst('v', charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 9
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      int int0 = 713;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 713);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      classReader0.copyPool(classWriter0);
      classReader0.readLong(713);
      classReader1.readLong(182);
      classReader0.copyPool(classWriter0);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      ClassReader classReader2 = new ClassReader(classReader1.b, 708, 162);
      classReader2.getInterfaces();
      classReader2.readConst(int0, charArray0);
      classReader0.readUnsignedShort(classReader2.SKIP_FRAMES);
      int int1 = 2213;
      classReader0.readClass(int1, charArray0);
      int int2 = 59;
      classReader1.getItem(int2);
      classReader2.getClassName();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      char[] charArray0 = new char[9];
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classReader0.accept((ClassVisitor) classWriter0, 4584);
      classReader0.copyPool(classWriter0);
      int int0 = 214;
      classReader0.readConst(214, charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 12, 70);
      classReader1.readLong(int0);
  }
}
